[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1585044181.011500",
        "client_msg_id": "b6dd990d-0cf0-43ab-94a8-168879a57d9c",
        "text": "This problem is one reason why good ideas from research systems don't easily become available in production. The trillion-dollar corporation dealing with the messy real-world issues is unlikely to spend much time exploring research work. They will implement a solution based on the technology they have and the tools their developers are familiar with.\nI suspect the only way out would be a transition to truely modular software, but unfortunately I don't see why trillion-dollar coroporations should care, so it's probably not going to happen. In that universe, text handling would be a component you could use in your research system. A piece of software made by paid professional developers which every user of your research system would buy, at a very low price because it would be the same component used in mass-market OS and Web apps.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aiLp2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This problem is one reason why good ideas from research systems don't easily become available in production. The trillion-dollar corporation dealing with the messy real-world issues is unlikely to spend much time exploring research work. They will implement a solution based on the technology they have and the tools their developers are familiar with.\nI suspect the only way out would be a transition to truely modular software, but unfortunately I don't see why trillion-dollar coroporations should care, so it's probably not going to happen. In that universe, text handling would be a component you could use in your research system. A piece of software made by paid professional developers which every user of your research system would buy, at a very low price because it would be the same component used in mass-market OS and Web apps."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1585045045.011700",
        "client_msg_id": "30b423c2-dfc9-403b-8529-397774a937e8",
        "text": "Nice presentation! Now if some software-genie would grant me a wish... I'd ask for Unison with GToolkit as its user interface. With both interfacing to legacy languages so that I can continue to use my domain-specific libraries.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584957823.007100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TH\/2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice presentation! Now if some software-genie would grant me a wish... I'd ask for Unison with GToolkit as its user interface. With both interfacing to legacy languages so that I can continue to use my domain-specific libraries."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1585051254.011900",
        "client_msg_id": "ce41016a-7cd1-4172-be80-833120a04273",
        "text": "Dan, It's hard to know what you're getting at with your prose explanation. It reminded me at first of Kartik Agaram's work, which is all about bootstrapping, but then, his solution ends up being steeped in x86 assembly language and I think yours is somehow higher-level?\n\nI'm afraid I have to push back on what you began to describe. You're saying \"Why not put (the IDE's) code and YOUR code all in the same bucket?\" Okay, so let's say Visual Studio Code is in \"the same bucket\" as the program I'm writing. So what? What does this buy me? I don't understand VS Code's code, since it's new to me. I've never seen it, but more importantly, I don't care about seeing it either. Based on the number of extensions people have written for VS code, I imagine it's less of a confusing mess than the old Visual Studio (whose extension model I've had to deal with) but still, it's a big mass of code that someone else wrote, that I don't understand. If it's like most codebases, it doesn't come with any explanations (\"literate programming\" is something most devs haven't heard of, and wouldn't aspire to if they had - at many companies, even the most important classes have zero documentation).\n\nIf my editor is editable, I can edit it. So far, so good. But weren't there entire Smalltalk or Lisp operating systems in the 1980s that worked exactly this way? If so, why not start from there? Why start from scratch? But also, what does this buy me? I really don't want to modify the core editor, because if I do, I will be the only person with this version of it. If I change VS Code's core in a way that makes it more useful to me, I now cannot download updated versions of VS Code. This is a really fundamental problem that pops up again and again, and not just in the realm of code - I used to work at a company that decided to modify metadata on some road map files, but then the map provider produced a new version of the maps, but wait, we modified the old version, so how do we merge the old and the new? I spent months solving problems like that.\n\n\"presents you with a custom interface \/ model for the code, including the code of the whole running program &amp; interface that it presents. No more dependency on some other interface!\" But... how? The OS doesn't understand your code, it expects raw machine code. What machine code will you provide, where did it come from, and can I edit this machine code? (My suggestion: check if WebAssembly works for you as a starting point, so you can run in a browser. And it's easiest if the kernel is not modifiable.)\n\n\"Well, the tool is written in itself, and you already made a generate-the-equivalent-Java-code functionality; use that on the tool itself, and bootstrap the tool right into the JVM (or what have you)\" I've done bootstrapping myself - the parser for the language that my parser generator LLLPG understood, LES version 1, was written in itself, which meant at first that I had to parse it some other way (I came up with a scheme to construct grammars in C# in order to bootstrap it), and then LES v1 evolved to <http:\/\/loyc.net\/les|LES version 2>, and then I wrote a parser for Enhanced C# in LESv2, and then eventually I decided to support a new syntax for the parser generator which was written in Enhanced C#. Bootstrapping is cool, but it's kinda hard and time-consuming. Anyway, so let's say bootstrapping is done AND you can \"generate-the-equivalent-Java-code\". What you've written is an interpreter, so you can generate a Java interpreter that is able to run your \"code that is written in itself\". But the code is still written in itself, not in JVM bytecode, so... you can run the interpreter in the JVM, but you still have a long way to go if you want something that fits reasonably well into the Java ecosystem... certainly you can't just start calling out into Java libraries, let alone write Java libraries that call into your code, let alone pass rich data structures seamlessly between you and ordinary Java code. And what if performance sucks, because it's an interpreter after all? I guess that's okay for what you're trying to do, but how broad of an audience do you want with your software?\n\n\"most software is horrendously more complex than it needs to be.\" On this we are in complete agreement. Software in industry is generally awful. Even my own open-source software, elegant compared to most people's, has a bunch of ugly hacks and limitations because of flaws in the .NET platform it is built on. But I chose .NET because it was the only major platform designed for multiple programming languages to interoperate, and amazingly that's still true, though I guess the new WASI standard will do... something... about this (as we speak they're probably inventing all-new design flaws for me to work around later.)\n\n\"I think a tool like this could get a lot of that junk or if the way, and a program that does x y and z would look like whatever the most immediately way to humanly depict that in simple terms would be.\" I assume you mean \"out of the way\". But I don't see how your tool would be able to suddenly make code simple. It does not follow from \"I can see and edit all the code in my system! And convert the interpreter to Java!\" to \"now everything is easy!\"\n\n\"Despite the power of abstraction and recursive generation that code offers, source code itself is still more or less a hand-written 1-to-1 representation of the running program...\" I imagine you're talking about how we should be able to describe the properties I want the program to have, or describe a domain-specific solution in domain-specific declarative terms? I agree with that... but again it just doesn't seem to follow from what you've written before. I don't see a path from A to B. And similarly for items (2) and (3).\n\nSo you have good principles, but I don't see how they follow from your starting point. They are also hard problems - each one is something a person could spend their careers perfecting. And that's pretty much what I would advocate for people: specializing our work. BUT ALSO I would advocate working together by combining our stuff, not just spiritually copying but coming up with a plan to literally re-use and combine code where possible. But literal re-use, of course, leads to ideas like <http:\/\/loyc.net|Loyc> - because we don't all want to work in the same programming language, what we really need to work on right now is better interoperability, OR code conversion between languages. At minimum there should be a common-but-still-high-level way to represent different languages, hence my LES proposal. But advocating code re-use seems to make me unusual around here and I don't know why. Anyway, while I've been specializing by playing with homoiconic language designs and thinking about interoperability &amp; code conversion, Paul Chiusano's been working on sending code from one system to execute in another (with content-indexed addressing for efficiency), others have been working on projectional editing (Lamdu uses the WYTIWYS = what you type is what you see principle)... I think if we were better at specializing and working together, we might actually get somewhere. Especially if funding were available so it didn't have to be a weekends-only-until-you-burn-out-from-writing-code-7-days-a-week thing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584235196.324400",
        "parent_user_id": "U01003H81UM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p8qpa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dan, It's hard to know what you're getting at with your prose explanation. It reminded me at first of Kartik Agaram's work, which is all about bootstrapping, but then, his solution ends up being steeped in x86 assembly language and I think yours is somehow higher-level?\n\nI'm afraid I have to push back on what you began to describe. You're saying \"Why not put (the IDE's) code and YOUR code all in the same bucket?\" Okay, so let's say Visual Studio Code is in \"the same bucket\" as the program I'm writing. So what? What does this buy me? I don't understand VS Code's code, since it's new to me. I've never seen it, but more importantly, I don't care about seeing it either. Based on the number of extensions people have written for VS code, I imagine it's less of a confusing mess than the old Visual Studio (whose extension model I've had to deal with) but still, it's a big mass of code that someone else wrote, that I don't understand. If it's like most codebases, it doesn't come with any explanations (\"literate programming\" is something most devs haven't heard of, and wouldn't aspire to if they had - at many companies, even the most important classes have zero documentation).\n\nIf my editor is editable, I can edit it. So far, so good. But weren't there entire Smalltalk or Lisp operating systems in the 1980s that worked exactly this way? If so, why not start from there? Why start from scratch? But also, what does this buy me? I really don't want to modify the core editor, because if I do, I will be the only person with this version of it. If I change VS Code's core in a way that makes it more useful to me, I now cannot download updated versions of VS Code. This is a really fundamental problem that pops up again and again, and not just in the realm of code - I used to work at a company that decided to modify metadata on some road map files, but then the map provider produced a new version of the maps, but wait, we modified the old version, so how do we merge the old and the new? I spent months solving problems like that.\n\n\"presents you with a custom interface \/ model for the code, including the code of the whole running program & interface that it presents. No more dependency on some other interface!\" But... how? The OS doesn't understand your code, it expects raw machine code. What machine code will you provide, where did it come from, and can I edit this machine code? (My suggestion: check if WebAssembly works for you as a starting point, so you can run in a browser. And it's easiest if the kernel is not modifiable.)\n\n\"Well, the tool is written in itself, and you already made a generate-the-equivalent-Java-code functionality; use that on the tool itself, and bootstrap the tool right into the JVM (or what have you)\" I've done bootstrapping myself - the parser for the language that my parser generator LLLPG understood, LES version 1, was written in itself, which meant at first that I had to parse it some other way (I came up with a scheme to construct grammars in C# in order to bootstrap it), and then LES v1 evolved to "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/loyc.net\/les",
                                "text": "LES version 2"
                            },
                            {
                                "type": "text",
                                "text": ", and then I wrote a parser for Enhanced C# in LESv2, and then eventually I decided to support a new syntax for the parser generator which was written in Enhanced C#. Bootstrapping is cool, but it's kinda hard and time-consuming. Anyway, so let's say bootstrapping is done AND you can \"generate-the-equivalent-Java-code\". What you've written is an interpreter, so you can generate a Java interpreter that is able to run your \"code that is written in itself\". But the code is still written in itself, not in JVM bytecode, so... you can run the interpreter in the JVM, but you still have a long way to go if you want something that fits reasonably well into the Java ecosystem... certainly you can't just start calling out into Java libraries, let alone write Java libraries that call into your code, let alone pass rich data structures seamlessly between you and ordinary Java code. And what if performance sucks, because it's an interpreter after all? I guess that's okay for what you're trying to do, but how broad of an audience do you want with your software?\n\n\"most software is horrendously more complex than it needs to be.\" On this we are in complete agreement. Software in industry is generally awful. Even my own open-source software, elegant compared to most people's, has a bunch of ugly hacks and limitations because of flaws in the .NET platform it is built on. But I chose .NET because it was the only major platform designed for multiple programming languages to interoperate, and amazingly that's still true, though I guess the new WASI standard will do... something... about this (as we speak they're probably inventing all-new design flaws for me to work around later.)\n\n\"I think a tool like this could get a lot of that junk or if the way, and a program that does x y and z would look like whatever the most immediately way to humanly depict that in simple terms would be.\" I assume you mean \"out of the way\". But I don't see how your tool would be able to suddenly make code simple. It does not follow from \"I can see and edit all the code in my system! And convert the interpreter to Java!\" to \"now everything is easy!\"\n\n\"Despite the power of abstraction and recursive generation that code offers, source code itself is still more or less a hand-written 1-to-1 representation of the running program...\" I imagine you're talking about how we should be able to describe the properties I want the program to have, or describe a domain-specific solution in domain-specific declarative terms? I agree with that... but again it just doesn't seem to follow from what you've written before. I don't see a path from A to B. And similarly for items (2) and (3).\n\nSo you have good principles, but I don't see how they follow from your starting point. They are also hard problems - each one is something a person could spend their careers perfecting. And that's pretty much what I would advocate for people: specializing our work. BUT ALSO I would advocate working together by combining our stuff, not just spiritually copying but coming up with a plan to literally re-use and combine code where possible. But literal re-use, of course, leads to ideas like "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/loyc.net",
                                "text": "Loyc"
                            },
                            {
                                "type": "text",
                                "text": " - because we don't all want to work in the same programming language, what we really need to work on right now is better interoperability, OR code conversion between languages. At minimum there should be a common-but-still-high-level way to represent different languages, hence my LES proposal. But advocating code re-use seems to make me unusual around here and I don't know why. Anyway, while I've been specializing by playing with homoiconic language designs and thinking about interoperability & code conversion, Paul Chiusano's been working on sending code from one system to execute in another (with content-indexed addressing for efficiency), others have been working on projectional editing (Lamdu uses the WYTIWYS = what you type is what you see principle)... I think if we were better at specializing and working together, we might actually get somewhere. Especially if funding were available so it didn't have to be a weekends-only-until-you-burn-out-from-writing-code-7-days-a-week thing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1585095821.013500",
        "client_msg_id": "efa1e0c6-2db8-45ea-b518-8771d3ea02f8",
        "text": "Late, but: the parts of the system that are _easier_ to represent to us are the ones that _will_ be represented to us",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vW\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Late, but: the parts of the system that are "
                            },
                            {
                                "type": "text",
                                "text": "easier",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to represent to us are the ones that "
                            },
                            {
                                "type": "text",
                                "text": "will",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be represented to us"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    }
]