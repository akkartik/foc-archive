[
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575712138.140100",
        "client_msg_id": "4d80969a-9d80-4cf9-babb-37162ccc02fd",
        "text": "<@U5STGTB3J> I think this illustrates my feelings about abstraction well. There's three layers of abstraction here, the weave itself, its internal 'up and down' grid (in the middle) and the code used to generate that grid on the left. Each a very different domain. There is a _lot_ more detail in the weave for sure, but each domain also has its own detail. By creating an abstraction you create a system of knowledge, what Thor Magnusson calls an \"epistemic tool\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HGiE6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I think this illustrates my feelings about abstraction well. There's three layers of abstraction here, the weave itself, its internal 'up and down' grid (in the middle) and the code used to generate that grid on the left. Each a very different domain. There is a "
                            },
                            {
                                "type": "text",
                                "text": "lot",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " more detail in the weave for sure, but each domain also has its own detail. By creating an abstraction you create a system of knowledge, what Thor Magnusson calls an \"epistemic tool\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1575716021.160400",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1575716799.000000"
        },
        "client_msg_id": "8A108E8A-E67D-4430-8239-6DB11A084320",
        "text": "<@UF89Z7SRF> I can see where our understanding of _abstraction_ diverges. Most of the examples you gave, I would call _translations_ or _transformations_, because you jump between domains. I agree that _transformations_ don’t necessarily remove or add details. My understanding of _transformation_ is that it’s merely a change of form or appearance.\n\nMy understanding of _abstraction_ is that it is a more specific form of _translation_, with the added constraints of what I described as “removing detail” and also that you stay within the same domain.\n\nYou abstract because you generalize more specific concepts by ignoring some of their details and lift the commonalities you want to highlight into a concept that’s higher up the taxonomy, still in the same domain. You do that so you can remove complexity and more efficiently think or communicate with the now abstracted, simpler concept, no longer having to deal with all the detail removed. For me that’s the whole point of abstracting — to reduce cognitive burden, to simplify.\n\nIn my taxonomy of definitions, confusingly _abstraction_ is therefore a more specific concept than _transformation_ adding more specific requirements to what it describes.\n\nThat’s how I think about this.\nDoes that make any sense?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9jgN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF89Z7SRF"
                            },
                            {
                                "type": "text",
                                "text": " I can see where our understanding of "
                            },
                            {
                                "type": "text",
                                "text": "abstraction",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " diverges. Most of the examples you gave, I would call "
                            },
                            {
                                "type": "text",
                                "text": "translations",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "transformations",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", because you jump between domains. I agree that "
                            },
                            {
                                "type": "text",
                                "text": "transformations",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " don’t necessarily remove or add details. My understanding of "
                            },
                            {
                                "type": "text",
                                "text": "transformation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is that it’s merely a change of form or appearance.\n\nMy understanding of "
                            },
                            {
                                "type": "text",
                                "text": "abstraction",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is that it is a more specific form of "
                            },
                            {
                                "type": "text",
                                "text": "translation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", with the added constraints of what I described as “removing detail” and also that you stay within the same domain.\n\nYou abstract because you generalize more specific concepts by ignoring some of their details and lift the commonalities you want to highlight into a concept that’s higher up the taxonomy, still in the same domain. You do that so you can remove complexity and more efficiently think or communicate with the now abstracted, simpler concept, no longer having to deal with all the detail removed. For me that’s the whole point of abstracting — to reduce cognitive burden, to simplify.\n\nIn my taxonomy of definitions, confusingly "
                            },
                            {
                                "type": "text",
                                "text": "abstraction",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is therefore a more specific concept than "
                            },
                            {
                                "type": "text",
                                "text": "transformation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " adding more specific requirements to what it describes.\n\nThat’s how I think about this.\nDoes that make any sense?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U6FKVSVCK",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575733182.167200",
        "client_msg_id": "38b26cca-5017-49ec-8ab8-8852953d4b16",
        "text": "So run-length encoding isn't an abstraction because you can go in both directions? So an algorithm of how to make a thing isn't more abstract than the thing?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wb\/p2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So run-length encoding isn't an abstraction because you can go in both directions? So an algorithm of how to make a thing isn't more abstract than the thing?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575733197.167400",
        "client_msg_id": "dafe4e7e-d14e-44c6-ad43-7b5619bcedd3",
        "text": "This makes sense, although feels counter-intuitive to me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W0M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This makes sense, although feels counter-intuitive to me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575733537.167600",
        "client_msg_id": "e477b2aa-1032-4284-9d0f-a520c1b195ec",
        "text": "and I'm not sure why you add 'still in the same domain' as a constraint. If you take discrete samples of a continuous signal that seems like it woudl be an abstraction by your definition, except discrete and analogue signals exist in different domains.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qg2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and I'm not sure why you add 'still in the same domain' as a constraint. If you take discrete samples of a continuous signal that seems like it woudl be an abstraction by your definition, except discrete and analogue signals exist in different domains."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1575736895.172800",
        "client_msg_id": "11df1af5-6da4-4feb-865a-37bf5c7010a6",
        "text": "Hello, I'm working on an in-house forms library (managing user input validation and submission, and establishing controlled inputs in HTML) does anyone have advice on favorite forms\/input management patterns they've used? I'm most interested in separating view and state management as much as possible. I have a strong preference towards FRP.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575736895.172800",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1575834029.185400",
        "reply_users": [
            "UFPPABQ7P",
            "UA14TGLTC",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UFPPABQ7P",
                "ts": "1575737238.172900"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1575737308.173200"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1575772045.173900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1575831337.180000"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1575831962.180200"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1575833904.183200"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1575833940.184500"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1575834020.184900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1575834029.185400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XTk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello, I'm working on an in-house forms library (managing user input validation and submission, and establishing controlled inputs in HTML) does anyone have advice on favorite forms\/input management patterns they've used? I'm most interested in separating view and state management as much as possible. I have a strong preference towards FRP."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UFPPABQ7P",
        "thread_ts": "1575736895.172800",
        "root": {
            "user": "UFPPABQ7P",
            "type": "message",
            "ts": "1575736895.172800",
            "client_msg_id": "11df1af5-6da4-4feb-865a-37bf5c7010a6",
            "text": "Hello, I'm working on an in-house forms library (managing user input validation and submission, and establishing controlled inputs in HTML) does anyone have advice on favorite forms\/input management patterns they've used? I'm most interested in separating view and state management as much as possible. I have a strong preference towards FRP.",
            "team": "T5TCAFTA9",
            "thread_ts": "1575736895.172800",
            "reply_count": 9,
            "reply_users_count": 3,
            "latest_reply": "1575834029.185400",
            "reply_users": [
                "UFPPABQ7P",
                "UA14TGLTC",
                "UHWC9PXBL"
            ],
            "replies": [
                {
                    "user": "UFPPABQ7P",
                    "ts": "1575737238.172900"
                },
                {
                    "user": "UFPPABQ7P",
                    "ts": "1575737308.173200"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1575772045.173900"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1575831337.180000"
                },
                {
                    "user": "UFPPABQ7P",
                    "ts": "1575831962.180200"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1575833904.183200"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1575833940.184500"
                },
                {
                    "user": "UFPPABQ7P",
                    "ts": "1575834020.184900"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1575834029.185400"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "XTk",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Hello, I'm working on an in-house forms library (managing user input validation and submission, and establishing controlled inputs in HTML) does anyone have advice on favorite forms\/input management patterns they've used? I'm most interested in separating view and state management as much as possible. I have a strong preference towards FRP."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1575737238.172900",
        "client_msg_id": "66c15972-4c21-4ec2-93ae-4b4a6d82b4db",
        "text": "In the past, I approached this problem by establishing a `Model` type for every input that would hang onto a few interesting props—\n```{\n  value: T, \n  isTouched: boolean,\n  errors: Array&lt;{id, display}&gt;,\n  warnings: Array&lt;{id, display}&gt;,\n  notes: Array&lt;{id, display}&gt;\n}```",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WNmD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the past, I approached this problem by establishing a "
                            },
                            {
                                "type": "text",
                                "text": "Model",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " type for every input that would hang onto a few interesting props—\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "{\n  value: T, \n  isTouched: boolean,\n  errors: Array<{id, display}>,\n  warnings: Array<{id, display}>,\n  notes: Array<{id, display}>\n}"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1575737308.173200",
        "client_msg_id": "6763bc28-7e42-4ad4-8d94-a2cfc589c1e3",
        "text": "This was a good approach imo due to the ability to aggregate models into larger models—for example only if all child models are touch is the super model touched.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575736895.172800",
        "parent_user_id": "UFPPABQ7P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U2Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This was a good approach imo due to the ability to aggregate models into larger models—for example only if all child models are touch is the super model touched."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1575738604.173400",
        "client_msg_id": "2d07381b-d417-41c3-9f21-c9fb762e0e25",
        "text": "Yes, intuition… ever since you rejected my initial comment, I was questioning my own intuitive understanding and have since been reading the Wikipedia pages for _transformation_ and _abstraction (computer science), which_ leads to _generalization_, which introduces the domain constraint. And so I thought I share what I learned and refined the description of my understanding based on that.\n\nI'm not saying I've figured it all out and my interpretation is correct and you're wrong; who knows. It's kind of… abstract. :wink: Language is hard. What I wrote makes sense to me, seems to be aligned with the definitions in a reasonably authoritative source, and so I hope it has a chance to align with other people's understanding, and I feel comfort in that I'm not just making stuff up or rely on my intuition.\n\nI'm still just interpreting something I likely do not fully understand. But we have to agree on something, some kind of starting point, to have a meaningful discussion, and I think we didn't have that, and probably still don't have. And that's fine, as I'm not debating because I want to change your mind or I need to \"be right\". It was a good prompt for me to check my own understanding of these concepts and I coincidentally happen to write something currently where this exercise was just super useful and important and I want to be precise about this.\n\nThanks for your comments that encouraged me to put in effort that I wouldn't have otherwise. Perhaps it'll make my work a little better.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LWKA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, intuition… ever since you rejected my initial comment, I was questioning my own intuitive understanding and have since been reading the Wikipedia pages for "
                            },
                            {
                                "type": "text",
                                "text": "transformation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "abstraction (computer science), which",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " leads to "
                            },
                            {
                                "type": "text",
                                "text": "generalization",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which introduces the domain constraint. And so I thought I share what I learned and refined the description of my understanding based on that.\n\nI'm not saying I've figured it all out and my interpretation is correct and you're wrong; who knows. It's kind of… abstract. "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": " Language is hard. What I wrote makes sense to me, seems to be aligned with the definitions in a reasonably authoritative source, and so I hope it has a chance to align with other people's understanding, and I feel comfort in that I'm not just making stuff up or rely on my intuition.\n\nI'm still just interpreting something I likely do not fully understand. But we have to agree on something, some kind of starting point, to have a meaningful discussion, and I think we didn't have that, and probably still don't have. And that's fine, as I'm not debating because I want to change your mind or I need to \"be right\". It was a good prompt for me to check my own understanding of these concepts and I coincidentally happen to write something currently where this exercise was just super useful and important and I want to be precise about this.\n\nThanks for your comments that encouraged me to put in effort that I wouldn't have otherwise. Perhaps it'll make my work a little better."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1575772045.173900",
        "client_msg_id": "11e64ada-1938-4f64-b8ae-2abcf7157a33",
        "text": "Pay attention to representing invalid states.  For instance, two fields who values must agree in some way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575736895.172800",
        "parent_user_id": "UFPPABQ7P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I4K4T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pay attention to representing invalid states.  For instance, two fields who values must agree in some way."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]