[
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653636892.597539",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1653637142.000000"
        },
        "client_msg_id": "c88dfe20-e29c-4c3c-823a-04e8f56cb307",
        "text": "<@UAZT04VT4> We've done early explorations in this area, but nothing that we can share widely yet. Since our source of truth is TypeScript code (as an AST) we can reason about the flow of React props and conditional rendering of elements\/class names. The challenge is to provide a meaningful UI for a designer based on what's essentially open-ended TypeScript code. Same as the TypeScript compiler does flow analysis, there may be cases where code is too difficult to follow for the tool (which we would then tell the user), but there may be an 80\/20 rule in there where just giving designers a bit of conditionals would add a lot of value.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "okp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAZT04VT4"
                            },
                            {
                                "type": "text",
                                "text": " We've done early explorations in this area, but nothing that we can share widely yet. Since our source of truth is TypeScript code (as an AST) we can reason about the flow of React props and conditional rendering of elements\/class names. The challenge is to provide a meaningful UI for a designer based on what's essentially open-ended TypeScript code. Same as the TypeScript compiler does flow analysis, there may be cases where code is too difficult to follow for the tool (which we would then tell the user), but there may be an 80\/20 rule in there where just giving designers a bit of conditionals would add a lot of value."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02CABPNXJ6",
        "type": "message",
        "ts": "1653660648.875729",
        "client_msg_id": "fb6c8818-1f4a-4bff-8ec0-000922757297",
        "text": "Hey folks, I wanna show you  something new we have been working on - an *AI code review bot* :robot_face:. Most pull requests (about 2\/3) get merged without corrections, and the idea is to have the bot detect and approve them. This was born out frustration constantly waiting for 'code review' for small and safe code contribution, especially since I believe in \"ship small &amp; often. Also it allows you to focus on the trickier changes instead.\n\n:point_right: Here's how it works: anybody can do a 'historical' test on any repository here - <https:\/\/codeball.ai\/> to test out the accuracy. To do reviews on new pull requests, it's setup as a GitHub action.\nI'd love to hear what you smart people think! Happy to also share more about the model too (basically it's a neural net, the inputs include features about the code, the author and author experience with the code changed, trained on over 1M code contributions).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "da935dd8f5f2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-17\/2637689844176_da935dd8f5f27e987de0_72.jpg",
            "first_name": "Kiril",
            "real_name": "Kiril Videlov",
            "display_name": "Kiril Videlov",
            "team": "T5TCAFTA9",
            "name": "kiril",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653660648.875729",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1653899781.565899",
        "reply_users": [
            "U03GBV8B58V",
            "U01P8U8FZPH"
        ],
        "replies": [
            {
                "user": "U03GBV8B58V",
                "ts": "1653674955.568749"
            },
            {
                "user": "U01P8U8FZPH",
                "ts": "1653899781.565899"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/codeball.ai\/",
                "image_url": "https:\/\/codeball.ai\/_app\/assets\/github_bg-00bbda9a.png",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 667287,
                "id": 1,
                "original_url": "https:\/\/codeball.ai\/",
                "fallback": "Codeball -&gt; AI-powered code review",
                "text": "AI-powered code review",
                "title": "Codeball -&gt; AI-powered code review",
                "title_link": "https:\/\/codeball.ai\/",
                "service_name": "codeball.ai"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8B0ps",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey folks, I wanna show you  something new we have been working on - an "
                            },
                            {
                                "type": "text",
                                "text": "AI code review bot ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "emoji",
                                "name": "robot_face",
                                "unicode": "1f916",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Most pull requests (about 2\/3) get merged without corrections, and the idea is to have the bot detect and approve them. This was born out frustration constantly waiting for 'code review' for small and safe code contribution, especially since I believe in \"ship small & often. Also it allows you to focus on the trickier changes instead.\n\n"
                            },
                            {
                                "type": "emoji",
                                "name": "point_right",
                                "unicode": "1f449"
                            },
                            {
                                "type": "text",
                                "text": " Here's how it works: anybody can do a 'historical' test on any repository here - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/codeball.ai\/"
                            },
                            {
                                "type": "text",
                                "text": " to test out the accuracy. To do reviews on new pull requests, it's setup as a GitHub action.\nI'd love to hear what you smart people think! Happy to also share more about the model too (basically it's a neural net, the inputs include features about the code, the author and author experience with the code changed, trained on over 1M code contributions)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1653663792.303979",
        "edited": {
            "user": "UA14TGLTC",
            "ts": "1653663801.000000"
        },
        "client_msg_id": "220d5a0d-079d-40f6-8a83-cb0c51f2c0c0",
        "text": "The 80\/20 rule will get you a long way.  When code is too difficult for a good tool to follow, either (1) the code is bad, or (2)  it's implementing some higher order pattern that uses a different mental model than the flow that the abstraction layer ends up producing.\n\nRails filters come immediately to mind as an example of (2).  <https:\/\/guides.rubyonrails.org\/action_controller_overview.html#filters> The mental model is pretty simple, but the control flow that leads to their execution is pretty much inscrutable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xw\/5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The 80\/20 rule will get you a long way.  When code is too difficult for a good tool to follow, either (1) the code is bad, or (2)  it's implementing some higher order pattern that uses a different mental model than the flow that the abstraction layer ends up producing.\n\nRails filters come immediately to mind as an example of (2).  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/guides.rubyonrails.org\/action_controller_overview.html#filters"
                            },
                            {
                                "type": "text",
                                "text": " The mental model is pretty simple, but the control flow that leads to their execution is pretty much inscrutable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653667478.528909",
        "client_msg_id": "ab5b73f4-a38f-4dc9-98ad-eeac45f891b5",
        "text": "Good points. I've been thinking lately that high quality UI component code should be easy to explain to a non-technical designer if they asked how a component works. If code meets that quality bar, a tool has a chance at visualizing it in a way where the designer can feel safe enough to edit the visual parts.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NMUw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good points. I've been thinking lately that high quality UI component code should be easy to explain to a non-technical designer if they asked how a component works. If code meets that quality bar, a tool has a chance at visualizing it in a way where the designer can feel safe enough to edit the visual parts."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653667631.065789",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1653667703.000000"
        },
        "client_msg_id": "81eac1cc-2695-464c-922f-0b3a2eecc72a",
        "text": "By \"explain\" I don't mean syntax specifics or technical jargon, more like data flow, i.e. \"this todo list component repeats a todo item component for each todo in the list it is displaying. To each todo item component we pass in the todo data which includes the todo title and whether the todo is completed\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mdg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By \"explain\" I don't mean syntax specifics or technical jargon, more like data flow, i.e. \"this todo list component repeats a todo item component for each todo in the list it is displaying. To each todo item component we pass in the todo data which includes the todo title and whether the todo is completed\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653674955.568749",
        "client_msg_id": "495d517d-1d45-4f6c-ac33-3125f884fccd",
        "text": "Interesting concept. It looked very accurate in the example I checked.\n\nHave you given any thought to liability, i.e. Codeball automatically merges a PR that goes on to do damage, be it physical and\/or economic? I assume you'd have to be super clear on how to define your terms of service and make sure that your company insurance is fully up to par.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653660648.875729",
        "parent_user_id": "U02CABPNXJ6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t8KP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting concept. It looked very accurate in the example I checked.\n\nHave you given any thought to liability, i.e. Codeball automatically merges a PR that goes on to do damage, be it physical and\/or economic? I assume you'd have to be super clear on how to define your terms of service and make sure that your company insurance is fully up to par."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]