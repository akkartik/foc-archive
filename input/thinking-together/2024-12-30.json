[
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1735548475.479509",
        "client_msg_id": "6ed6d7b7-dec6-4505-a958-70f43cd0ac03",
        "text": "At work we have a user defined graph structure. Its a source of enough bugs we had a whole project dedicated to \"no broken graphs\". We stopped trying to be clever and literally do a graph walk every modification to ensure our constraints hold, e.g. its still a DAG, every split node has a corresponding merge node. Every node pointer is pointing at a node etc. so bugs in one part of the system could not spill into the database.\nWhen the product started there were lofty expectations we would be able to implement graph patching incrementally etc. but the practical reality we had to sacrifice fancy algorithms for constant brute force validation of the structure.\nI think graph maintenance is tricky coz we know the incremental approach is possible but there is no nice out-of-the-box safe way of specifying it so you are essentially working with an unconstrained dynamic model, in our case mistakes were quite costly and the graphs were not that big so it was better ROI to enforce global constrains the dumb but reliable way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1734713588.023319",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GAtJY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At work we have a user defined graph structure. Its a source of enough bugs we had a whole project dedicated to \"no broken graphs\". We stopped trying to be clever and literally do a graph walk every modification to ensure our constraints hold, e.g. its still a DAG, every split node has a corresponding merge node. Every node pointer is pointing at a node etc. so bugs in one part of the system could not spill into the database.\nWhen the product started there were lofty expectations we would be able to implement graph patching incrementally etc. but the practical reality we had to sacrifice fancy algorithms for constant brute force validation of the structure.\nI think graph maintenance is tricky coz we know the incremental approach is possible but there is no nice out-of-the-box safe way of specifying it so you are essentially working with an unconstrained dynamic model, in our case mistakes were quite costly and the graphs were not that big so it was better ROI to enforce global constrains the dumb but reliable way."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT",
                    "U02U0AS3J49",
                    "U01AD80KMLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U05FWGL3EBC",
        "type": "message",
        "ts": "1735551039.500709",
        "client_msg_id": "9a678766-7d3f-451d-a064-2b0ee860299b",
        "text": "great resources. thank you",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ecafb7e619aa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5540564223570_ecafb7e619aa6416f3c1_72.jpg",
            "first_name": "Iacob",
            "real_name": "Iacob Nasca",
            "display_name": "Iacob Nasca",
            "team": "T5TCAFTA9",
            "name": "iacob.campia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZDkNG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "great resources. thank you"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1735561603.154769",
        "client_msg_id": "0dc06c25-d479-4539-88ea-62f628187964",
        "text": "what are you looking for? I wrote a weird one <https:\/\/marianoguerra.org\/posts\/bootstrapping-oop-part-3-who-parses-the-parser\/> (follow the links back to the first post)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "attachments": [
            {
                "from_url": "https:\/\/marianoguerra.org\/posts\/bootstrapping-oop-part-3-who-parses-the-parser\/",
                "ts": 1724446519,
                "id": 1,
                "original_url": "https:\/\/marianoguerra.org\/posts\/bootstrapping-oop-part-3-who-parses-the-parser\/",
                "fallback": "Mariano Guerra's Log: Bootstrapping OOP Part 3: Who Parses the Parser?",
                "text": "In Bootstrap post-collapse OOP technology with Wasm GC (Part 2)\nwe implemented the minimum viable runtime in raw WebAssembly to run our prelude and bootstrap a basic OOP language.\nBut the prelude was",
                "title": "Bootstrapping OOP Part 3: Who Parses the Parser?",
                "title_link": "https:\/\/marianoguerra.org\/posts\/bootstrapping-oop-part-3-who-parses-the-parser\/",
                "service_name": "Mariano Guerra's Log"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+8nmV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what are you looking for? I wrote a weird one "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/marianoguerra.org\/posts\/bootstrapping-oop-part-3-who-parses-the-parser\/"
                            },
                            {
                                "type": "text",
                                "text": " (follow the links back to the first post)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1735561624.628379",
        "client_msg_id": "6ed00186-5890-4bb2-beb6-92c3435a9c75",
        "text": "I'm also writing about a less weird one <https:\/\/wasmgroundup.com\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "attachments": [
            {
                "from_url": "https:\/\/wasmgroundup.com\/",
                "image_url": "https:\/\/wasmgroundup.com\/img\/og-image-large.png?1",
                "image_width": 1200,
                "image_height": 630,
                "image_bytes": 84487,
                "service_icon": "https:\/\/wasmgroundup.com\/img\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/wasmgroundup.com\/",
                "fallback": "WebAssembly from the Ground Up",
                "text": "A book about WebAssembly â€” from hand crafting bytecodes to a real compiler for a simple programming language.",
                "title": "WebAssembly from the Ground Up",
                "title_link": "https:\/\/wasmgroundup.com\/",
                "service_name": "wasmgroundup.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iaaQO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm also writing about a less weird one "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wasmgroundup.com\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05FWGL3EBC",
        "type": "message",
        "ts": "1735562788.908449",
        "client_msg_id": "e0f3c052-a999-4c25-a46f-2f06b3b554bb",
        "text": "Thank you for the reading material. I'm writing my own programming language. For fun and profit - fun mostly. And I went through all the steps successfully (lexing, parsing, all the static analysis checking) and now I'm at the step of actually building the executable file, and from multiple articles I've seen, I chose to go with generating IR for LLVM (multiple targets and platforms was a plus) and then compile that to an executable. But it seems overly complicated and I'm not sure is the right path to go. Or maybe I just don't get it yet. I would like to see another completed language that uses LLVM and see how stuff are organized and defined and called. There are a bunch of tutorials on the site but it seems are just about one or two toy instructions. I've also seen a lot of other languages, and Paul Tarvydas also has some articles - suggesting a transpilation to another high level language (like C, or even better, something with GC like GO) and then compile that. But that also brings in a lot of issues. So...I'm just fishing around here to see if something clicks. :nerd_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ecafb7e619aa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5540564223570_ecafb7e619aa6416f3c1_72.jpg",
            "first_name": "Iacob",
            "real_name": "Iacob Nasca",
            "display_name": "Iacob Nasca",
            "team": "T5TCAFTA9",
            "name": "iacob.campia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qG48j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for the reading material. I'm writing my own programming language. For fun and profit - fun mostly. And I went through all the steps successfully (lexing, parsing, all the static analysis checking) and now I'm at the step of actually building the executable file, and from multiple articles I've seen, I chose to go with generating IR for LLVM (multiple targets and platforms was a plus) and then compile that to an executable. But it seems overly complicated and I'm not sure is the right path to go. Or maybe I just don't get it yet. I would like to see another completed language that uses LLVM and see how stuff are organized and defined and called. There are a bunch of tutorials on the site but it seems are just about one or two toy instructions. I've also seen a lot of other languages, and Paul Tarvydas also has some articles - suggesting a transpilation to another high level language (like C, or even better, something with GC like GO) and then compile that. But that also brings in a lot of issues. So...I'm just fishing around here to see if something clicks. "
                            },
                            {
                                "type": "emoji",
                                "name": "nerd_face",
                                "unicode": "1f913"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1735565548.166249",
        "client_msg_id": "32f1e6fa-f006-4f61-90e3-df82edc5ad3e",
        "text": "this may be useful, but I would suggest that if llvm is not a requirement for you target something easier or higher level\n\n<https:\/\/lambdaclass.github.io\/mlir-workshop\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RQa1+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this may be useful, but I would suggest that if llvm is not a requirement for you target something easier or higher level\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lambdaclass.github.io\/mlir-workshop\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thank-you",
                "users": [
                    "U05FWGL3EBC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1735565616.387389",
        "client_msg_id": "0a478834-83b3-4d10-81b9-9c1de2a7c3d1",
        "text": "you could target some existing bytecode, webassembly, transpile to another language or use something simpler than llvm like <https:\/\/cranelift.dev\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R5whp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you could target some existing bytecode, webassembly, transpile to another language or use something simpler than llvm like "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/cranelift.dev\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1735565637.846959",
        "client_msg_id": "0d0d6298-0914-4a1f-ac3a-171d43ede449",
        "text": "or emit your own bytecode and write an interpreter",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "08+1o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "or emit your own bytecode and write an interpreter"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05FWGL3EBC",
        "type": "message",
        "ts": "1735566055.399339",
        "client_msg_id": "41c89acc-34bb-4275-8c43-e9b63fe13c0f",
        "text": "that is really helpful. thank you!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ecafb7e619aa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5540564223570_ecafb7e619aa6416f3c1_72.jpg",
            "first_name": "Iacob",
            "real_name": "Iacob Nasca",
            "display_name": "Iacob Nasca",
            "team": "T5TCAFTA9",
            "name": "iacob.campia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YnIu2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that is really helpful. thank you!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735567593.435399",
        "client_msg_id": "6fbbf70c-85dd-4f2a-b802-ddc794dc2438",
        "text": "Yes, LLVM is complicated. It probably encodes everything we've learned about building compilers in a traditional way. At the code emission point, things get complicated because there are so many disparate possible targets. I suggest that it helps to first understand how to emit code - manually - for only one target, then the reasons for all of LLVM's complication will become more clear. [Aside: my favourite approach is to cut the emission problem into 2 halves - a dumb, general pass, then a rewriting pass that targets a pile of real targets. This is what GCC does. GCC uses \"RTL\". I think that \"OCG\" is even better. Hmm, is GCC's RTL more approachable than LLVM?]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hZd8R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, LLVM is complicated. It probably encodes everything we've learned about building compilers in a traditional way. At the code emission point, things get complicated because there are so many disparate possible targets. I suggest that it helps to first understand how to emit code - manually - for only one target, then the reasons for all of LLVM's complication will become more clear. [Aside: my favourite approach is to cut the emission problem into 2 halves - a dumb, general pass, then a rewriting pass that targets a pile of real targets. This is what GCC does. GCC uses \"RTL\". I think that \"OCG\" is even better. Hmm, is GCC's RTL more approachable than LLVM?]"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735567613.324639",
        "client_msg_id": "c2363fcb-d4b1-4f2c-88a5-94dca621dc35",
        "text": "Are you aware of Bob Nystrom's \"Crafting Interpreters\"? There is a Thursday night (EST) reading group - CS Cabal on Slack (<http:\/\/cscabal.slack.com|cscabal.slack.com>). We're incrementally reading through the book and asking questions as we go. Apparently, the book contains the hoary details for interpreting an AST and for converting the AST into bytecodes (we haven't got very far. It's definitely not too late to join in).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VkXYM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you aware of Bob Nystrom's \"Crafting Interpreters\"? There is a Thursday night (EST) reading group - CS Cabal on Slack ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/cscabal.slack.com",
                                "text": "cscabal.slack.com"
                            },
                            {
                                "type": "text",
                                "text": "). We're incrementally reading through the book and asking questions as we go. Apparently, the book contains the hoary details for interpreting an AST and for converting the AST into bytecodes (we haven't got very far. It's definitely not too late to join in)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735567731.504389",
        "client_msg_id": "0e222278-7a60-45f1-8de2-8d6cc53f6615",
        "text": "If you insist on writing your own code generator, maybe ask ChatGPT or Claude to write some LLVM for you. Spend a few hours chatting with it to see if it goes anywhere. Start by writing a simple program in your programming language. Get Claude to generate LLVM for it. I think that LLVM is old enough to be included in LLM ChatGPT's\/Claude's training. Typically, I don't trust the output of LLMs, but, they are very helpful, for me, in generating example code and helping me down the learning curve.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2ikRz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you insist on writing your own code generator, maybe ask ChatGPT or Claude to write some LLVM for you. Spend a few hours chatting with it to see if it goes anywhere. Start by writing a simple program in your programming language. Get Claude to generate LLVM for it. I think that LLVM is old enough to be included in LLM ChatGPT's\/Claude's training. Typically, I don't trust the output of LLMs, but, they are very helpful, for me, in generating example code and helping me down the learning curve."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05FWGL3EBC",
        "type": "message",
        "ts": "1735568051.069509",
        "client_msg_id": "41dd3940-af22-4fe7-8cc4-f7b1689bbfc5",
        "text": "I was mostly using <https:\/\/godbolt.org\/> with mingw clang and -S -emit-llvm to see what ir it spits out from some C i write there. but it seems is way different than any documentation i find about llvm",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ecafb7e619aa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5540564223570_ecafb7e619aa6416f3c1_72.jpg",
            "first_name": "Iacob",
            "real_name": "Iacob Nasca",
            "display_name": "Iacob Nasca",
            "team": "T5TCAFTA9",
            "name": "iacob.campia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cu7ne",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was mostly using "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/godbolt.org\/"
                            },
                            {
                                "type": "text",
                                "text": " with mingw clang and -S -emit-llvm to see what ir it spits out from some C i write there. but it seems is way different than any documentation i find about llvm"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1735568186.069789",
        "client_msg_id": "e2a5cc1d-6f6c-483e-ae51-9a2dcf7c92b0",
        "text": "I'm building my own language. It's a dynamically typed functional language that compiles straight to machine code. <https:\/\/github.com\/jimmyhmiller\/beagle>\n\nI will just say personally that I found all language stuff to be much easier once I just went and learned how I can go straight to machine code. It is way less confusing than I thought it would be. And made so many things click in place for me.\n\n LLVM is an impressive feat of engineering, but it is made for industrial strength things, not for helping people learn the first time. There are definitely a ton of concepts there that assume some background that might be hard.\n\nBut of course, don't let that discourage you from going in that direction! It's all about your goals.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uxROP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm building my own language. It's a dynamically typed functional language that compiles straight to machine code. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jimmyhmiller\/beagle"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI will just say personally that I found all language stuff to be much easier once I just went and learned how I can go straight to machine code. It is way less confusing than I thought it would be. And made so many things click in place for me.\n\n LLVM is an impressive feat of engineering, but it is made for industrial strength things, not for helping people learn the first time. There are definitely a ton of concepts there that assume some background that might be hard.\n\nBut of course, don't let that discourage you from going in that direction! It's all about your goals."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U05FWGL3EBC"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UGWUJUZHT",
                    "U8A5MS6R1"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735568303.228939",
        "client_msg_id": "575f7e78-f855-406b-9ac8-169bf316d349",
        "text": "At this very moment, I'm thinking that targeting WASM is a good idea. Mariano's given you some starter links...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RIrGW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At this very moment, I'm thinking that targeting WASM is a good idea. Mariano's given you some starter links..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735568446.004879",
        "client_msg_id": "8594bf92-97c7-446f-a11f-f3f939b3c472",
        "text": "\"Syntax\" is not just for the front end human-facing parts of a compiler. You'll note that even LLVM has a \"syntax\" for its IR, but, it ain't very human-friendly. I consider compilers to be pipelines of little DSLs, each with a specialized, machine-readable syntax. At this point in your compiler project, can you output some sort of text-file with its own specialized, machine-readable syntax? Can you use OhmJS to bolt this specialized \"syntax\" to LLMV-IR?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6zv4K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Syntax\" is not just for the front end human-facing parts of a compiler. You'll note that even LLVM has a \"syntax\" for its IR, but, it ain't very human-friendly. I consider compilers to be pipelines of little DSLs, each with a specialized, machine-readable syntax. At this point in your compiler project, can you output some sort of text-file with its own specialized, machine-readable syntax? Can you use OhmJS to bolt this specialized \"syntax\" to LLMV-IR?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05FWGL3EBC",
        "type": "message",
        "ts": "1735568733.173599",
        "client_msg_id": "cfff79b0-f13d-44b8-b6c9-a11a592bb759",
        "text": "i never used ohmjs. is ohmjs capable of doing llvm-ir ? that would mean that my source code would go to some custom ir, then use nodejs with ohm to convert that to ir, then something else to convert the llvm-ir to machine code",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ecafb7e619aa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5540564223570_ecafb7e619aa6416f3c1_72.jpg",
            "first_name": "Iacob",
            "real_name": "Iacob Nasca",
            "display_name": "Iacob Nasca",
            "team": "T5TCAFTA9",
            "name": "iacob.campia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lrwwW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i never used ohmjs. is ohmjs capable of doing llvm-ir ? that would mean that my source code would go to some custom ir, then use nodejs with ohm to convert that to ir, then something else to convert the llvm-ir to machine code"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05FWGL3EBC",
        "type": "message",
        "ts": "1735568830.306399",
        "client_msg_id": "b3569fef-051a-4778-a8fe-1118e471f014",
        "text": "i would ideally generate machine code myself but it will only work for a targeted platform. i was thinking that if i manage to generate llvm-ir, that would just compile to whatever platform it is capable of.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ecafb7e619aa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5540564223570_ecafb7e619aa6416f3c1_72.jpg",
            "first_name": "Iacob",
            "real_name": "Iacob Nasca",
            "display_name": "Iacob Nasca",
            "team": "T5TCAFTA9",
            "name": "iacob.campia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G+PRp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i would ideally generate machine code myself but it will only work for a targeted platform. i was thinking that if i manage to generate llvm-ir, that would just compile to whatever platform it is capable of."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05FWGL3EBC",
        "type": "message",
        "ts": "1735569229.476349",
        "client_msg_id": "750ee098-3f7a-4eea-bfcd-e191de547c90",
        "text": "i just need to see real world examples of llvm. how structures are defined, control statements, all the usual things, to understand it better. and then see how can i mold it to what i want\/need. i wouldn't want to run it in an interpreter or a vm. i have big goals :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ecafb7e619aa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5540564223570_ecafb7e619aa6416f3c1_72.jpg",
            "first_name": "Iacob",
            "real_name": "Iacob Nasca",
            "display_name": "Iacob Nasca",
            "team": "T5TCAFTA9",
            "name": "iacob.campia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4B6kO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i just need to see real world examples of llvm. how structures are defined, control statements, all the usual things, to understand it better. and then see how can i mold it to what i want\/need. i wouldn't want to run it in an interpreter or a vm. i have big goals "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1735569853.713819",
        "client_msg_id": "5f76c18d-d479-48a6-86a7-3cd3b1b2273f",
        "text": "Not sure if you read haskell, but here's this old idris llvm backend <https:\/\/github.com\/idris-hackers\/idris-llvm\/blob\/master\/src\/IRTS\/CodegenLLVM.hs>\n\nOther than that, I'm not sure of small examples. But zig source might be worth a read for a bigger real world project. There's also roc <https:\/\/github.com\/roc-lang\/roc\/tree\/main\/crates\/compiler\/gen_llvm\/src\/llvm>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dst4w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if you read haskell, but here's this old idris llvm backend "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/idris-hackers\/idris-llvm\/blob\/master\/src\/IRTS\/CodegenLLVM.hs"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOther than that, I'm not sure of small examples. But zig source might be worth a read for a bigger real world project. There's also roc "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/roc-lang\/roc\/tree\/main\/crates\/compiler\/gen_llvm\/src\/llvm"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735569881.877579",
        "client_msg_id": "c152984b-cc19-47d6-9389-ada76f2054e9",
        "text": "OhmJS is *capable* of doing llvm-ir, but, doesn't come with it. You would have to write an llvm-ir outputter yourself. It sounds like you're doing something like that anyway, but keeping it all in your head. When I feel confused about something, I draw a diagram or just write about it. OhmJS doesn't build a compiler back end for you. You still have to do the work. I believe that chopping up the work - divide and conquer - into smaller pieces makes it easier to do the work. Basing the pieces on little-DSLs makes it easier to write down what you're thinking. The hoary part of building a back-end emitter is that you want to target a bunch of very disparate target architectures - you either have to build a custom solution for each target, or, you have to find a way to generalize and cull the common stuff out of the task. LLVM shows where this kind of strive-for-generalization is ultimately gonna go.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RuhWz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OhmJS is "
                            },
                            {
                                "type": "text",
                                "text": "capable",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of doing llvm-ir, but, doesn't come with it. You would have to write an llvm-ir outputter yourself. It sounds like you're doing something like that anyway, but keeping it all in your head. When I feel confused about something, I draw a diagram or just write about it. OhmJS doesn't build a compiler back end for you. You still have to do the work. I believe that chopping up the work - divide and conquer - into smaller pieces makes it easier to do the work. Basing the pieces on little-DSLs makes it easier to write down what you're thinking. The hoary part of building a back-end emitter is that you want to target a bunch of very disparate target architectures - you either have to build a custom solution for each target, or, you have to find a way to generalize and cull the common stuff out of the task. LLVM shows where this kind of strive-for-generalization is ultimately gonna go."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1735570030.204639",
        "client_msg_id": "cdac6385-5665-4d40-85fe-3f027b1a1263",
        "text": "And I'll stop pitching my alternative. But I spent years being confused because I kept trying to use system like ohmjs without understanding them. Here is a (very messy) project I did of making an x86-64 assembler, and then building up to a simple language. Helped me way more to not have any tools doing things for me.\n\n<https:\/\/github.com\/jimmyhmiller\/PlayGround\/blob\/4069532cc2366706a9f9ff88a2c41f448f8c908f\/rust\/assembler\/src\/main.rs>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dwn3v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I'll stop pitching my alternative. But I spent years being confused because I kept trying to use system like ohmjs without understanding them. Here is a (very messy) project I did of making an x86-64 assembler, and then building up to a simple language. Helped me way more to not have any tools doing things for me.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jimmyhmiller\/PlayGround\/blob\/4069532cc2366706a9f9ff88a2c41f448f8c908f\/rust\/assembler\/src\/main.rs"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1735572797.713599",
        "client_msg_id": "27211217-48cf-42e3-b521-16ac5c31e24e",
        "text": "I'll throw out the offer though (to anyone) if you are doing a programming language project and want to pair, let me know :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ugXgh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll throw out the offer though (to anyone) if you are doing a programming language project and want to pair, let me know "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT",
                    "U85HCL7JP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735572855.694839",
        "client_msg_id": "643b6e75-5cef-4498-9293-f1aa6ef4879b",
        "text": "I agree with Jimmy's comment. Understanding how something works is harder - and everything looks magical - if you start by looking at decades of incremental evolution of the toolchain. FWIW, here's a 10-minute intro to one of the ultra-simple compilers I learned from <https:\/\/www.youtube.com\/watch?v=8hQVsTBY_hU|Ron Cain's SmallC>. My references to OhmJS are moot unless you already believe that a compiler is just a pipeline with little, custom syntactic APIs in between the passes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735525250.792139",
        "parent_user_id": "U05FWGL3EBC",
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=8hQVsTBY_hU",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/8hQVsTBY_hU\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/8hQVsTBY_hU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Ron Cain&#39;s Small C Compiler\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=8hQVsTBY_hU",
                "fallback": "YouTube Video: Ron Cain's Small C Compiler",
                "title": "Ron Cain's Small C Compiler",
                "title_link": "https:\/\/www.youtube.com\/watch?v=8hQVsTBY_hU",
                "author_name": "Programming Simplicity",
                "author_link": "https:\/\/www.youtube.com\/@programmingsimplicity2980",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QvujJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree with Jimmy's comment. Understanding how something works is harder - and everything looks magical - if you start by looking at decades of incremental evolution of the toolchain. FWIW, here's a 10-minute intro to one of the ultra-simple compilers I learned from "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=8hQVsTBY_hU",
                                "text": "Ron Cain's SmallC"
                            },
                            {
                                "type": "text",
                                "text": ". My references to OhmJS are moot unless you already believe that a compiler is just a pipeline with little, custom syntactic APIs in between the passes."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UK3LH8CF5"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1735584712.967259",
        "client_msg_id": "c3a198d3-75a6-490d-96ba-376c7bd9bc42",
        "text": "Yeah, I'm getting the feeling that shcema-free is like a double-edged nunchuck, where you spend more time hitting yourself in the armpit than hitting the thing you are trying to kill. Thanks for the feedback, everyone, it's helped a lot.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1734713588.023319",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DcRWV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I'm getting the feeling that shcema-free is like a double-edged nunchuck, where you spend more time hitting yourself in the armpit than hitting the thing you are trying to kill. Thanks for the feedback, everyone, it's helped a lot."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]