[
    {
        "user": "U03LMRE6MQE",
        "type": "message",
        "ts": "1671700672.656719",
        "client_msg_id": "6a497669-804c-4949-a6a2-f7fa14cbad28",
        "text": "What are the list operations for dealing with tagged structures. i.e records and unions. I see how lisp matches to lambda reductions but I've been adding unions\/records\/effects all based of row types and am unsure what there native manipulations would be",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ea29e26e919b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-06-23\/3708469439522_ea29e26e919bc202feb6_72.png",
            "first_name": "Peter",
            "real_name": "Peter Saxton",
            "display_name": "Peter Saxton",
            "team": "T5TCAFTA9",
            "name": "peterhsaxton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1671521797.378819",
        "parent_user_id": "U0296ACR13M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jsC0u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are the list operations for dealing with tagged structures. i.e records and unions. I see how lisp matches to lambda reductions but I've been adding unions\/records\/effects all based of row types and am unsure what there native manipulations would be"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1671713931.376959",
        "client_msg_id": "35582e4a-8e31-47e1-9ea3-15f9881f9332",
        "text": "short answer: functions\nx.y is really y(x) and is written in Lisp as (y x)\nmethod call self.y(z) is really y(self,z) and is written in Lisp as (y self z)\n\nlonger answer: all you get is ASTs (things and lists of things)\nYes, that is very low-level.\nMcCarthy decided to drape meaning over ASTs, i.e the root node of an AST is a always considered to be a function.\nIn the past, if you wanted to create more syntactic sugar draped over your ASTs, you would lock yourself away in a room for years and invent a “new language”.\nOr, if you were a Lisper, you would create functions called “macros”, but, the resulting syntax always looked like more ASTs (lists).\nCharacter-based syntax was reserved for compiler gurus who knew how to use parser tools.\nToday, though: Ohm-JS provides a way to drape character-based syntax over ASTs in an afternoon (it even comes with a REPL for helping you design\/debug a syntax - “Ohm-Editor”).  All you need is a toolbag of functionality plus Ohm-JS. (i.e. Common Lisp + Ohm-JS, or, JavaScript + Ohm-JS, or …).  PEG-based parsers (like Ohm) can do things that CFG parsers can’t.  As a result, quickie grammars can be incredibly short (i.e a couple of lines, slightly longer than a REGEX, but way shorter than most YACC-based parsers).\nBack to your question: If you want to see other people’s ideas on how to structure data, or if you don’t want to roll your own, see “CLOS”  and “DEFCLASS” and “DEFSTRUCT”.  CLOS method dispatch is different and better and more flexible than the usual OO stuff.\n\n[The learning curve is probably steep.  Lispers are usually glad to help.  There are &gt;1 Lispers here].",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1671521797.378819",
        "parent_user_id": "U0296ACR13M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ln2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "short answer: functions\nx.y is really y(x) and is written in Lisp as (y x)\nmethod call self.y(z) is really y(self,z) and is written in Lisp as (y self z)\n\nlonger answer: all you get is ASTs (things and lists of things)\nYes, that is very low-level.\nMcCarthy decided to drape meaning over ASTs, i.e the root node of an AST is a always considered to be a function.\nIn the past, if you wanted to create more syntactic sugar draped over your ASTs, you would lock yourself away in a room for years and invent a “new language”.\nOr, if you were a Lisper, you would create functions called “macros”, but, the resulting syntax always looked like more ASTs (lists).\nCharacter-based syntax was reserved for compiler gurus who knew how to use parser tools.\nToday, though: Ohm-JS provides a way to drape character-based syntax over ASTs in an afternoon (it even comes with a REPL for helping you design\/debug a syntax - “Ohm-Editor”).  All you need is a toolbag of functionality plus Ohm-JS. (i.e. Common Lisp + Ohm-JS, or, JavaScript + Ohm-JS, or …).  PEG-based parsers (like Ohm) can do things that CFG parsers can’t.  As a result, quickie grammars can be incredibly short (i.e a couple of lines, slightly longer than a REGEX, but way shorter than most YACC-based parsers).\nBack to your question: If you want to see other people’s ideas on how to structure data, or if you don’t want to roll your own, see “CLOS”  and “DEFCLASS” and “DEFSTRUCT”.  CLOS method dispatch is different and better and more flexible than the usual OO stuff.\n\n[The learning curve is probably steep.  Lispers are usually glad to help.  There are >1 Lispers here]."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03LMRE6MQE"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1671716960.985979",
        "client_msg_id": "613d6a25-2176-4907-a800-30bd6841c2cf",
        "text": "<@UGWUJUZHT> Your reference to \"Common Lisp + Ohm-JS\" suggests that parsers written in Ohm-JS can be used with languages outside of the JS ecosystem. That's not my impression from looking at the Ohm-JS Web site, which only mentions TypeScript as an alternative target to JavaScript. Is there something I overlooked?\nBackground: Ohm-JS looks very interesting for some ideas I'd like to play with, but I have investment into JS or Web programming in general.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1671521797.378819",
        "parent_user_id": "U0296ACR13M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dATju",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " Your reference to \"Common Lisp + Ohm-JS\" suggests that parsers written in Ohm-JS can be used with languages outside of the JS ecosystem. That's not my impression from looking at the Ohm-JS Web site, which only mentions TypeScript as an alternative target to JavaScript. Is there something I overlooked?\nBackground: Ohm-JS looks very interesting for some ideas I'd like to play with, but I have investment into JS or Web programming in general."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1671775304.698739",
        "client_msg_id": "1b3174f0-d43f-4ec2-a618-7b76a359e190",
        "text": "[hmm long answer, I wish it were shorter...]\n\nCorrect, the parser technology is built in JavaScript and runs in a browser and in node.js.\n\nI was getting at something else. It’s my fault that the idea wasn’t made clear.  Let’s try again:\n1) I generate compilers using Ohm-JS that transpile from syntax I invent to other languages like Common Lisp, Python and JS (I believe that I could do more languages, but I haven’t needed to do so (FYI, I have a P.O.C. WASM generator, but more work is needed (this was my first encounter with WASM and more learning curve is needed))).\n2) Then, I run those generated compilers to compile code written in the new languages.\n3) Then, I run the generated code on the command line, and, sometimes, in the browser.\n\nOhm-JS, based on PEG, is the game changer in the way I now look at problems.  CFGs (LR(k), YACC, etc.), REGEX, and, hand-written recursive descent parsers are just too cumbersome to use in the same way that I use Ohm-JS.\n\nAs an aside, one of the first things I wrote was a compiler that produced code that could be bolted into an Ohm-JS project, with the result that, in many use-cases, I don’t have to write any JavaScript code at all.  I can write the grammar in Ohm’s grammar syntax and I can write the transform in my own FABrication syntax, which is more succinct than JS.\n\nFurther aside: the first thing I did with Ohm-JS was to write a Scheme-subset-to-JS transpiler and used it to convert Nils Holm’s PROLOG in Scheme to JavaScript.\n\nExample: I am deeply interested in true concurrency.  My code uses messages that look like:\n⟨a b c d⟩\nand I use Ohm-JS to transpile this nano-syntax into something like:\n⟨Message a b c d⟩\nusing 2 specifications:\n1. ‛⟪«p» «d» «s» «m»⟫’\n2. ‛⟨Message «p» «d» «s» «m»⟩’\nN.B. the whole spec for the pattern matching is 1 line long, and, the whole spec for transforming is 1 line long.\nThis specific example could be done with a Python script (or sed with Unicode support), but there are other details that I’m trying to skip over for this example, e.g. messages might contain other messages recursively, for which it helps to have a parser that can express matching brackets.\n\nThe input to Ohm-JS is a JS String.  The output of my FABricator compiler is a JS String.  All of the above steps can be done in one fell-swoop in a JavaScript program that feeds strings to Ohm-JS and calls Ohm-JS twice.  At one point, I need to compile a generated String to executable code.  JavaScript’s “eval()” does this. (A “compiler” is “eval()“)\n\nExample: here’s a contrived example of something that I would never do with YACC, but would do with Ohm-JS:\nContrived Problem: scan this big JavaScript program and list every name of every top-level function.  Using YACC, you need to write a full spec (“grammar”) for JavaScript, with PEG (Ohm-JS), you can say something more obvious and succint: a function is `function id (...) { ... }` where the ‘...’ stuff is anything including recursively bracketed bits.  The point here is not whether I wrote a correct pattern match, but, the difference between “omg, I have to write a grammar for every nook and cranny in JavaScript” vs. writing a grammar with “I don’t care about this part”.  This contrived example can probably be done with a REGEX, but if the problem is expanded to be something like “list every function with the name of each parameter” then REGEX works less-well than a parser.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1671521797.378819",
        "parent_user_id": "U0296ACR13M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "owrBc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[hmm long answer, I wish it were shorter...]\n\nCorrect, the parser technology is built in JavaScript and runs in a browser and in node.js.\n\nI was getting at something else. It’s my fault that the idea wasn’t made clear.  Let’s try again:\n1) I generate compilers using Ohm-JS that transpile from syntax I invent to other languages like Common Lisp, Python and JS (I believe that I could do more languages, but I haven’t needed to do so (FYI, I have a P.O.C. WASM generator, but more work is needed (this was my first encounter with WASM and more learning curve is needed))).\n2) Then, I run those generated compilers to compile code written in the new languages.\n3) Then, I run the generated code on the command line, and, sometimes, in the browser.\n\nOhm-JS, based on PEG, is the game changer in the way I now look at problems.  CFGs (LR(k), YACC, etc.), REGEX, and, hand-written recursive descent parsers are just too cumbersome to use in the same way that I use Ohm-JS.\n\nAs an aside, one of the first things I wrote was a compiler that produced code that could be bolted into an Ohm-JS project, with the result that, in many use-cases, I don’t have to write any JavaScript code at all.  I can write the grammar in Ohm’s grammar syntax and I can write the transform in my own FABrication syntax, which is more succinct than JS.\n\nFurther aside: the first thing I did with Ohm-JS was to write a Scheme-subset-to-JS transpiler and used it to convert Nils Holm’s PROLOG in Scheme to JavaScript.\n\nExample: I am deeply interested in true concurrency.  My code uses messages that look like:\n⟨a b c d⟩\nand I use Ohm-JS to transpile this nano-syntax into something like:\n⟨Message a b c d⟩\nusing 2 specifications:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "‛⟪«p» «d» «s» «m»⟫’"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "‛⟨Message «p» «d» «s» «m»⟩’"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "N.B. the whole spec for the pattern matching is 1 line long, and, the whole spec for transforming is 1 line long.\nThis specific example could be done with a Python script (or sed with Unicode support), but there are other details that I’m trying to skip over for this example, e.g. messages might contain other messages recursively, for which it helps to have a parser that can express matching brackets.\n\nThe input to Ohm-JS is a JS String.  The output of my FABricator compiler is a JS String.  All of the above steps can be done in one fell-swoop in a JavaScript program that feeds strings to Ohm-JS and calls Ohm-JS twice.  At one point, I need to compile a generated String to executable code.  JavaScript’s “eval()” does this. (A “compiler” is “eval()“)\n\nExample: here’s a contrived example of something that I would never do with YACC, but would do with Ohm-JS:\nContrived Problem: scan this big JavaScript program and list every name of every top-level function.  Using YACC, you need to write a full spec (“grammar”) for JavaScript, with PEG (Ohm-JS), you can say something more obvious and succint: a function is "
                            },
                            {
                                "type": "text",
                                "text": "function id (...) { ... }",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " where the ‘...’ stuff is anything including recursively bracketed bits.  The point here is not whether I wrote a correct pattern match, but, the difference between “omg, I have to write a grammar for every nook and cranny in JavaScript” vs. writing a grammar with “I don’t care about this part”.  This contrived example can probably be done with a REGEX, but if the problem is expanded to be something like “list every function with the name of each parameter” then REGEX works less-well than a parser."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]