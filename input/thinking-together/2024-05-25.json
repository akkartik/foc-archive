[
    {
        "user": "U03HC3XHZGW",
        "type": "message",
        "ts": "1716655695.209849",
        "client_msg_id": "10d70f49-5acd-4f7b-bd95-89af5d57e746",
        "text": "Thank you all for the pointers! <@UBKNXPBAB> I agree being able to toggle making an inferred type explicit would be nice and not too hard - I wonder also whether it could be nice to have some kind of UI for “scrubbing through inferred type-space” for a particular value, rather than just a binary operation.\n\n<@UA14TGLTC> I had not really thought of the “function that take programs as input” classification. That makes a lot of sense! To restate what you said for my own understanding, type systems try to execute the whole input space at once and represent a flow of possibilities through the program (across all branches), rather than concrete values and single execution paths.\n\nI am reading the docs on Idris2 now and it is really fascinating what you can do with dependent types.\n\nThis is a tangent, but recently I came across the ideas of provably safe AI, such as expressed in <https:\/\/www.aria.org.uk\/wp-content\/uploads\/2024\/01\/ARIA-Safeguarded-AI-Programme-Thesis-V1.pdf|this paper>. My understanding is that this is an overlapping area of research, where the goal is to take a model that includes an AI system and its environment, and to make provable claims about the outcomes of such a system when given a distribution of input conditions. I’m very intrigued by the idea that language design, and specifically user interfaces to languages, could be useful for steering AI systems, and one of my goals right now is to learn more of the fundamentals to that whole problem space.\n\nAnyways I appreciate all of your responses :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "675dd03f5d4b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-02\/3889194159300_675dd03f5d4baa904b88_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Sosebee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dnsosebee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1715978541.417449",
        "parent_user_id": "U03HC3XHZGW",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zR3j1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you all for the pointers! "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " I agree being able to toggle making an inferred type explicit would be nice and not too hard - I wonder also whether it could be nice to have some kind of UI for “scrubbing through inferred type-space” for a particular value, rather than just a binary operation.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " I had not really thought of the “function that take programs as input” classification. That makes a lot of sense! To restate what you said for my own understanding, type systems try to execute the whole input space at once and represent a flow of possibilities through the program (across all branches), rather than concrete values and single execution paths.\n\nI am reading the docs on Idris2 now and it is really fascinating what you can do with dependent types.\n\nThis is a tangent, but recently I came across the ideas of provably safe AI, such as expressed in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.aria.org.uk\/wp-content\/uploads\/2024\/01\/ARIA-Safeguarded-AI-Programme-Thesis-V1.pdf",
                                "text": "this paper"
                            },
                            {
                                "type": "text",
                                "text": ". My understanding is that this is an overlapping area of research, where the goal is to take a model that includes an AI system and its environment, and to make provable claims about the outcomes of such a system when given a distribution of input conditions. I’m very intrigued by the idea that language design, and specifically user interfaces to languages, could be useful for steering AI systems, and one of my goals right now is to learn more of the fundamentals to that whole problem space.\n\nAnyways I appreciate all of your responses "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]