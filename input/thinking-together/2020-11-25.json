[
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1606294199.130000",
        "client_msg_id": "d7d74029-b856-484b-9674-8fb84bdf490a",
        "text": "Maybe `&gt;@&gt;` and `&lt;@&lt;`, playing on how @ looks vaguely circular. Actually those would be a huge pain to type, putting the @ on one end or another would be less aggressively unergonomic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J2SiJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe "
                            },
                            {
                                "type": "text",
                                "text": ">@>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "<@<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", playing on how @ looks vaguely circular. Actually those would be a huge pain to type, putting the @ on one end or another would be less aggressively unergonomic."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606294268.130300",
        "client_msg_id": "23118da1-505a-4f70-af7c-efc133f1fbff",
        "text": "Yeah. I've been thinking of `&gt;|&lt;` which is also quite terrible on the fingers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9UCd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah. I've been thinking of "
                            },
                            {
                                "type": "text",
                                "text": ">|<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which is also quite terrible on the fingers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1606294626.130500",
        "client_msg_id": "cfcc4b2f-30e3-4861-bd1c-e661e736356a",
        "text": "Also looks even more like a face, or a dragonfly. That could be a benefit or drawback depending on your perspective. ;)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zl2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also looks even more like a face, or a dragonfly. That could be a benefit or drawback depending on your perspective. ;)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606294729.130700",
        "client_msg_id": "cc54a641-d150-47a0-9a10-1bf3259addbf",
        "text": "The horizontal symmetry is indeed an irksome distraction.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P+V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The horizontal symmetry is indeed an irksome distraction."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606294785.130900",
        "client_msg_id": "3ad80829-ed4a-4280-84bd-3639a5dccbd1",
        "text": "Maybe `&gt;^&lt;`? Still a dragonfly or butterfly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PoZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe "
                            },
                            {
                                "type": "text",
                                "text": ">^<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Still a dragonfly or butterfly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606294880.131100",
        "client_msg_id": "ed499344-de40-425c-a358-a3c5f8e2c023",
        "text": "`&gt;-&lt;` is one shift less. That seems worth the horizontal symmetry.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZV9T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": ">-<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is one shift less. That seems worth the horizontal symmetry."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1606300326.131300",
        "client_msg_id": "f4f558ed-8af4-4adc-9706-6d50f47a853e",
        "text": "`rotate_right`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MNCd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "rotate_right",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1606300691.131500",
        "client_msg_id": "a0bc736a-a952-4f33-a913-b3e974eb86ec",
        "text": "I understand why you propose a symmetrical operator (because you can rotate left via rotate right). But I still find the symmetrical operators confusing—that's still rotate right, but the operator does not show this",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iejKs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I understand why you propose a symmetrical operator (because you can rotate left via rotate right). But I still find the symmetrical operators confusing—that's still rotate right, but the operator does not show this"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01EKU0UM24",
        "type": "message",
        "ts": "1606301051.131700",
        "client_msg_id": "1a481bf4-dec9-4d5f-8d0d-ae5cfefa8e6a",
        "text": "How about &gt;&gt;&lt; and &gt;&lt;&lt;, they describe in what direction each bit goes if you imagine a 3-bit integer.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "88975cfbf194",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-02\/1478272687812_88975cfbf19475e5c6f0_72.png",
            "first_name": "",
            "real_name": "Eldritch Conundrum",
            "display_name": "Eldritch Conundrum",
            "team": "T5TCAFTA9",
            "name": "eldritchconundrum",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xfA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How about >>< and ><<, they describe in what direction each bit goes if you imagine a 3-bit integer."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "U019CPED6T1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1606301345.131900",
        "client_msg_id": "c0c355da-a232-43f2-ac54-1914909ceda7",
        "text": "My recommendation is to go with full name and is what Rust uses. Rust has many intrinsics—functions that have special meaning for the compiler. Many operations that have special support in some processors are exposed as intrinsics. I very much like this approach as it allows you to use processor support when you need it, and you don't have to remember special syntax\n\n<https:\/\/doc.rust-lang.org\/std\/intrinsics\/index.html|https:\/\/doc.rust-lang.org\/std\/intrinsics\/index.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "title": "std::intrinsics - Rust",
                "title_link": "https:\/\/doc.rust-lang.org\/std\/intrinsics\/index.html",
                "text": "API documentation for the Rust `intrinsics` mod in crate `std`.",
                "fallback": "std::intrinsics - Rust",
                "from_url": "https:\/\/doc.rust-lang.org\/std\/intrinsics\/index.html",
                "service_icon": "https:\/\/doc.rust-lang.org\/favicon.ico",
                "service_name": "doc.rust-lang.org",
                "id": 1,
                "original_url": "https:\/\/doc.rust-lang.org\/std\/intrinsics\/index.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "liE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My recommendation is to go with full name and is what Rust uses. Rust has many intrinsics—functions that have special meaning for the compiler. Many operations that have special support in some processors are exposed as intrinsics. I very much like this approach as it allows you to use processor support when you need it, and you don't have to remember special syntax\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/doc.rust-lang.org\/std\/intrinsics\/index.html",
                                "text": "https:\/\/doc.rust-lang.org\/std\/intrinsics\/index.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606327592.132300",
        "client_msg_id": "4b6a0a4a-9ca5-478b-9f8a-8b55ea5f1d31",
        "text": "<@U016UDE58CF> I was careful to ask for a _notation_. It's not really possible to make a general recommendation like this that works in all contexts. Imagine designing <https:\/\/en.wikipedia.org\/wiki\/Salsa20> with pen and paper. I think having to write out `rotate_left` each time would hinder thought (<https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/358896.358899>)\n\nIn this case the problem I'm working on is coming up with a reasonable representation of the ARM ISA. ARM binary operators all support one immediate operand that must fit in 12 bits. However the 12 bits are used in a strange way, starting with 8 bits and then using the remaining 4 to determine how to rotate it. The recommended \"universal assembly language\" for ARM is to just provide constants and let the toolchain give you errors like:\n\n```A1510E:Immediate 0x&lt;imm&gt; cannot be represented by 0-255 and a rotation```\n(<https:\/\/developer.arm.com\/documentation\/100074\/0612\/assembler-errors-and-warnings\/list-of-the-armasm-error-and-warning-messages>)\n\nThis seems pretty lousy. I'd prefer something that's more \"correct by construction\", that's not one of these:\n\n```ADD Rd, Rn, 0xff, 4\nADD Rd, Rn, rotate_left(0xff, 4)```\n(I'm focusing on immediates just to simplify exposition. Making the second operand register-based opens up a larger can of worms.)\n\nTl;dr - There is nothing \"reduced\" about this RISC intruction set.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OI\/sM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016UDE58CF"
                            },
                            {
                                "type": "text",
                                "text": " I was careful to ask for a "
                            },
                            {
                                "type": "text",
                                "text": "notation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It's not really possible to make a general recommendation like this that works in all contexts. Imagine designing "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Salsa20"
                            },
                            {
                                "type": "text",
                                "text": " with pen and paper. I think having to write out "
                            },
                            {
                                "type": "text",
                                "text": "rotate_left",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " each time would hinder thought ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/358896.358899"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nIn this case the problem I'm working on is coming up with a reasonable representation of the ARM ISA. ARM binary operators all support one immediate operand that must fit in 12 bits. However the 12 bits are used in a strange way, starting with 8 bits and then using the remaining 4 to determine how to rotate it. The recommended \"universal assembly language\" for ARM is to just provide constants and let the toolchain give you errors like:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A1510E:Immediate 0x<imm> cannot be represented by 0-255 and a rotation"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.arm.com\/documentation\/100074\/0612\/assembler-errors-and-warnings\/list-of-the-armasm-error-and-warning-messages"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nThis seems pretty lousy. I'd prefer something that's more \"correct by construction\", that's not one of these:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ADD Rd, Rn, 0xff, 4\nADD Rd, Rn, rotate_left(0xff, 4)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n(I'm focusing on immediates just to simplify exposition. Making the second operand register-based opens up a larger can of worms.)\n\nTl;dr - There is nothing \"reduced\" about this RISC intruction set."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1606340892.132600",
        "client_msg_id": "25da73fb-75a3-4383-869e-5f380fd11b4c",
        "text": "In case anyone else ever is ever looking at this sort of problem. The good resources I was pointed to are: <https:\/\/en.wikipedia.org\/wiki\/Polygon_covering> ..Daff: <http:\/\/paulfitz.github.io\/daff\/> ... and <https:\/\/specs.frictionlessdata.io\/tabular-diff\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606273035.110500",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zpIpD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In case anyone else ever is ever looking at this sort of problem. The good resources I was pointed to are: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Polygon_covering"
                            },
                            {
                                "type": "text",
                                "text": " ..Daff: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/paulfitz.github.io\/daff\/"
                            },
                            {
                                "type": "text",
                                "text": " ... and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/specs.frictionlessdata.io\/tabular-diff\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD",
                    "UR482RFPY"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1606348796.132800",
        "client_msg_id": "f2c957ec-8ad8-467c-a114-09c2d1db53f8",
        "text": "You want a concise notation for a function that is naturally called `rotate(X,n)`. Suggestions:\n• n`⌽`X -- the APL rotate operator. APL was originally a mathematical notation, and was only later turned into a programming language.\n• n `&lt;|&gt;` X -- an ASCII approximation of the above.\n• n `rot` X -- yes, this is a notation, just as `sin x` is mathematical notation for the sine function.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mJ=uK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You want a concise notation for a function that is naturally called "
                            },
                            {
                                "type": "text",
                                "text": "rotate(X,n)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Suggestions:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "n"
                                    },
                                    {
                                        "type": "text",
                                        "text": "⌽",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "X -- the APL rotate operator. APL was originally a mathematical notation, and was only later turned into a programming language."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "n "
                                    },
                                    {
                                        "type": "text",
                                        "text": "<|>",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " X -- an ASCII approximation of the above."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "n "
                                    },
                                    {
                                        "type": "text",
                                        "text": "rot",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " X -- yes, this is a notation, just as "
                                    },
                                    {
                                        "type": "text",
                                        "text": "sin x",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is mathematical notation for the sine function."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U019CPED6T1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1606354193.133000",
        "client_msg_id": "a517ff17-d4ef-4d05-ae8a-4f6f7cc8e3d8",
        "text": "How about `n -o X` or `n o- X`. Think of that as a wheel with a tail. Or possibly `n o! X` or `n !o X`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v6o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How about "
                            },
                            {
                                "type": "text",
                                "text": "n -o X",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "n o- X",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Think of that as a wheel with a tail. Or possibly "
                            },
                            {
                                "type": "text",
                                "text": "n o! X",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "n !o X",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1606354526.133200",
        "client_msg_id": "ca369745-ace0-49aa-b78b-c2b8d2d63bc6",
        "text": "interesting, how's the polygon covering related? Is it more about the presentation of the diff than the diffing itself?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606273035.110500",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oah",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "interesting, how's the polygon covering related? Is it more about the presentation of the diff than the diffing itself?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1606355425.133500",
        "client_msg_id": "c97ffba5-c151-45ed-8516-cf766223da71",
        "text": "I wish daff had a brief description of the algorithm it uses. It seems highly concerned with \"finding alignment\" <https:\/\/github.com\/paulfitz\/daff\/blob\/master\/coopy\/CompareTable.hx>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606273035.110500",
        "parent_user_id": "UMVFWPZ36",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "paulfitz\/daff",
                "title_link": "https:\/\/github.com\/paulfitz\/daff\/blob\/master\/coopy\/CompareTable.hx",
                "text": "align and compare tables. Contribute to paulfitz\/daff development by creating an account on GitHub.",
                "fallback": "GitHub: paulfitz\/daff",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/118367?s=400&v=4",
                "from_url": "https:\/\/github.com\/paulfitz\/daff\/blob\/master\/coopy\/CompareTable.hx",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/paulfitz\/daff\/blob\/master\/coopy\/CompareTable.hx"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MoH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wish daff had a brief description of the algorithm it uses. It seems highly concerned with \"finding alignment\" "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/paulfitz\/daff\/blob\/master\/coopy\/CompareTable.hx"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606359276.136400",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1606359332.000000"
        },
        "client_msg_id": "ab3ccc48-2f4b-4667-a9e5-d0ec368b37cc",
        "text": "An old thread I wish I could link to:\n\n&gt; Consider the powerful, time-honored environment that gives us many “small programs, each doing one thing well”, the Unix shell. There is a `cut` command, a `sort` command, and many more. A versatile collection of blocks that I can snap together in different ways (yay pipes!). There isn’t much duplication of commands and the environment seems to have nice composition properties.\n&gt; \n&gt; But it only goes so far.\n&gt; \n&gt; If I write a program in Unix using Java or Python, can I reuse the Unix `sort` to sort an array of items inside my program? Of course not, what an improper question! The decent choice is to reimplement sorting in my program (or use the standard library where someone else has already re-implemented it).\n&gt; \n&gt; _The computer already knows how to sort things, why do I need to tell it again?_\n-- <@U8A5MS6R1> (<https:\/\/shalabh.com\/programmable-systems\/on-composition.html>)\n\nFrom the inventor of shells:\n\n&gt; I felt that commands should be usable as library subroutines, or vice versa. This stemmed from my practice of writing CTSS [OS] commands in MAD, a simplified Algol-like language. It was much faster and the code was more maintainable than IBM 7094 assembly code. Since I needed MAD-friendly subroutine calls to access CTSS primitives, I wrote in assembly code a battery of interface subroutines, which very often mimicked CTSS basic command functions. I felt it was an awkward duplication of effort. However, I did not go further in the context of CTSS.\n-- Louis Pouzin (<https:\/\/multicians.org\/shell.html>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606359276.136400",
        "reply_count": 44,
        "reply_users_count": 11,
        "latest_reply": "1606765647.174100",
        "reply_users": [
            "UN9SCH5RD",
            "U013ZLJARC7",
            "UJFN50C00",
            "USH01JEDQ",
            "U016VUZGUUQ",
            "UCUSW7WVD",
            "UA14TGLTC",
            "U8A5MS6R1",
            "UHWC9PXBL",
            "UMVFWPZ36",
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "UN9SCH5RD",
                "ts": "1606360485.136900"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606360847.137200"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1606381850.139000"
            },
            {
                "user": "UJFN50C00",
                "ts": "1606382408.139200"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606384342.139400"
            },
            {
                "user": "USH01JEDQ",
                "ts": "1606409837.150900"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1606428649.151500"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606435197.151700"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606435347.151900"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606435431.152100"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606435504.152300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606444940.153300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1606446003.153500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606446481.153700"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606446538.153900"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606446806.154100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1606446875.154300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606447004.154600"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1606464254.155100"
            },
            {
                "user": "UJFN50C00",
                "ts": "1606467048.155500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1606474471.156100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1606475174.156800"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606475727.157200"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1606485554.157500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1606492223.157900"
            },
            {
                "user": "USH01JEDQ",
                "ts": "1606495030.158700"
            },
            {
                "user": "UMVFWPZ36",
                "ts": "1606514948.159500"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606516076.159800"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606516816.160100"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1606522068.161000"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1606586289.165500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1606594264.166300"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606607135.166800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1606611089.167000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1606612182.167300"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1606620852.167600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1606631008.167900"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1606683105.168600"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606695749.168800"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1606733271.169400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1606761117.173300"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1606762390.173500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1606763676.173700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1606765647.174100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/eJD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An old thread I wish I could link to:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consider the powerful, time-honored environment that gives us many “small programs, each doing one thing well”, the Unix shell. There is a "
                            },
                            {
                                "type": "text",
                                "text": "cut",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " command, a "
                            },
                            {
                                "type": "text",
                                "text": "sort",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " command, and many more. A versatile collection of blocks that I can snap together in different ways (yay pipes!). There isn’t much duplication of commands and the environment seems to have nice composition properties.\n\nBut it only goes so far.\n\nIf I write a program in Unix using Java or Python, can I reuse the Unix "
                            },
                            {
                                "type": "text",
                                "text": "sort",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to sort an array of items inside my program? Of course not, what an improper question! The decent choice is to reimplement sorting in my program (or use the standard library where someone else has already re-implemented it).\n\n"
                            },
                            {
                                "type": "text",
                                "text": "The computer already knows how to sort things, why do I need to tell it again?",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n-- "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/shalabh.com\/programmable-systems\/on-composition.html"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nFrom the inventor of shells:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I felt that commands should be usable as library subroutines, or vice versa. This stemmed from my practice of writing CTSS [OS] commands in MAD, a simplified Algol-like language. It was much faster and the code was more maintainable than IBM 7094 assembly code. Since I needed MAD-friendly subroutine calls to access CTSS primitives, I wrote in assembly code a battery of interface subroutines, which very often mimicked CTSS basic command functions. I felt it was an awkward duplication of effort. However, I did not go further in the context of CTSS."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n-- Louis Pouzin ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/multicians.org\/shell.html"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U016VUZGUUQ",
                    "U8A5MS6R1",
                    "U015902ESJC",
                    "UJ6LDMMN0",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "UMVFWPZ36"
                ],
                "count": 7
            },
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1606360485.136900",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1606360529.000000"
        },
        "client_msg_id": "2f99aec2-d6f0-4c1e-ba4c-54469f4253f7",
        "text": "I've been thinking about this kind of plumbing a bit too. I recently wrote an HTTP service with an <https:\/\/gist.github.com\/EmmanuelOga\/8458a500645da511f10ad32fe8084367#sample-code-for-working-with-rdf|API expressed as mostly RPC operations>.\n\nI wanted to add a REPL so I used prompt-toolkit. But then it occurred to me I should also accept the repl commands as command line parameters. I also wanted to be able to trigger these RPC commands from VS Code.\n\nI think the answer is a machine readable spec and code generation. That would assist with:\n• Writing boilerplate server and client code\n• Generating a REPL and CLI parser\n• Calling the API from any other place (like a VS Code plugin!)\nWithout a spec, I would just have to write all these API clients by hand.\n\nsince I'm thinking RDF for this spec, it should be relatively easy to express composability: send the result of executing this command as input of this other command.\n\nMy use case is HTTP but seems like a specific case of IPC\n\nPerhaps I could bypass the REPL altogether by integrating deeply with my shell, providing completions, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606359276.136400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D23",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been thinking about this kind of plumbing a bit too. I recently wrote an HTTP service with an "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/EmmanuelOga\/8458a500645da511f10ad32fe8084367#sample-code-for-working-with-rdf",
                                "text": "API expressed as mostly RPC operations"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nI wanted to add a REPL so I used prompt-toolkit. But then it occurred to me I should also accept the repl commands as command line parameters. I also wanted to be able to trigger these RPC commands from VS Code.\n\nI think the answer is a machine readable spec and code generation. That would assist with:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Writing boilerplate server and client code"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Generating a REPL and CLI parser"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Calling the API from any other place (like a VS Code plugin!)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWithout a spec, I would just have to write all these API clients by hand.\n\nsince I'm thinking RDF for this spec, it should be relatively easy to express composability: send the result of executing this command as input of this other command.\n\nMy use case is HTTP but seems like a specific case of IPC\n\nPerhaps I could bypass the REPL altogether by integrating deeply with my shell, providing completions, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1606360847.137200",
        "client_msg_id": "fd69f8e2-ce7a-4764-a912-f6eff62c12bb",
        "text": "-- the tricky part is sharing binary data, I will probably wan to do it out of band since rdf is not great for binary, but that adds some complexity to the mix",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606359276.136400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZuuR3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "-- the tricky part is sharing binary data, I will probably wan to do it out of band since rdf is not great for binary, but that adds some complexity to the mix"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "those salsa diagrams look adorable :slightly_smiling_face:",
        "files": [
            {
                "id": "F01FD0Z7HKQ",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UN9SCH5RD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "66MG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "those salsa diagrams look adorable "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1606361032.137400",
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1606361125.137800",
        "client_msg_id": "2d9533ad-0cfd-430c-a6e9-1819a049308a",
        "text": "perhaps a more general solution would try to express subscript of any operator, say with some sort of underscore. Then you could subscript any operator. `&lt;&lt;&lt;_3` is the obvious thought",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ao+Kt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "perhaps a more general solution would try to express subscript of any operator, say with some sort of underscore. Then you could subscript any operator. "
                            },
                            {
                                "type": "text",
                                "text": "<<<_3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is the obvious thought"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1606361233.138000",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1606361295.000000"
        },
        "client_msg_id": "a3367579-f83e-4fcf-b0f1-a355ea4cf998",
        "text": "I know you ruled `&lt;&lt;&lt;` out before but since it seems like it used in all those famous papers, perhaps worth keeping. It is also easy to write and subscript with a pencil",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o\/WCP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know you ruled `<<<` out before but since it seems like it used in all those famous papers, perhaps worth keeping. It is also easy to write and subscript with a pencil"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606364482.138400",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1606364667.000000"
        },
        "client_msg_id": "face4bfb-19b0-4d50-93e5-77c0b994db3f",
        "text": "Indeed. When I wrote OP I'd heard of the use of `&lt;&lt;&lt;` for this purpose, but also that it used to have a `rot` on top of it. Which suffers from the obvious drawbacks.\n\nTo describe why `&lt;&lt;&lt;` still doesn't work, I need to expand the context from immediates to also include registers. The ARM instruction set can be summarized lossily in the following gestalt lines:\n\n```Rd &lt;- Rn op Rm\nRd &lt;- Rn op (imm8 &lt;|&gt; k)  # rotate until LSB is at bit k from the right; k must be even and in [0, 32)\nRd &lt;- Rn op (Rm &lt;&lt; imm5)\nRd &lt;- Rn op (Rm &gt;&gt; imm5)  # ASR\/signed\nRd &lt;- Rn op (Rm &gt;&gt;&gt; imm5)  # LSR\/unsigned\nRd &lt;- Rn op (Rm &lt;|&gt; k)  # rotate\nRd &lt;- Rn op (Rm c&gt;&gt; 1)  # shift right and insert carry flag```\n(So far my favorite option is <@UJN1TAYEQ>'s `&lt;|&gt;`. I've come to terms with its conflicting association with alternation in Haskell.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fcLPQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Indeed. When I wrote OP I'd heard of the use of "
                            },
                            {
                                "type": "text",
                                "text": "<<<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for this purpose, but also that it used to have a "
                            },
                            {
                                "type": "text",
                                "text": "rot",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on top of it. Which suffers from the obvious drawbacks.\n\nTo describe why "
                            },
                            {
                                "type": "text",
                                "text": "<<<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " still doesn't work, I need to expand the context from immediates to also include registers. The ARM instruction set can be summarized lossily in the following gestalt lines:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Rd <- Rn op Rm\nRd <- Rn op (imm8 <|> k)  # rotate until LSB is at bit k from the right; k must be even and in [0, 32)\nRd <- Rn op (Rm << imm5)\nRd <- Rn op (Rm >> imm5)  # ASR\/signed\nRd <- Rn op (Rm >>> imm5)  # LSR\/unsigned\nRd <- Rn op (Rm <|> k)  # rotate\nRd <- Rn op (Rm c>> 1)  # shift right and insert carry flag"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(So far my favorite option is "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": "'s "
                            },
                            {
                                "type": "text",
                                "text": "<|>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I've come to terms with its conflicting association with alternation in Haskell.)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]