[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1591776053.143400",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1591776078.000000"
        },
        "client_msg_id": "0d356eba-3ad4-4d6c-80bd-0e1043cd4cbb",
        "text": "sure! the code is on the repo, the only thing is that it has to be as self contained as possible to make it easy to export the same style. history\/index.html and history\/app.js on the gh-pages branch (you have to start a web server at the root of the repo, `python3 -m http.server` will do)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591605576.049500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BDl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "sure! the code is on the repo, the only thing is that it has to be as self contained as possible to make it easy to export the same style. history\/index.html and history\/app.js on the gh-pages branch (you have to start a web server at the root of the repo, "
                            },
                            {
                                "type": "text",
                                "text": "python3 -m http.server",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " will do)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6KQ2S410",
        "type": "message",
        "ts": "1591799855.144600",
        "client_msg_id": "232fc61f-b4bd-4c14-9f70-1d9493fc332c",
        "text": "<@UJBAJNFLK> Working in isolation is a recipe for depression and failure. I've been trying to bring the \"alternative programming\" community together for years with various workshops. It is like herding cats. My latest idea is that if we could agree on a set of challenge problems, we could at least establish some basis for communication, comparison, and feedback.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e8f4c2151d2b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-09\/225308926294_e8f4c2151d2b70ebfae3_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Edwards",
            "display_name": "jonathoda",
            "team": "T5TCAFTA9",
            "name": "jonathoda",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591463789.003800",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xod",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Working in isolation is a recipe for depression and failure. I've been trying to bring the \"alternative programming\" community together for years with various workshops. It is like herding cats. My latest idea is that if we could agree on a set of challenge problems, we could at least establish some basis for communication, comparison, and feedback."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "UA14TGLTC",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1591814467.145200",
        "client_msg_id": "d407db5f-6f5c-44ea-b135-512e8316235e",
        "text": "Along the lines of <@UE6EFEPTQ>’s mention of names, there is the famous <https:\/\/www.kalzumeus.com\/2010\/06\/17\/falsehoods-programmers-believe-about-names\/>, and many more categories of commonly-assumed falsehoods which were spawned from it (though not all cultural): <https:\/\/github.com\/kdeldycke\/awesome-falsehood>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591741456.139100",
        "parent_user_id": "UCXR52MU2",
        "attachments": [
            {
                "fallback": "kdeldycke\/awesome-falsehood",
                "text": ":scream: Falsehoods Programmers Believe in",
                "title": "kdeldycke\/awesome-falsehood",
                "footer": "<https:\/\/github.com\/kdeldycke\/awesome-falsehood|kdeldycke\/awesome-falsehood>",
                "id": 1,
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1473326027,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "11840",
                        "short": true
                    },
                    {
                        "title": "Last updated",
                        "value": "2 hours ago",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/kdeldycke\/awesome-falsehood",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RVTi0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Along the lines of "
                            },
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": "’s mention of names, there is the famous "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.kalzumeus.com\/2010\/06\/17\/falsehoods-programmers-believe-about-names\/"
                            },
                            {
                                "type": "text",
                                "text": ", and many more categories of commonly-assumed falsehoods which were spawned from it (though not all cultural): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/kdeldycke\/awesome-falsehood"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE6EFEPTQ",
                    "UC2A2ARPT",
                    "UA14TGLTC",
                    "UBSMEUXAA",
                    "UCXR52MU2"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1591818188.145600",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1591818328.000000"
        },
        "client_msg_id": "536af5e9-fe5b-4278-82ab-87b18a773fcf",
        "text": "I like sweet expressions - they are similar in spirit to my own Loyc Expression Syntax (<http:\/\/loyc.net\/les|loyc.net\/les>), and I see they've been enhanced since I last saw them (it was a very simple proposal originally). Are any major tutorials teaching a Lisp variant based on them?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tDFAa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like sweet expressions - they are similar in spirit to my own Loyc Expression Syntax ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/loyc.net\/les",
                                "text": "loyc.net\/les"
                            },
                            {
                                "type": "text",
                                "text": "), and I see they've been enhanced since I last saw them (it was a very simple proposal originally). Are any major tutorials teaching a Lisp variant based on them?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1591819129.146000",
        "client_msg_id": "bb2f8b57-c2cd-4360-8b94-e21b52b5ee56",
        "text": "z and t 'scrollbars' are often implemented by extra arrow buttons pointing left and right, or with a slider control.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589470005.387400",
        "parent_user_id": "USH01JEDQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wNB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "z and t 'scrollbars' are often implemented by extra arrow buttons pointing left and right, or with a slider control."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1591820377.146500",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1591821044.000000"
        },
        "client_msg_id": "887c1c0e-e771-4af1-a39a-3f191a851767",
        "text": "This issue was the driving force behind my earlier question about reactive calculations. I think most of the woes of state management and UI programming are for want of a good algorithm... (but also, most devs don't have a drive to build good foundations that make it easier to write the higher-level program.) <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1588994003263900>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590774956.270400",
        "parent_user_id": "U71PMQ1V0",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1588994003263900",
                "fallback": "[May 8th, 2020 8:13 PM] qwertie256: Is anyone aware of a programming language or library that efficiently solves the problem of incremental reactive recalculations involving collections? I'm a fan of libraries that support reactive updates, such as Assisticant, KnockoutJS, MobX, Vue.js and SwiftUI, but I don't know of one that contains the algorithm I want. I'll explain the problem by example. Suppose you have:\n\n1. an \"observable\" list of a million items, and you insert or remove an item somewhere in the list\n2. a filtered list based on the million items showing perhaps a thousand of the items\n3. a projection of the filtered list (map\/select)\nSo, when you insert or remove the item, the library should efficiently (and automatically!) propagate the change through the filtered list to the projected list. If the new or removed item is filtered out anyway, propagation should stop so the projected list is not notified of a change. Ideally, change notifications should be deferred in some way so that if several changes are made to the same list item in rapid succession, the derived items (2 and 3) would only be notified once.",
                "ts": "1588994003.263900",
                "author_id": "UD6EXQVM0",
                "author_subname": "David Piepgrass",
                "channel_id": "C5T9GPWFL",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Is anyone aware of a programming language or library that efficiently solves the problem of incremental reactive recalculations involving collections? I'm a fan of libraries that support reactive updates, such as Assisticant, KnockoutJS, MobX, Vue.js and SwiftUI, but I don't know of one that contains the algorithm I want. I'll explain the problem by example. Suppose you have:\n\n1. an \"observable\" list of a million items, and you insert or remove an item somewhere in the list\n2. a filtered list based on the million items showing perhaps a thousand of the items\n3. a projection of the filtered list (map\/select)\nSo, when you insert or remove the item, the library should efficiently (and automatically!) propagate the change through the filtered list to the projected list. If the new or removed item is filtered out anyway, propagation should stop so the projected list is not notified of a change. Ideally, change notifications should be deferred in some way so that if several changes are made to the same list item in rapid succession, the derived items (2 and 3) would only be notified once.",
                "author_name": "David Piepgrass",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UD6EXQVM0",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1588994003263900",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NTor",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This issue was the driving force behind my earlier question about reactive calculations. I think most of the woes of state management and UI programming are for want of a good algorithm... (but also, most devs don't have a drive to build good foundations that make it easier to write the higher-level program.) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1588994003263900"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1591820613.147200",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1591820800.000000"
        },
        "client_msg_id": "54963ec0-109d-450d-bb09-8f3f6e144cb6",
        "text": "I don't know how you can talk about the turing tar-pit without mentioning C++ template metaprogramming :stuck_out_tongue:... actually that's the whole problem with the article, a lack of examples to focus the discussion.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590222346.167400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MZs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know how you can talk about the turing tar-pit without mentioning C++ template metaprogramming "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": "... actually that's the whole problem with the article, a lack of examples to focus the discussion."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1591821961.148100",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1591822004.000000"
        },
        "client_msg_id": "0e9a7dbe-9a57-4e8e-a069-1f815adc1500",
        "text": "Think about how it's implemented. 64-bit integer\/pointer unions, right? If it's small, it's an integer, if it's big it's a pointer. Well, first off, .NET can't support that, but maybe you don't mind.  Anyway, the very fact that integers have variable size forces every \"add\" operation to become two checks for \"is this first operand a big int, or is this other operand a big int\" alongside each 64-bit add operation. It also precludes standard vectorization. Equality tests are trickier... if two 64-bit values are unequal, you have to then check whether they are pointers and if so, call an equality-testing function. Perhaps worst of all, every time an integer goes out of scope you have to check if integer memory has to be freed. This could be mitigated with alloca, but only for integers that are local to the function. What if a bigint is located inside a struct on the stack? It can't use the optimization unless it \"knows\" it is on the stack.\n\nDon't get me wrong, BigInt support is great, but in my career I've mostly written performance-critical code which I would usually design to avoid overflow reliably, rather than suffer the performance penalty of a BigInt.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CXsqB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Think about how it's implemented. 64-bit integer\/pointer unions, right? If it's small, it's an integer, if it's big it's a pointer. Well, first off, .NET can't support that, but maybe you don't mind.  Anyway, the very fact that integers have variable size forces every \"add\" operation to become two checks for \"is this first operand a big int, or is this other operand a big int\" alongside each 64-bit add operation. It also precludes standard vectorization. Equality tests are trickier... if two 64-bit values are unequal, you have to then check whether they are pointers and if so, call an equality-testing function. Perhaps worst of all, every time an integer goes out of scope you have to check if integer memory has to be freed. This could be mitigated with alloca, but only for integers that are local to the function. What if a bigint is located inside a struct on the stack? It can't use the optimization unless it \"knows\" it is on the stack.\n\nDon't get me wrong, BigInt support is great, but in my career I've mostly written performance-critical code which I would usually design to avoid overflow reliably, rather than suffer the performance penalty of a BigInt."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1591822779.148500",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1591822945.000000"
        },
        "client_msg_id": "6fc7b7b7-50e5-42e7-af76-e32d559031a6",
        "text": "There's been a ton of progress in the last 20 years... compare C#  to C# 8 (LINQ, tuples, decent functional programming features, null-pointer avoidance), or C++03 to C++20 (it still sucks, but an expert can pour the molasses much faster). And how about Go and Rust? Okay, Go still doesn't have generics, and I hear the Rust compiler is slow, but give it a few years... metaprogramming in D is much better than C++ ... the design could have been better, but, well, how about Nim?\n\nBottom line, I'm not actually happy with the current state of affairs, but it has improved a lot. Oh and I love both Visual Studio IDEs.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U\/P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's been a ton of progress in the last 20 years... compare C#  to C# 8 (LINQ, tuples, decent functional programming features, null-pointer avoidance), or C++03 to C++20 (it still sucks, but an expert can pour the molasses much faster). And how about Go and Rust? Okay, Go still doesn't have generics, and I hear the Rust compiler is slow, but give it a few years... metaprogramming in D is much better than C++ ... the design could have been better, but, well, how about Nim?\n\nBottom line, I'm not actually happy with the current state of affairs, but it has improved a lot. Oh and I love both Visual Studio IDEs."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1591823240.149400",
        "client_msg_id": "89288fa1-c1c5-4094-a2be-72e6332f4830",
        "text": "Yeah, there are lots of z\/t implementation - just seems like it would have been fun to make explicit \/ all 4-dimensions visible - at least during the visible scrollbar era",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589470005.387400",
        "parent_user_id": "USH01JEDQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9XB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, there are lots of z\/t implementation - just seems like it would have been fun to make explicit \/ all 4-dimensions visible - at least during the visible scrollbar era"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591839632.150000",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591839847.000000"
        },
        "client_msg_id": "fee8af71-dadb-479a-9b24-1c4efc085fe3",
        "text": "None of what you said is really relevant to me. I'm _designing_ a language, not using BigInts as a library feature. Accordingly, situations where you can \"avoid overflow reliably\" are amenable to static analysis. It seems like it should be easy to identify sequences of operations where integer size won't change substantially, and you can perform a single size check before entering such a block of code, then branch to either a 64-bit version or a BigInt version as necessary. And memory management is also a language\/runtime implementation issue which is going to have to be dealt with for general data structures either way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "doL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "None of what you said is really relevant to me. I'm "
                            },
                            {
                                "type": "text",
                                "text": "designing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a language, not using BigInts as a library feature. Accordingly, situations where you can \"avoid overflow reliably\" are amenable to static analysis. It seems like it should be easy to identify sequences of operations where integer size won't change substantially, and you can perform a single size check before entering such a block of code, then branch to either a 64-bit version or a BigInt version as necessary. And memory management is also a language\/runtime implementation issue which is going to have to be dealt with for general data structures either way."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1591857086.151100",
        "client_msg_id": "f1e3db7f-63b5-4ac6-9791-48ed3ede5d38",
        "text": "I'd like to see <@UPU0YJ1CM> on the podcast",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591741456.139100",
        "parent_user_id": "UCXR52MU2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fdR4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd like to see "
                            },
                            {
                                "type": "user",
                                "user_id": "UPU0YJ1CM"
                            },
                            {
                                "type": "text",
                                "text": " on the podcast"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "UCXR52MU2"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1591857139.151300",
        "client_msg_id": "14c2a3bf-2523-4b53-9a42-36544559db17",
        "text": "Dwayne Reeves at Facebook has done a lot of programming language work but I don't think it falls in FOC",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591741456.139100",
        "parent_user_id": "UCXR52MU2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9K8o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dwayne Reeves at Facebook has done a lot of programming language work but I don't think it falls in FOC"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UCXR52MU2"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1591857217.151500",
        "client_msg_id": "51feeb47-5275-4e39-b850-ede259e3cfd3",
        "text": "I've tried not to volunteer myself during all of this, but in this case I'd definitely be a guest and talk about game engines, visual programming in VR and graphics\/GPU programming",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591741456.139100",
        "parent_user_id": "UCXR52MU2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lZzW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've tried not to volunteer myself during all of this, but in this case I'd definitely be a guest and talk about game engines, visual programming in VR and graphics\/GPU programming"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "UCXR52MU2"
                ],
                "count": 2
            },
            {
                "name": "tada",
                "users": [
                    "UCXR52MU2"
                ],
                "count": 1
            }
        ]
    }
]