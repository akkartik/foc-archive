[
    {
        "text": "I added a new debug tool which shows how my system is traversing the entities in search of a “focusable” entity that will properly handle the “Arrow Down” exit event. The first video is with broken behavior, where it can’t find an entity that can handle “focus” and the second video shows correct behavior.",
        "files": [
            {
                "id": "F088Y5PK0B0",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F0894M8MJCB",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UFPPABQ7P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CsUg1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I added a new debug tool which shows how my system is traversing the entities in search of a “focusable” entity that will properly handle the “Arrow Down” exit event. The first video is with broken behavior, where it can’t find an entity that can handle “focus” and the second video shows correct behavior."
                            }
                        ]
                    }
                ]
            }
        ],
        "subtype": "thread_broadcast",
        "root": {
            "text": "I’m working on a new way of writing “dense” UI inspired by MVVM + ECS, and this is the debugger for the “View Model Components” (VMCs?) in the UI\nThe problem I’m usually facing with my apps is that we aim to pack many many features into small areas (for example: context menus, keyboard shortcuts, focus management, spatial navigation, version control diff presentation, multiplayer user presence, and _then_ the parts that are unique to your app).\nMy goal in managing this complexity is to be able to write each individual part of the application in its own single file. All things related to “module” editing, diffing, keyboard shortcuts, spatial navigation, CRDT sync, etc should be in a single file. Then, each shared behavior’s logic are implemented in their own single files. This is what is best as well for LLMs to understand and build out features without needing to understand everything all at once.\nHere, I’ve taken a video of just the “debugger” I developed in the last two days to observe the state of all these components for each item in the world.",
            "files": [
                {
                    "id": "F088B41P5QC",
                    "mode": "hidden_by_limit"
                }
            ],
            "upload": false,
            "user": "UFPPABQ7P",
            "display_as_bot": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "XYhn5",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "I’m working on a new way of writing “dense” UI inspired by MVVM + ECS, and this is the debugger for the “View Model Components” (VMCs?) in the UI\nThe problem I’m usually facing with my apps is that we aim to pack many many features into small areas (for example: context menus, keyboard shortcuts, focus management, spatial navigation, version control diff presentation, multiplayer user presence, and "
                                },
                                {
                                    "type": "text",
                                    "text": "then",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " the parts that are unique to your app).\nMy goal in managing this complexity is to be able to write each individual part of the application in its own single file. All things related to “module” editing, diffing, keyboard shortcuts, spatial navigation, CRDT sync, etc should be in a single file. Then, each shared behavior’s logic are implemented in their own single files. This is what is best as well for LLMs to understand and build out features without needing to understand everything all at once.\nHere, I’ve taken a video of just the “debugger” I developed in the last two days to observe the state of all these components for each item in the world."
                                }
                            ]
                        }
                    ]
                }
            ],
            "type": "message",
            "ts": "1736600042.219749",
            "client_msg_id": "72703a82-a0f3-48e8-bbca-741eef7b3803",
            "thread_ts": "1736600042.219749",
            "reply_count": 5,
            "reply_users_count": 3,
            "latest_reply": "1737129593.258739",
            "reply_users": [
                "UFPPABQ7P",
                "UBN9AFS0N",
                "UE1JQM9HQ"
            ],
            "replies": [
                {
                    "user": "UFPPABQ7P",
                    "ts": "1736600168.792409"
                },
                {
                    "user": "UBN9AFS0N",
                    "ts": "1736603791.309209"
                },
                {
                    "user": "UFPPABQ7P",
                    "ts": "1736619961.092209"
                },
                {
                    "user": "UFPPABQ7P",
                    "ts": "1737119002.709709"
                },
                {
                    "user": "UE1JQM9HQ",
                    "ts": "1737129593.258739"
                }
            ],
            "is_locked": false,
            "subscribed": false
        },
        "type": "message",
        "ts": "1737119002.709709",
        "client_msg_id": "70b7c286-1c60-4e0c-ae0f-08d0562bd69e",
        "thread_ts": "1736600042.219749",
        "parent_user_id": "UFPPABQ7P",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UMV4B97GT",
                    "U0296ACR13M"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1737129593.258739",
        "client_msg_id": "8601D28F-A898-4FF4-B623-B11666A7D862",
        "text": "Custom debuggers for the win :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736600042.219749",
        "parent_user_id": "UFPPABQ7P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZrI2h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Custom debuggers for the win :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U07BD7U4S4R"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1737142456.544329",
        "edited": {
            "user": "U0887QU9G2V",
            "ts": "1737142464.000000"
        },
        "client_msg_id": "e69dcd7a-3651-4bb9-91fe-2fa133318ca4",
        "text": "<@U05PY5AQCA2> interesting stuff!\n\n>  - Every piece of data has an address, but what you see at that address depends on who you are\n> - Everything you see always has a useful, relational, searchable UI\n> - Security isn't a bolt-on feature but emerges naturally from how things compose\n> - Functions are just relations waiting to be filled in\n> - Everything is a query, and every query can be changed\nI am actually building in a similar direction. It won't be relational at the core, but relations can be built.\n\nExcited to see what comes out of your work!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737056955.154089",
        "parent_user_id": "U05PY5AQCA2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q1+Ey",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05PY5AQCA2"
                            },
                            {
                                "type": "text",
                                "text": " interesting stuff!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " - Every piece of data has an address, but what you see at that address depends on who you are\n- Everything you see always has a useful, relational, searchable UI\n- Security isn't a bolt-on feature but emerges naturally from how things compose\n- Functions are just relations waiting to be filled in\n- Everything is a query, and every query can be changed"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI am actually building in a similar direction. It won't be relational at the core, but relations can be built.\n\nExcited to see what comes out of your work!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1737159118.934529",
        "client_msg_id": "e462c5cf-c93a-454f-a376-93178f64b5ea",
        "text": "I like the manifesto overall, but this part makes me a little nervous: \n\n&gt; Every piece of data has an address, but what you see at that address depends on who you are\n&gt; \nIf there's code running checks on my identity before returning the \"data\" at that address, I'm uncomfortable calling it \"data\". There's necessarily conditional code involved, which is as close to a hard distinction between \"data\" and \"code\" as you're likely to get. Meanwhile, the possible variants returned from that address don't themselves have separate addresses, so it's hard to say that \"everything\" has an address.\n\nI think I know what you're going for and generally don't hate it (I have vaguely similar ideas), so maybe this is just a nitpicky request to be more careful about terminology. I feel it's fine if you just say something like all state is in a database, that can present different views to different principals if needed. And within each principal's view, everything they can access has an address.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737056955.154089",
        "parent_user_id": "U05PY5AQCA2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V15gj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like the manifesto overall, but this part makes me a little nervous: \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Every piece of data has an address, but what you see at that address depends on who you are\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIf there's code running checks on my identity before returning the \"data\" at that address, I'm uncomfortable calling it \"data\". There's necessarily conditional code involved, which is as close to a hard distinction between \"data\" and \"code\" as you're likely to get. Meanwhile, the possible variants returned from that address don't themselves have separate addresses, so it's hard to say that \"everything\" has an address.\n\nI think I know what you're going for and generally don't hate it (I have vaguely similar ideas), so maybe this is just a nitpicky request to be more careful about terminology. I feel it's fine if you just say something like all state is in a database, that can present different views to different principals if needed. And within each principal's view, everything they can access has an address."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1737167516.113399",
        "client_msg_id": "85311828-B55C-4D8F-A469-57C9D4B7348F",
        "text": "It’s a simple and pragmatic idea: pervasive application of Row Level Security.\n\nOne of the main ideas is that any user of the system should be able to filter or change any input to any function that led to anything they have access to, and get a useful thing that way.\n\nSo if you are looking at a dashboard showing the sales in California with various charts and tables, you’ll be able to inspect a call graph of what functions were called with what values, and depending on your permissions, you can override any of the functions or values. Anything from changing the font to changing the chart drawing function. Or pull out the data and do something completely different with it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3ecb3076c7b0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-29\/5820723719363_3ecb3076c7b047d665ea_72.jpg",
            "first_name": "Guyren",
            "real_name": "Guyren Howe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "guyren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737056955.154089",
        "parent_user_id": "U05PY5AQCA2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hp\/rU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s a simple and pragmatic idea: pervasive application of Row Level Security.\n\nOne of the main ideas is that any user of the system should be able to filter or change any input to any function that led to anything they have access to, and get a useful thing that way.\n\nSo if you are looking at a dashboard showing the sales in California with various charts and tables, you’ll be able to inspect a call graph of what functions were called with what values, and depending on your permissions, you can override any of the functions or values. Anything from changing the font to changing the chart drawing function. Or pull out the data and do something completely different with it."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]