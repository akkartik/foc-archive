[
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1700405882.617679",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1700406020.000000"
        },
        "client_msg_id": "7693E344-6CE8-4913-AA0D-AE5714878F07",
        "text": "I built a Magic Inky interface at work a while back. A metadata editor that presented as a nested bulleted list of English sentences with clickable words, like:\n\n“From [time T1] to [time T2], an [event type] happens with [property P], and it’s very [adjective].”\n\nThe event descriptions are highly multi-dimensional and resonate well with this information design, though the timestamps suffer a bit. They want to be on a timeline, but I didn’t have the budget. Despite this, the UI has saved us loads of time and people _love_ the sentence-based configuration compared to the forty-column table of dropdowns they envisioned when I started the project.\n\nThe biggest failure was that enforcing a few global constraints was _also_ outside my budget. Lacking those has led to data loss—never more than a few minute’s worth, but still. I felt bad. Thankfully, someone else recently picked up the project and will be correcting those omissions.\n\nBut we disagreed immediately on how to do it! I thought we should _present_ the errors: “These events overlap!” The other person thought we should make the errors impossible: when you edit a timestamp, you implicitly edit all the others that are involved in the constraint.\n\nI generally agree with their approach. I mean, it’s baked into the rest of the UI. When you change an event type, it changes the rest of the sentence. But if you change the type back, the sentence structure is restored and your previous values all come back. Cascading edits are more destructive than that. They force you to be careful about what you change and to be observant of unintended side-effects.\n\nThe block editor problem of representing invalid states is another way to look at it. Sometimes the most efficient path between two valid states passes through an invalid one. If you want to reorder two events, for example, a first step might be to copy the start and end times from one to the other, as part of an “a = b; b = oldA” sequence. They overlap until you’re done. To do the same without ever breaking global constraints requires user ingenuity or a more featureful editor with a “swap events” button. Requiring user ingenuity wastes a lot of time and energy and happiness over the lifetime of the UI, but observing users and adding features to address every desired editing operation takes a lot of dev time too, and it has to happen _now_, or else people editing this data will be blocked whenever they find an impossible edit.\n\nAnyway, not too many answers here, but I thought it was an interesting case study, with thought-provoking _questions_ at least!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700405882.617679",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1700453584.358159",
        "reply_users": [
            "UCUSW7WVD",
            "UBKNXPBAB"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1700409466.535389"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1700453584.358159"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ov5o1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I built a Magic Inky interface at work a while back. A metadata editor that presented as a nested bulleted list of English sentences with clickable words, like:\n\n“From [time T1] to [time T2], an [event type] happens with [property P], and it’s very [adjective].”\n\nThe event descriptions are highly multi-dimensional and resonate well with this information design, though the timestamps suffer a bit. They want to be on a timeline, but I didn’t have the budget. Despite this, the UI has saved us loads of time and people "
                            },
                            {
                                "type": "text",
                                "text": "love",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " the sentence-based configuration compared to the forty-column table of dropdowns they envisioned when I started the project.\n\nThe biggest failure was that enforcing a few global constraints was "
                            },
                            {
                                "type": "text",
                                "text": "also",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " outside my budget. Lacking those has led to data loss—never more than a few minute’s worth, but still. I felt bad. Thankfully, someone else recently picked up the project and will be correcting those omissions.\n\nBut we disagreed immediately on how to do it! I thought we should "
                            },
                            {
                                "type": "text",
                                "text": "present",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " the errors: “These events overlap!” The other person thought we should make the errors impossible: when you edit a timestamp, you implicitly edit all the others that are involved in the constraint.\n\nI generally agree with their approach. I mean, it’s baked into the rest of the UI. When you change an event type, it changes the rest of the sentence. But if you change the type back, the sentence structure is restored and your previous values all come back. Cascading edits are more destructive than that. They force you to be careful about what you change and to be observant of unintended side-effects.\n\nThe block editor problem of representing invalid states is another way to look at it. Sometimes the most efficient path between two valid states passes through an invalid one. If you want to reorder two events, for example, a first step might be to copy the start and end times from one to the other, as part of an “a = b; b = oldA” sequence. They overlap until you’re done. To do the same without ever breaking global constraints requires user ingenuity or a more featureful editor with a “swap events” button. Requiring user ingenuity wastes a lot of time and energy and happiness over the lifetime of the UI, but observing users and adding features to address every desired editing operation takes a lot of dev time too, and it has to happen "
                            },
                            {
                                "type": "text",
                                "text": "now",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ", or else people editing this data will be blocked whenever they find an impossible edit.\n\nAnyway, not too many answers here, but I thought it was an interesting case study, with thought-provoking "
                            },
                            {
                                "type": "text",
                                "text": "questions",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " at least!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "amiga-tick",
                "users": [
                    "UC2A2ARPT",
                    "U04QB9V2RNG",
                    "UFV8P4472"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UFV8P4472"
                ],
                "count": 2
            },
            {
                "name": "thinking_face",
                "users": [
                    "UNCP67JSK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1700409466.535389",
        "client_msg_id": "3f4a0af4-26ec-4fcd-b3f2-eec55e9988c2",
        "text": "My bias is fewer smarts. Like you said, it sucks when one change changes many things. You can mitigate it with undo (which would then be essential), but even so things can change outside your field of view. You now need to be able to visualize everything that changed. There's seldom the budget for that, and probably for the best; I'm sure it'll lead to new problems.\n\nAnother reason to prefer lower smarts: Often there are multiple ways to propagate a change to satisfy the constraints. Which one should you choose?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700405882.617679",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AGBEd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My bias is fewer smarts. Like you said, it sucks when one change changes many things. You can mitigate it with undo (which would then be essential), but even so things can change outside your field of view. You now need to be able to visualize everything that changed. There's seldom the budget for that, and probably for the best; I'm sure it'll lead to new problems.\n\nAnother reason to prefer lower smarts: Often there are multiple ways to propagate a change to satisfy the constraints. Which one should you choose?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U04QB9V2RNG",
                    "UFV8P4472",
                    "UFEQUBNNT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1700418506.013839",
        "client_msg_id": "4d454e90-c683-46a5-9d05-a969c3c3a073",
        "text": "An idea is starting to form for me around prototype-based modeling being a good metaphor for programming effectively with LLMs. Essentially you can provide an example of a patttern\/component\/class\/etc and have it return a version of it modified in specific ways, which can then be used as a prototype for future generations\/instantiations.\n\nA version of this idea can be seen here with tldraw: <https:\/\/twitter.com\/mrmkrs\/status\/1725959207365583196> where he generates the next more specific interface step off the previous one.\n\nAnother I'm kind of using this in my agent framework: <https:\/\/github.com\/sublayerapp\/sublayer\/blob\/main\/lib\/sublayer\/agents\/generate_sublayer_agent_agent.rb> where we generate new agents based off a simple agent template (and works surprisingly well).\n\nI know Hofstatder digs into this concept in GEB and Steve Yegge calls it the <https:\/\/steve-yegge.blogspot.com\/2008\/10\/universal-design-pattern.html|Universal Design Pattern>\n\nDoes this resonate with anyone here? Is anyone familiar with any other writing about prototype-based modeling\/prototypal inheritance\/etc for me to take this further?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700418506.013839",
        "reply_count": 13,
        "reply_users_count": 4,
        "latest_reply": "1700786059.773169",
        "reply_users": [
            "U03R0B9U1GD",
            "U05GSC0B4A0",
            "U0669J3HJJJ",
            "U03DNFDFYDA"
        ],
        "replies": [
            {
                "user": "U03R0B9U1GD",
                "ts": "1700422759.471269"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1700422818.125879"
            },
            {
                "user": "U05GSC0B4A0",
                "ts": "1700423826.605879"
            },
            {
                "user": "U05GSC0B4A0",
                "ts": "1700423863.114309"
            },
            {
                "user": "U05GSC0B4A0",
                "ts": "1700423981.304209"
            },
            {
                "user": "U0669J3HJJJ",
                "ts": "1700468049.035309"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1700785480.453439"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1700785526.005529"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1700785584.761839"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1700785670.344149"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1700785745.674799"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1700785908.541329"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1700786059.773169"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q+Ube",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An idea is starting to form for me around prototype-based modeling being a good metaphor for programming effectively with LLMs. Essentially you can provide an example of a patttern\/component\/class\/etc and have it return a version of it modified in specific ways, which can then be used as a prototype for future generations\/instantiations.\n\nA version of this idea can be seen here with tldraw: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/mrmkrs\/status\/1725959207365583196"
                            },
                            {
                                "type": "text",
                                "text": " where he generates the next more specific interface step off the previous one.\n\nAnother I'm kind of using this in my agent framework: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/sublayerapp\/sublayer\/blob\/main\/lib\/sublayer\/agents\/generate_sublayer_agent_agent.rb"
                            },
                            {
                                "type": "text",
                                "text": " where we generate new agents based off a simple agent template (and works surprisingly well).\n\nI know Hofstatder digs into this concept in GEB and Steve Yegge calls it the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/steve-yegge.blogspot.com\/2008\/10\/universal-design-pattern.html",
                                "text": "Universal Design Pattern"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDoes this resonate with anyone here? Is anyone familiar with any other writing about prototype-based modeling\/prototypal inheritance\/etc for me to take this further?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEQ7QL15F"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03R0B9U1GD",
        "type": "message",
        "ts": "1700422759.471269",
        "client_msg_id": "ceb3f265-1a36-4dcb-a051-adf3a8bf7658",
        "text": "Hey I built the tldraw \"make real\" thing! Making that 'game loop' was the thing I added to Sawyer Hood's original version. I thought it was really important to have this 'back-and-forth' going on, like you can get with chatgpt.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "78c476adad42",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-26\/3992499177765_78c476adad42ab6cfe32_72.png",
            "first_name": "Lu",
            "real_name": "Lu Wilson",
            "display_name": "TodePond",
            "team": "T5TCAFTA9",
            "name": "l2wilson94",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700418506.013839",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9\/Es1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey I built the tldraw \"make real\" thing! Making that 'game loop' was the thing I added to Sawyer Hood's original version. I thought it was really important to have this 'back-and-forth' going on, like you can get with chatgpt."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "UFV8P4472",
                    "U066Q47F19A"
                ],
                "count": 2
            },
            {
                "name": "clap",
                "users": [
                    "UFV8P4472",
                    "UEQ7QL15F"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03R0B9U1GD",
        "type": "message",
        "ts": "1700422818.125879",
        "edited": {
            "user": "U03R0B9U1GD",
            "ts": "1700423862.000000"
        },
        "client_msg_id": "aa32d6d7-4e7e-4aac-916e-973cee8de4a7",
        "text": "It's been interesting seeing alternatives pop up this week, which sometimes miss that as the important part. eg: In Figma's version, you can't annotate the generated html",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "78c476adad42",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-26\/3992499177765_78c476adad42ab6cfe32_72.png",
            "first_name": "Lu",
            "real_name": "Lu Wilson",
            "display_name": "TodePond",
            "team": "T5TCAFTA9",
            "name": "l2wilson94",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700418506.013839",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sJH++",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's been interesting seeing alternatives pop up this week, which sometimes miss that as the important part. eg: In Figma's version, you can't annotate the generated html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1700423826.605879",
        "client_msg_id": "59C421D3-9A0D-4FE8-ACEF-073A4B065306",
        "text": "Ahh awesome! Yeah the make real thing is amazing, my mind has been racing since I’ve seen it. Great job!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700418506.013839",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hs30P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ahh awesome! Yeah the make real thing is amazing, my mind has been racing since "
                            },
                            {
                                "type": "text",
                                "text": "I’ve"
                            },
                            {
                                "type": "text",
                                "text": " seen it. Great job!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1700423863.114309",
        "client_msg_id": "D9FAE2EE-78F5-4009-8F5A-DC0427C64134",
        "text": "But yeah, being able to annotate and generate and regenerate is definitely a key",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700418506.013839",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2k2hw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But yeah, being able to annotate and generate and regenerate is definitely a key"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1700423981.304209",
        "client_msg_id": "CD3E36E2-C159-4AAA-A5CE-B23B0BB836CE",
        "text": "Like we’re doing with the agents (in a purely code way) - we can then customize a generated agent and use that as a template for a future one (in a pre-release version we had one that returned a list of command line commands to then be run on the local machine)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700418506.013839",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iy485",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like we’re doing with the agents (in a purely code way) - we can then customize a generated agent and use that as a template for a future one (in a pre-release version we had one that returned a list of command line commands to then be run on the local machine)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1700453584.358159",
        "client_msg_id": "7e8f3e02-210b-4d6b-8766-b85c7fa598f8",
        "text": "Not sure if this is related, but I’ve recently noticed how disabled (greyed out, non-interactive) interface elements can be frustrating. If you put something invalid into a form, you usually get an error message which explains what was wrong. But there’s no similar convention by which disabled interface element explain WHY they’re disabled. The user sits in front of a mysterious, taunting disabled interface element, wondering why they can’t use it.\n\nIn other words: I’d rather get consistent options for interaction with fast feedback if there are problems than work with an interface that limits my interactions in unexplained ways.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700405882.617679",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0c\/KI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if this is related, but I’ve recently noticed how disabled (greyed out, non-interactive) interface elements can be frustrating. If you put something invalid into a form, you usually get an error message which explains what was wrong. But there’s no similar convention by which disabled interface element explain WHY they’re disabled. The user sits in front of a mysterious, taunting disabled interface element, wondering why they can’t use it.\n\nIn other words: I’d rather get consistent options for interaction with fast feedback if there are problems than work with an interface that limits my interactions in unexplained ways."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U04QB9V2RNG",
                    "UFV8P4472",
                    "UJBAJNFLK"
                ],
                "count": 4
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    }
]