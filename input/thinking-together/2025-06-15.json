[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1749973893.198729",
        "client_msg_id": "2ea13850-cbd8-4e77-8a9c-5d1ad17a80df",
        "text": "Threat model, or perhaps better risk model, is indeed a good keyword here. To keep in mind for my dependency evaluation sheet.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BJ494",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Threat model, or perhaps better risk model, is indeed a good keyword here. To keep in mind for my dependency evaluation sheet."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1750013309.731909",
        "client_msg_id": "3bc31b6c-d8e2-43c5-a21d-069f81a6c9f2",
        "text": "I created a document <https:\/\/github.com\/SCP-Solution-Centric-Programming\/SCP|repo on github> and a channel on <https:\/\/discord.gg\/65YZUh6Jpq|discord programming simplicity> for anyone interested in discussing and adding ideas...\n\n<https:\/\/programmingsimplicity.substack.com\/p\/solution-centric-programming?r=1egdky|from a substack article, brainstorming SCP>\nWe explored how this principle led us from single-machine programming to **Solution Centric Programming** (SCP), which treats hundreds of small computing devices (Arduinos, sensors, actuators) as **new atomic operations** for automating specific problems, requiring **new recipe techniques** for combining them. Unlike traditional programming that forces all code through one paradigm, SCP enables **computational diversity** by letting each distributed node use the most appropriate programming paradigm (Forth for real-time control, Prolog for logic, FP for data processing, OOP for state management) as specialized atomic operations, while connecting them through pure data flow rather than restrictive function calls that impose control flow protocols. The key architectural insight is **Solution Centric Program Choreography** - a hierarchical tree structure where parent nodes contain the recipe logic for coordinating child atomic operations, eliminating peer-to-peer coupling that destroys scalability. This creates a new abstraction layer where solutions are choreographed through structured data flow between specialized atomic operations, each autonomous in their execution but coordinated through hierarchical recipes rather than lateral negotiation - representing the next evolutionary step in programming's fundamental cycle of creating atoms and recipes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/discord.gg\/65YZUh6Jpq",
                "id": 1,
                "original_url": "https:\/\/discord.gg\/65YZUh6Jpq",
                "fallback": "Discord: Join the programming simplicity Discord Server!",
                "text": "Check out the programming simplicity community on Discord - hang out with 25 other members and enjoy free voice and text chat.",
                "title": "Join the programming simplicity Discord Server!",
                "title_link": "https:\/\/discord.gg\/65YZUh6Jpq",
                "service_name": "Discord"
            },
            {
                "from_url": "https:\/\/programmingsimplicity.substack.com\/p\/solution-centric-programming?r=1egdky",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9bf28261-3dbc-4931-99f3-57bb47beeb02%2Fapple-touch-icon-57x57.png",
                "thumb_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d69eba9-d5d3-4387-a046-9b881b00bd45_131x131.png",
                "thumb_width": 131,
                "thumb_height": 131,
                "id": 2,
                "original_url": "https:\/\/programmingsimplicity.substack.com\/p\/solution-centric-programming?r=1egdky",
                "fallback": "Solution Centric Programming",
                "text": "2025-06-12",
                "title": "Solution Centric Programming",
                "title_link": "https:\/\/programmingsimplicity.substack.com\/p\/solution-centric-programming?r=1egdky",
                "service_name": "programmingsimplicity.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3HJLB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I created a document "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/SCP-Solution-Centric-Programming\/SCP",
                                "text": "repo on github"
                            },
                            {
                                "type": "text",
                                "text": " and a channel on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/discord.gg\/65YZUh6Jpq",
                                "text": "discord programming simplicity"
                            },
                            {
                                "type": "text",
                                "text": " for anyone interested in discussing and adding ideas...\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/programmingsimplicity.substack.com\/p\/solution-centric-programming?r=1egdky",
                                "text": "from a substack article, brainstorming SCP"
                            },
                            {
                                "type": "text",
                                "text": "\nWe explored how this principle led us from single-machine programming to *"
                            },
                            {
                                "type": "text",
                                "text": "Solution Centric Programming",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "* (SCP), which treats hundreds of small computing devices (Arduinos, sensors, actuators) as *"
                            },
                            {
                                "type": "text",
                                "text": "new atomic operations",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "* for automating specific problems, requiring *"
                            },
                            {
                                "type": "text",
                                "text": "new recipe techniques",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "* for combining them. Unlike traditional programming that forces all code through one paradigm, SCP enables *"
                            },
                            {
                                "type": "text",
                                "text": "computational diversity",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "* by letting each distributed node use the most appropriate programming paradigm (Forth for real-time control, Prolog for logic, FP for data processing, OOP for state management) as specialized atomic operations, while connecting them through pure data flow rather than restrictive function calls that impose control flow protocols. The key architectural insight is *"
                            },
                            {
                                "type": "text",
                                "text": "Solution Centric Program Choreography",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "* - a hierarchical tree structure where parent nodes contain the recipe logic for coordinating child atomic operations, eliminating peer-to-peer coupling that destroys scalability. This creates a new abstraction layer where solutions are choreographed through structured data flow between specialized atomic operations, each autonomous in their execution but coordinated through hierarchical recipes rather than lateral negotiation - representing the next evolutionary step in programming's fundamental cycle of creating atoms and recipes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1750020760.348359",
        "client_msg_id": "2b7db28f-c9df-4eaf-a661-9ce40db7f1f8",
        "text": "Weakly held, very strongly stated, for your consideration: There are no dependencies between software components of note that are not also dependencies between people. Taken in that context, the idea that those people should be obliged to continue doing what they have done before because they did it ever, and\/or the idea that the risk that they might change their behaviour justifies _interacting with as few people as possible_, is absurdly isolationist, and categorically self-defeating. Avoiding software dependencies (dependencies on _people_ who write and maintain that code, OS, language, etc.) because they might disappoint you discards the greatest advantages of being social animals and is so rarely seen because it is a fundamentally unsustainable approach that will always be outpaced by maximizing cooperation. If you find yourself, e.g., so frustrated by version changes that you would rather not use Python at all, that is a maladaptive trait borne either of (deeply privileged) ideology, or a sort of neuro-divergence. It is also inherently self-contradicting except for single-user software or software in an unchanging environment, because if by virtue of avoiding dependencies you create something that is meaningfully better, and share it, you have created the next dependency that other people should, by the same logic, avoid.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rk+Hp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Weakly held, very strongly stated, for your consideration: There are no dependencies between software components of note that are not also dependencies between people. Taken in that context, the idea that those people should be obliged to continue doing what they have done before because they did it ever, and\/or the idea that the risk that they might change their behaviour justifies "
                            },
                            {
                                "type": "text",
                                "text": "interacting with as few people as possible",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", is absurdly isolationist, and categorically self-defeating. Avoiding software dependencies (dependencies on "
                            },
                            {
                                "type": "text",
                                "text": "people",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " who write and maintain that code, OS, language, etc.) because they might disappoint you discards the greatest advantages of being social animals and is so rarely seen because it is a fundamentally unsustainable approach that will always be outpaced by maximizing cooperation. If you find yourself, e.g., so frustrated by version changes that you would rather not use Python at all, that is a maladaptive trait borne either of (deeply privileged) ideology, or a sort of neuro-divergence. It is also inherently self-contradicting except for single-user software or software in an unchanging environment, because if by virtue of avoiding dependencies you create something that is meaningfully better, and share it, you have created the next dependency that other people should, by the same logic, avoid."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UML4ZEKDK",
                    "UJBAJNFLK"
                ],
                "count": 3
            },
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1750038535.773739",
        "client_msg_id": "bc666d36-d099-4789-96fc-9ddcb254ef9f",
        "text": "<@U02U0AS3J49> That is so far from my belief system that I'm torn between asking a bunch of staccato clarifying questions and speculatively trying to take aim at potential root causes of the divergence. Breadth-first or depth-first? The narrowness of the communication channel has seldom felt so stifling. Let me try depth-first.\n\nI don't think depending on 1 package == connecting with a single person or even a single team\/project.\nI don't think minimizing dependencies in the technical sense == minimizing the number of connections with people.\n\nThe basic problem I see is that in code a single bad line in a computer can destroy the good intentions of a million people. So all software becomes primarily this act of curation. The curator has enormous power\/responsibility. So as a shorthand I focus on the top-level curator and ignore the people whose life\/work is being curated, who are also all curating in their own right at all levels of the curation tree. The top-level curator has to be extremely coherent. Either a single person or a single point of certification by a larger team that makes atomic go\/no-go decisions.\n\nDoes this seem like new information at all, or do I seem to just be repeating myself?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zsrsx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02U0AS3J49"
                            },
                            {
                                "type": "text",
                                "text": " That is so far from my belief system that I'm torn between asking a bunch of staccato clarifying questions and speculatively trying to take aim at potential root causes of the divergence. Breadth-first or depth-first? The narrowness of the communication channel has seldom felt so stifling. Let me try depth-first.\n\nI don't think depending on 1 package == connecting with a single person or even a single team\/project.\nI don't think minimizing dependencies in the technical sense == minimizing the number of connections with people.\n\nThe basic problem I see is that in code a single bad line in a computer can destroy the good intentions of a million people. So all software becomes primarily this act of curation. The curator has enormous power\/responsibility. So as a shorthand I focus on the top-level curator and ignore the people whose life\/work is being curated, who are also all curating in their own right at all levels of the curation tree. The top-level curator has to be extremely coherent. Either a single person or a single point of certification by a larger team that makes atomic go\/no-go decisions.\n\nDoes this seem like new information at all, or do I seem to just be repeating myself?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1750042120.221519",
        "client_msg_id": "c96a9d03-7805-4af4-9a95-1b94b3d30668",
        "text": "My thoughts on the matter are shallow, so don't expect any big fish. I understood your second paragraph to be asserting the analogy is poor, and your third to be attempting to show why, but I don't understand the third paragraph at all, so I don't know if you are repeating yourself or not. For just one example, it seems self-evident to me that not all software is an act of curation. Curation is careful selection. Most software is built with what's lying about. I don't know who the top-level curator is, or where all these powers, responsibilities, and duties of coherence come from. Also, I'm not sure it's an analogy, so much as a reframing. A dependency does not have a 1:1 relationship with people, but the relationship is monotonic, so I'm not sure that fact helps explain why something that seems true about people generally would be so untrue about people who write code. If there is a deep disagreement, it might be that I do not believe software == important, necessarily, and I'm disinterested in focusing on where that equivalence holds, because that's not where the learners are? I'm guessing. I genuinely don't know.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rh44C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My thoughts on the matter are shallow, so don't expect any big fish. I understood your second paragraph to be asserting the analogy is poor, and your third to be attempting to show why, but I don't understand the third paragraph at all, so I don't know if you are repeating yourself or not. For just one example, it seems self-evident to me that not all software is an act of curation. Curation is careful selection. Most software is built with what's lying about. I don't know who the top-level curator is, or where all these powers, responsibilities, and duties of coherence come from. Also, I'm not sure it's an analogy, so much as a reframing. A dependency does not have a 1:1 relationship with people, but the relationship is monotonic, so I'm not sure that fact helps explain why something that seems true about people generally would be so untrue about people who write code. If there is a deep disagreement, it might be that I do not believe software == important, necessarily, and I'm disinterested in focusing on where that equivalence holds, because that's not where the learners are? I'm guessing. I genuinely don't know."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1750044297.978319",
        "client_msg_id": "a00158ce-97b9-4aad-9c06-c163bceff781",
        "text": "Interesting. Yeah, I think we have some basic disagreement. Agreed, not worth debating but may be worth trying to lay them out:\n\n• I believe software == important. Eating the world, etc. India where I have roots is quite heavily bureaucratic and extremely mediated by software. We're awash in scams, and scam-resistance imposes UX burdens for the elderly in particular. My medical records require a computer. I'm a minimalist in atoms but a packrat in bytes. Also philosophically, I think I have the privilege to assume my thoughts are much more valuable than my physical possessions. So I'm much more concerned about electronic security than about physical security. More circumstantial evidence: 30 years ago people thought security meant not writing down your password anywhere. Now we know it's far more important to choose a long password even if you then write it down. The critical threat is someone brute-forcing the bits, not getting access to the atoms.\n• A dependency does not have a monotonic relationship with people. Notice that a single line in `Gemfile` or `package.json` can expand into 100 or 1000 lines in `Gemfile.lock` or `package-lock.json` respectively depending on the precise package you choose. So even if you start with the assumption that they are, you're forced to conclude they are not. Proof by contradiction.\n• Personally I take curation extremely seriously.\n• Even if you don't believe me, or you think I'm a real outlier, what I mean by \"curation is important\" is that the choices every top-level curator (software package) makes are extremely consequential for computer owners (to the extent software == important above). Perhaps you'd use a different word for it than \"curation\". I'm not attached to the word. But it seems incontrovertible that this is true of all software.\nAs a quick attempt to clarify my third paragraph above, consider the <https:\/\/en.wikipedia.org\/wiki\/XZ_Utils_backdoor|XZ utils backdoor>. Someone tried to change a miniscule number of lines on roughly every computer on the planet in order to flip them from net positive to net negative for their owners. Again, I feel like I'm liable to be saying obvious things so I'll stop there, but we can chat at greater length about it as needed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y+Z+z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting. Yeah, I think we have some basic disagreement. Agreed, not worth debating but may be worth trying to lay them out:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I believe software == important. Eating the world, etc. India where I have roots is quite heavily bureaucratic and extremely mediated by software. We're awash in scams, and scam-resistance imposes UX burdens for the elderly in particular. My medical records require a computer. I'm a minimalist in atoms but a packrat in bytes. Also philosophically, I think I have the privilege to assume my thoughts are much more valuable than my physical possessions. So I'm much more concerned about electronic security than about physical security. More circumstantial evidence: 30 years ago people thought security meant not writing down your password anywhere. Now we know it's far more important to choose a long password even if you then write it down. The critical threat is someone brute-forcing the bits, not getting access to the atoms."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A dependency does not have a monotonic relationship with people. Notice that a single line in "
                                    },
                                    {
                                        "type": "text",
                                        "text": "Gemfile",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " or "
                                    },
                                    {
                                        "type": "text",
                                        "text": "package.json",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " can expand into 100 or 1000 lines in "
                                    },
                                    {
                                        "type": "text",
                                        "text": "Gemfile.lock",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " or "
                                    },
                                    {
                                        "type": "text",
                                        "text": "package-lock.json",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " respectively depending on the precise package you choose. So even if you start with the assumption that they are, you're forced to conclude they are not. Proof by contradiction."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Personally I take curation extremely seriously."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Even if you don't believe me, or you think I'm a real outlier, what I mean by \"curation is important\" is that the choices every top-level curator (software package) makes are extremely consequential for computer owners (to the extent software == important above). Perhaps you'd use a different word for it than \"curation\". I'm not attached to the word. But it seems incontrovertible that this is true of all software."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAs a quick attempt to clarify my third paragraph above, consider the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/XZ_Utils_backdoor",
                                "text": "XZ utils backdoor"
                            },
                            {
                                "type": "text",
                                "text": ". Someone tried to change a miniscule number of lines on roughly every computer on the planet in order to flip them from net positive to net negative for their owners. Again, I feel like I'm liable to be saying obvious things so I'll stop there, but we can chat at greater length about it as needed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1750055841.982369",
        "client_msg_id": "d0517c56-4424-4d9b-b60a-a474da5de298",
        "text": "I think networked collaboration is extremely important to be able to scale up and supply the worlds software needs. I do not think it needs to be realtime, which I think why curation is important. e.g. package managers, pinned dependencies, git workflow etc. That said, when we say \"end user programming\" or \"long tail creators\" we are now talking about programs that probably are not very collaborate or worth \"upstreaming\". I imagine very personalized software has less generality in it, inherently. So in this area I think we need more stability (its extremely frustrating that working personal software breaks), and the need for networked development is less (the software is not intended to supply a solution to the world). So I think considering the audience for the software changes the development tradeoffs a lot.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0RdJt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think networked collaboration is extremely important to be able to scale up and supply the worlds software needs. I do not think it needs to be realtime, which I think why curation is important. e.g. package managers, pinned dependencies, git workflow etc. That said, when we say \"end user programming\" or \"long tail creators\" we are now talking about programs that probably are not very collaborate or worth \"upstreaming\". I imagine very personalized software has less generality in it, inherently. So in this area I think we need more stability (its extremely frustrating that working personal software breaks), and the need for networked development is less (the software is not intended to supply a solution to the world). So I think considering the audience for the software changes the development tradeoffs a lot."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]