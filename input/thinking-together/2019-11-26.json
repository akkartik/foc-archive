[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1574757269.177300",
        "client_msg_id": "d24677e8-9d26-4c83-b166-aa7419065b2c",
        "text": "<https:\/\/www.apress.com\/gp\/book\/9781430219484>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574694345.141000",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "title": "Coders at Work - Reflections on the Craft of Programming | Peter Seibel | Apress",
                "title_link": "https:\/\/www.apress.com\/gp\/book\/9781430219484",
                "text": "Peter Seibel interviews 15 of the most interesting computer programmers alive today in Coders at Work, offering a companion volume to Apress’s highly acclaimed best-seller Founders at Work by Jessica Livingston. As the words “at work” suggest, Peter Seibel focuses on how his interviewees tackle the...",
                "fallback": "Coders at Work - Reflections on the Craft of Programming | Peter Seibel | Apress",
                "from_url": "https:\/\/www.apress.com\/gp\/book\/9781430219484",
                "service_icon": "https:\/\/www.apress.com\/favicon.ico",
                "service_name": "apress.com",
                "id": 1,
                "original_url": "https:\/\/www.apress.com\/gp\/book\/9781430219484"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rdU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.apress.com\/gp\/book\/9781430219484"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-4",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1574785848.197800",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1574785934.000000"
        },
        "client_msg_id": "06f8c564-6f3c-49c3-a632-445bed0b6f52",
        "text": "> Is it \"real time\" in the sense that you program it *as* it is running or being used?\nI would call this \"live programming\". Live programming can also be real time programming, especially since it is popular for musical performances.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573264632.251900",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/G8",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it \"real time\" in the sense that you program it "
                            },
                            {
                                "type": "text",
                                "text": "as",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it is running or being used?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would call this \"live programming\". Live programming can also be real time programming, especially since it is popular for musical performances."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1574787700.220400",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1574787960.000000"
        },
        "client_msg_id": "99908f44-d292-4ebe-b848-0e473bc60b64",
        "text": "Let me share with you something really controversial which came into my mind.\n\nOrigins of the idea:\n\n• Code duplication is better then using the wrong abstraction\n• Every system evolves, its abstractions evolve, they come and go\n\nAlso, I think it is not too bad to refer to abstractions as units (like in Unit tests). I also think about abstractions as an “extracted” “step in the process”, aka “new policy” in the system, which is “some kind of a restriction”.\n\nWhat I see in my codebase that introducing ANY abstraction has pros and cons. In terms of new (LAYERS!) abstractions (which hide the sides from each other) there are things which can be expressed EASIER\/SHORTER\/TERSER (these are the things the developer probably thinks and reasons about) BUT, there might be things in future which are not easier\/shorter\/terser, on the contrary HARDER\/LONGER\/MORE VERBOSE.\n\nOne of my points is that the business logic kind of things (which would be nice to abstract away) are going to change in softwares evolution, it is just a matter of time. That means, there will be things which were just impossible to see are coming and now we have extra (layers of) abstractions in our way.\n\nSure, we have to refactor! We have to\n\n1. reuse the “corrupted” \/ “wrongly evolved” abstractions for creating new ones [OR]\n2. (a.) dump the old (b.) just find something completely new which respects both the old and new requirements",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574787700.220400",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1574841102.233100",
        "reply_users": [
            "UBSMEUXAA",
            "UNKSN1MRQ"
        ],
        "replies": [
            {
                "user": "UBSMEUXAA",
                "ts": "1574792679.221900"
            },
            {
                "user": "UNKSN1MRQ",
                "ts": "1574841102.233100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cc25",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let me share with you something really controversial which came into my mind.\n\nOrigins of the idea:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code duplication is better then using the wrong abstraction"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Every system evolves, its abstractions evolve, they come and go"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAlso, I think it is not too bad to refer to abstractions as units (like in Unit tests). I also think about abstractions as an “extracted” “step in the process”, aka “new policy” in the system, which is “some kind of a restriction”.\n\nWhat I see in my codebase that introducing ANY abstraction has pros and cons. In terms of new (LAYERS!) abstractions (which hide the sides from each other) there are things which can be expressed EASIER\/SHORTER\/TERSER (these are the things the developer probably thinks and reasons about) BUT, there might be things in future which are not easier\/shorter\/terser, on the contrary HARDER\/LONGER\/MORE VERBOSE.\n\nOne of my points is that the business logic kind of things (which would be nice to abstract away) are going to change in softwares evolution, it is just a matter of time. That means, there will be things which were just impossible to see are coming and now we have extra (layers of) abstractions in our way.\n\nSure, we have to refactor! We have to\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "reuse the “corrupted” \/ “wrongly evolved” abstractions for creating new ones [OR]"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(a.) dump the old (b.) just find something completely new which respects both the old and new requirements"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1574787700.220500",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1574788029.000000"
        },
        "client_msg_id": "99908f44-d292-4ebe-b848-0e473bc60b64",
        "text": "\nSure, if 1. is the case it’s no problem I’m happy, the original abstraction is reused I don’t feel so bad, “it did worth it!“. But usually this is not the part I am afraid of. And also my point is, that it is only matter of time when reuse won’t be possible with these updated abstractions and I must just dump. Requirements changed so much and IN SUCH A WAY + IN SUCH AN ORDER, it is just literally EASIER to dump the existing (layers) of abstractions to get to the goal.\n\nAnother point: knowing this happens all the time it feels wrong to think a lot about “complicated” abstractions which will help me in future. Earlier, I thought it is not a problem to sit and think a lot about these “partially good abstractions”, because I thought they will be useful. Also, reusing these “half baked” solutions seemed OK and justifiable. Now it feels like chasing a shadow and betting too much on catching it.\n\n2.(b): it happens, I am OK with it.\n\nBut here is the worst point:\n2.(a): getting rid of the old abstraction(s).\n\nIt is insanely hard! And it is weird why it is… Entangled code, changed meanings! Ill-evolved abstractions both in test and in production code! Whaaat?! I think that is the part we should do something about.\n\n“Half baked abstractions” feel like boundaries for safety (code reuse is also safety: “not to forget this case”-safety). But boundaries are rigid. It feels to me a “Sacrificing flexibility for safety”. Sure, abstractions also do have “meaning”, but this meaning alters over time (the dirty part, not the clean part) and sometimes the “stuff” is abstracted away is more like a fast changing “process” without real boundaries and not like an “entity” \/ unit \/ “noun” with clear boundaries. If it was a String its OK, it is a clean abstraction. My problem is with the “intermediate stuff” which are more like steps (which are more likely to change) in a process not a real entity like “AnIdiotAdapterFromXToYAfterZHappenedButBlah”. Abstractions feel declarative and rigid. Lack of abstractions feels imperative and flexible.\n\nSo with all this what I am thinking about is this:\nThe production code should be as flexible (dirty, ugly, duplicated, etc.) as possible, with SHALLOW (layers of) abstractions (shallow not equals low complexity). It feels a bit like “composition over inheritance” aka “fuck and duplicate over using defaults you wont be able to delete later + you have to duplicate later no matter what”.\n\nOn the other hand it seems to be a good idea to have a nice set of integration tests with “full coverage” which tests DO SHARE a lot of abstractions for being able to describe “all the RAW cases”. (By raw I mean no\/less intermediate stuff.)\nMaybe asserting on invariants in tests (and making these asserts reusable in test abstractions) is more maintainable then evolving and maintaining abstractions of production code.\n\nI might be 110% wrong. I am quite sure if I’d do this I’d pray for abstractions I did not introduce … Complexity does this all the time. The reason I feel its something else now is that its not complexity itself which ruins me (and my code) but the ORDER OF STEPS I get there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574787700.220500",
        "reply_count": 52,
        "reply_users_count": 4,
        "latest_reply": "1575651104.121900",
        "reply_users": [
            "UCUSW7WVD",
            "UHDQ62M4P",
            "UL3CJ7YKC",
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1574800292.230400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1574818397.232300"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1574818465.232500"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1574853658.233600"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1574853698.233800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1574899766.248400"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1574946140.257400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1574964683.269900"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1574964744.270100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1574965397.270300"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1574971778.271600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1574972437.271800"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1574972486.272000"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1574975937.272200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1574976236.272400"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1575047479.306800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1575047538.307400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1575223752.328400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1575223901.328600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1575224134.328800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1575224349.329200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1575225238.329600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1575225360.330200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1575225544.330400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1575225687.330600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1575226155.330800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1575226379.331000"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1575226597.331200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1575227051.331700"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1575227163.331900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1575227244.332100"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1575228750.332800"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1575232215.333600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1575237996.335200"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1575261456.340300"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575414470.408800"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575417077.409300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1575417223.409600"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575417262.409800"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575417585.410100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1575417884.410700"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575563440.067400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1575563755.069200"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575563968.070200"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575572717.105500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1575576266.107400"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575579355.110300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1575590496.112900"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575641348.118900"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575641483.119400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1575649626.119900"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1575651104.121900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y=iPP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSure, if 1. is the case it’s no problem I’m happy, the original abstraction is reused I don’t feel so bad, “it did worth it!“. But usually this is not the part I am afraid of. And also my point is, that it is only matter of time when reuse won’t be possible with these updated abstractions and I must just dump. Requirements changed so much and IN SUCH A WAY + IN SUCH AN ORDER, it is just literally EASIER to dump the existing (layers) of abstractions to get to the goal.\n\nAnother point: knowing this happens all the time it feels wrong to think a lot about “complicated” abstractions which will help me in future. Earlier, I thought it is not a problem to sit and think a lot about these “partially good abstractions”, because I thought they will be useful. Also, reusing these “half baked” solutions seemed OK and justifiable. Now it feels like chasing a shadow and betting too much on catching it.\n\n2.(b): it happens, I am OK with it.\n\nBut here is the worst point:\n2.(a): getting rid of the old abstraction(s).\n\nIt is insanely hard! And it is weird why it is… Entangled code, changed meanings! Ill-evolved abstractions both in test and in production code! Whaaat?! I think that is the part we should do something about.\n\n“Half baked abstractions” feel like boundaries for safety (code reuse is also safety: “not to forget this case”-safety). But boundaries are rigid. It feels to me a “Sacrificing flexibility for safety”. Sure, abstractions also do have “meaning”, but this meaning alters over time (the dirty part, not the clean part) and sometimes the “stuff” is abstracted away is more like a fast changing “process” without real boundaries and not like an “entity” \/ unit \/ “noun” with clear boundaries. If it was a String its OK, it is a clean abstraction. My problem is with the “intermediate stuff” which are more like steps (which are more likely to change) in a process not a real entity like “AnIdiotAdapterFromXToYAfterZHappenedButBlah”. Abstractions feel declarative and rigid. Lack of abstractions feels imperative and flexible.\n\nSo with all this what I am thinking about is this:\nThe production code should be as flexible (dirty, ugly, duplicated, etc.) as possible, with SHALLOW (layers of) abstractions (shallow not equals low complexity). It feels a bit like “composition over inheritance” aka “fuck and duplicate over using defaults you wont be able to delete later + you have to duplicate later no matter what”.\n\nOn the other hand it seems to be a good idea to have a nice set of integration tests with “full coverage” which tests DO SHARE a lot of abstractions for being able to describe “all the RAW cases”. (By raw I mean no\/less intermediate stuff.)\nMaybe asserting on invariants in tests (and making these asserts reusable in test abstractions) is more maintainable then evolving and maintaining abstractions of production code.\n\nI might be 110% wrong. I am quite sure if I’d do this I’d pray for abstractions I did not introduce … Complexity does this all the time. The reason I feel its something else now is that its not complexity itself which ruins me (and my code) but the ORDER OF STEPS I get there."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1574787724.220900",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1574787749.000000"
        },
        "client_msg_id": "da64faf1-18aa-4ded-9cbd-6ecb9a720f34",
        "text": "That is a bit long though. :smile: Sorry. <@UCUSW7WVD> <@UDKTZSD6H>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PmtZD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That is a bit long though. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " Sorry. "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UDKTZSD6H"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1574788341.221400",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1574875281.000000"
        },
        "client_msg_id": "297ca664-47dd-418f-b296-b24b82306679",
        "text": "Thanks, that's the term I was looking for: \"Live Programming\"\n\nI guess it's unreasonable not to expect people to interpret \"X programming\" to mean \"programming _for_ X\", and thus we need separate terminology for when programming _is_ X (e.g. \"live\" and \"visual\" programming as opposed to \"real-time\" and \"graphical\" programming)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573264632.251900",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oge4n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, that's the term I was looking for: \"Live Programming\"\n\nI guess it's unreasonable not to expect people to interpret \"X programming\" to mean \"programming "
                            },
                            {
                                "type": "text",
                                "text": "for",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " X\", and thus we need separate terminology for when programming "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " X (e.g. \"live\" and \"visual\" programming as opposed to \"real-time\" and \"graphical\" programming)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1574792679.221900",
        "client_msg_id": "985be55a-bb03-46d8-9740-fd81a50aa026",
        "text": "I'm not sure why this is controversial outside of a lot (maybe most) programmers wanting universal low risk solutions and \"best practices\" to dominate coding.  Complex abstractions can also help people appear more senior in some cases to justify higher salaries :slightly_smiling_face:.\n\nThat kind of thinking can help in CS programs and bigger corporate software companies, but if you read things from truly skilled programmers they usually have these more \"controversial\" opinions.  One of my favorite examples of this is John Carmack on Inlined code (<http:\/\/number-none.com\/blow\/blog\/programming\/2014\/09\/26\/carmack-on-inlined-code.html>)  It is relatively simple advice but might run counter to someone who follows the dogma of always having small functions.\n\nSome anti-OOP, or pro functional rhetoric fits into this, so does \"YAGNI\" (which is generally anti-abstraction) although it runs counter to another coding acronym which is \"DRY\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574787700.220400",
        "parent_user_id": "UL3CJ7YKC",
        "attachments": [
            {
                "title": "John Carmack on Inlined Code",
                "title_link": "http:\/\/number-none.com\/blow\/blog\/programming\/2014\/09\/26\/carmack-on-inlined-code.html",
                "text": "(Here begins a comment written by John Carmack in 2014, about an email he sent to a programmers’ mailing list in 2007.)",
                "fallback": "John Carmack on Inlined Code",
                "from_url": "http:\/\/number-none.com\/blow\/blog\/programming\/2014\/09\/26\/carmack-on-inlined-code.html",
                "service_name": "number-none.com",
                "id": 1,
                "original_url": "http:\/\/number-none.com\/blow\/blog\/programming\/2014\/09\/26\/carmack-on-inlined-code.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YHK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure why this is controversial outside of a lot (maybe most) programmers wanting universal low risk solutions and \"best practices\" to dominate coding.  Complex abstractions can also help people appear more senior in some cases to justify higher salaries "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThat kind of thinking can help in CS programs and bigger corporate software companies, but if you read things from truly skilled programmers they usually have these more \"controversial\" opinions.  One of my favorite examples of this is John Carmack on Inlined code ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/number-none.com\/blow\/blog\/programming\/2014\/09\/26\/carmack-on-inlined-code.html"
                            },
                            {
                                "type": "text",
                                "text": ")  It is relatively simple advice but might run counter to someone who follows the dogma of always having small functions.\n\nSome anti-OOP, or pro functional rhetoric fits into this, so does \"YAGNI\" (which is generally anti-abstraction) although it runs counter to another coding acronym which is \"DRY\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UL3CJ7YKC",
                    "UHDQ62M4P"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1574794252.227300",
        "client_msg_id": "101C4AA1-6E56-48C1-9EDF-13AF0EC7CAE5",
        "text": "i feel like this discussion is why i’d like to see a language\/compiler\/IDE that treats code editing as a sequence of transformations that get saved. it’s the best argument i think for structural editing: if you have semantic understanding of the syntax changes you’re making, “undoing” an abstraction would be a simple edit to the history where you undo the abstraction, or an append case where you “unroll” it into the result of the abstraction. eg: “inline” a function in one command to replace all calls with the function’s body with the called arguments filled in",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574794252.227300",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1574906767.250600",
        "reply_users": [
            "UL3CJ7YKC",
            "UJN1TAYEQ",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UL3CJ7YKC",
                "ts": "1574794668.228800"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1574813024.231700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1574906767.250600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xf4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i feel like this discussion is why i’d like to see a language\/compiler\/IDE that treats code editing as a sequence of transformations that get saved. it’s the best argument i think for structural editing: if you have semantic understanding of the syntax changes you’re making, “undoing” an abstraction would be a simple edit to the history where you undo the abstraction, or an append case where you “unroll” it into the result of the abstraction. eg: “inline” a function in one command to replace all calls with the function’s body with the called arguments filled in"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1574794558.227900",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1574794574.000000"
        },
        "client_msg_id": "51B27A84-2704-4F17-A1CA-E451C36E76F5",
        "text": "<https:\/\/twitter.com\/4lpine\/status\/1199384410199449600?s=21> new developments on the react\/gatsby side of visual programming",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574794558.227900",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1574803326.230900",
        "reply_users": [
            "UC2A2ARPT",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1574794707.229000"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1574803326.230900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/4lpine|@4lpine>: ⬡ Introducing Blocks (alpha)!\n\nAn open source, JSX-based visual editor that we're building.\n\n:female-technologist: Import JSX\n:frame_with_picture: Drag and drop components\n:control_knobs: Change props and styling\n🧩 Add your own blocks\n:heart_eyes_cat: Export production-ready code\n\n<https:\/\/blocks-ui.com> <https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1199384319547957248\/pu\/img\/rXouSmoxkbCwS95t.jpg>",
                "ts": 1574790501,
                "author_name": "John Otander",
                "author_link": "https:\/\/twitter.com\/4lpine\/status\/1199384410199449600",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1685588137\/thumb_normal.jpg",
                "author_subname": "@4lpine",
                "text": "⬡ Introducing Blocks (alpha)!\n\nAn open source, JSX-based visual editor that we're building.\n\n:female-technologist: Import JSX\n:frame_with_picture: Drag and drop components\n:control_knobs: Change props and styling\n🧩 Add your own blocks\n:heart_eyes_cat: Export production-ready code\n\n<https:\/\/blocks-ui.com>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/4lpine\/status\/1199384410199449600?s=21",
                "thumb_url": "https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1199384319547957248\/pu\/img\/rXouSmoxkbCwS95t.jpg",
                "thumb_width": 1080,
                "thumb_height": 720,
                "video_html_width": 1080,
                "video_html_height": 720,
                "video_html": "<video controls poster=\"https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1199384319547957248\/pu\/img\/rXouSmoxkbCwS95t.jpg\" width=\"1080\" height=\"720\"><source type=\"video\/mp4\" src=\"https:\/\/video.twimg.com\/ext_tw_video\/1199384319547957248\/pu\/vid\/1080x720\/-cOntq0nl5KTErXE.mp4?tag=10\"><\/video>",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/4lpine\/status\/1199384410199449600?s=21",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fBp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/4lpine\/status\/1199384410199449600?s=21"
                            },
                            {
                                "type": "text",
                                "text": " new developments on the react\/gatsby side of visual programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1574794668.228800",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1574794767.000000"
        },
        "client_msg_id": "40D91A32-598E-4AC9-8CE0-52AFE09FF5AA",
        "text": "Also reminds me a bit to Uncle Bobs Transformation Priority Premise",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574794252.227300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BE9ly",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also reminds me a bit to Uncle Bobs Transformation Priority Premise"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1574794707.229000",
        "client_msg_id": "08bf33c2-14d4-485e-a803-232638f846c3",
        "text": "I know the distinction is _wherever you want to draw it_, but I think this falls more under the umbrella of visual design rather than visual programming. * shrug *",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574794558.227900",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zb7bc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know the distinction is "
                            },
                            {
                                "type": "text",
                                "text": "wherever you want to draw it",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but I think this falls more under the umbrella of visual design rather than visual programming. * shrug *"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1574800292.230400",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1574814319.000000"
        },
        "client_msg_id": "19739d54-7aca-4b70-bf0a-87e75f6de5b4",
        "text": "I don't follow all the details, but you're right that this subject is interesting to me.\n\n1. As <@UBSMEUXAA> pointed out above, not trusting abstractions seems not so much an extraordinary idea but more just a secret truth that we don't talk about in polite company.\n2. Among hard-core TDD folks there's a school of thought that's the exact opposite of yours: make sure to keep tests entirely devoid of abstraction, to counteract any tendencies for complexity creep and over-abstraction in production code. I subscribe to this idea, though there's always a question of how far to take \"no abstractions\". Do we avoid all standard libraries? Do we skip the language and just program in machine code? My current rule of thumb is that I can use any abstractions from production code, but I am extremely selective about creating test-only abstractions. Since this means production code is often used for test setup, it's very important to be very explicit in each test about the component under test.\n3. Maintaining control over abstractions shouldn't imply avoiding them entirely. Just to 'stay loose' mentally. Any abstraction can be questioned or taken out at any time.\n4. At the risk of repeating myself, you should check out my notion of white-box tests: <http:\/\/akkartik.name\/post\/tracing-tests>. Rather than have tests run sub-components and make assertions on their behavior, I always run the whole program, emitting a trace of domain-specific events (facts deduced by the program), namespaced by different conceptual sub-components. Then different tests make assertions on the state of the trace. Fine-grained unit tests may focus on just traces pertaining to a specific namespace, while coarse-grained integration tests may look at a different namespace. Traces are an abstraction-busting device: tests no longer care about details of _how_ facts are deduced, they only focus on _what_ facts are deduced. And this permits radical changes to abstractions without needing to modify tests.\n5. You should also check out my notion of layers: <http:\/\/akkartik.name\/post\/wart-layers>. Layers are an abstraction-busting device for gradually inserting code tastefully into a skeleton of a program. They're often useful for recapitulating a cleaned-up history of a program's evolution so that newcomers have access to _always working_ copies of earlier, simpler snapshots. One thing I find myself using layers to do is track _alternatives_. When things were simple some sub-system was implemented one way. As features were added the old way got replaced. But it's still really useful for conveying the core idea. I keep the old implementation around in earlier layers, and replace it in later layers. That way the codebase continues to exercise both alternatives rather than let the old way accumulate rust in a git log somewhere.\n\nAnyway, I keep repeating myself about traces and layers, so apologies to those who are sick of hearing about them. But I really think they're super valuable ideas. Certainly they're 2 of the 3 best ideas I've ever had, and I don't expect to add to that list for the rest of my life.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "an4V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't follow all the details, but you're right that this subject is interesting to me.\n\n1. As "
                            },
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " pointed out above, not trusting abstractions seems not so much an extraordinary idea but more just a secret truth that we don't talk about in polite company.\n2. Among hard-core TDD folks there's a school of thought that's the exact opposite of yours: make sure to keep tests entirely devoid of abstraction, to counteract any tendencies for complexity creep and over-abstraction in production code. I subscribe to this idea, though there's always a question of how far to take \"no abstractions\". Do we avoid all standard libraries? Do we skip the language and just program in machine code? My current rule of thumb is that I can use any abstractions from production code, but I am extremely selective about creating test-only abstractions. Since this means production code is often used for test setup, it's very important to be very explicit in each test about the component under test.\n3. Maintaining control over abstractions shouldn't imply avoiding them entirely. Just to 'stay loose' mentally. Any abstraction can be questioned or taken out at any time.\n4. At the risk of repeating myself, you should check out my notion of white-box tests: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/tracing-tests"
                            },
                            {
                                "type": "text",
                                "text": ". Rather than have tests run sub-components and make assertions on their behavior, I always run the whole program, emitting a trace of domain-specific events (facts deduced by the program), namespaced by different conceptual sub-components. Then different tests make assertions on the state of the trace. Fine-grained unit tests may focus on just traces pertaining to a specific namespace, while coarse-grained integration tests may look at a different namespace. Traces are an abstraction-busting device: tests no longer care about details of "
                            },
                            {
                                "type": "text",
                                "text": "how",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " facts are deduced, they only focus on "
                            },
                            {
                                "type": "text",
                                "text": "what",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " facts are deduced. And this permits radical changes to abstractions without needing to modify tests.\n5. You should also check out my notion of layers: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/wart-layers"
                            },
                            {
                                "type": "text",
                                "text": ". Layers are an abstraction-busting device for gradually inserting code tastefully into a skeleton of a program. They're often useful for recapitulating a cleaned-up history of a program's evolution so that newcomers have access to "
                            },
                            {
                                "type": "text",
                                "text": "always working",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " copies of earlier, simpler snapshots. One thing I find myself using layers to do is track "
                            },
                            {
                                "type": "text",
                                "text": "alternatives",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". When things were simple some sub-system was implemented one way. As features were added the old way got replaced. But it's still really useful for conveying the core idea. I keep the old implementation around in earlier layers, and replace it in later layers. That way the codebase continues to exercise both alternatives rather than let the old way accumulate rust in a git log somewhere.\n\nAnyway, I keep repeating myself about traces and layers, so apologies to those who are sick of hearing about them. But I really think they're super valuable ideas. Certainly they're 2 of the 3 best ideas I've ever had, and I don't expect to add to that list for the rest of my life."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA",
                    "UL3CJ7YKC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1574803326.230900",
        "client_msg_id": "6ACE4897-D580-4D1F-9F4D-9384256F5898",
        "text": "i agree",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574794558.227900",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jwG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i agree"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1574813024.231700",
        "client_msg_id": "5f6da422-39f2-49bd-a498-f1e63e64338b",
        "text": "I've been using revision control software for a long time now. It lets me roll back changes. Let's say you created an abstraction a year ago. It seemed like a good idea at the time, but now it is getting in the way of the changes you want to make. Eliminating that abstraction is far more complicated than simply rolling back those changes you made a year ago, because this rollback invalidates a bunch of changes that have been made since you introduced the abstraction.\n\nI'm facing this issue right now in my current project. The abstraction isn't a function, it's a class inheritance hierarchy with a complex protocol. It's a typical OOP thing: to eliminate boilerplate, you define a set of subclasses, and override virtual functions according to various patterns. Now that the class hiearchy no longer works for me, it's going to be complicated to redesign the code to meet my new requirements. I don't see how I can push a button to get the job done, and I'm not sure how a slightly higher level view of my code change history will substantially help.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574794252.227300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i8DZy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been using revision control software for a long time now. It lets me roll back changes. Let's say you created an abstraction a year ago. It seemed like a good idea at the time, but now it is getting in the way of the changes you want to make. Eliminating that abstraction is far more complicated than simply rolling back those changes you made a year ago, because this rollback invalidates a bunch of changes that have been made since you introduced the abstraction.\n\nI'm facing this issue right now in my current project. The abstraction isn't a function, it's a class inheritance hierarchy with a complex protocol. It's a typical OOP thing: to eliminate boilerplate, you define a set of subclasses, and override virtual functions according to various patterns. Now that the class hiearchy no longer works for me, it's going to be complicated to redesign the code to meet my new requirements. I don't see how I can push a button to get the job done, and I'm not sure how a slightly higher level view of my code change history will substantially help."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1574814316.231900",
        "client_msg_id": "4612ee78-41dd-43fa-a654-3cbafe1ad4c0",
        "text": "Discounts are great - I get to add even more interesting reading material to my ever growing backlog that I'll never get to.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574694345.141000",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vUE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Discounts are great - I get to add even more interesting reading material to my ever growing backlog that I'll never get to."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK",
                    "UBN9AFS0N"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1574818397.232300",
        "client_msg_id": "41b469d0-7143-4b98-aec3-42d3581407c2",
        "text": "<@UL3CJ7YKC> I think you're hitting the nail on the head.. abstractions are necessary, but they are also close to impossible to get right, and can do great damage to software",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j2ZfH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL3CJ7YKC"
                            },
                            {
                                "type": "text",
                                "text": " I think you're hitting the nail on the head.. abstractions are necessary, but they are also close to impossible to get right, and can do great damage to software"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1574818465.232500",
        "client_msg_id": "3db739c0-1f16-4d99-9456-7ffbacd7a9fc",
        "text": "you might like <http:\/\/strlen.com\/restructor\/> which is a project I undertook when I realized we shouldn't leave abstraction entirely to programmers - and that they need some help being able to remove them when things change",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yM5o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you might like "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/strlen.com\/restructor\/"
                            },
                            {
                                "type": "text",
                                "text": " which is a project I undertook when I realized we shouldn't leave abstraction entirely to programmers - and that they need some help being able to remove them when things change"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UAL7940NM"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UNKSN1MRQ",
        "type": "message",
        "ts": "1574841102.233100",
        "client_msg_id": "a336f120-ebb1-42d0-a758-a30eab4c0fbb",
        "text": "John Ousterhout argues in _A Philosophy of Software Design_ that abstractions should be \"deep\" - simple interface, complex implementation. Such abstraction adds value. Small methods are often \"shallow\" (method declaration is about as complex as its implementation) so they don't add much value.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2ffe0023d13",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2ffe0023d1387ae89a99939f8ef55466.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Sergej Koščejev",
            "display_name": "Sergej Koščejev",
            "team": "T5TCAFTA9",
            "name": "sergej",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574787700.220400",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k5Wd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "John Ousterhout argues in "
                            },
                            {
                                "type": "text",
                                "text": "A Philosophy of Software Design",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that abstractions should be \"deep\" - simple interface, complex implementation. Such abstraction adds value. Small methods are often \"shallow\" (method declaration is about as complex as its implementation) so they don't add much value."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    }
]