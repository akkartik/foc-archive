[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1648451245.723489",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1648451514.000000"
        },
        "client_msg_id": "4d828128-fc6a-48d9-84e7-9b4399740aa6",
        "text": "&gt; I think the fundamental mistake that people seem to be making with LP is using it to describe algorithms rather than code history, code inspirations, bug stories, features and any other context surrounding code like tests \/ security.\nThis sounds a bit strange to me. The original goal of literate programming, as introduced by Donald Knuth, was to formulate algorithms in a pedagogical way. I wouldn't call that goal a mistake. Maybe literate programming is not the best way to achieve it, but then... what is?\n\nThat said, I am perfectly fine with your approach, which is more in line with the various notebooks that have appeared over the last years. From my perspective as a long-time user of Emacs-plus-org-mode, I'd say you are doing org-mode with Web technology.\n\nBut I think this approach misses something essential: the algorithms on which all the high-level stuff ultimately depends. I want those algorithms to be just as accessible to readers as the high-level outline. With notebooks and friends, they disappear in a black box instead.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648427435.251609",
        "parent_user_id": "U0282PL61U1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9cGL",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the fundamental mistake that people seem to be making with LP is using it to describe algorithms rather than code history, code inspirations, bug stories, features and any other context surrounding code like tests \/ security."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis sounds a bit strange to me. The original goal of literate programming, as introduced by Donald Knuth, was to formulate algorithms in a pedagogical way. I wouldn't call that goal a mistake. Maybe literate programming is not the best way to achieve it, but then... what is?\n\nThat said, I am perfectly fine with your approach, which is more in line with the various notebooks that have appeared over the last years. From my perspective as a long-time user of Emacs-plus-org-mode, I'd say you are doing org-mode with Web technology.\n\nBut I think this approach misses something essential: the algorithms on which all the high-level stuff ultimately depends. I want those algorithms to be just as accessible to readers as the high-level outline. With notebooks and friends, they disappear in a black box instead."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1648457223.694159",
        "client_msg_id": "098f2aa1-3ac3-4e59-8458-8b7f9eaa19a6",
        "text": "I am super into LP too, I use Observablehq, and I love mixing in tweets into my notebooks. You can tell a whole story, so you can connect a LP story to internet media (or in my opinion you should do). I also dogfooding my experience here <https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1647859090612199>\nI also think git is less needed in LP situation, you just need the rollback safety features, and merging for team workflow. Funny enough we discussed that organically last week!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648427435.251609",
        "parent_user_id": "U0282PL61U1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bFI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am super into LP too, I use Observablehq, and I love mixing in tweets into my notebooks. You can tell a whole story, so you can connect a LP story to internet media (or in my opinion you should do). I also dogfooding my experience here "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1647859090612199"
                            },
                            {
                                "type": "text",
                                "text": "\nI also think git is less needed in LP situation, you just need the rollback safety features, and merging for team workflow. Funny enough we discussed that organically last week!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1648458320.697539",
        "client_msg_id": "22004845-cbd8-4bdb-869d-8cc18e1b6005",
        "text": "&gt; I just use clojure for a lot of the example because it's the only language I know of that gave deliberate thought to their data notation.\nThat sounds... sad. But I can't think of another example, other than the original Lisp of the 1950s, whose data model (nothing but cons lists) turned out to be too simple for practical programming.\n\nAnd it's not only languages. There are tons of books on coding styles, code abstractions etc. In comparison, the literature on data models and data abstractions is almost invisible.\n\nDo we need a \"data manifesto\"? Does it perhaps already exist somewhere?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648237956.347409",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b7hs",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just use clojure for a lot of the example because it's the only language I know of that gave deliberate thought to their data notation."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThat sounds... sad. But I can't think of another example, other than the original Lisp of the 1950s, whose data model (nothing but cons lists) turned out to be too simple for practical programming.\n\nAnd it's not only languages. There are tons of books on coding styles, code abstractions etc. In comparison, the literature on data models and data abstractions is almost invisible.\n\nDo we need a \"data manifesto\"? Does it perhaps already exist somewhere?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0282PL61U1",
        "type": "message",
        "ts": "1648468147.577299",
        "edited": {
            "user": "U0282PL61U1",
            "ts": "1648469447.000000"
        },
        "client_msg_id": "a03ae50f-3b35-49f3-8ad7-28cb793a83b4",
        "text": "<@U02E4DAQGSZ>\n\nYes its about the story! Does Observablehq allow you to embed content from other blocks, like noweb ? Jupyternotebook can't really do that and it is just linear. It is crucial to have that so that  you can explain code in any order.\n\n<@UJBAJNFLK>\n\nTo take <https:\/\/www.literateprograms.org\/quicksort__c_.html|quick sort> as an example, I would\n\n1. show the video of quick sort first\n2. show the unit test second\n3. explain the history of the algorithm\n4. explain any trivia\n5. give a brief explanation of the algorithm along with common bugs\n6. put  up personal anecdotes\n7. put the complete quick sort code rather than go into details like declarations, loops, recursion ... \nI find examples going into too much details  while completely missing 1-6\n\nIn the LP <https:\/\/www.literateprograms.org\/quicksort__c_.html|wiki> quick sort is described as\n\n```\n*&lt;&lt;public declarations&gt;&gt;=*\n*void* quicksort(*void* * base, size_t num_elements, size_t element_size,\n        *int* (*comparer)(*const* *void* *, *const* *void* *));\n*&lt;&lt;quicksort&gt;&gt;=*\n*void* quicksort(*void* * base, size_t num_elements, size_t element_size,\n        *int* (*comparer)(*const* *void* *, *const* *void* *))\n*{*\n  &lt;&lt;quicksort declarations&gt;&gt;\n &lt;&lt;check termination condition&gt;&gt;\n  &lt;&lt;select a pivot&gt;&gt;\n  &lt;&lt;partition the array&gt;&gt;\n  &lt;&lt;recursively sort each subpartition&gt;&gt;\n*}*\n```\n\nI would basically avoid declaration chunks like the above snippet ... unless its really a complex algorithm. Most everyday code in apps is  far too simple to warrant such detail.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8f365fd896e9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-28\/8529753983250_8f365fd896e9c8f573b5_72.jpg",
            "first_name": "xyzzy",
            "real_name": "xyzzy",
            "display_name": "xyzzy",
            "team": "T5TCAFTA9",
            "name": "moodyharsh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648427435.251609",
        "parent_user_id": "U0282PL61U1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I\/e35",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYes its about the story! Does Observablehq allow you to embed content from other blocks, like noweb ? Jupyternotebook can't really do that and it is just linear. It is crucial to have that so that  you can explain code in any order.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": "\n\nTo take "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.literateprograms.org\/quicksort__c_.html",
                                "text": "quick sort"
                            },
                            {
                                "type": "text",
                                "text": " as an example, I would\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "show the video of quick sort first"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "show the unit test second"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "explain the history of the algorithm"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "explain any trivia"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "give a brief explanation of the algorithm along with common bugs"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "put  up personal anecdotes"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "put the complete quick sort code rather than go into details like declarations, loops, recursion ... "
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI find examples going into too much details  while completely missing 1-6\n\nIn the LP "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.literateprograms.org\/quicksort__c_.html",
                                "text": "wiki"
                            },
                            {
                                "type": "text",
                                "text": " quick sort is described as\n\n```\n"
                            },
                            {
                                "type": "text",
                                "text": "<<",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "public declarations",
                                "style": {
                                    "bold": true,
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ">>=",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "void",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " quicksort("
                            },
                            {
                                "type": "text",
                                "text": "void",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " * base, size_t num_elements, size_t element_size,\n        "
                            },
                            {
                                "type": "text",
                                "text": "int",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (*comparer)("
                            },
                            {
                                "type": "text",
                                "text": "const",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "void",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " *, "
                            },
                            {
                                "type": "text",
                                "text": "const",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "void",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " *));\n"
                            },
                            {
                                "type": "text",
                                "text": "<<",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "quicksort",
                                "style": {
                                    "bold": true,
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ">>=",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "void",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " quicksort("
                            },
                            {
                                "type": "text",
                                "text": "void",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " * base, size_t num_elements, size_t element_size,\n        "
                            },
                            {
                                "type": "text",
                                "text": "int",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (*comparer)("
                            },
                            {
                                "type": "text",
                                "text": "const",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "void",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " *, "
                            },
                            {
                                "type": "text",
                                "text": "const",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "void",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " *))\n"
                            },
                            {
                                "type": "text",
                                "text": "{",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n  <<"
                            },
                            {
                                "type": "text",
                                "text": "quicksort declarations",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ">>\n <<"
                            },
                            {
                                "type": "text",
                                "text": "check termination condition",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ">>\n  <<"
                            },
                            {
                                "type": "text",
                                "text": "select a pivot",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ">>\n  <<"
                            },
                            {
                                "type": "text",
                                "text": "partition the array",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ">>\n  <<"
                            },
                            {
                                "type": "text",
                                "text": "recursively sort each subpartition",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ">>\n"
                            },
                            {
                                "type": "text",
                                "text": "}",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n```\n\nI would basically avoid declaration chunks like the above snippet ... unless its really a complex algorithm. Most everyday code in apps is  far too simple to warrant such detail."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1648471910.573339",
        "client_msg_id": "5c928163-6744-49a2-b522-7b6a9128a43f",
        "text": "yes, observable is dataflow driven and features non-linear (topological) execution order <https:\/\/observablehq.com\/@observablehq\/observables-not-javascript>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648427435.251609",
        "parent_user_id": "U0282PL61U1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zk9L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yes, observable is dataflow driven and features non-linear (topological) execution order "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@observablehq\/observables-not-javascript"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U0282PL61U1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1648485206.503189",
        "client_msg_id": "2853f82d-256f-46d3-b6ce-015a27c0ad32",
        "text": "<@U0282PL61U1> I think the challenge is to link all that together.\n\nExample: I have a notebook that calls a function called `quicksort`. As a reader, I want to figure out what it does.\n\nFirst step: look up the code that is actually called. That's your step 7, and should be trivial, which it is in a good IDE but (so far) it is not in notebook-like environments. The only other piece that a code analysis could lead to is unit tests (your step 2).\n\nEverything else would be annotations added by the developer, so now we are in the \"documentation\" category. Donald Knuth's prose gets complemented by other media, links to Wikipedia, etc. All the niceties that didn't exist at Knuth's time. But that's just a technology update, not a fundamental improvement compared to the LP of the past.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648427435.251609",
        "parent_user_id": "U0282PL61U1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9j8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0282PL61U1"
                            },
                            {
                                "type": "text",
                                "text": " I think the challenge is to link all that together.\n\nExample: I have a notebook that calls a function called "
                            },
                            {
                                "type": "text",
                                "text": "quicksort",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". As a reader, I want to figure out what it does.\n\nFirst step: look up the code that is actually called. That's your step 7, and should be trivial, which it is in a good IDE but (so far) it is not in notebook-like environments. The only other piece that a code analysis could lead to is unit tests (your step 2).\n\nEverything else would be annotations added by the developer, so now we are in the \"documentation\" category. Donald Knuth's prose gets complemented by other media, links to Wikipedia, etc. All the niceties that didn't exist at Knuth's time. But that's just a technology update, not a fundamental improvement compared to the LP of the past."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0282PL61U1",
        "type": "message",
        "ts": "1648490096.210129",
        "client_msg_id": "e5f78cde-e701-44e8-9f54-70c29b4b2b6c",
        "text": "Roughly speaking what I propose is not an update on LP, anything that implements tangle and mangle is LP,  but an update on the code  documentation genre \/ style. The final LP document should read like a history book as opposed to technical description of the code. My goal is to capture the evolution of all technical decisions made in a project, algorithms unless they are critical ... like say complex signal processing are of secondary importance.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8f365fd896e9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-28\/8529753983250_8f365fd896e9c8f573b5_72.jpg",
            "first_name": "xyzzy",
            "real_name": "xyzzy",
            "display_name": "xyzzy",
            "team": "T5TCAFTA9",
            "name": "moodyharsh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648427435.251609",
        "parent_user_id": "U0282PL61U1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nB4x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Roughly speaking what I propose is not an update on LP, anything that implements tangle and mangle is LP,  but an update on the code  documentation genre \/ style. The final LP document should read like a history book as opposed to technical description of the code. My goal is to capture the evolution of all technical decisions made in a project, algorithms unless they are critical ... like say complex signal processing are of secondary importance."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1648528520.536749",
        "client_msg_id": "5772188d-f221-4085-9d9b-d994c55ffef1",
        "text": "Mildly edited and published now. Still feels very vague and unstructured, but I think that's the best I have for the moment.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648237956.347409",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oDhJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mildly edited and published now. Still feels very vague and unstructured, but I think that's the best I have for the moment."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]