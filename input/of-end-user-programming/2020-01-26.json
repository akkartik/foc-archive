[
    {
        "user": "UJM9NG84Q",
        "type": "message",
        "ts": "1580086606.006200",
        "client_msg_id": "4392c009-6fe3-4647-903b-e093ab517381",
        "text": "I've been working on a voice driven product, and it's got me thinking about programmability. Specifically users start to learn a set of phrases to accomplish things, which can become the building blocks to string actions together. It's kind of natural language programming, but I'm not confident that's the right way to think about it... just because the individual phrases are natural language doesn't mean the assembly should be. \n\nAnyway... I don't have any particular question or assertion here, nor have I thought about this for long, but I thought I'd mention it because I'd be interested in any thoughts.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4791f7f49bc",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/74791f7f49bc26afa271eced90cda37c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "",
            "real_name": "Ian Bicking",
            "display_name": "Ian Bicking",
            "team": "T5TCAFTA9",
            "name": "ian",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580086606.006200",
        "reply_count": 7,
        "reply_users_count": 6,
        "latest_reply": "1580587736.024200",
        "reply_users": [
            "U85HCL7JP",
            "UT60XSVCN",
            "UCUSW7WVD",
            "UJM9NG84Q",
            "UC21F8Q48",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "U85HCL7JP",
                "ts": "1580090794.007600"
            },
            {
                "user": "UT60XSVCN",
                "ts": "1580094227.008000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580096869.008400"
            },
            {
                "user": "UJM9NG84Q",
                "ts": "1580122588.008700"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1580141824.008900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1580586827.024000"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1580587736.024200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W4H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been working on a voice driven product, and it's got me thinking about programmability. Specifically users start to learn a set of phrases to accomplish things, which can become the building blocks to string actions together. It's kind of natural language programming, but I'm not confident that's the right way to think about it... just because the individual phrases are natural language doesn't mean the assembly should be. \n\nAnyway... I don't have any particular question or assertion here, nor have I thought about this for long, but I thought I'd mention it because I'd be interested in any thoughts."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1580090794.007600",
        "client_msg_id": "98356009-d043-472a-b2a8-2bfc1b2b3041",
        "text": "<@UJM9NG84Q> I was thinking of a solution for natural language programming a while ago. This is what I came up with:\n\n*Transform English to code*\nA simple parser will try to convert English sentences to code with the following steps: The verb of the sentece will be the function that’s going to be called. For the moment, if the sentence has no verb it’s an error. The other words are the parameters of the function. Articles, prepositions, and other words with no meaning will be ignored. The _parameters_ are converted to a Hash. The keys are the categories of the words, the values are objects with the words and more information. The hypernyms (<https:\/\/en.wikipedia.org\/wiki\/Hyponymy_and_hypernymy>) of a word are the candidates for the category (this is IMO the most complex problem to solve for the project, might need some heuristics).\nFor example the sentence:\n```Draw a red circle```\nWould get transformed to the code:\n```draw(color: 'red', shape: 'circle')```\nI was thinking about it for a text based language, here is the POC I did <https:\/\/github.com\/nlpl-lang\/nlpl-editor>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580086606.006200",
        "parent_user_id": "UJM9NG84Q",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/b\/b4\/Hyponym_and_hypernym.svg\/1200px-Hyponym_and_hypernym.svg.png",
                "image_width": 1200,
                "image_height": 488,
                "image_bytes": 62374,
                "title": "Hyponymy and hypernymy",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Hyponymy_and_hypernymy",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Hyponymy_and_hypernymy",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "In linguistics, a hyponym (from Greek hupó, \"under\" and ónoma, \"name\") is a word or phrase whose semantic field is included within that of another word, its hyperonym or hypernym (from Greek hupér, \"over\" and ónoma, \"name\"). In simpler terms, a hyponym is in a type-of relationship with its hypernym. For example, pigeon, crow, eagle and seagull are all hyponyms of bird (their hypernym); which, in turn, is a hyponym of animal.Other names for hypernym include umbrella term and blanket term. A synonym of co-hyponym based on same tier (and not hyponymic) relation is allonym (it means different name).",
                "fallback": "wikipedia: Hyponymy and hypernymy",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Hyponymy_and_hypernymy"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kgy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJM9NG84Q"
                            },
                            {
                                "type": "text",
                                "text": " I was thinking of a solution for natural language programming a while ago. This is what I came up with:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Transform English to code",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nA simple parser will try to convert English sentences to code with the following steps: The verb of the sentece will be the function that’s going to be called. For the moment, if the sentence has no verb it’s an error. The other words are the parameters of the function. Articles, prepositions, and other words with no meaning will be ignored. The "
                            },
                            {
                                "type": "text",
                                "text": "parameters",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are converted to a Hash. The keys are the categories of the words, the values are objects with the words and more information. The hypernyms ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Hyponymy_and_hypernymy"
                            },
                            {
                                "type": "text",
                                "text": ") of a word are the candidates for the category (this is IMO the most complex problem to solve for the project, might need some heuristics).\nFor example the sentence:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Draw a red circle"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would get transformed to the code:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "draw(color: 'red', shape: 'circle')"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI was thinking about it for a text based language, here is the POC I did "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/nlpl-lang\/nlpl-editor"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1580094227.008000",
        "client_msg_id": "a673b0cb-8ed8-4ac0-9046-784bd5376418",
        "text": "Ah I forgot about how threads are used here, apologies\nYour design reminds me somewhat of mozilla lab's canned ubiquity project, though voice driven. Though it seems to me that your project aims to be more composable than ubiquity?\nIncidentally, ubiquity got ported to webextensions, and thus can be tried out here: <https:\/\/gchristensen.github.io\/ubiquitywe\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580086606.006200",
        "parent_user_id": "UJM9NG84Q",
        "attachments": [
            {
                "service_name": "Ubiquity WebExtension",
                "title": "UbiquityWE",
                "title_link": "https:\/\/gchristensen.github.io\/ubiquitywe\/",
                "text": "A natural language interface for web browsers",
                "fallback": "Ubiquity WebExtension: UbiquityWE",
                "from_url": "https:\/\/gchristensen.github.io\/ubiquitywe\/",
                "service_icon": "https:\/\/gchristensen.github.io\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/gchristensen.github.io\/ubiquitywe\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=8g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah I forgot about how threads are used here, apologies\nYour design reminds me somewhat of mozilla lab's canned ubiquity project, though voice driven. Though it seems to me that your project aims to be more composable than ubiquity?\nIncidentally, ubiquity got ported to webextensions, and thus can be tried out here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gchristensen.github.io\/ubiquitywe\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580096869.008400",
        "client_msg_id": "f3963620-5bba-4024-93fd-5310fd52fdcb",
        "text": "<@UJM9NG84Q> I assume you're aware of Inform 7? We discussed this talk here a while back: <http:\/\/inform7.com\/talks\/2018\/06\/09\/london.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580086606.006200",
        "parent_user_id": "UJM9NG84Q",
        "attachments": [
            {
                "service_name": "Inform 7",
                "title": "Assessing Inform (London 2018 talk)",
                "title_link": "http:\/\/inform7.com\/talks\/2018\/06\/09\/london.html",
                "text": "This is the talk and slides from the June 2018 London IF meetup, held at Elephant Studios in London South Bank University on 9 June 2018. I was invited to speak about Inform, past, present and future. I’d like to thank the audience, who were not all from London nor even from England, for their insightful questions. This talk assumes a little familiarity with what is sometimes called parser IF, because it was preceded by an introduction from Emily Short, who led a live play-through of part of Mike Spivey’s recent work A Beauty Cold and Austere, and showed a gallery of contemporary pieces written in this genre. — Graham Nelson",
                "fallback": "Inform 7: Assessing Inform (London 2018 talk)",
                "ts": 1528549200,
                "from_url": "http:\/\/inform7.com\/talks\/2018\/06\/09\/london.html",
                "id": 1,
                "original_url": "http:\/\/inform7.com\/talks\/2018\/06\/09\/london.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jX9Nq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJM9NG84Q"
                            },
                            {
                                "type": "text",
                                "text": " I assume you're aware of Inform 7? We discussed this talk here a while back: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/inform7.com\/talks\/2018\/06\/09\/london.html"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]