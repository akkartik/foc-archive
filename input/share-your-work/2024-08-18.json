[
    {
        "user": "U0258UX5F1C",
        "type": "message",
        "ts": "1724007932.811389",
        "client_msg_id": "01238a64-f593-4ec5-92ef-a33e80948c3d",
        "text": "Are you familiar with <https:\/\/github.com\/microsoft\/codetour>? No infinite canvas, but some similar features.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfc24fe007c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/fc24fe007c2d362897829bf8302d29eb.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Tran",
            "display_name": "Jon Tran",
            "team": "T5TCAFTA9",
            "name": "jonnytran",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1720727079.821539",
        "parent_user_id": "U06G61YMZ4G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p\/1+a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you familiar with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/microsoft\/codetour"
                            },
                            {
                                "type": "text",
                                "text": "? No infinite canvas, but some similar features."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1724030104.795619",
        "client_msg_id": "2dd2006b-c948-4090-838a-2be5bc98954d",
        "text": "Call Return Spaghetti\n2024-08-18\nPAUL TARVYDAS\nAUG 19\n\nIn the essay referenced below, I examine why a diagram of a Call\/Return system makes less sense than a diagram of a concurrent system.\n\nCall\/Return operates in a LIFO - last-in first-out, stack-like - manner.\n\nAdopting an alternate perspective - FIFO, first-in first-out, queue-like manner - allows us to represent diagrams more easily.\n\nCPU chips implement CALL and RETURN instructions as single opcodes, but, they do not implement queue behaviour as single opcodes.\n\nMost popular languages are generally function-based, e.g. C, Haskell, Python, Javascript, Smalltalk, etc. Such function-based languages tend to adopt a LIFO (callstack) perspective and tend to use CALL and RETURN opcodes to fake out the function-based paradigm.\n\nSuch languages allow programmers to implement FIFO queues, but, such languages encourage the use of LIFO stacks. This seemingly small difference subtly affects designs with function-based - stack-based - thinking. This difference ultimately encourages single-threaded design while making multi-threaded design more difficult to imagine and to implement, as witnessed by the fact that most languages relegate multi-threading to hefty code libraries, while treating functions as basic building blocks.\n\nThis subtle encouragement towards function-based thinking has led to the general impression that Visual Programming Languages (VPLs), node-and-wire Diagrammatic Programming Languages (DPLs), Actors, etc., are ineffective programming tools.\n\nI argue that VPLs, DPLs, Actors, etc. are effective programming tools, but that their use is are ultimately discouraged by the over-use of the function-based paradigm.\n\nFurther\n\n<https:\/\/guitarvydas.github.io\/2020\/12\/09\/CALL-RETURN-Spaghetti.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724030104.795619",
        "reply_count": 12,
        "reply_users_count": 5,
        "latest_reply": "1724861466.424379",
        "reply_users": [
            "UCUSW7WVD",
            "UNS7QDKFV",
            "U05UK5T7LPP",
            "UGWUJUZHT",
            "U05PY5AQCA2"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1724031881.734239"
            },
            {
                "user": "UNS7QDKFV",
                "ts": "1724086742.244679"
            },
            {
                "user": "U05UK5T7LPP",
                "ts": "1724088935.108219"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1724125330.342289"
            },
            {
                "user": "U05UK5T7LPP",
                "ts": "1724178952.423689"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1724185403.702379"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1724255897.662259"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1724256129.162559"
            },
            {
                "user": "U05UK5T7LPP",
                "ts": "1724277445.592279"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1724823541.527449"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1724831973.687639"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1724861466.424379"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fp+7J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Call Return Spaghetti\n2024-08-18\nPAUL TARVYDAS\nAUG 19\n\nIn the essay referenced below, I examine why a diagram of a Call\/Return system makes less sense than a diagram of a concurrent system.\n\nCall\/Return operates in a LIFO - last-in first-out, stack-like - manner.\n\nAdopting an alternate perspective - FIFO, first-in first-out, queue-like manner - allows us to represent diagrams more easily.\n\nCPU chips implement CALL and RETURN instructions as single opcodes, but, they do not implement queue behaviour as single opcodes.\n\nMost popular languages are generally function-based, e.g. C, Haskell, Python, Javascript, Smalltalk, etc. Such function-based languages tend to adopt a LIFO (callstack) perspective and tend to use CALL and RETURN opcodes to fake out the function-based paradigm.\n\nSuch languages allow programmers to implement FIFO queues, but, such languages encourage the use of LIFO stacks. This seemingly small difference subtly affects designs with function-based - stack-based - thinking. This difference ultimately encourages single-threaded design while making multi-threaded design more difficult to imagine and to implement, as witnessed by the fact that most languages relegate multi-threading to hefty code libraries, while treating functions as basic building blocks.\n\nThis subtle encouragement towards function-based thinking has led to the general impression that Visual Programming Languages (VPLs), node-and-wire Diagrammatic Programming Languages (DPLs), Actors, etc., are ineffective programming tools.\n\nI argue that VPLs, DPLs, Actors, etc. are effective programming tools, but that their use is are ultimately discouraged by the over-use of the function-based paradigm.\n\nFurther\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/guitarvydas.github.io\/2020\/12\/09\/CALL-RETURN-Spaghetti.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U06SS0DHZD1"
                ],
                "count": 1
            },
            {
                "name": "blue_heart",
                "users": [
                    "U07JALQGJRG"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1724031881.734239",
        "client_msg_id": "4158a3e0-896d-443a-9679-a59d63538642",
        "text": "One thing I've tried to articulate to you in the past, might be worth trying again:\n\nLIFO has one advantage over FIFO as you implement it so far in your projects:\n• call\/return involves passing arbitrary numbers of values between a *single* producer and a *single* consumer (caller\/callee).\n• FIFOs involve passing arbitrary numbers of values between *multiple* producers and a single consumer (or vice versa)\nI think the single\/single constraint is easier to reason about. FIFOs might be easier to program with if you somehow preserve that constraint. It would certainly eliminate at a stroke a bunch of corner cases of timing and synchronization that bother me every time I think about your stuff.\n\nOne way to achieve this would be to say the nodes in the VPL can only have a single input port, but that port can take on arbitrarily structured types (records, arrays, etc.). Then you'd simulate multiple ports using tuple types, but the tuples would have to be explicitly created in a single node at a time.\n\nAnother way would be to restrict fan-in or fan-out somehow. Either input ports or output ports can only connect to a single wire. (I work at <https:\/\/recroom.com>, and our VPL includes both the input and output constraints in different situations. Might be worth a look: <https:\/\/blog.recroom.com\/posts\/2021\/5\/03\/the-circuits-handbook.>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724030104.795619",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G539i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thing I've tried to articulate to you in the past, might be worth trying again:\n\nLIFO has one advantage over FIFO as you implement it so far in your projects:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "call\/return involves passing arbitrary numbers of values between a "
                                    },
                                    {
                                        "type": "text",
                                        "text": "single",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " producer and a "
                                    },
                                    {
                                        "type": "text",
                                        "text": "single",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " consumer (caller\/callee)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "FIFOs involve passing arbitrary numbers of values between "
                                    },
                                    {
                                        "type": "text",
                                        "text": "multiple",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " producers and a single consumer (or vice versa)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI think the single\/single constraint is easier to reason about. FIFOs might be easier to program with if you somehow preserve that constraint. It would certainly eliminate at a stroke a bunch of corner cases of timing and synchronization that bother me every time I think about your stuff.\n\nOne way to achieve this would be to say the nodes in the VPL can only have a single input port, but that port can take on arbitrarily structured types (records, arrays, etc.). Then you'd simulate multiple ports using tuple types, but the tuples would have to be explicitly created in a single node at a time.\n\nAnother way would be to restrict fan-in or fan-out somehow. Either input ports or output ports can only connect to a single wire. (I work at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/recroom.com"
                            },
                            {
                                "type": "text",
                                "text": ", and our VPL includes both the input and output constraints in different situations. Might be worth a look: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.recroom.com\/posts\/2021\/5\/03\/the-circuits-handbook."
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    }
]