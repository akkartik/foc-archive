[
    {
        "user": "UDRF3ALP4",
        "type": "message",
        "ts": "1709541355.583279",
        "client_msg_id": "28725ED7-378B-464A-9853-28D3E3821BF4",
        "text": "Happy to hear that! I’m not currently working on any structured code editor thing, though I’m considering forking Zed, which has become my first choice for Rust, to add unwrap, since coding without it feels toothless.\nI’d be curious to read or talk about your editor, is there a place for that already?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cc11a4b410bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-01-16\/527084657030_cc11a4b410bd932425de_72.jpg",
            "first_name": "Gregor",
            "real_name": "Gregor",
            "display_name": "Gregor",
            "team": "T5TCAFTA9",
            "name": "gregorwbr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708454288.005369",
        "parent_user_id": "UDRF3ALP4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wDZiq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Happy to hear that! "
                            },
                            {
                                "type": "text",
                                "text": "I’m"
                            },
                            {
                                "type": "text",
                                "text": " not currently working on any structured code editor thing, though I’m considering forking Zed, which has become my first choice for Rust, to add unwrap, since coding without it feels toothless.\n"
                            },
                            {
                                "type": "text",
                                "text": "I’d"
                            },
                            {
                                "type": "text",
                                "text": " be curious to read or talk about your editor, is there a place for that already?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1709562428.728819",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1709562552.000000"
        },
        "client_msg_id": "3babc6f0-5cd4-4ad2-a055-9bd4d5d212db",
        "text": "In the meantime, I published a few more posts in this series:\n5 • _<https:\/\/stefanlesser.substack.com\/p\/on-simplicity-5-hiding-complexity|Hiding complexity>_ discusses how we mostly deal with complexity today and why that approach has limitations that lead to a software lifecycle that often ends in bloat or users looking for something new.\n6 • _<https:\/\/stefanlesser.substack.com\/p\/on-simplicity-6-reducing-complexity|Reducing complexity>_ briefly looks at how and why we remove complexity today, and then proposes that maybe complexity isn’t actually something that needs to be removed, but something we crave; we need to shift our perspective to how we can grow complexity intelligibly.\n7 • _<https:\/\/stefanlesser.substack.com\/p\/on-simplicity-7-unfolding-complexity|Unfolding complexity>_ takes Christopher Alexander’s fundamental process of Unfolding as a guide to how we can grow complexity in an intelligible way, and how this process is remarkably different to how we develop software today.\n8 • _<https:\/\/stefanlesser.substack.com\/p\/on-simplicity-8-identity|Identity>_ sharpens an aspect I alluded to in the previous posts, but didn’t explain well enough — how important it is to create a strong identity, and how we usually end up doing the exact opposite.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704567764.240209",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EHUjR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the meantime, I published a few more posts in this series:\n5 • "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stefanlesser.substack.com\/p\/on-simplicity-5-hiding-complexity",
                                "text": "Hiding complexity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " discusses how we mostly deal with complexity today and why that approach has limitations that lead to a software lifecycle that often ends in bloat or users looking for something new.\n6 • "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stefanlesser.substack.com\/p\/on-simplicity-6-reducing-complexity",
                                "text": "Reducing complexity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " briefly looks at how and why we remove complexity today, and then proposes that maybe complexity isn’t actually something that needs to be removed, but something we crave; we need to shift our perspective to how we can grow complexity intelligibly.\n7 • "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stefanlesser.substack.com\/p\/on-simplicity-7-unfolding-complexity",
                                "text": "Unfolding complexity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " takes Christopher Alexander’s fundamental process of Unfolding as a guide to how we can grow complexity in an intelligible way, and how this process is remarkably different to how we develop software today.\n8 • "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stefanlesser.substack.com\/p\/on-simplicity-8-identity",
                                "text": "Identity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " sharpens an aspect I alluded to in the previous posts, but didn’t explain well enough — how important it is to create a strong identity, and how we usually end up doing the exact opposite."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1709563086.496579",
        "client_msg_id": "402c0f02-13c8-4cd6-becd-953efac0fce1",
        "text": "These last four post address a common issue I see in software as it is created today: that over time most software seems to become less interesting and less relevant, ready to be replaced with something else, something new. While that may not strike you as a revelatory observation by itself, my reasoning why might.\n\nIt looks like there will still be a few more posts until I consider this series finished. One more thing I’m excited to get to over the next few posts is what I believe a most direct application of concepts from Christopher Alexander’s late work and magnum opus _The Nature of Order_ to software development — a connection I’ve been trying to make for a long time (as in _years_).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704567764.240209",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rN220",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These last four post address a common issue I see in software as it is created today: that over time most software seems to become less interesting and less relevant, ready to be replaced with something else, something new. While that may not strike you as a revelatory observation by itself, my reasoning why might.\n\nIt looks like there will still be a few more posts until I consider this series finished. One more thing I’m excited to get to over the next few posts is what I believe a most direct application of concepts from Christopher Alexander’s late work and magnum opus "
                            },
                            {
                                "type": "text",
                                "text": "The Nature of Order",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to software development — a connection I’ve been trying to make for a long time (as in "
                            },
                            {
                                "type": "text",
                                "text": "years",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U5STGTB3J",
        "thread_ts": "1704567764.240209",
        "root": {
            "user": "U5STGTB3J",
            "type": "message",
            "ts": "1704567764.240209",
            "client_msg_id": "49255280-6225-45b2-9c3a-99369120466f",
            "text": "A few weeks ago I started a new series of blog posts (or “newsletters”, in Substack parlance) about *simplicity*:\n\n1 • _<https:\/\/stefanlesser.substack.com\/p\/on-simplicity|On simplicity>_ introduces the series with how my thinking about simplicity has changed over the years.\n2 • _<https:\/\/stefanlesser.substack.com\/p\/on-simplicity-2-meaning-ful-design|Meaning-ful design>_ connects simplicity to meaning making and coherence.\n3 • _<https:\/\/stefanlesser.substack.com\/p\/on-simplicity-3-familiarity|Familiarity>_ explores how complex things can be surprisingly simple and why we can’t ignore context.\n4 • _<https:\/\/stefanlesser.substack.com\/p\/on-simplicity-4-reciprocal-realization|Reciprocal realization>_ frames design as a complex dynamic process of mutual adaptation between designer and designed object.\n… _I expect about four or five more posts coming after that, but I haven’t written them yet, so I have no idea._ :slightly_smiling_face:\n\nA lot of this draws on 4E cognitive science, design theory, and philosophy. As such it may perhaps be less technical than you would expect it to be, although I try much harder in this series to relate it more directly to programming and software development than in <https:\/\/stefanlesser.substack.com\/p\/previously-a-recap|my last>.\n\nAnd that’s why I post it here, today. I’m hoping to learn if this resonates at all with a technical audience, or if this is still too abstract. I know we’re all craving for the easily applicable _Top 10 Things to Make Things Simple_ (and number 6 will surprise you), but I have reason to believe that it’s just not that… well… simple. But I think I’m slowly making progress towards synthesizing something valuable, even if I can’t express it as beautifully as I would like to. Yet.\n\nLet me know what you think, and please ask any questions you may have (in thread or via DM). Appreciate your feedback!",
            "team": "T5TCAFTA9",
            "thread_ts": "1704567764.240209",
            "reply_count": 3,
            "reply_users_count": 1,
            "latest_reply": "1709565265.469589",
            "reply_users": [
                "U5STGTB3J"
            ],
            "replies": [
                {
                    "user": "U5STGTB3J",
                    "ts": "1709562428.728819"
                },
                {
                    "user": "U5STGTB3J",
                    "ts": "1709563086.496579"
                },
                {
                    "user": "U5STGTB3J",
                    "ts": "1709565265.469589"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "iSrt+",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "A few weeks ago I started a new series of blog posts (or “newsletters”, in Substack parlance) about "
                                },
                                {
                                    "type": "text",
                                    "text": "simplicity",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ":\n\n1 • "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/stefanlesser.substack.com\/p\/on-simplicity",
                                    "text": "On simplicity",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " introduces the series with how my thinking about simplicity has changed over the years.\n2 • "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/stefanlesser.substack.com\/p\/on-simplicity-2-meaning-ful-design",
                                    "text": "Meaning-ful design",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " connects simplicity to meaning making and coherence.\n3 • "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/stefanlesser.substack.com\/p\/on-simplicity-3-familiarity",
                                    "text": "Familiarity",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " explores how complex things can be surprisingly simple and why we can’t ignore context.\n4 • "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/stefanlesser.substack.com\/p\/on-simplicity-4-reciprocal-realization",
                                    "text": "Reciprocal realization",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " frames design as a complex dynamic process of mutual adaptation between designer and designed object.\n… "
                                },
                                {
                                    "type": "text",
                                    "text": "I expect about four or five more posts coming after that, but I haven’t written them yet, so I have no idea. ",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "emoji",
                                    "name": "slightly_smiling_face",
                                    "unicode": "1f642"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nA lot of this draws on 4E cognitive science, design theory, and philosophy. As such it may perhaps be less technical than you would expect it to be, although I try much harder in this series to relate it more directly to programming and software development than in "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/stefanlesser.substack.com\/p\/previously-a-recap",
                                    "text": "my last"
                                },
                                {
                                    "type": "text",
                                    "text": ".\n\nAnd that’s why I post it here, today. I’m hoping to learn if this resonates at all with a technical audience, or if this is still too abstract. I know we’re all craving for the easily applicable "
                                },
                                {
                                    "type": "text",
                                    "text": "Top 10 Things to Make Things Simple",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " (and number 6 will surprise you), but I have reason to believe that it’s just not that… well… simple. But I think I’m slowly making progress towards synthesizing something valuable, even if I can’t express it as beautifully as I would like to. Yet.\n\nLet me know what you think, and please ask any questions you may have (in thread or via DM). Appreciate your feedback!"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1709565265.469589",
        "client_msg_id": "9cb4916f-2747-4341-a051-12abb1ecc427",
        "text": "As I keep writing my article series _<https:\/\/stefanlesser.substack.com|On Simplicity…>_ I’d like to further improve it with feedback and have now set up a first online discussion for it.\nOn *Thursday, March 14th* we’ll start with discussing the first post in the series. You don’t need to be familiar with the whole series; just reading the first post is recommended but not required. Have a look at the <https:\/\/lu.ma\/p1p4b52k|Luma invite> for the exact time in your time zone and to sign up (it’s a free event via Zoom).\nWould be great to have some of you there!",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OTRiU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As I keep writing my article series "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stefanlesser.substack.com",
                                "text": "On Simplicity…",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I’d like to further improve it with feedback and have now set up a first online discussion for it.\nOn "
                            },
                            {
                                "type": "text",
                                "text": "Thursday, March 14th",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " we’ll start with discussing the first post in the series. You don’t need to be familiar with the whole series; just reading the first post is recommended but not required. Have a look at the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lu.ma\/p1p4b52k",
                                "text": "Luma invite"
                            },
                            {
                                "type": "text",
                                "text": " for the exact time in your time zone and to sign up (it’s a free event via Zoom).\nWould be great to have some of you there!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1709581263.015259",
        "client_msg_id": "b3020a97-c876-407f-b756-6c1c99090ec9",
        "text": "I was unaware of the Knuth response to Naur. Thanks for mentioning it! I found a copy at\n<https:\/\/tug.org\/TUGboat\/tb10-4\/tb26complete.pdf|https:\/\/tug.org\/TUGboat\/tb10-4\/tb26complete.pdf>\n\nKnuth invented a new kind of documentation, one that hardly anyone uses, but that is specifically designed for communicating how a program works to other human beings.\n\nKnuth has also expended great effort in the study of other people's code and programs, including code written in long dead programming languages.\n\nIf there is anyone in the world capable of transcending the limits described by Peter Naur, both by transmitting the theory of a program and by recreating it, it would be Donald Knuth. I see no reason to doubt the truth of Knuth's claims, but I also don't see them as contradicting Naur.\n\nNaur does not claim it is impossible to revive a program in practical terms, only that it is difficult, frustrating, and time-consuming, and \"may lead to a revived theory that differs from the one originally had by the program authors and so may contain discrepancies with the program text.\" I believe his point is that you cannot be certain the revived theory is the same as the original theory, however I do not have enough experience with literate programming to judge Knuth's claim that a well-written literate program might have a good chance of being accurately revived.\n\nCalling the stored program computer a \"von Neumann model\" does a tremendous disservice to J. Presper Eckert who invented and wrote up the idea around 6 months before von Neumann joined the ENIAC project. See the book A History of Computing in the\nTwentieth Century for a copy of the original memo.\n\nvon Neumann wrote a draft report that was widely shared informally (<https:\/\/en.m.wikipedia.org\/wiki\/First_Draft_of_a_Report_on_the_EDVAC|https:\/\/en.m.wikipedia.org\/wiki\/First_Draft_of_a_Report_on_the_EDVAC>), but to the best of my knowledge he never claimed the ideas were his. He was writing up the ENIAC team's plans for the EDVAC.\n\nY'all may also enjoy von Neumann's paper \"PROBABILISTIC LOGICS AND THE SYNTHESIS OF RELIABLE\nORGANISMS FROM UNRELIABLE COMPONENTS.\" <https:\/\/static.ias.edu\/pitp\/archive\/2012files\/Probabilistic_Logics.pdf|https:\/\/static.ias.edu\/pitp\/archive\/2012files\/Probabilistic_Logics.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tbbu3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was unaware of the Knuth response to Naur. Thanks for mentioning it! I found a copy at\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tug.org\/TUGboat\/tb10-4\/tb26complete.pdf",
                                "text": "https:\/\/tug.org\/TUGboat\/tb10-4\/tb26complete.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nKnuth invented a new kind of documentation, one that hardly anyone uses, but that is specifically designed for communicating how a program works to other human beings.\n\nKnuth has also expended great effort in the study of other people's code and programs, including code written in long dead programming languages.\n\nIf there is anyone in the world capable of transcending the limits described by Peter Naur, both by transmitting the theory of a program and by recreating it, it would be Donald Knuth. I see no reason to doubt the truth of Knuth's claims, but I also don't see them as contradicting Naur.\n\nNaur does not claim it is impossible to revive a program in practical terms, only that it is difficult, frustrating, and time-consuming, and \"may lead to a revived theory that differs from the one originally had by the program authors and so may contain discrepancies with the program text.\" I believe his point is that you cannot be certain the revived theory is the same as the original theory, however I do not have enough experience with literate programming to judge Knuth's claim that a well-written literate program might have a good chance of being accurately revived.\n\nCalling the stored program computer a \"von Neumann model\" does a tremendous disservice to J. Presper Eckert who invented and wrote up the idea around 6 months before von Neumann joined the ENIAC project. See the book A History of Computing in the\rTwentieth Century for a copy of the original memo.\n\nvon Neumann wrote a draft report that was widely shared informally ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/First_Draft_of_a_Report_on_the_EDVAC",
                                "text": "https:\/\/en.m.wikipedia.org\/wiki\/First_Draft_of_a_Report_on_the_EDVAC"
                            },
                            {
                                "type": "text",
                                "text": "), but to the best of my knowledge he never claimed the ideas were his. He was writing up the ENIAC team's plans for the EDVAC.\n\nY'all may also enjoy von Neumann's paper \"PROBABILISTIC LOGICS AND THE SYNTHESIS OF RELIABLE\nORGANISMS FROM UNRELIABLE COMPONENTS.\" "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/static.ias.edu\/pitp\/archive\/2012files\/Probabilistic_Logics.pdf",
                                "text": "https:\/\/static.ias.edu\/pitp\/archive\/2012files\/Probabilistic_Logics.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05597GCDDK",
        "type": "message",
        "ts": "1709586600.804779",
        "client_msg_id": "a7d2bc73-0482-4fd1-b1ab-bf388adb2e8c",
        "text": "I was glad to hear the new discussion generated by Programming as Theory Building - both the episode and the paper. It is my favourite episode and was very influential on me!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "07fbb70c0e39",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-28\/5179303716261_07fbb70c0e3980e07e51_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Buckmaster",
            "display_name": "Daniel Buckmaster",
            "team": "T5TCAFTA9",
            "name": "mail397",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/ZaHg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was glad to hear the new discussion generated by Programming as Theory Building - both the episode and the paper. It is my favourite episode and was very influential on me!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1709606317.008129",
        "client_msg_id": "D3F0561E-7E52-4B78-B193-DE08F1822FD5",
        "text": "I appreciated the examples of non-distributed systems that benefit from robustness that had to do with being robust to _programmer error_. That type of error is harder to characterize than the random bit-flipping of cosmic rays because it’s so human, but it’s the type of error that I most often think of robustness in terms of.\n\nI didn’t have as good a word for it before. “Defensive programming” doesn’t really capture it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hWuA+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I appreciated the examples of non-distributed systems that benefit from robustness that had to do with being robust to "
                            },
                            {
                                "type": "text",
                                "text": "programmer error",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ". That type of error is harder to characterize than the random bit-flipping of cosmic rays because it’s so human, but it’s the type of error that I most often think of robustness in terms of.\n\nI didn’t have as good a word for it before. “Defensive programming” doesn’t really capture it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U04Q53X6P7W"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1709606916.754259",
        "client_msg_id": "D39C12E6-87D6-41A8-80C4-ED99CCB555B9",
        "text": "Implementing invariants directly like Jimmy mentioned. Sort the thing every time if it’s supposed to be sorted, rather than trying to maintain that property indirectly. It’s not just about doing the easiest thing first, or avoiding premature optimization. It’s like, when I mess up code elsewhere, how do I make sure that this part won’t make it worse.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NPozx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Implementing invariants directly like Jimmy mentioned. Sort the thing every time if it’s supposed to be sorted, rather than trying to maintain that property indirectly. "
                            },
                            {
                                "type": "text",
                                "text": "It’s"
                            },
                            {
                                "type": "text",
                                "text": " not just about doing the easiest thing first, or avoiding premature optimization"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " It’s like, when I mess up code elsewhere, how do I make sure that this part "
                            },
                            {
                                "type": "text",
                                "text": "won’t"
                            },
                            {
                                "type": "text",
                                "text": " make it worse."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1709606934.486319",
        "client_msg_id": "44550BB2-F8EC-46B7-8D61-30F2887B4A8D",
        "text": "I dunno, good episode.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9n1D5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I dunno, good episode."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U03R0B9U1GD"
                ],
                "count": 2
            }
        ]
    }
]