[
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1695371739.666619",
        "edited": {
            "user": "U05SU27S1M2",
            "ts": "1695371782.000000"
        },
        "client_msg_id": "35933a8a-b034-4af7-928a-80efc9c23457",
        "text": "One thing I've noticed working with Realtalk is that the natural language style tends to have a trade-off in making things easy to read, but a bit harder to write.. You can read them like English sentences but if you try to write them that way you probably will get a connective wrong or some other subtle thing and it won't parse or won't communicate with something else.\nMore generally I think it's easy to conflate readability and writeability, they're obviously related but still quite different properties.\nActually for a lot of things writeability is far more important than readability. E.g. when live-coding music you don't necessarily have to read\/understand exactly what code is doing because you can understand the code by experiencing the results while writing, rather than reading the code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695371739.666619",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1695497339.284899",
        "reply_users": [
            "U04E5QAD6DD",
            "U05SU27S1M2",
            "UA14TGLTC",
            "U02U0AS3J49"
        ],
        "replies": [
            {
                "user": "U04E5QAD6DD",
                "ts": "1695386854.354549"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1695387050.922189"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1695391688.501619"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1695392003.407949"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1695393566.206979"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1695406987.187959"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1695497339.284899"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VtQa8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thing I've noticed working with Realtalk is that the natural language style tends to have a trade-off in making things easy to read, but a bit harder to write.. You can read them like English sentences but if you try to write them that way you probably will get a connective wrong or some other subtle thing and it won't parse or won't communicate with something else.\nMore generally I think it's easy to conflate readability and writeability, they're obviously related but still quite different properties.\nActually for a lot of things writeability is far more important than readability. E.g. when live-coding music you don't necessarily have to read\/understand exactly what code is doing because you can understand the code by experiencing the results while writing, rather than reading the code."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            },
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "U02U0AS3J49",
                    "U016VUZGUUQ"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1695371915.253569",
        "client_msg_id": "8211f420-9ba2-4357-b835-71980cf6558d",
        "text": "So for HTML would you say that the data is informal language, but the metadata\/semantic markup around it is formal language?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695279976.600129",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZNd=n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So for HTML would you say that the data is informal language, but the metadata\/semantic markup around it is formal language?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04E5QAD6DD",
        "type": "message",
        "ts": "1695386854.354549",
        "client_msg_id": "9cd9bc39-a822-4c35-9961-8c9736149add",
        "text": "That's interesting — that sounds kind of like an uncanny valley of prose &amp; programming?\n\n(I wonder how Inform manages to escape that trap…or doesn't it?)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3e6bba2ae45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-06\/5085861186081_e3e6bba2ae4575d17358_72.jpg",
            "first_name": "David",
            "real_name": "David Alan Hjelle",
            "display_name": "David Alan Hjelle",
            "team": "T5TCAFTA9",
            "name": "dahjelle_futureofcodi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695371739.666619",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CpGq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's interesting — that sounds kind of like an uncanny valley of prose & programming?\n\n(I wonder how Inform manages to escape that trap…or doesn't it?)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1695387050.922189",
        "client_msg_id": "44187fe8-f871-4422-b117-a261ee1cd395",
        "text": "I wouldn't say it's a trap, just a tradeoff.. and something you quickly get used to.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695371739.666619",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EtX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wouldn't say it's a trap, just a tradeoff.. and something you quickly get used to."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            },
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1695391688.501619",
        "client_msg_id": "40ec2336-0939-4169-abc9-216c14df2e53",
        "text": "Tool support.  Consider that beyond concerns of getting the syntax right, you want to \"experiencing the results\" to know whether it does the right thing.  For example, whether whatever assumptions or mental model you had when writing the rule play well with the rest of the environment.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695371739.666619",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hwovh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tool support.  Consider that beyond concerns of getting the syntax right, you want to \"experiencing the results\" to know whether it does the right thing.  For example, whether whatever assumptions or mental model you had when writing the rule play well with the rest of the environment."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1695391759.846499",
        "client_msg_id": "1289df64-6836-49d9-a660-64d93fbdb974",
        "text": "Yes. XML is a more difficult case, because it is used both as a markup language for textual documents (i.e. Docbook) and as a file format for storing tree-structured data.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695279976.600129",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=oX0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes. XML is a more difficult case, because it is used both as a markup language for textual documents (i.e. Docbook) and as a file format for storing tree-structured data."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1695392003.407949",
        "client_msg_id": "537e23f4-8c37-4587-8dbc-f8a32284670d",
        "text": "<@UA14TGLTC> That seems to suggest a hylomorphic way of working where you know what the results should be before you make it. I'd say that's generally not how people make things, i.e. that experiencing the results is more about understanding what you wrote for the first time, rather than seeing whether you got what you originally wanted.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695371739.666619",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZagXX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " That seems to suggest a hylomorphic way of working where you know what the results should be before you make it. I'd say that's generally not how people make things, i.e. that experiencing the results is more about understanding what you wrote for the first time, rather than seeing whether you got what you originally wanted."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1695393566.206979",
        "client_msg_id": "801F8CC3-08BD-4879-9F79-F3FA20C0F1A0",
        "text": "More I was thinking of the system working with you to disambiguate, refine, so you don’t exactly know what you want in advance but when presented with options with differences clearly indicated, you might be better at refining your idea.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695371739.666619",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EqC+Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More I was thinking of the system working with you to disambiguate, refine, so you don’t exactly know what you want in advance but when presented with options with differences clearly indicated"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " you might be better at refining your idea"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U05SU27S1M2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1695406987.187959",
        "client_msg_id": "e559d9f2-6a9b-4a55-9d04-6d8fddfc0c35",
        "text": "I opted for Blockly's structured editor instead of controlled natural language in text for exactly this reason. Easy to read and easy to write are orthagonal. I think a lot of controlled natural languages actually end up as a worse user experience as a result of the false expectation they set up that writing it will be easy, and how violently that high expectation is violated. A regular code language at least looks hard to write, so when it is you don't feel like you've been lied to.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695371739.666619",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f2IYE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I opted for Blockly's structured editor instead of controlled natural language in text for exactly this reason. Easy to read and easy to write are orthagonal. I think a lot of controlled natural languages actually end up as a worse user experience as a result of the false expectation they set up that writing it will be easy, and how violently that high expectation is violated. A regular code language at least looks hard to write, so when it is you don't feel like you've been lied to."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05FSHWJER3",
        "type": "message",
        "ts": "1695428339.428769",
        "client_msg_id": "9ae437fb-f38e-47af-a03b-6b1c78fc5fdb",
        "text": "OCaml has the \"time travel\" debugger in ocamldebug, for programs compiled to bytecode.\n<https:\/\/www.typeerror.org\/docs\/ocaml\/debugger>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7058c846b4ac",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5539586656738_7058c846b4aca2e9582d_72.png",
            "first_name": "Tim",
            "real_name": "Tim Lavoie",
            "display_name": "Tim Lavoie",
            "team": "T5TCAFTA9",
            "name": "tim813",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2",
        "attachments": [
            {
                "from_url": "https:\/\/www.typeerror.org\/docs\/ocaml\/debugger",
                "service_icon": "https:\/\/www.typeerror.org\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.typeerror.org\/docs\/ocaml\/debugger",
                "fallback": "18.  The debugger (ocamldebug) - OCaml Documentation",
                "text": "Chapter ‍18 The debugger (ocamldebug) 18.1 Compiling for debugging 18.2 Invocation 18.3 Commands 18.4 Executing a program 18.5 Breakpoints 18.6 The call stack 18.7 Examining variable values 18.8 Controlling the debugger 18.9 Miscellaneous commands 18.10 Running the debugger under Emacs This chapter describes the OCaml source-level replay debugger ocamldebug. Unix: The debugger is available on Unix systems that provide BSD sockets. Windows: The debugger is available under the Cygwin port of OCaml, but not under the native Win32 ports. 18.1 Compiling for debugging Before the debugger can be used, the program must be compiled and linked with the -g option:...",
                "title": "18.  The debugger (ocamldebug) - OCaml Documentation",
                "title_link": "https:\/\/www.typeerror.org\/docs\/ocaml\/debugger",
                "service_name": "typeerror.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0PbE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OCaml has the \"time travel\" debugger in ocamldebug, for programs compiled to bytecode.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.typeerror.org\/docs\/ocaml\/debugger"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05FSHWJER3",
        "type": "message",
        "ts": "1695429358.044719",
        "client_msg_id": "36f6c12f-51da-41aa-824f-9820b15ad860",
        "text": "I had a couple thoughts bouncing around, listening to, 66 • A Small Matter of Programming by Bonnie Nardi.\n• Jimmy mentioned writing browser extensions. Just recently, there was a thread (probably on HN), with discussion of people sharing filter snippets for uBlock Origin. It turns out that besides simply filtering links and so on, the snippets are also being used to modify styles and visibility for all sorts of things that people find needing change on various web sites. This, along with the whole \"view source\" era discussion, suggests that it hasn't gone away. Browser extensions such as uBlock Origin also include a colour-style picker for identifying the elements on the page that you're interested in. So in a way, it is very much enabling a simple sort of end-user programming, right in the browser. You won't see the back-end, but can manipulate the DOM that is very much on the client.\n• Regarding the discussion in the episode on early education, teaching kids programming, I was thinking along the lines of teaching the means to observe. \"View source\" is one such part, along with browser dev-tools. Perhaps most people won't be interested in modifying the programs they use, but teaching the idea that introspection, via software-as-microscope, is possible. Too much of our computing is directed to being strictly consumption, that I suspect few people will even think of being able to look at the innards. Think Wireshark for networks, source-level debuggers where you have source, or binary analysis tools where you don't. (Probably related, I got a Snapshot cartridge for the C64 as a youth, and was amazed at being able to capture the entire state of a program, fiddle with it, and save it as an executable to resume.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7058c846b4ac",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5539586656738_7058c846b4aca2e9582d_72.png",
            "first_name": "Tim",
            "real_name": "Tim Lavoie",
            "display_name": "Tim Lavoie",
            "team": "T5TCAFTA9",
            "name": "tim813",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695429358.044719",
        "reply_count": 14,
        "reply_users_count": 6,
        "latest_reply": "1695800149.347069",
        "reply_users": [
            "UC2A2ARPT",
            "UFEQUBNNT",
            "U05FSHWJER3",
            "URKQXRCAC",
            "UJBAJNFLK",
            "U02QC0PPER3"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1695429646.859079"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1695432716.493709"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1695432783.733149"
            },
            {
                "user": "U05FSHWJER3",
                "ts": "1695448813.968279"
            },
            {
                "user": "URKQXRCAC",
                "ts": "1695456971.238919"
            },
            {
                "user": "URKQXRCAC",
                "ts": "1695457628.278989"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1695478297.006229"
            },
            {
                "user": "U05FSHWJER3",
                "ts": "1695489984.568849"
            },
            {
                "user": "U05FSHWJER3",
                "ts": "1695490199.103049"
            },
            {
                "user": "U05FSHWJER3",
                "ts": "1695491159.119399"
            },
            {
                "user": "U05FSHWJER3",
                "ts": "1695491880.283209"
            },
            {
                "user": "URKQXRCAC",
                "ts": "1695559248.850609"
            },
            {
                "user": "U05FSHWJER3",
                "ts": "1695569407.692519"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1695800149.347069"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T0rCq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I had a couple thoughts bouncing around, listening to, 66 • A Small Matter of Programming by Bonnie Nardi.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Jimmy mentioned writing browser extensions. Just recently, there was a thread (probably on HN), with discussion of people sharing filter snippets for uBlock Origin. It turns out that besides simply filtering links and so on, the snippets are also being used to modify styles and visibility for all sorts of things that people find needing change on various web sites. This, along with the whole \"view source\" era discussion, suggests that it hasn't gone away. Browser extensions such as uBlock Origin also include a colour-style picker for identifying the elements on the page that you're interested in. So in a way, it is very much enabling a simple sort of end-user programming, right in the browser. You won't see the back-end, but can manipulate the DOM that is very much on the client."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Regarding the discussion in the episode on early education, teaching kids programming, I was thinking along the lines of teaching the means to observe. \"View source\" is one such part, along with browser dev-tools. Perhaps most people won't be interested in modifying the programs they use, but teaching the idea that introspection, via software-as-microscope, is possible. Too much of our computing is directed to being strictly consumption, that I suspect few people will even think of being able to look at the innards. Think Wireshark for networks, source-level debuggers where you have source, or binary analysis tools where you don't. (Probably related, I got a Snapshot cartridge for the C64 as a youth, and was amazed at being able to capture the entire state of a program, fiddle with it, and save it as an executable to resume.)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK",
                    "URKQXRCAC"
                ],
                "count": 3
            },
            {
                "name": "dart",
                "users": [
                    "U02QC0PPER3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1695429646.859079",
        "client_msg_id": "7CEF36BC-356E-4CAB-ADC3-2E5329B738F0",
        "text": "Ah, lovely thoughts. Thank you. I like the idea of \"software-as-microscope\", if I take your meaning correctly. ResEdit, or dtrace, for instance. Does anyone know good examples that are designed for nontechnical people?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695429358.044719",
        "parent_user_id": "U05FSHWJER3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NOdj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, lovely thoughts"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Thank you"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I like the idea of \"software-as-microscope\", if I take your meaning correctly"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " ResEdit, or dtrace, for instance"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Does anyone know good examples that are designed for nontechnical people?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1695432716.493709",
        "client_msg_id": "758A88FB-A802-4182-B30A-2B115E6474A0",
        "text": "The screen magnifier (literally), in particular when it doubles as a color picker.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695429358.044719",
        "parent_user_id": "U05FSHWJER3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7VR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The screen magnifier (literally), in particular when it doubles as a color picker."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1695432783.733149",
        "client_msg_id": "27075B7E-E43C-42FA-8F33-59293F25F60A",
        "text": "Task Manager",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695429358.044719",
        "parent_user_id": "U05FSHWJER3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7K+F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Task Manager"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05FSHWJER3",
        "type": "message",
        "ts": "1695448813.968279",
        "client_msg_id": "8bc3f41c-86ef-40f8-818e-c53f1b84998d",
        "text": "Huh, there's even Dtrace for Windows.\n\nThe Snapshot cartridge struck me as miraculous. One physical button on the top, pushing that dropped you into a menu, with options such as a monitor to inspect the current state of the system. For a know-nothing kid, it was an eye-opener.\n<https:\/\/rr.c64.org\/wiki\/Super_Snapshot>\n\nFor web stuff, tools such as OWASP ZAP or Burp Suite may not tell you what server-side code does, but you can learn to infer quite a lot. Inspect the requests\/responses, interrupt and fiddle or replay them, and so on.\n\nI don't know about non-technical resources, but anything that integrated with a scripting environment would be more accessible to the layperson than most. ARexx for the Amiga for instance, to script and connect applications that support it. (<https:\/\/en.wikipedia.org\/wiki\/ARexx>)  Or image-based environments that include documentation, and the ability to inspect the innards. Lisp environments perhaps, or SmallTalk.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7058c846b4ac",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5539586656738_7058c846b4aca2e9582d_72.png",
            "first_name": "Tim",
            "real_name": "Tim Lavoie",
            "display_name": "Tim Lavoie",
            "team": "T5TCAFTA9",
            "name": "tim813",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695429358.044719",
        "parent_user_id": "U05FSHWJER3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R88",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Huh, there's even Dtrace for Windows.\n\nThe Snapshot cartridge struck me as miraculous. One physical button on the top, pushing that dropped you into a menu, with options such as a monitor to inspect the current state of the system. For a know-nothing kid, it was an eye-opener.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rr.c64.org\/wiki\/Super_Snapshot"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFor web stuff, tools such as OWASP ZAP or Burp Suite may not tell you what server-side code does, but you can learn to infer quite a lot. Inspect the requests\/responses, interrupt and fiddle or replay them, and so on.\n\nI don't know about non-technical resources, but anything that integrated with a scripting environment would be more accessible to the layperson than most. ARexx for the Amiga for instance, to script and connect applications that support it. ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/ARexx"
                            },
                            {
                                "type": "text",
                                "text": ")  Or image-based environments that include documentation, and the ability to inspect the innards. Lisp environments perhaps, or SmallTalk."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]