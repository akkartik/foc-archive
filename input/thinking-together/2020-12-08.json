[
    {
        "user": "UKFNXF0F9",
        "type": "message",
        "ts": "1607435361.236800",
        "client_msg_id": "ea719513-f3f9-467d-8bd2-057888611e32",
        "text": "I have developed a similar dsl + framework like this. The main challenge is dealing with async. Network data fetch is inherently async, but user expect the UI to be sync. Binding async state to UI is a open challenge still being addressed by UI framework like React. While render-as-you-fetch (<https:\/\/reactjs.org\/docs\/concurrent-mode-suspense.html>) looks promising, but React did not ship with concurrent mode yet for many good reasons. Another challenge is efficient data caching &amp; batching. With manual I\/O, developer is manually tweaking the I\/O operations. Binding async expression to UI, force the developer to rely on the framework to do the right thing. It is possible to auto-optimize in many cases, but it will require the developers to \"let go\" some control. It requires significant trust between you and the developers using your stuff to write software.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5651704a60f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/15651704a60f7ef1539f9b1fa2506188.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "taowen",
            "display_name": "taowen",
            "team": "T5TCAFTA9",
            "name": "taowen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607354647.232000",
        "parent_user_id": "U01GFBBG0Q4",
        "attachments": [
            {
                "title": "Suspense for Data Fetching (Experimental) – React",
                "title_link": "https:\/\/reactjs.org\/docs\/concurrent-mode-suspense.html",
                "text": "A JavaScript library for building user interfaces",
                "fallback": "Suspense for Data Fetching (Experimental) – React",
                "image_url": "https:\/\/reactjs.org\/logo-og.png",
                "from_url": "https:\/\/reactjs.org\/docs\/concurrent-mode-suspense.html",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 10754,
                "service_icon": "https:\/\/reactjs.org\/logo-180x180.png",
                "service_name": "reactjs.org",
                "id": 1,
                "original_url": "https:\/\/reactjs.org\/docs\/concurrent-mode-suspense.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "itR0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have developed a similar dsl + framework like this. The main challenge is dealing with async. Network data fetch is inherently async, but user expect the UI to be sync. Binding async state to UI is a open challenge still being addressed by UI framework like React. While render-as-you-fetch ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/reactjs.org\/docs\/concurrent-mode-suspense.html"
                            },
                            {
                                "type": "text",
                                "text": ") looks promising, but React did not ship with concurrent mode yet for many good reasons. Another challenge is efficient data caching & batching. With manual I\/O, developer is manually tweaking the I\/O operations. Binding async expression to UI, force the developer to rely on the framework to do the right thing. It is possible to auto-optimize in many cases, but it will require the developers to \"let go\" some control. It requires significant trust between you and the developers using your stuff to write software."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01GFBBG0Q4",
                    "USL4R0T61"
                ],
                "count": 2
            }
        ]
    }
]