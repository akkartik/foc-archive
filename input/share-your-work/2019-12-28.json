[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1577534491.285900",
        "client_msg_id": "298020B1-9D71-4393-B2C3-EB7933384272",
        "text": "<@UFLN9JFRT> Oh, are we done yet? ;-)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+8E7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFLN9JFRT"
                            },
                            {
                                "type": "text",
                                "text": " Oh, are we done yet? ;-)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1577534856.293300",
        "client_msg_id": "D2A56D04-4394-4F4B-8D5E-A139ADAA1BC8",
        "text": "<@UJN1TAYEQ> Yes! Lots of truth in your comments. The post-Kay re-interpretation of OOP certainly was somewhat misguided, even though with good intentions — it is very natural to try to mirror an objective reality in a system and employing the same structure we thought we’d naturally use in our heads.\n\nDesigning a composition model might be one of the most important aspects of designing a programming language, however, I think it’s worth to note that at that point, once you decided to design a programming language, you have already made a lot of assumptions and entered a context that makes the bigger picture harder to see and you might overlook other ways to compose systems, outside the language context.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jBDwM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Yes! Lots of truth in your comments. The post-Kay re-interpretation of OOP certainly was somewhat misguided, even though with good intentions — it is very natural to try to mirror an objective reality in a system and employing the same structure we thought we’d naturally use in our heads."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Designing a composition model might be one of the most important aspects of designing a programming language, however, I think it’s worth to note that at that point, once you decided to design a programming language, you have already made a lot of assumptions and entered a context that makes the bigger picture harder to see and you might overlook other ways to compose systems, outside the language context."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1577535235.295400",
        "client_msg_id": "033F2347-BDE1-4505-A722-4CF9E93B03F8",
        "text": "Any other takes on what makes things composable? What’s the essence of composability?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hugA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Any other takes on what makes things composable? What’s the essence of composability?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1577535238.295600",
        "client_msg_id": "38E9EA6F-775C-472B-B95D-478BD5087EE1",
        "text": "<@UJN1TAYEQ> Can you elaborate on the difference between syntactic and semantic composability?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/mt\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Can you elaborate on the difference between syntactic and semantic composability?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1577537887.297500",
        "client_msg_id": "D9BE6C46-FBF0-4D39-A886-D33A07F18E2F",
        "text": "<@U5STGTB3J> haha yep definitely not done yet, I want this thread to keep going. This is basically a learning stream for me, as a bystander lol :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DhX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " haha yep definitely not done yet, I want this thread to keep going. This is basically a learning stream for me, as a bystander lol :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1577538098.299700",
        "client_msg_id": "93552AC9-C5A0-4824-AE14-AA621232E673",
        "text": "<@U5STGTB3J> although some of this thread still goes above my head. I still haven’t figured out what a monad or monoid is, so I need some dumbing down  with the explanations ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yEnM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " although some of this thread still goes above my head. I still haven’t figured out what a monad or monoid is, so I need some dumbing down  with the explanations "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1577538662.301800",
        "client_msg_id": "70CE40AA-0E32-4963-AB66-0E82655738F6",
        "text": "Also are we trying to solve a problem with composing things that maybe taking it too far. I always get reminded of this <https:\/\/www.joelonsoftware.com\/2008\/05\/01\/architecture-astronauts-take-over\/|https:\/\/www.joelonsoftware.com\/2008\/05\/01\/architecture-astronauts-take-over\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "service_name": "Joel on Software",
                "title": "Architecture astronauts take over",
                "title_link": "https:\/\/www.joelonsoftware.com\/2008\/05\/01\/architecture-astronauts-take-over\/",
                "text": "It was seven years ago today when everybody was getting excited about Microsoft’s bombastic announcement of Hailstorm, promising that “Hailstorm makes the technology in your life work t…",
                "fallback": "Joel on Software: Architecture astronauts take over",
                "thumb_url": "https:\/\/i0.wp.com\/www.joelonsoftware.com\/wp-content\/uploads\/2016\/12\/11969842.jpg?fit=400%2C400&ssl=1",
                "ts": 1209600714,
                "from_url": "https:\/\/www.joelonsoftware.com\/2008\/05\/01\/architecture-astronauts-take-over\/",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/i0.wp.com\/www.joelonsoftware.com\/wp-content\/uploads\/2016\/12\/11969842.jpg?fit=180%2C180&#038;ssl=1",
                "id": 1,
                "original_url": "https:\/\/www.joelonsoftware.com\/2008\/05\/01\/architecture-astronauts-take-over\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+aN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also are we trying to solve a problem with composing things that maybe taking it too far. I always get reminded of this "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.joelonsoftware.com\/2008\/05\/01\/architecture-astronauts-take-over\/",
                                "text": "https:\/\/www.joelonsoftware.com\/2008\/05\/01\/architecture-astronauts-take-over\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1577548795.302100",
        "client_msg_id": "72d66429-81ab-4eb5-a422-3afa77c08a9d",
        "text": "<@UFLN9JFRT> Welcome to Future of Coding, the club for Architecture Astronauts. I'm serious: we have ambitious goals for the future of coding, and to reach these goals, we need to be able to see the big picture, which can only be seen from orbit. Some of us use mathematical tools, abstract algebra and category theory (monoids and monads) to help us see the big picture. Of course, we don't want to stay in orbit permanently: at some point you must leave the design phase, touch ground and write useful code. And many people in our community are doing that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dlkE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFLN9JFRT"
                            },
                            {
                                "type": "text",
                                "text": " Welcome to Future of Coding, the club for Architecture Astronauts. I'm serious: we have ambitious goals for the future of coding, and to reach these goals, we need to be able to see the big picture, which can only be seen from orbit. Some of us use mathematical tools, abstract algebra and category theory (monoids and monads) to help us see the big picture. Of course, we don't want to stay in orbit permanently: at some point you must leave the design phase, touch ground and write useful code. And many people in our community are doing that."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1577551174.308300",
        "client_msg_id": "ab7f3804-bb15-4bd2-953b-5021d5450534",
        "text": "&gt; <@U5STGTB3J> Designing a composition model might be one of the most important aspects of designing a programming language, however, I think it’s worth to note that at that point, once you decided to design a programming language, you have already made a lot of assumptions and entered a context that makes the bigger picture harder to see and you might overlook other ways to compose systems, outside the language context.\nThis assumes a very narrow definition of \"programming language\", and my plans for the future of coding involve expanding the definition of \"programming language\" to encompass the entire system. Many past systems were like this, so I can point to earlier systems in order to show that this is feasible.\n\nFor example, the original Unix system (before Macintosh-style GUIs were added) was a programming language. The user interface was the shell, which is a programming language. Every shell command is a program written in the shell language. Abstract mechanisms like variables, functions, conditionals and loops are right at hand. The Unix file system is the global namespace for this programming language. Want to do some word processing? Troff is a programming language, and a word processing document is a program written in that language. With Unix, you booted right into an IDE, and you stayed in that IDE the whole time you were using the computer. Of course 1970's Unix was difficult to use by modern standards, but that's not the point. The point is that Unix mimiced the user interfaces of early systems, and extended those interfaces into programming languages without making them harder to use. The Unix shell looked a lot like earlier and more primitive command line interfaces that weren't fully programmable. Troff was just runoff extended to be fully programmable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T8bCn",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " Designing a composition model might be one of the most important aspects of designing a programming language, however, I think it’s worth to note that at that point, once you decided to design a programming language, you have already made a lot of assumptions and entered a context that makes the bigger picture harder to see and you might overlook other ways to compose systems, outside the language context."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This assumes a very narrow definition of \"programming language\", and my plans for the future of coding involve expanding the definition of \"programming language\" to encompass the entire system. Many past systems were like this, so I can point to earlier systems in order to show that this is feasible.\n\nFor example, the original Unix system (before Macintosh-style GUIs were added) was a programming language. The user interface was the shell, which is a programming language. Every shell command is a program written in the shell language. Abstract mechanisms like variables, functions, conditionals and loops are right at hand. The Unix file system is the global namespace for this programming language. Want to do some word processing? Troff is a programming language, and a word processing document is a program written in that language. With Unix, you booted right into an IDE, and you stayed in that IDE the whole time you were using the computer. Of course 1970's Unix was difficult to use by modern standards, but that's not the point. The point is that Unix mimiced the user interfaces of early systems, and extended those interfaces into programming languages without making them harder to use. The Unix shell looked a lot like earlier and more primitive command line interfaces that weren't fully programmable. Troff was just runoff extended to be fully programmable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1577553048.327700",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1577553083.000000"
        },
        "client_msg_id": "c6a7bc4a-f13a-4618-a1d7-d59c6aa44a4f",
        "text": "Yes, programming languages do design the composition methods inside of them. I came to respond to that but <@U5STGTB3J> already said it much better so I'll just quote it\n&gt; it’s worth to note that at that point, once you decided to design a programming language, you have already made a lot of assumptions and entered a context that makes the bigger picture harder to see and you might overlook other ways to compose systems, outside the language context.\nYes, yes! One connotation of the 'language context' is that we write programs in full, and then run them, but the composition of two running programs is not usually considered a 'program'.\n&gt; my plans for the future of coding involve expanding the definition of \"programming language\" to encompass the entire system\nSounds very interesting. At this point is it worth calling it a programming language? We don't usually call Excel a programming language. And when we talk of Smalltalk as a programming language that fits on a postcard, I think it misses a key aspect of programming Smalltalk in that you're not writing then running programs in batch mode, but rather crafting the system very differently by tweaking parts of it live. It's kind of like the Unix shell in some sense?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rk2UN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, programming languages do design the composition methods inside of them. I came to respond to that but "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " already said it much better so I'll just quote it\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it’s worth to note that at that point, once you decided to design a programming language, you have already made a lot of assumptions and entered a context that makes the bigger picture harder to see and you might overlook other ways to compose systems, outside the language context."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, yes! One connotation of the 'language context' is that we write programs in full, and then run them, but the composition of two running programs is not usually considered a 'program'.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my plans for the future of coding involve expanding the definition of \"programming language\" to encompass the entire system"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds very interesting. At this point is it worth calling it a programming language? We don't usually call Excel a programming language. And when we talk of Smalltalk as a programming language that fits on a postcard, I think it misses a key aspect of programming Smalltalk in that you're not writing then running programs in batch mode, but rather crafting the system very differently by tweaking parts of it live. It's kind of like the Unix shell in some sense?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1577553394.328000",
        "client_msg_id": "7389af95-8dda-4893-8a4f-753ad55a2350",
        "text": "&gt;  how different programming could be if there were more artists\/designers involved in the creation process\nProbably much nicer to use.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "omaJx",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " how different programming could be if there were more artists\/designers involved in the creation process"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Probably much nicer to use."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1577553453.328200",
        "client_msg_id": "cea91518-5a24-494d-ac20-3a0b67472b98",
        "text": "I mean HCI has branched off from PLs but really should it be a totally separate field? A programming language is a human interface.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "68sv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mean HCI has branched off from PLs but really should it be a totally separate field? A programming language is a human interface."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1577555748.330700",
        "client_msg_id": "6A7CD2D8-44E9-44EC-B35D-8DBD569F1AC2",
        "text": "<@UJN1TAYEQ> thanks, that was a useful response. I would actually like to know what those goals are , something concrete, instead of just saying we want to make computation easier. What are the use cases that will be solved?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wctf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " thanks, that was a useful response. I would actually like to know what those goals are , something concrete, instead of just saying we want to make computation easier. What are the use cases that will be solved?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1577556331.330900",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1577558327.000000"
        },
        "client_msg_id": "309104d3-f682-4814-9b1d-03d3128357e6",
        "text": "<@UEQ6M68H0> “Actually photoshop is a huge collection of graphical manipulation subroutines…”\n\nI’ve never used it and was (apparently) incorrectly using it as a prototypical drawing application as drawing apps seem to be good examples of the power of direct manipulation. Please replace my mentions of it with “drawing application” when considering my remarks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bV4e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " “Actually photoshop is a huge collection of graphical manipulation subroutines…”\n\nI’ve never used it and was (apparently) incorrectly using it as a prototypical drawing application as drawing apps seem to be good examples of the power of direct manipulation. Please replace my mentions of it with “drawing application” when considering my remarks."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1577572134.331600",
        "client_msg_id": "306c8f66-c99b-4ee6-8000-4af81c5a20e1",
        "text": "Considering nodes and arrows languages, take MaxMSP for audio processing and compare to equivalent text\/algebra code. The former is more expressive even if you can always map it to the later.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jc2J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Considering nodes and arrows languages, take MaxMSP for audio processing and compare to equivalent text\/algebra code. The former is more expressive even if you can always map it to the later."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1577575029.331800",
        "client_msg_id": "cbe39f6c-bc85-47a9-ba61-0fff66ca72b7",
        "text": "Unfortunately the node and wire models that are so successful in music don't map well to general computing. In the example of an analog synthesizer, you might start with a simple pure tone sine wave, and then add an effect that modulates its frequency, creating a warble, then you might add distortion that fades in and out, and by virtue of mixing all these effect stages eventually create something very interesting. But the output of all music productions is either two channel stereo or in the case of film music surround sound. But you only have to please the two ears of the listener. Text or graphics for example doesn't add together well; you superimpose two pieces of text, you can't read either of them any more. It is the simple fact that audio channels can just be added together and it never gets ruined; the texture just gets thicker and better. Wagner was the first multi-track artist, and in the history of music, you can see the Beach Boy's Pet Sounds album produced by Brian Wilson was a high water mark for US music production technique at the time, but soon surpassed by George Martin's production of Sgt. Pepper's. I believe that Wilson went into a major depression when he heard Sgt. Peppers because it was so good. Anyway it is quite common now to see 24 or more audio tracks combined. The peak of that phase wa Quincy Jone's Thriller, arguably the best made record in history. But the producers can just sit at the mixing board and fiddle until it sounds just right. We programmers don't have a raw material that can be added. If you put a nice big graph on the screen, you just pushed off the screen something else you wanted. We software people live in a world of tiny screens where we have to trade off what gets the most space. Shaders, image filter stacking, and audio are examples of subsets of the computational space that are fundamentally additive.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oxV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unfortunately the node and wire models that are so successful in music don't map well to general computing. In the example of an analog synthesizer, you might start with a simple pure tone sine wave, and then add an effect that modulates its frequency, creating a warble, then you might add distortion that fades in and out, and by virtue of mixing all these effect stages eventually create something very interesting. But the output of all music productions is either two channel stereo or in the case of film music surround sound. But you only have to please the two ears of the listener. Text or graphics for example doesn't add together well; you superimpose two pieces of text, you can't read either of them any more. It is the simple fact that audio channels can just be added together and it never gets ruined; the texture just gets thicker and better. Wagner was the first multi-track artist, and in the history of music, you can see the Beach Boy's Pet Sounds album produced by Brian Wilson was a high water mark for US music production technique at the time, but soon surpassed by George Martin's production of Sgt. Pepper's. I believe that Wilson went into a major depression when he heard Sgt. Peppers because it was so good. Anyway it is quite common now to see 24 or more audio tracks combined. The peak of that phase wa Quincy Jone's Thriller, arguably the best made record in history. But the producers can just sit at the mixing board and fiddle until it sounds just right. We programmers don't have a raw material that can be added. If you put a nice big graph on the screen, you just pushed off the screen something else you wanted. We software people live in a world of tiny screens where we have to trade off what gets the most space. Shaders, image filter stacking, and audio are examples of subsets of the computational space that are fundamentally additive."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1577575566.332000",
        "client_msg_id": "3425b627-4fc6-45a7-90f5-ae632fa5cc58",
        "text": "<@ULM3U6275> if you would like to see a great painting program for kids and have access to a windows program, you can get a free copy of my now ancient Flying Colors program. It was a big hit in its day (1995), and still runs even in Windows 10. It used a time travel feature for training, where it could narrate how to use the product while moving the mouse like a ghost. It was designed to be a sequel to KidPix  and had art from the incomparable pixel artist Mark Ferrari who did Loom, Monkey Island, and most recently Thimbleweek Park.   <https:\/\/www.magicmouse.com\/downloads\/Flying%20Colors%20211D.zip>\n\nBut to reinforce my point, the reason pixel-pushing programs work so well via direct manipulation interfaces, is that pixels in a bitmap add together easily. If you aren't blending, new pixels simply replace the old ones. You can't break the image by adding new pixels. At all times it functions as an image, while in general software, you add some new code and can easily break the whole product.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZlnX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " if you would like to see a great painting program for kids and have access to a windows program, you can get a free copy of my now ancient Flying Colors program. It was a big hit in its day (1995), and still runs even in Windows 10. It used a time travel feature for training, where it could narrate how to use the product while moving the mouse like a ghost. It was designed to be a sequel to KidPix  and had art from the incomparable pixel artist Mark Ferrari who did Loom, Monkey Island, and most recently Thimbleweek Park.   "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.magicmouse.com\/downloads\/Flying%20Colors%20211D.zip"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBut to reinforce my point, the reason pixel-pushing programs work so well via direct manipulation interfaces, is that pixels in a bitmap add together easily. If you aren't blending, new pixels simply replace the old ones. You can't break the image by adding new pixels. At all times it functions as an image, while in general software, you add some new code and can easily break the whole product."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]