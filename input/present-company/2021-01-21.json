[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1611217948.011000",
        "client_msg_id": "e524f243-436b-4c08-83ae-48e6bc55d1e6",
        "text": "+1 <@UN9SCH5RD>'s suggestion of grammars, to which I'd add any other automata generating-abstractions. For example, regular expressions over the domain of toys (as opposed to the domain of characters).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N7c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "+1 "
                            },
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": "'s suggestion of grammars, to which I'd add any other automata generating-abstractions. For example, regular expressions over the domain of toys (as opposed to the domain of characters)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1611230334.012400",
        "client_msg_id": "2F46D033-27B3-4F6B-AA9B-85DCAEDFA4AB",
        "text": "This writeup expresses the cleanest approach I know of: <https:\/\/lexi-lambda.github.io\/blog\/2019\/11\/05\/parse-don-t-validate\/|https:\/\/lexi-lambda.github.io\/blog\/2019\/11\/05\/parse-don-t-validate\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC",
        "attachments": [
            {
                "title": "Parse, don’t validate",
                "title_link": "https:\/\/lexi-lambda.github.io\/blog\/2019\/11\/05\/parse-don-t-validate\/",
                "text": "Historically, I’ve struggled to find a concise, simple way to explain what it means to practice type-driven design. Too often, when someone asks me “How did you come up with this approach?” I find I can’t give them a satisfying answer. I know it didn’t ju...",
                "fallback": "Parse, don’t validate",
                "from_url": "https:\/\/lexi-lambda.github.io\/blog\/2019\/11\/05\/parse-don-t-validate\/",
                "service_name": "lexi-lambda.github.io",
                "id": 1,
                "original_url": "https:\/\/lexi-lambda.github.io\/blog\/2019\/11\/05\/parse-don-t-validate\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YNP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This writeup expresses the cleanest approach I know of: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lexi-lambda.github.io\/blog\/2019\/11\/05\/parse-don-t-validate\/",
                                "text": "https:\/\/lexi-lambda.github.io\/blog\/2019\/11\/05\/parse-don-t-validate\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1611240042.016100",
        "client_msg_id": "5AAEB671-E0F0-4A09-9F65-A2E1D79314BB",
        "text": "the trickiest part of this is the “report all rooms that have the wrong toys and exactly what’s wrong”—i’d be tempted to reach for the really dynamic grammars that let you pretty easily insert whatever side effects\/logic you want, like OMeta\/ohm or rebol\/red’s parse dialect. do you just want console output or structured data about the errors?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g6y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the trickiest part of this is the “report all rooms that have the wrong toys and exactly what’s wrong”—i’d be tempted to reach for the really dynamic grammars that let you pretty easily insert whatever side effects\/logic you want, like OMeta\/ohm or rebol\/red’s parse dialect. do you just want console output or structured data about the errors?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1611240628.017200",
        "client_msg_id": "DE15839E-2359-4B05-85D1-534E00FDC794",
        "text": "found another more detailed video: the prose group seems do be doing awesome stuff! <https:\/\/youtu.be\/X1YXge3C8RI|https:\/\/youtu.be\/X1YXge3C8RI>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1611191896.000800",
        "parent_user_id": "UHWC9PXBL",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Heapcon 2019 | Automated Program Generation from Input-Output Examples - Sumit Gulwani",
                "title_link": "https:\/\/youtu.be\/X1YXge3C8RI",
                "author_name": "Heapspace",
                "author_link": "https:\/\/www.youtube.com\/c\/HeapspaceRsZajednica",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/X1YXge3C8RI\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Heapcon 2019 | Automated Program Generation from Input-Output Examples - Sumit Gulwani",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/X1YXge3C8RI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/X1YXge3C8RI",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/X1YXge3C8RI"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B2qWV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "found another more detailed video: the prose group seems do be doing awesome stuff! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/X1YXge3C8RI",
                                "text": "https:\/\/youtu.be\/X1YXge3C8RI"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01H6UFHAE9",
                    "UA14TGLTC",
                    "US370TRJA"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1611244481.017600",
        "client_msg_id": "3735434f-3012-4994-ae28-5bdd04daffc5",
        "text": "After someone asked in private what I was on about up above, I offer as an example this \"regular expressions over sequences\" library in Clojure: <https:\/\/github.com\/cgrand\/seqexp> The relationship between <https:\/\/en.wikipedia.org\/wiki\/Introduction_to_Automata_Theory,_Languages,_and_Computation|formal languages and automata> is a worthwhile area of computer science study for practical minded practitioners. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "cgrand\/seqexp",
                "title_link": "https:\/\/github.com\/cgrand\/seqexp",
                "text": "Regexp for sequences! Contribute to cgrand\/seqexp development by creating an account on GitHub.",
                "fallback": "GitHub: cgrand\/seqexp",
                "thumb_url": "https:\/\/avatars.githubusercontent.com\/u\/47025?s=400&v=4",
                "from_url": "https:\/\/github.com\/cgrand\/seqexp",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/cgrand\/seqexp"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fA4x+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "After someone asked in private what I was on about up above, I offer as an example this \"regular expressions over sequences\" library in Clojure: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/cgrand\/seqexp"
                            },
                            {
                                "type": "text",
                                "text": " The relationship between "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Introduction_to_Automata_Theory,_Languages,_and_Computation",
                                "text": "formal languages and automata"
                            },
                            {
                                "type": "text",
                                "text": " is a worthwhile area of computer science study for practical minded practitioners. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JNTE35QS",
        "type": "message",
        "ts": "1611261684.018000",
        "client_msg_id": "8fc32ecc-dd36-4764-8411-f14b5806e960",
        "text": "Wouldnt a datalog or mini-kanren style approach be useful?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "97155db555c2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-13\/1631845309525_97155db555c2091ecd20_72.jpg",
            "first_name": "",
            "real_name": "Vijay Chakravarthy",
            "display_name": "Vijay Chakravarthy",
            "team": "T5TCAFTA9",
            "name": "vchakrav",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kcwM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wouldnt a datalog or mini-kanren style approach be useful?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1611282125.018800",
        "client_msg_id": "e5dadbc7-2171-45a6-9132-00da74476398",
        "text": "Ah <@UHWC9PXBL>, OMeta haven't heard that in a while!  Yes friends, an important part here is the detailed error reporting.  I'll need to read Parse, don't validate <@UN57U8V53>.  Seems many non-trivial programming problems have a parsing (state machine) feel, and at one level we have good parsing tools though they seem to be underutilized in practice.  One interesting thing here that counts matter and order does not.  (Of course, one quick fix is to sort the list of toys in a room and then match on that sequence.)\n\nAs for error reporting, here's an idea.  Imagine an interactive grammar generating tool.  We start with golden path of validity (imagine a sorted list), something like:\n```Room = \"box\" (\"blue ball\" \"red ball\" | Color \" ball\")```\nThen the tool would propose invalid sequences for which we have to generate error description productions.  That would be neat.  I suppose other perennial parsing problems are tokenizing nicely so that you can operate on higher-level constructs, and I mean once you are acting on tree-ish data rather than streams, it begins to feel like regular functional programming...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lry4E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah "
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": ", OMeta haven't heard that in a while!  Yes friends, an important part here is the detailed error reporting.  I'll need to read Parse, don't validate "
                            },
                            {
                                "type": "user",
                                "user_id": "UN57U8V53"
                            },
                            {
                                "type": "text",
                                "text": ".  Seems many non-trivial programming problems have a parsing (state machine) feel, and at one level we have good parsing tools though they seem to be underutilized in practice.  One interesting thing here that counts matter and order does not.  (Of course, one quick fix is to sort the list of toys in a room and then match on that sequence.)\n\nAs for error reporting, here's an idea.  Imagine an interactive grammar generating tool.  We start with golden path of validity (imagine a sorted list), something like:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Room = \"box\" (\"blue ball\" \"red ball\" | Color \" ball\")"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Then the tool would propose invalid sequences for which we have to generate error description productions.  That would be neat.  I suppose other perennial parsing problems are tokenizing nicely so that you can operate on higher-level constructs, and I mean once you are acting on tree-ish data rather than streams, it begins to feel like regular functional programming..."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]