[
    {
        "user": "U01NQ4945N1",
        "type": "message",
        "ts": "1616454031.001800",
        "client_msg_id": "68eccfb6-8064-4587-8646-377b1243f1be",
        "text": "Great work! I watched your general overview demo before, and found the timeline a bit hard to read at a quick glance, but with this seemingly simple GUI change, it's _much_ easier to read!\n\nAnd big props for doing the hard work of translating Bret's prototype into a real tool. I want this yesterday. When I can debug with this kind of view, and see data structures like <http:\/\/symbolflux.com\/projects\/avd|Lucidity>, I'll be a happy programmer. Best of luck with bringing it to market!\n\n&gt; This is not the only code visualizer in the tool\nWhich other visualizers are there? Or maybe I should just re-watch the demo video to jog my memory.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "79a94a91f736",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-20\/1799355166400_79a94a91f736df59b962_72.png",
            "first_name": "Emil",
            "real_name": "Emil H",
            "display_name": "Emil H",
            "team": "T5TCAFTA9",
            "name": "emil.hall",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1614522053.039300",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qi\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great work! I watched your general overview demo before, and found the timeline a bit hard to read at a quick glance, but with this seemingly simple GUI change, it's "
                            },
                            {
                                "type": "text",
                                "text": "much",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " easier to read!\n\nAnd big props for doing the hard work of translating Bret's prototype into a real tool. I want this yesterday. When I can debug with this kind of view, and see data structures like "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/symbolflux.com\/projects\/avd",
                                "text": "Lucidity"
                            },
                            {
                                "type": "text",
                                "text": ", I'll be a happy programmer. Best of luck with bringing it to market!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is not the only code visualizer in the tool"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Which other visualizers are there? Or maybe I should just re-watch the demo video to jog my memory."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01NQ4945N1",
        "type": "message",
        "ts": "1616456454.002000",
        "client_msg_id": "83860d18-cfe3-47df-9c20-6f51c7208b6b",
        "text": "<@USJ899UUD>, glad you like it! Agree that switching between this view and normal view should be quick and easy. A friend suggested a fix for the squinting issue: below a certain font size, transform all letters and numbers into identical rectangles so one simply can't read them and thus won't be tempted to try. The shape of the code would still be visible, and maybe structural characters like `(){}`.\n\nRegarding navigation, I agree, so one interesting question to me is: could there be an even better\/faster type of navigation than what we currently have on desktop? I have a hunch that eye tracking is part of the solution. What could be faster than looking at the target? But since eye tracker accuracy is low, we'd then use keyboard for final fine adjustment. Also, maybe some of the hierarchical style of navigation from Tiled Text could could complement our usual keyboard commands. I mean, Vim has \"go to next [\" so maybe we could also have \"go to parent\", \"go to next sibling block\" and such. Or maybe this already exists in some editor, I don't know...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "79a94a91f736",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-20\/1799355166400_79a94a91f736df59b962_72.png",
            "first_name": "Emil",
            "real_name": "Emil H",
            "display_name": "Emil H",
            "team": "T5TCAFTA9",
            "name": "emil.hall",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613861522.005800",
        "parent_user_id": "U01NQ4945N1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cvj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "USJ899UUD"
                            },
                            {
                                "type": "text",
                                "text": ", glad you like it! Agree that switching between this view and normal view should be quick and easy. A friend suggested a fix for the squinting issue: below a certain font size, transform all letters and numbers into identical rectangles so one simply can't read them and thus won't be tempted to try. The shape of the code would still be visible, and maybe structural characters like "
                            },
                            {
                                "type": "text",
                                "text": "(){}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nRegarding navigation, I agree, so one interesting question to me is: could there be an even better\/faster type of navigation than what we currently have on desktop? I have a hunch that eye tracking is part of the solution. What could be faster than looking at the target? But since eye tracker accuracy is low, we'd then use keyboard for final fine adjustment. Also, maybe some of the hierarchical style of navigation from Tiled Text could could complement our usual keyboard commands. I mean, Vim has \"go to next [\" so maybe we could also have \"go to parent\", \"go to next sibling block\" and such. Or maybe this already exists in some editor, I don't know..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01NQ4945N1",
        "type": "message",
        "ts": "1616458376.002200",
        "edited": {
            "user": "U01NQ4945N1",
            "ts": "1616458754.000000"
        },
        "client_msg_id": "a7d343f9-5be8-4fd4-9d59-7a155f45f438",
        "text": "<@U019PRL1BNU>, thanks! I'll try to continue explaining from principles.\n\nWow, so makepad.dev actually implements code font size zooming!  It always seemed like an obvious idea, so I wondered why no one had implemented it yet - guess I just didn't look hard enough. But the devil is in the details. I can understand why you'd find my \"stretchy\" demos disorienting - everything is shifting at the same time, nothing is stable... By changing text opacity, do you mean changing _both_ font size _and_ opacity together, so that small text = low opacity? Or something else?\n\nI also think code folding feels underused, and I've thought a bit about why. First of all, I think we can divide code folding into 2 subcategories. One is the general \"zoom out\" type of view in makepad.dev or the start screen in my tiled_text_take1. It seems good and unproblematic. The other category is when the user manually chooses which code sections to fold. It's a different use case. For example, if I have a long file with the functions A, B, C and D in that order, and now I want to read A and D, but I currently don't care about B and C in between so I fold them. One problem I have is the amount of work required to fold them. I either have to move my caret to the correct row and hit some awkward keyboard command, or I have to use the mouse and hit a tiny icon. In the <https:\/\/media.handmade-seattle.com\/dion-systems\/|Dion project>, they solve this use case with \"slices\" instead - one writes a small piece of special code which simply lists which functions one wants to see. Everything else is hidden while viewing the slice. But I feel like this is even more work than folding by mouse click. But the main problem I have with code folding in current editors is that the hidden block becomes _too_ hidden. We get absolutely no clue about how large it is or what it does. The \"thumbnail\" idea would hint at the block size, while the \"function signature\" idea in my <https:\/\/youtu.be\/wdf6S6oumH8|5th video> would hint at what the block does from an input-output perspective.\n\nThanks for sharing your links. Indeed, there's lots of overlap between our work! :grinning: The differences are worth thinking more about, too.... This deserves a longer reply. I'll be back!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "79a94a91f736",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-20\/1799355166400_79a94a91f736df59b962_72.png",
            "first_name": "Emil",
            "real_name": "Emil H",
            "display_name": "Emil H",
            "team": "T5TCAFTA9",
            "name": "emil.hall",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613861522.005800",
        "parent_user_id": "U01NQ4945N1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A\/5s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U019PRL1BNU"
                            },
                            {
                                "type": "text",
                                "text": ", thanks! I'll try to continue explaining from principles.\n\nWow, so makepad.dev actually implements code font size zooming!  It always seemed like an obvious idea, so I wondered why no one had implemented it yet - guess I just didn't look hard enough. But the devil is in the details. I can understand why you'd find my \"stretchy\" demos disorienting - everything is shifting at the same time, nothing is stable... By changing text opacity, do you mean changing "
                            },
                            {
                                "type": "text",
                                "text": "both",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " font size "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " opacity together, so that small text = low opacity? Or something else?\n\nI also think code folding feels underused, and I've thought a bit about why. First of all, I think we can divide code folding into 2 subcategories. One is the general \"zoom out\" type of view in makepad.dev or the start screen in my tiled_text_take1. It seems good and unproblematic. The other category is when the user manually chooses which code sections to fold. It's a different use case. For example, if I have a long file with the functions A, B, C and D in that order, and now I want to read A and D, but I currently don't care about B and C in between so I fold them. One problem I have is the amount of work required to fold them. I either have to move my caret to the correct row and hit some awkward keyboard command, or I have to use the mouse and hit a tiny icon. In the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/media.handmade-seattle.com\/dion-systems\/",
                                "text": "Dion project"
                            },
                            {
                                "type": "text",
                                "text": ", they solve this use case with \"slices\" instead - one writes a small piece of special code which simply lists which functions one wants to see. Everything else is hidden while viewing the slice. But I feel like this is even more work than folding by mouse click. But the main problem I have with code folding in current editors is that the hidden block becomes "
                            },
                            {
                                "type": "text",
                                "text": "too",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " hidden. We get absolutely no clue about how large it is or what it does. The \"thumbnail\" idea would hint at the block size, while the \"function signature\" idea in my "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/wdf6S6oumH8",
                                "text": "5th video"
                            },
                            {
                                "type": "text",
                                "text": " would hint at what the block does from an input-output perspective.\n\nThanks for sharing your links. Indeed, there's lots of overlap between our work! "
                            },
                            {
                                "type": "emoji",
                                "name": "grinning",
                                "unicode": "1f600"
                            },
                            {
                                "type": "text",
                                "text": " The differences are worth thinking more about, too.... This deserves a longer reply. I'll be back!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]