[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1549444226.884400",
        "client_msg_id": "d90c885a-19a7-4bd0-92f0-97633ad4da44",
        "text": "I have a proposal to make, since part of changing the present of coding is showing alternatives and visions to the biggest audience possible, I would like to know when someone posts something on reddit, HN or similar so I can upvote it and maybe move the conversation to those platforms to the specific topic at hand, that will create more visibility and an encapsulated discussion per topic (which will have the benefit of being permanent and accesible to search engines). You don't have to upvote everything proposed, just what you think adds something to the future of coding.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549444226.884400",
        "reply_count": 10,
        "reply_users_count": 5,
        "latest_reply": "1549532650.910500",
        "reply_users": [
            "U5TCAFTD3",
            "UBN9AFS0N",
            "UF5PAGQQ4",
            "UCUSW7WVD",
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "U5TCAFTD3",
                "ts": "1549444676.885000"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1549444867.885400"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1549444886.885600"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1549444924.885900"
            },
            {
                "user": "UF5PAGQQ4",
                "ts": "1549446284.886100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1549446452.886400"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1549446487.886600"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1549446557.886800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1549469158.893200"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1549532650.910500"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1549534879.000000",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZAqme",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have a proposal to make, since part of changing the present of coding is showing alternatives and visions to the biggest audience possible, I would like to know when someone posts something on reddit, HN or similar so I can upvote it and maybe move the conversation to those platforms to the specific topic at hand, that will create more visibility and an encapsulated discussion per topic (which will have the benefit of being permanent and accesible to search engines). You don't have to upvote everything proposed, just what you think adds something to the future of coding."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UDJ8A6RNH",
                    "UAVCC2X70"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1549444244.884900",
        "client_msg_id": "755d709c-6588-44d8-a65f-6475ce8d7a2f",
        "text": "Maybe we can create a channel here, or just inform on the <#CCL5VVBAN|share-your-work> channel when such post is submited",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qSg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe we can create a channel here, or just inform on the "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": " channel when such post is submited"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1549444676.885000",
        "client_msg_id": "0242a991-60c7-402e-909b-d66d877ace3d",
        "text": "I worry that those sites detect upvoting rings and this plan would backfire...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549444226.884400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yN7l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I worry that those sites detect upvoting rings and this plan would backfire..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1549444795.885200",
        "client_msg_id": "969e8549-f9a0-4b90-b5aa-531dc290feff",
        "text": "Oh wow! ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549357815.874700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CnX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh wow!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1549444867.885400",
        "client_msg_id": "ac7a2944-df60-4238-958c-319d6597c419",
        "text": "I don't think we are going to be submitting so much so often :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549444226.884400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mJh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think we are going to be submitting so much so often "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1549444886.885600",
        "client_msg_id": "1d651219-7527-4f03-9cbd-b19571731085",
        "text": "I have yet to submit something about what I do there",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549444226.884400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M3JSO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have yet to submit something about what I do there"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1549444924.885900",
        "client_msg_id": "f5271c94-2ea1-49ab-8541-838f1ba1c31e",
        "text": "but yes, we should not abuse it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549444226.884400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LyA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but yes, we should not abuse it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF5PAGQQ4",
        "type": "message",
        "ts": "1549446284.886100",
        "edited": {
            "user": "UF5PAGQQ4",
            "ts": "1549446288.000000"
        },
        "client_msg_id": "49c54d96-6c10-4af2-add7-bdf326e391a1",
        "text": "so we’re starting a future of coding lobby? is that what you’re saying? :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g99a3fab7a1a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/299a3fab7a1a2d6644455dedae9fce0a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Stathis Sideris",
            "display_name": "Stathis",
            "team": "T5TCAFTA9",
            "name": "sideris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549444226.884400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sIMAY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so we’re starting a future of coding lobby? is that what you’re saying? "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1549446452.886400",
        "client_msg_id": "b9e4c350-9561-4776-bef8-4b06f91886cd",
        "text": "lobbying is important too :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549444226.884400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cJ\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "lobbying is important too "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1549446487.886600",
        "client_msg_id": "a51fa185-f2e4-48db-8fad-d08217e17561",
        "text": "\"if I build it they will come\" only works for baseball movies :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549444226.884400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H1NK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"if I build it they will come\" only works for baseball movies "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1549446557.886800",
        "client_msg_id": "9e023218-505d-47b7-b054-581c5f6fc9d9",
        "text": "even between us, yesteday <@U5TCAFTD3> tweeted that he was \"late to the party\" for a thing someone did, and I found out even later than him!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549444226.884400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "biQjQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "even between us, yesteday "
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " tweeted that he was \"late to the party\" for a thing someone did, and I found out even later than him!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1549446687.887000",
        "client_msg_id": "539d4e96-d6c8-4f77-8932-e5b9646a8794",
        "text": "Somewhat of a tangent re sci-fi movies - their screens tend to still be vertical, which means that users would have their shoulders flexed for most of the time working with them. This is not a good idea from a human factors perspective - it's tiring, uncomfortable and (IIRC) eventually damaging.\nHorizontal\/angled screens seem more feasible (although there may be issues there with constant neck flexion)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548479904.630500",
        "parent_user_id": "UFLN9JFRT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O8EN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Somewhat of a tangent re sci-fi movies - their screens tend to still be vertical, which means that users would have their shoulders flexed for most of the time working with them. This is not a good idea from a human factors perspective - it's tiring, uncomfortable and (IIRC) eventually damaging.\nHorizontal\/angled screens seem more feasible (although there may be issues there with constant neck flexion)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAJ9DV971",
        "type": "message",
        "ts": "1549447327.887200",
        "client_msg_id": "d278fd68-f37e-445d-9f83-d6cc721a9978",
        "text": "Yes, there is. The main idea of unfolding is  a process of differentiating wholes into parts. (Rather than, say, assembling parts into wholes).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "540fc50d2192",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-12\/502004543669_540fc50d2192cc8aba20_72.jpg",
            "first_name": "Marcel",
            "real_name": "Marcel Goethals",
            "display_name": "wolkenmachine",
            "team": "T5TCAFTA9",
            "name": "accounts",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549431712.880200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DcuU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, there is. The main idea of unfolding is  a process of differentiating wholes into parts. (Rather than, say, assembling parts into wholes)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UAJ9DV971",
        "type": "message",
        "ts": "1549447359.887400",
        "client_msg_id": "33950c6c-bc24-4d5c-9504-073df32a903f",
        "text": "This article is quite interesting: <http:\/\/makingpermaculturestronger.net\/christopher-alexanders-neglected-challenge-to-permaculture\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "540fc50d2192",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-12\/502004543669_540fc50d2192cc8aba20_72.jpg",
            "first_name": "Marcel",
            "real_name": "Marcel Goethals",
            "display_name": "wolkenmachine",
            "team": "T5TCAFTA9",
            "name": "accounts",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549431712.880200",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "service_name": "Making Permaculture Stronger",
                "title": "Christopher Alexander’s Neglected Challenge to Permaculture - Making Permaculture Stronger",
                "title_link": "http:\/\/makingpermaculturestronger.net\/christopher-alexanders-neglected-challenge-to-permaculture\/",
                "text": "Consider the opening statements of what are possibly the two most prominent definitions of permaculture: Permaculture (permanent agriculture) is the conscious design and maintenance of agriculturally productive ecosystems which have the diversity, stability, and resilience of natural ecosystems (Bill Mollison, 1988, p. ix) A more current definition of permaculture, which reflects the expansion of focus implicit in Permaculture One,...",
                "fallback": "Making Permaculture Stronger: Christopher Alexander’s Neglected Challenge to Permaculture - Making Permaculture Stronger",
                "thumb_url": "http:\/\/makingpermaculturestronger.net\/wp-content\/uploads\/2016\/05\/1.png",
                "ts": 1462669218,
                "from_url": "http:\/\/makingpermaculturestronger.net\/christopher-alexanders-neglected-challenge-to-permaculture\/",
                "thumb_width": 163,
                "thumb_height": 150,
                "id": 1,
                "original_url": "http:\/\/makingpermaculturestronger.net\/christopher-alexanders-neglected-challenge-to-permaculture\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "16s=3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This article is quite interesting: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/makingpermaculturestronger.net\/christopher-alexanders-neglected-challenge-to-permaculture\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEDDR6L5Q"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1549447382.887700",
        "client_msg_id": "f70833e8-4715-422d-b5de-66d65dcfadbf",
        "text": "In a programming context, I think that Casey Muratori's thoughts on API design are relevant here:\n1) Semantic Compression - <https:\/\/caseymuratori.com\/blog_0015>\n2) Complexity and Granularity <https:\/\/caseymuratori.com\/blog_0016>\n3) (the rest of the posts in that series are worth reading but not directly related to the topic)\n4) His \"Designing and Evaluating Reusable Components\" talk that I posted here a while ago - <https:\/\/caseymuratori.com\/blog_0024> - there's a graph that comes to mind at 7:54\n\n(I'm currently reading Christopher Alexander's \"Notes on the Synthesis of Form\", so there may be more in that...)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549431712.880200",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "title": "Semantic Compression",
                "title_link": "https:\/\/caseymuratori.com\/blog_0015",
                "text": "An introduction to the idea that code should be approached with a mindset towards compressing it semantically, rather than orienting it around objects.",
                "fallback": "Semantic Compression",
                "thumb_url": "https:\/\/caseymuratori.com\/r\/walrus_1404x936_bf50a3cej1.jpg",
                "from_url": "https:\/\/caseymuratori.com\/blog_0015",
                "thumb_width": 1404,
                "thumb_height": 936,
                "service_name": "caseymuratori.com",
                "id": 1,
                "original_url": "https:\/\/caseymuratori.com\/blog_0015"
            },
            {
                "title": "Complexity and Granularity",
                "title_link": "https:\/\/caseymuratori.com\/blog_0016",
                "text": "An examination of two fundamental principles in effective programming.",
                "fallback": "Complexity and Granularity",
                "thumb_url": "https:\/\/caseymuratori.com\/r\/extender_bins_936x1404_89b8bed4j1.jpg",
                "from_url": "https:\/\/caseymuratori.com\/blog_0016",
                "thumb_width": 936,
                "thumb_height": 1404,
                "service_name": "caseymuratori.com",
                "id": 2,
                "original_url": "https:\/\/caseymuratori.com\/blog_0016"
            },
            {
                "title": "Designing and Evaluating Reusable Components (2004)",
                "title_link": "https:\/\/caseymuratori.com\/blog_0024",
                "text": "An in-depth look at the five core principles of API design.",
                "fallback": "Designing and Evaluating Reusable Components (2004)",
                "thumb_url": "https:\/\/caseymuratori.com\/r\/capacitors_1404x936_9d922642j1.jpg",
                "from_url": "https:\/\/caseymuratori.com\/blog_0024",
                "thumb_width": 1404,
                "thumb_height": 936,
                "service_name": "caseymuratori.com",
                "id": 3,
                "original_url": "https:\/\/caseymuratori.com\/blog_0024"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MpRLO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In a programming context, I think that Casey Muratori's thoughts on API design are relevant here:\n1) Semantic Compression - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/caseymuratori.com\/blog_0015"
                            },
                            {
                                "type": "text",
                                "text": "\n2) Complexity and Granularity "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/caseymuratori.com\/blog_0016"
                            },
                            {
                                "type": "text",
                                "text": "\n3) (the rest of the posts in that series are worth reading but not directly related to the topic)\n4) His \"Designing and Evaluating Reusable Components\" talk that I posted here a while ago - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/caseymuratori.com\/blog_0024"
                            },
                            {
                                "type": "text",
                                "text": " - there's a graph that comes to mind at 7:54\n\n(I'm currently reading Christopher Alexander's \"Notes on the Synthesis of Form\", so there may be more in that...)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAJ9DV971"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAJ9DV971",
        "type": "message",
        "ts": "1549447568.888000",
        "client_msg_id": "cc8a8aa1-7e46-486b-bc55-02e9810bc5b8",
        "text": "Isn't he just describing leaky abstractions?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "540fc50d2192",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-12\/502004543669_540fc50d2192cc8aba20_72.jpg",
            "first_name": "Marcel",
            "real_name": "Marcel Goethals",
            "display_name": "wolkenmachine",
            "team": "T5TCAFTA9",
            "name": "accounts",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fiV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't he just describing leaky abstractions?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFD2JRE58",
                    "UD43R8ZFV"
                ],
                "count": 2
            }
        ]
    },
    {
        "text": "re Chris Alexander's 'wholeness' vs modular components: (from <http:\/\/slideplayer.com\/slide\/4082679>, talking about modular vs integral design)",
        "files": [
            {
                "id": "FFZA23M5J",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UEDDR6L5Q",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yDidU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "re Chris Alexander's 'wholeness' vs modular components: (from "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/slideplayer.com\/slide\/4082679"
                            },
                            {
                                "type": "text",
                                "text": ", talking about modular vs integral design)"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1549447647.888400",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1549448274.000000"
        },
        "thread_ts": "1549431712.880200",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UD43R8ZFV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1549447995.888900",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1549448014.000000"
        },
        "client_msg_id": "8a181a47-ec2a-449d-a55f-85a84b3df9c8",
        "text": "Something the foetus description in the permaculture article reminded me of:  _\"Exploration-based design\"_ - <https:\/\/hero.handmade.network\/episode\/code\/day027\/#220>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549431712.880200",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "service_name": "Handmade.Network",
                "title": "Exploration-based Architecture | Annotated Episode | Handmade Hero",
                "title_link": "https:\/\/hero.handmade.network\/episode\/code\/day027\/#220",
                "text": "Exploration-based Architecture | Annotated Episode | Handmade Hero…",
                "fallback": "Handmade.Network: Exploration-based Architecture | Annotated Episode | Handmade Hero",
                "image_url": "http:\/\/handmade.network\/static\/media\/projects\/light-logo\/hero.jpeg",
                "image_width": 250,
                "image_height": 250,
                "from_url": "https:\/\/hero.handmade.network\/episode\/code\/day027\/#220",
                "image_bytes": 15814,
                "service_icon": "https:\/\/hero.handmade.network\/static\/apple-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/hero.handmade.network\/episode\/code\/day027\/#220"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4EhQX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something the foetus description in the permaculture article reminded me of:  "
                            },
                            {
                                "type": "text",
                                "text": "\"Exploration-based design\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hero.handmade.network\/episode\/code\/day027\/#220"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAJ9DV971",
        "type": "message",
        "ts": "1549452285.889900",
        "client_msg_id": "6e1f7c2e-8864-42b0-a93a-8df4a1d12f75",
        "text": "Yeah exactly, I guess in programming terms you could call unfolding a kind of \"gradual refactoring\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "540fc50d2192",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-12\/502004543669_540fc50d2192cc8aba20_72.jpg",
            "first_name": "Marcel",
            "real_name": "Marcel Goethals",
            "display_name": "wolkenmachine",
            "team": "T5TCAFTA9",
            "name": "accounts",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549431712.880200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wbyx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah exactly, I guess in programming terms you could call unfolding a kind of \"gradual refactoring\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFD2JRE58",
        "type": "message",
        "ts": "1549452931.890100",
        "edited": {
            "user": "UFD2JRE58",
            "ts": "1549454021.000000"
        },
        "client_msg_id": "59b60629-533d-4ae7-807b-edb2f60aa941",
        "text": "The critique about DSL and the complexity gap ring true. I'd much prefer good libraries not some half baked yaml\/xml\/json DSL. I'm looking at you Ansible, Gulp, Ant etc.).\n\nHowever the real essence of a declarative approach is defining an end state and not instructions for how to get there.\n\nIMHO the actual problem with declarativeness in that in the general case, you just can't omit \"how to get there\" because you can't eliminate pathological performance cases. I'll call the declarative run-time a `solver` from here on because that is what we are really talking about.\n\nI don't believe you can have a solver that can analytically determine the best method to tackle a problem because it suffers from multiple types of halting-problem-esq regresses e.g..\n- the \"methods to determine the method\" which can also be pathological\n- the solver would need to implement every possible execution strategy\n\nThe work-around tends to be ways to hint to your solver about it's approach to avoid pathology but I think it can only ever be a partial workaround. The general case requires a \"complete hint\" i.e. the explicit list of instructions to perform.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ca63ca2aa38f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-01-20\/529811744742_ca63ca2aa38fa658cc4f_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Woods",
            "display_name": "duncanawoods",
            "team": "T5TCAFTA9",
            "name": "duncan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OwCuE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The critique about DSL and the complexity gap ring true. I'd much prefer good libraries not some half baked yaml\/xml\/json DSL. I'm looking at you Ansible, Gulp, Ant etc.).\n\nHowever the real essence of a declarative approach is defining an end state and not instructions for how to get there.\n\nIMHO the actual problem with declarativeness in that in the general case, you just can't omit \"how to get there\" because you can't eliminate pathological performance cases. I'll call the declarative run-time a "
                            },
                            {
                                "type": "text",
                                "text": "solver",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from here on because that is what we are really talking about.\n\nI don't believe you can have a solver that can analytically determine the best method to tackle a problem because it suffers from multiple types of halting-problem-esq regresses e.g..\n- the \"methods to determine the method\" which can also be pathological\n- the solver would need to implement every possible execution strategy\n\nThe work-around tends to be ways to hint to your solver about it's approach to avoid pathology but I think it can only ever be a partial workaround. The general case requires a \"complete hint\" i.e. the explicit list of instructions to perform."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD43R8ZFV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFD2JRE58",
        "type": "message",
        "ts": "1549453053.890300",
        "edited": {
            "user": "UFD2JRE58",
            "ts": "1549453103.000000"
        },
        "client_msg_id": "5c23135c-df72-4304-a2ed-8ad0eab9b6f3",
        "text": "<@UEKEQGB9C> read your comment - Yes! Thinking along the same lines. IMHO prolog is a textbook of example of how declarativeness is impossible at the general level. The language writes a check that the solver can't pay.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ca63ca2aa38f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-01-20\/529811744742_ca63ca2aa38fa658cc4f_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Woods",
            "display_name": "duncanawoods",
            "team": "T5TCAFTA9",
            "name": "duncan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qea",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEKEQGB9C"
                            },
                            {
                                "type": "text",
                                "text": " read your comment - Yes! Thinking along the same lines. IMHO prolog is a textbook of example of how declarativeness is impossible at the general level. The language writes a check that the solver can't pay."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1549453134.891100",
        "client_msg_id": "34ad3cc0-e2a0-4607-af78-3fc1cd4b2262",
        "text": "For the functionally inclined in the room: \"A Real-World Application with a Comonadic User Interface\" <https:\/\/arthurxavierx.github.io\/RealWorldAppComonadicUI.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tJi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For the functionally inclined in the room: \"A Real-World Application with a Comonadic User Interface\" "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arthurxavierx.github.io\/RealWorldAppComonadicUI.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFW3LB2KA",
        "type": "message",
        "ts": "1549461269.891700",
        "client_msg_id": "15b58f4d-df23-4f17-825e-1a4a3d1a7459",
        "text": "I think Prolog didn't ever lose, it was subsumed by strongly-typed languages. Every time you use type inference you trigger a unification algorithm in the type checker. Program domain codified in the type system is a proof that some aspects of your runtime code is valid and the type checker verifies that through unification. <https:\/\/en.wikipedia.org\/wiki\/Curry–Howard_correspondence>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2bcec88b965",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/42bcec88b9653a5c34e35a2be102e115.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Max",
            "real_name": "Max Desiatov",
            "display_name": "maxd",
            "team": "T5TCAFTA9",
            "name": "max",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "parent_user_id": "UEDDR6L5Q",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/8\/8b\/Coq_plus_comm_screenshot.jpg",
                "image_width": 823,
                "image_height": 613,
                "image_bytes": 85498,
                "title": "Curry–Howard correspondence",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Curry–Howard_correspondence",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Curry–Howard_correspondence",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "In programming language theory and proof theory, the Curry–Howard correspondence (also known as the Curry–Howard isomorphism or equivalence, or the proofs-as-programs and propositions- or formulae-as-types interpretation) is the direct relationship between computer programs and mathematical proofs. \nIt is a generalization of a syntactic analogy between systems of formal logic and computational calculi that was first discovered by the American mathematician Haskell Curry and logician William Alvin Howard. It is the link between logic and computation that is usually attributed to Curry and Howard, although the idea is related to the operational interpretation of intuitionistic logic given in various formulations by  L. E. J. Brouwer, Arend Heyting and Andrey Kolmogorov (see Brouwer–Heyting–Kolmogorov interpretation) and Stephen Kleene (see Realizability). The relationship has been extended to include category theory as the three-way Curry–Howard–Lambek correspondence.",
                "fallback": "wikipedia: Curry–Howard correspondence",
                "service_icon": "https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Curry–Howard_correspondence"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pa1h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think Prolog didn't ever lose, it was subsumed by strongly-typed languages. Every time you use type inference you trigger a unification algorithm in the type checker. Program domain codified in the type system is a proof that some aspects of your runtime code is valid and the type checker verifies that through unification. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Curry–Howard_correspondence"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFW3LB2KA",
        "type": "message",
        "ts": "1549461429.892000",
        "edited": {
            "user": "UFW3LB2KA",
            "ts": "1549461441.000000"
        },
        "client_msg_id": "1048046c-3fc8-4e89-85c2-9f225279e394",
        "text": "My point is that when we write in strongly-typed languages (even those that are commonly perceived as \"imperative\"), we're using declarative logic programming on the level of types regardless of what we think of usefulness of declarative programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2bcec88b965",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/42bcec88b9653a5c34e35a2be102e115.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Max",
            "real_name": "Max Desiatov",
            "display_name": "maxd",
            "team": "T5TCAFTA9",
            "name": "max",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zmwi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My point is that when we write in strongly-typed languages (even those that are commonly perceived as \"imperative\"), we're using declarative logic programming on the level of types regardless of what we think of usefulness of declarative programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAJ9DV971",
                    "UD43R8ZFV"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFD2JRE58",
        "type": "message",
        "ts": "1549463931.892300",
        "edited": {
            "user": "UFD2JRE58",
            "ts": "1549464641.000000"
        },
        "client_msg_id": "969727e0-4b9d-4f50-bd18-1b50dd93daef",
        "text": "&gt; strongly-typed languages (even those that are commonly perceived as \"imperative\"), we're using declarative logic programming on the level of types\n\nI like that.\n\nI don't think it redeems Prolog as a general purpose programming language. It says something different: declarativeness works for constrained problems. Given various type-systems are turing-complete I guess the problems are only really constrained by practice not power.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ca63ca2aa38f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-01-20\/529811744742_ca63ca2aa38fa658cc4f_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Woods",
            "display_name": "duncanawoods",
            "team": "T5TCAFTA9",
            "name": "duncan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BZ1R0",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "strongly-typed languages (even those that are commonly perceived as \"imperative\"), we're using declarative logic programming on the level of types"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI like that.\n\nI don't think it redeems Prolog as a general purpose programming language. It says something different: declarativeness works for constrained problems. Given various type-systems are turing-complete I guess the problems are only really constrained by practice not power."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFW3LB2KA",
        "type": "message",
        "ts": "1549466823.892700",
        "client_msg_id": "d9fc993f-159b-4250-9ec1-a45cb13c3c1e",
        "text": "yep, it also helps to perceive most strongly-typed languages as 2 separate languages: one for \"actual programming\", be it imperative or declarative; and another declarative logical language on top of that in which you can write additional \"type specifications\" for a language \"below\". So when people say \"these type systems are ridiculously complex\" it's fair to answer that most type systems are just separate languages for declarative logic programming that help you write a \"proof\" for a \"lower-level\" language. Btw, this is what makes dependent types so fascinating to me: they make it possible to \"bundle\" a \"formal verification\" for your program if you put enough effort in making type signatures detailed and expressive enough.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2bcec88b965",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/42bcec88b9653a5c34e35a2be102e115.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Max",
            "real_name": "Max Desiatov",
            "display_name": "maxd",
            "team": "T5TCAFTA9",
            "name": "max",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p5k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yep, it also helps to perceive most strongly-typed languages as 2 separate languages: one for \"actual programming\", be it imperative or declarative; and another declarative logical language on top of that in which you can write additional \"type specifications\" for a language \"below\". So when people say \"these type systems are ridiculously complex\" it's fair to answer that most type systems are just separate languages for declarative logic programming that help you write a \"proof\" for a \"lower-level\" language. Btw, this is what makes dependent types so fascinating to me: they make it possible to \"bundle\" a \"formal verification\" for your program if you put enough effort in making type signatures detailed and expressive enough."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFW3LB2KA",
        "type": "message",
        "ts": "1549466995.892900",
        "client_msg_id": "1c33d6fd-6ee6-4360-bb70-f4eafb664a5d",
        "text": "as far as I understand dependent types allow having proper declarative \"languages\" on the type system level, here's how vector concatenation looks in Idris, the type signature part is the most interesting to me. I don't have much experience with Prolog, but I wonder if it's as powerful as dependent types in Idris\n```\n(++) : Vect n a -&gt; Vect m a -&gt; Vect (n + m) a\n(++) Nil       ys = ys\n(++) (x :: xs) ys = x :: xs ++ ys\n```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2bcec88b965",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/42bcec88b9653a5c34e35a2be102e115.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Max",
            "real_name": "Max Desiatov",
            "display_name": "maxd",
            "team": "T5TCAFTA9",
            "name": "max",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ifB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "as far as I understand dependent types allow having proper declarative \"languages\" on the type system level, here's how vector concatenation looks in Idris, the type signature part is the most interesting to me. I don't have much experience with Prolog, but I wonder if it's as powerful as dependent types in Idris"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(++) : Vect n a -> Vect m a -> Vect (n + m) a\n(++) Nil       ys = ys\n(++) (x :: xs) ys = x :: xs ++ ys\n"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1549469158.893200",
        "client_msg_id": "59630054-1b03-4248-b810-2b04d5a8ead5",
        "text": "The HN voting ring detector is extremely sensitive. Many of you may already be on it purely by sharing interests. Fortunately there are no penalties more serious than the odd upvote being discounted.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549444226.884400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/xii",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The HN voting ring detector is extremely sensitive. Many of you may already be on it purely by sharing interests. Fortunately there are no penalties more serious than the odd upvote being discounted."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UD43R8ZFV"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1549518768.894000",
        "client_msg_id": "ed176051-589b-48f6-bca9-53d9fa1f5cd2",
        "text": "I'd be curious to see existing solutions for merging VPLs. git works partly because teams generally split up their code into smaller files. That breaks up the merging problems a lot. Most VPLs I've worked with dump the entire tree of code to one file. Not super friendly for merging with others.\n\nAnother issue seems to be how easy it is to fix conflicts. This is often *relatively* easy for text based code. In my experience it gets harder the more structure there is to the data. References from one VPL node to another are often via GUID or other paths. I haven't thought about why I seem to run into those issues less with text code. Maybe it's because the expressions of those connections are less common in text code? Or written in a way that's less brittle, probably because it's harder in text in the first place?\n\nAs for images, I've never seen an image *merge* program. I've only every seen an image comparison program. They are used to discard one image over another, not to merge conflicts.\n\nThe sarcastic suggestion that every function should be considered a separate file might actually suggest a possible solution. In games this problem comes up a lot because the level data (where all the objects are on a level) is often either some binary format, or JSON\/XML etc but is not easily mergible. A solution by one team was to store levels as a collection of files, one file per object, they claim this helps the merging issue.\n\n<http:\/\/the-witness.net\/news\/2011\/12\/engine-tech-concurrent-world-editing\/>\n\nMaybe a similar solution would help VPLs?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548823279.730200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RnV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd be curious to see existing solutions for merging VPLs. git works partly because teams generally split up their code into smaller files. That breaks up the merging problems a lot. Most VPLs I've worked with dump the entire tree of code to one file. Not super friendly for merging with others.\n\nAnother issue seems to be how easy it is to fix conflicts. This is often "
                            },
                            {
                                "type": "text",
                                "text": "relatively",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " easy for text based code. In my experience it gets harder the more structure there is to the data. References from one VPL node to another are often via GUID or other paths. I haven't thought about why I seem to run into those issues less with text code. Maybe it's because the expressions of those connections are less common in text code? Or written in a way that's less brittle, probably because it's harder in text in the first place?\n\nAs for images, I've never seen an image "
                            },
                            {
                                "type": "text",
                                "text": "merge",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " program. I've only every seen an image comparison program. They are used to discard one image over another, not to merge conflicts.\n\nThe sarcastic suggestion that every function should be considered a separate file might actually suggest a possible solution. In games this problem comes up a lot because the level data (where all the objects are on a level) is often either some binary format, or JSON\/XML etc but is not easily mergible. A solution by one team was to store levels as a collection of files, one file per object, they claim this helps the merging issue.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/the-witness.net\/news\/2011\/12\/engine-tech-concurrent-world-editing\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMaybe a similar solution would help VPLs?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1549519737.894300",
        "client_msg_id": "94df9fde-a823-4808-8587-d6a0c35a6784",
        "text": "having one infrastructure with access to everything sounds impossible to me. It sounds impossible because it would require all programmers to agree on what is the correct way to do things and to never add anything new without years of committees of getting everyone's agreements that this new thing is being done the \"right\" way.\n\nPortals (as defined above) seem as natural as the fact that I have different thoughts than the person sitting next to me. Those thoughts lead to different solutions and different solutions =&gt; silos.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549052154.806000",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i8aCp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "having one infrastructure with access to everything sounds impossible to me. It sounds impossible because it would require all programmers to agree on what is the correct way to do things and to never add anything new without years of committees of getting everyone's agreements that this new thing is being done the \"right\" way.\n\nPortals (as defined above) seem as natural as the fact that I have different thoughts than the person sitting next to me. Those thoughts lead to different solutions and different solutions => silos."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1549522332.894500",
        "client_msg_id": "2de8a4d3-a486-4d89-a70c-7e5802f863ef",
        "text": "Interesting counterpoint wrt portals. Perhaps we can't get rid of portals completely. But still, silos by design is one thing and often we have silos by accident - it's easier to create silos, even when I want to create open, extensible apps and features. The baseline of interoperability today is importing\/exporting 'files' and rudimentary copy\/paste. Can this be raised?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549052154.806000",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MvY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting counterpoint wrt portals. Perhaps we can't get rid of portals completely. But still, silos by design is one thing and often we have silos by accident - it's easier to create silos, even when I want to create open, extensible apps and features. The baseline of interoperability today is importing\/exporting 'files' and rudimentary copy\/paste. Can this be raised?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1549526335.894700",
        "client_msg_id": "ae6acdf0-0ec9-4928-b2ae-56c0e2f6236b",
        "text": "&gt; Other editors with Marketplaces that come to my mind are Sublime\n\nI was unaware that sublimetext had a market. Googling for \"sublimetext plugin market\" only brings up a 3rd party manager. The sublimetext home page says nothing about a market. Am I missing it? Note: Lots of editors have plugins since the 80s, google \"emacs addons\" or \"vim addons\" you just had to find them and install them yourself. That's different from an official market.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548677438.676400",
        "parent_user_id": "UDRF3ALP4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "85H",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Other editors with Marketplaces that come to my mind are Sublime"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI was unaware that sublimetext had a market. Googling for \"sublimetext plugin market\" only brings up a 3rd party manager. The sublimetext home page says nothing about a market. Am I missing it? Note: Lots of editors have plugins since the 80s, google \"emacs addons\" or \"vim addons\" you just had to find them and install them yourself. That's different from an official market."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]