[
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1631443658.000200",
        "client_msg_id": "12e886c0-1694-4a95-898c-9aca4787e793",
        "text": "Hah, well my current hope is that the compiler input isn’t a high level language, but a model (think more like minecraft or sketch)\nI’m looking for the right model(s) to slowly increase power\/complexity, basically adding a dimension at a time (and trying to keep people thinking about the “what” rather than the “how” when manipulating the model)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631142763.129900",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qjua5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hah, well my current hope is that the compiler input isn’t a high level language, but a model (think more like minecraft or sketch)\nI’m looking for the right model(s) to slowly increase power\/complexity, basically adding a dimension at a time (and trying to keep people thinking about the “what” rather than the “how” when manipulating the model)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UG0EL18H3",
        "type": "message",
        "ts": "1631476913.000500",
        "edited": {
            "user": "UG0EL18H3",
            "ts": "1631476956.000000"
        },
        "client_msg_id": "4b2d81a5-8ef8-423d-a36b-bff0e71d6550",
        "text": "I'll second the Winograd paper! A few that have influenced my thoughts around programming tools are:\n• *Beyond Being There* - This one is mostly about communication media, but given that communication is necessary for coordination, and that coordination is necessary for delivering and maintaining complex systems, having solid communication media is (I believe), a principal factor in the success of any group that wishes to build software: <http:\/\/worrydream.com\/refs\/Hollan%20-%20Beyond%20Being%20There.pdf>\n• *Convivial Design Heuristics for Software Systems* - Stephen Kell talks about how language and environment designers can afford individuals agency and freedom, while limiting their ability to trample the freedoms of others: he gives many great (and counterintuitive) recommendations such as introducing friction when it comes to defining abstractions: <https:\/\/dl.acm.org\/doi\/abs\/10.1145\/3397537.3397543>\n• *WhyLine* - \"A debugging tool that allows programmers to ask 'Why did' and 'Why didn't' questions about their program's output\". This is interesting to me because it inverts the relationship between programmer and computer. Normally the programmer is the one tasked with coming up with the \"why\/why not\" questions: in the case of Whyline, the system generates these questions automatically based on static and dynamic analyses of the running system: <https:\/\/www.cs.cmu.edu\/~NatProg\/whyline.html>\n• *A Programmable Programming Language* - Matthias Felleisen has some great talks on building DSLs in Racket (<https:\/\/www.youtube.com\/watch?v=z8Pz4bJV3Tk>) but I think his paper does the best job of explaining why language-oriented programming is so powerful (the \"Thoughts\" section of his website is also full of gems: <https:\/\/felleisen.org\/matthias\/Thoughts\/index.html>): <https:\/\/cs.brown.edu\/~sk\/Publications\/Papers\/Published\/fffkbmt-programmable-prog-lang\/paper.pdf>\n• *Revisiting and Broadening the Meta-Design Framework for End-User Development* - This paper builds on the authors' earlier work (<https:\/\/www.researchgate.net\/publication\/220427813_Meta-Design_A_manifesto_for_End-User_Development>) and advocates for open, extensible systems, and for the designers of those systems to engage end-users as co-designers of these kinds of systems, as opposed to building \"walled gardens\" that attempt to anticipate every future need or possible use of the system: <https:\/\/www.researchgate.net\/publication\/316734680_Revisiting_and_Broadening_the_Meta-Design_Framework_for_End-User_Development>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "25cc47143833",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-01\/702360681283_25cc471438337c72e600_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Rabl",
            "display_name": "crabl",
            "team": "T5TCAFTA9",
            "name": "chris.rabl",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631287181.168700",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fva",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll second the Winograd paper! A few that have influenced my thoughts around programming tools are:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Beyond Being There",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - This one is mostly about communication media, but given that communication is necessary for coordination, and that coordination is necessary for delivering and maintaining complex systems, having solid communication media is (I believe), a principal factor in the success of any group that wishes to build software: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/worrydream.com\/refs\/Hollan%20-%20Beyond%20Being%20There.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Convivial Design Heuristics for Software Systems",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - Stephen Kell talks about how language and environment designers can afford individuals agency and freedom, while limiting their ability to trample the freedoms of others: he gives many great (and counterintuitive) recommendations such as introducing friction when it comes to defining abstractions: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/3397537.3397543"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "WhyLine",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - \"A debugging tool that allows programmers to ask 'Why did' and 'Why didn't' questions about their program's output\". This is interesting to me because it inverts the relationship between programmer and computer. Normally the programmer is the one tasked with coming up with the \"why\/why not\" questions: in the case of Whyline, the system generates these questions automatically based on static and dynamic analyses of the running system: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.cs.cmu.edu\/~NatProg\/whyline.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A Programmable Programming Language",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - Matthias Felleisen has some great talks on building DSLs in Racket ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.youtube.com\/watch?v=z8Pz4bJV3Tk"
                                    },
                                    {
                                        "type": "text",
                                        "text": ") but I think his paper does the best job of explaining why language-oriented programming is so powerful (the \"Thoughts\" section of his website is also full of gems: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/felleisen.org\/matthias\/Thoughts\/index.html"
                                    },
                                    {
                                        "type": "text",
                                        "text": "): "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/cs.brown.edu\/~sk\/Publications\/Papers\/Published\/fffkbmt-programmable-prog-lang\/paper.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Revisiting and Broadening the Meta-Design Framework for End-User Development",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - This paper builds on the authors' earlier work ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.researchgate.net\/publication\/220427813_Meta-Design_A_manifesto_for_End-User_Development"
                                    },
                                    {
                                        "type": "text",
                                        "text": ") and advocates for open, extensible systems, and for the designers of those systems to engage end-users as co-designers of these kinds of systems, as opposed to building \"walled gardens\" that attempt to anticipate every future need or possible use of the system: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.researchgate.net\/publication\/316734680_Revisiting_and_Broadening_the_Meta-Design_Framework_for_End-User_Development"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK",
                    "UFPPABQ7P",
                    "UA14TGLTC",
                    "U013ZLJARC7"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1631490675.001200",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1631490781.000000"
        },
        "client_msg_id": "77313594-efe7-461d-a58f-2234a55275a7",
        "text": "What do you mean by \"model\" here? That word has a lot of meanings!\n\nFor example, how do you wish me to perceive Minecraft as a model? I see it as a fully-fledged interactive application! But if I were to think of Minecraft as a _tool_ for making models, I can recall how people use Minecraft blocks to build _physical models_ of locations and buildings. But those aren't models of interactive systems. You can also use Minecraft's redstone system to build circuits, but that's equivalent to a low-level programming language, so I don't see it as something special. And of course you can write mods for Minecraft, but that's just conventional programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631142763.129900",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lK\/N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What do you mean by \"model\" here? That word has a lot of meanings!\n\nFor example, how do you wish me to perceive Minecraft as a model? I see it as a fully-fledged interactive application! But if I were to think of Minecraft as a "
                            },
                            {
                                "type": "text",
                                "text": "tool",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for making models, I can recall how people use Minecraft blocks to build "
                            },
                            {
                                "type": "text",
                                "text": "physical models",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of locations and buildings. But those aren't models of interactive systems. You can also use Minecraft's redstone system to build circuits, but that's equivalent to a low-level programming language, so I don't see it as something special. And of course you can write mods for Minecraft, but that's just conventional programming."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1631491473.004100",
        "client_msg_id": "43AF972A-6C07-43D5-9C16-1C38BEBB54B6",
        "text": "<@UJBAJNFLK> \nJust finished the Winograd Paper. Thank you so much for that recommendation!|\n\n<@UG0EL18H3> \nLove beyond being there. The other’s I have not read, (though I am familiar with racket). Thanks for the recommendations :) Look forward to diving in.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631287181.168700",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DyuT9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " \nJust finished the Winograd Paper. Thank you so much for that recommendation!|\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " \nLove beyond being there. The other’s I have not read, (though I am familiar with racket). Thanks for the recommendations :) Look forward to diving in."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]