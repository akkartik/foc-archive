[
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660577052.279489",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1660577065.000000"
        },
        "client_msg_id": "82B6D51E-C41F-4597-8EF0-2477407470DB",
        "text": "Calling all type nerds: my new job deals with a lot of encrypted data that shouldn't be transmitted in plaintext. We’ve just added sorbet to our rails project (gradual typechecker). I feel like I've read somewhere that it's possible to use types to enforce that kind of restriction. Does anyone have any experience using types for that (or links to talks\/papers\/blog posts)?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "reply_count": 26,
        "reply_users_count": 5,
        "latest_reply": "1665879606.550859",
        "reply_users": [
            "UBN9AFS0N",
            "UHWC9PXBL",
            "UFPPABQ7P",
            "U035QJ14NN9",
            "U02E4DAQGSZ"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1660578027.011019"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1660578161.041829"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660578515.363409"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660578888.786369"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660578970.711569"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1660579515.111989"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660579556.289779"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1660579591.881269"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660579667.831009"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1660579912.305439"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1660579948.273689"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660580033.074959"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1660580072.115619"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660580096.574949"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660580166.758879"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660580298.124039"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660580389.163469"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1660580516.270109"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1660580684.162459"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1660580798.577349"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1660580820.991009"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1660581635.152709"
            },
            {
                "user": "U035QJ14NN9",
                "ts": "1660585317.747369"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1660634183.477299"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1665693350.912969"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1665879606.550859"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IiPI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Calling all type nerds: my new job deals with a lot of encrypted data that shouldn't be transmitted in plaintext. We’ve just added sorbet to our rails project (gradual typechecker). I feel like I've read somewhere that it's possible to use types to enforce that kind of restriction. Does anyone have any experience using types for that (or links to talks\/papers\/blog posts)?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1660578027.011019",
        "client_msg_id": "233f1bdb-0741-44a0-a04f-df8a37f505e1",
        "text": "Language-based information-flow security <https:\/\/ieeexplore.ieee.org\/abstract\/document\/1159651>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hK4K6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Language-based information-flow security "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ieeexplore.ieee.org\/abstract\/document\/1159651"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1660578161.041829",
        "client_msg_id": "47d1009e-f4b0-4cef-aa10-805c2252b082",
        "text": "you may find more searching for \"tainted data\", \"taint propagation\" and similar",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UKMk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you may find more searching for \"tainted data\", \"taint propagation\" and similar"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660578515.363409",
        "client_msg_id": "BC2E7C74-A707-4EF8-9629-7D5E6CDDBEFC",
        "text": "for anyone looking, here's the preprint: <https:\/\/www.cs.cornell.edu\/andru\/papers\/jsac\/sm-jsac03.pdf|https:\/\/www.cs.cornell.edu\/andru\/papers\/jsac\/sm-jsac03.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pfS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for anyone looking, here's the preprint: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.cornell.edu\/andru\/papers\/jsac\/sm-jsac03.pdf",
                                "text": "https:\/\/www.cs.cornell.edu\/andru\/papers\/jsac\/sm-jsac03.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660578888.786369",
        "client_msg_id": "6B8032AA-118C-4BFA-9BE7-EECBD6AEBAB6",
        "text": "<@UFPPABQ7P> ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RwH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660578970.711569",
        "client_msg_id": "8CCA46E7-EC9D-43E4-8D05-412B7555EC0D",
        "text": "i'm almost imagining something like a NoTransmit&lt;a&gt; getting returned from the decryption function and delegating all the methods to the member… but then using some kind of exclusion logic on methods that transmit data to the client. or like have the transmission methods only accept Encrypted&lt;a&gt; for certain values of a. is that too wild?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1jgH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i'm almost imagining something like a NoTransmit<a> getting returned from the decryption function and delegating all the methods to the member… but then using some kind of exclusion logic on methods that transmit data to the client. or like have the transmission methods only accept Encrypted<a> for certain values of a. is that too wild?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1660579515.111989",
        "client_msg_id": "5f7a1411-6c86-4df8-9003-0226274d9b74",
        "text": "I might be harebrained to say this. But, my initial thought is to have a kind of encrypted dictionary of information + a centralized security master with an access log.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MdN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I might be harebrained to say this. But, my initial thought is to have a kind of encrypted dictionary of information + a centralized security master with an access log."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660579556.289779",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1660579587.000000"
        },
        "client_msg_id": "B58A03F9-4661-4D40-96AC-0799376EFB73",
        "text": "the company is SOC 2 compliant—encryption at rest and in transit is already happening ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n6e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the company is SOC 2 compliant—encryption at rest and in transit is already happening "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1660579591.881269",
        "client_msg_id": "df961224-17d2-4004-9d71-aba0d02c69b5",
        "text": "Ah, so this is just a type design question?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X23q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, so this is just a type design question?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660579667.831009",
        "client_msg_id": "1C8DFA1D-5209-469E-8EEB-B5F3AA2190C9",
        "text": "yeah the scenario is basically: the server decrypts some data for a calculation, then asks an api a question or sends some data to a client, while accidentally including some personally identifiable info. we catch it in code reviews but i was was wondering if there was a way to catch it at compile time",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1\/MW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah the scenario is basically: the server decrypts some data for a calculation, then asks an api a question or sends some data to a client, while accidentally including some personally identifiable info. we catch it in code reviews but i was was wondering if there was a way to catch it at compile time"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1660579912.305439",
        "client_msg_id": "d3e9bdeb-4561-499a-bae1-543794cb4c55",
        "text": "Something simple could be to always return decrypted data back to the user code under a `{ $dec: ___ }` key, so then, you would always have to access the decrypted data by using `respJson.userName.$dec` then, you can write a linter to statically check all use-sites accesses of the decrypted data.\n\nJust spit balling. This could obv be modified to some other tools in Ruby",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "966",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something simple could be to always return decrypted data back to the user code under a "
                            },
                            {
                                "type": "text",
                                "text": "{ $dec: ___ }",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " key, so then, you would always have to access the decrypted data by using "
                            },
                            {
                                "type": "text",
                                "text": "respJson.userName.$dec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " then, you can write a linter to statically check all use-sites accesses of the decrypted data.\n\nJust spit balling. This could obv be modified to some other tools in Ruby"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1660579948.273689",
        "client_msg_id": "25442c0f-462f-440a-9b3a-bf9b0a01a68d",
        "text": "Or, it's easier to lint with your eyes...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ryM8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or, it's easier to lint with your eyes..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660580033.074959",
        "client_msg_id": "8936335F-1ED7-41D9-BBEF-5B00DBC302C3",
        "text": "yeah i'm pretty much trying to figure out how to encode that with a type—the decryption process is really clever, so it basically feels like you're using a regular rails object even though it's encrypted in memory. that's really nice for ergonomics and not having to update the whole codebase but it also means there's no guardrail to prevent you from sending it somewhere. maybe the answer is just to look through the encryption\/decryption code and see if there's an obvious spot for a shim ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zEbW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah i'm pretty much trying to figure out how to encode that with a type—the decryption process is really clever, so it basically feels like you're using a regular rails object even though it's encrypted in memory. that's really nice for ergonomics and not having to update the whole codebase but it also means there's no guardrail to prevent you from sending it somewhere. maybe the answer is just to look through the encryption\/decryption code and see if there's an obvious spot for a shim "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1660580072.115619",
        "client_msg_id": "28bb79bd-c3ba-471f-9d05-3e76b281b0f2",
        "text": "a data type that throws when encoded\/decoded? (if that's a thing in ruby)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xylW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a data type that throws when encoded\/decoded? (if that's a thing in ruby)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660580096.574949",
        "client_msg_id": "BC3EC89C-472D-496B-8E96-21003966940E",
        "text": "so we want it to be decoded for use. we just don't want the decoded data sent off the server ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cA\/61",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so we want it to be decoded for use. we just don't want the decoded data sent off the server "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660580166.758879",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1660580177.000000"
        },
        "client_msg_id": "A16A1EE8-AB14-4378-BE43-34E15FC415FD",
        "text": "or saved without encryption (very unlikely because the save instructions etc get interrupted by an encrypt-first proxy afaict)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9nRk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "or saved without encryption (very unlikely because the save instructions etc get interrupted by an encrypt-first proxy afaict)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660580298.124039",
        "client_msg_id": "E47208BB-959A-49BC-BACE-7F9B26D09487",
        "text": "this is kind of like the expression problem tbh: it's really easy in a dynamic OO PL to make sure that data gets encrypted\/decrypted for save and use but it's really hard when we start calling functions like ‘`respond_to`’ or ‘`to_json`’ with that data as arguments or values deep in a hash somewhere ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p4=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is kind of like the expression problem tbh: it's really easy in a dynamic OO PL to make sure that data gets encrypted\/decrypted for save and use but it's really hard when we start calling functions like ‘"
                            },
                            {
                                "type": "text",
                                "text": "respond_to",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "’ or ‘"
                            },
                            {
                                "type": "text",
                                "text": "to_json",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "’ with that data as arguments or values deep in a hash somewhere "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660580389.163469",
        "client_msg_id": "22383FAB-1CFD-4426-86AF-5BE1CA1FE9CD",
        "text": "i'm hoping there's some way to make that data a wrapped type that complains only when it's going over the wire",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4cM+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i'm hoping there's some way to make that data a wrapped type that complains only when it's going over the wire"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1660580516.270109",
        "edited": {
            "user": "UFPPABQ7P",
            "ts": "1660580588.000000"
        },
        "client_msg_id": "d7b26506-aa1b-4c1c-b4f6-f4549a3877bf",
        "text": "Sounds almost like sonarqube control flow analysis type stuff. Tracking when a piece of data was unwrapped and where it goes in order to detect this type of issue statically.\n\nNot really an answer...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cN\/g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds almost like sonarqube control flow analysis type stuff. Tracking when a piece of data was unwrapped and where it goes in order to detect this type of issue statically.\n\nNot really an answer..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1660580684.162459",
        "client_msg_id": "3112513b-7cd8-4a84-bd9e-54d4cd45b87f",
        "text": "Another strategy is to try to completely isolate communications with this business logic somehow. So, you can do all the dangerous PII Management inside the business logic process, but it has to go through a small port to communicate externally (port like Elm)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "luJO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another strategy is to try to completely isolate communications with this business logic somehow. So, you can do all the dangerous PII Management inside the business logic process, but it has to go through a small port to communicate externally (port like Elm)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1660580798.577349",
        "client_msg_id": "d8366a21-b311-474a-8e23-ea0179015a4f",
        "text": "One other crazy idea, would be to include mocking tools to generate pii during your testing. And, then use a proxies on the request to make sure pii matching data from the mocker are not being sent between services.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l53",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One other crazy idea, would be to include mocking tools to generate pii during your testing. And, then use a proxies on the request to make sure pii matching data from the mocker are not being sent between services."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1660580820.991009",
        "edited": {
            "user": "UFPPABQ7P",
            "ts": "1660586226.000000"
        },
        "client_msg_id": "c45f0042-9d66-498b-b791-85fd9999ed0e",
        "text": "Almost like a security fuzzer *",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hrj6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Almost like a security fuzzer *"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1660581635.152709",
        "client_msg_id": "CBEF7029-A94C-4F4B-AA62-7D8ECD7BB22D",
        "text": "woah these are all great ideas thank you",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oQzXx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "woah these are all great ideas thank you"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U035QJ14NN9",
        "type": "message",
        "ts": "1660585317.747369",
        "client_msg_id": "F86B547A-EDCE-4BA9-960C-04315469FFFA",
        "text": "Perhaps create a Classified&lt;T&gt; type that can only be read by a Declassifier object, giving you something like object capabilities.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "db778188df26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-05\/3210121425649_db778188df26a0e022f5_72.jpg",
            "first_name": "Joakim",
            "real_name": "Joakim Ahnfelt-Rønne",
            "display_name": "Joakim Ahnfelt-Rønne",
            "team": "T5TCAFTA9",
            "name": "joakim.ahnfelt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660577052.279489",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YVF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps create a Classified<T> type that can only be read by a Declassifier object, giving you something like object capabilities."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1660605804.439419",
        "client_msg_id": "4f93d32a-00d1-4513-b9d9-829ff5238a6a",
        "text": "If it's SF in October I can probably join",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660203557.648179",
        "parent_user_id": "U013ZLJARC7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n8+Y8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If it's SF in October I can probably join"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    }
]