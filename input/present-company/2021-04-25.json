[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1619341729.104900",
        "client_msg_id": "f9339265-8836-43f6-a581-43d05e7ec398",
        "text": "That's a nice example! I wouldn't expect everyone to agree on any such list, of course, but they are still useful to learn lessons from the past. However, they would probably need to be more verbose, with references to the real-life problems that motivated each point.\n\nAs for your confrontation between \"Java\" and \"2021 language\", I'd love to see people think about the next step: how to correct design decisions that turned out to be bad without starting a new ecosystem from scratch? Could e.g. Java be improved while (1) not breaking existing code and (2) permitting developers to gradually port a codebase to better foundations? Ideally (3) without adding new layers of complexity? The only example I know for such a deliberate attempt of backwards-compatible redesign was Fortran 90 and its follow-ups. Which has basically achieved the goals, with some compromises on (3).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "42Mx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's a nice example! I wouldn't expect everyone to agree on any such list, of course, but they are still useful to learn lessons from the past. However, they would probably need to be more verbose, with references to the real-life problems that motivated each point.\n\nAs for your confrontation between \"Java\" and \"2021 language\", I'd love to see people think about the next step: how to correct design decisions that turned out to be bad without starting a new ecosystem from scratch? Could e.g. Java be improved while (1) not breaking existing code and (2) permitting developers to gradually port a codebase to better foundations? Ideally (3) without adding new layers of complexity? The only example I know for such a deliberate attempt of backwards-compatible redesign was Fortran 90 and its follow-ups. Which has basically achieved the goals, with some compromises on (3)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1619370289.105100",
        "client_msg_id": "41e54de3-fa56-4647-b507-cac38938fc49",
        "text": "Java is removing a few things, but it's slow going, and falls far short of a net reduction in complexity. It also hasn't done so in a way that never breaks existing code.\n• Date was superseded by a new date\/time library in Java 8 that uses immutable objects. I suspect Date will not be removed within the coming decade, however. Hashtable and Vector have been superseded by other classes for over a decade, but still are in the standard library.\n• Wrapper type for primitives may be removed in the next few years. This requires removing some existing functionality, and is ongoing. It will most likely break some existing code, and that's been deemed acceptable. It does allow gradual evolution (prior versions support the idioms you need for future ones, old idioms have been deprecated before removal).  (<https:\/\/github.com\/openjdk\/valhalla-docs\/blob\/main\/site\/design-notes\/state-of-valhalla\/02-object-model.md>). \nOf course, I'm not sure all those decisions are optimal, but it's an example of a widely used ecosystem trying to square the circle.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "openjdk\/valhalla-docs",
                "title_link": "https:\/\/github.com\/openjdk\/valhalla-docs\/blob\/main\/site\/design-notes\/state-of-valhalla\/02-object-model.md",
                "text": "<https:\/\/openjdk.java.net\/projects\/valhalla>. Contribute to openjdk\/valhalla-docs development by creating an account on GitHub.",
                "fallback": "GitHub: openjdk\/valhalla-docs",
                "image_url": "https:\/\/opengraph.githubassets.com\/7fad9da8298937b7068e69292929465673fd21bc0275816c781b1d70914c2567\/openjdk\/valhalla-docs",
                "from_url": "https:\/\/github.com\/openjdk\/valhalla-docs\/blob\/main\/site\/design-notes\/state-of-valhalla\/02-object-model.md",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 89099,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/openjdk\/valhalla-docs\/blob\/main\/site\/design-notes\/state-of-valhalla\/02-object-model.md"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uId",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Java is removing a few things, but it's slow going, and falls far short of a net reduction in complexity. It also hasn't done so in a way that never breaks existing code.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Date was superseded by a new date\/time library in Java 8 that uses immutable objects. I suspect Date will not be removed within the coming decade, however. Hashtable and Vector have been superseded by other classes for over a decade, but still are in the standard library."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Wrapper type for primitives may be removed in the next few years. This requires removing some existing functionality, and is ongoing. It will most likely break some existing code, and that's been deemed acceptable. It does allow gradual evolution (prior versions support the idioms you need for future ones, old idioms have been deprecated before removal).  ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/openjdk\/valhalla-docs\/blob\/main\/site\/design-notes\/state-of-valhalla\/02-object-model.md"
                                    },
                                    {
                                        "type": "text",
                                        "text": "). "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of course, I'm not sure all those decisions are optimal, but it's an example of a widely used ecosystem trying to square the circle."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1619372679.105400",
        "client_msg_id": "551f8462-c609-40e2-8db3-ce974a76bb96",
        "text": "Thanks for those details, that looks like an interesting case indeed. Of course Java has the advantage of having a form of backwards-compatibility at the VM level. I guess one could compile old code with an old compiler and new code with a later one, perhaps at the cost of having to mess around when putting everything together.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/W8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for those details, that looks like an interesting case indeed. Of course Java has the advantage of having a form of backwards-compatibility at the VM level. I guess one could compile old code with an old compiler and new code with a later one, perhaps at the cost of having to mess around when putting everything together."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]