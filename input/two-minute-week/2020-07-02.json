[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1593677594.032400",
        "client_msg_id": "cab66a0f-2a4f-49ba-9410-eb9d41acaf10",
        "text": "is there a \"layer\" where you plan to drop specifying the registers?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Pzp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "is there a \"layer\" where you plan to drop specifying the registers?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1593677607.032600",
        "client_msg_id": "49b9488c-6b44-40e1-affa-f92f6a6cd4a7",
        "text": "do you have a plan to support other CPU architectures?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WCHTL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "do you have a plan to support other CPU architectures?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1593702765.033300",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1593702975.000000"
        },
        "client_msg_id": "30a552e4-4773-474f-bda3-80f21e9c5360",
        "text": "The Mu stack minimizes notations, but my plan is to have one more (called 'level 3' in <http:\/\/akkartik.name\/post\/mu-2019-1>). It's still very much vaporware. The hazy plan is some combination of shell (<http:\/\/www.oilshell.org\/blog\/2017\/02\/05.html>), awk (<http:\/\/www.oilshell.org\/blog\/2016\/11\/13.html>) and lisp (<http:\/\/paulgraham.com\/bel.html>). But it'll stay interpreted so the implementation is easy to understand. To do anything that requires performance I expect people to write small pieces in the existing level 2 (with registers) that can then be glued together using level 3.\n\nI'm not attached to any particular syntax for level 3, I just don't want separate languages for commandline vs scripts. And I don't want the commandline to accrete features without a coherent design the way shells historically did. In the fullness of time I fully expect a MuPy fork, a MuSmalltalk fork, and so on. I'd love to contribute to them if someone else starts them.\n\nCPU architectures similarly will need their own fork. From <http:\/\/akkartik.name\/akkartik-convivial-20200607.pdf> (section 2.1):\n\n&gt; Portability is explicitly a non-goal. Portability guarantees require extra effort to maintain, and can be particularly challenging for newcomers who may not be inclined to ensure their changes work on platforms they don't regularly run. Rather than attempt to fight a losing battle, we retreat from it entirely.\nThat doesn't mean it's somebody else's problem. I'm very interested in contributing to a RISC-V fork or ARM fork (which has been increasingly on my mind). But it's unlikely to be a priority in 2020 at least.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c9P+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Mu stack minimizes notations, but my plan is to have one more (called 'level 3' in "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/mu-2019-1"
                            },
                            {
                                "type": "text",
                                "text": "). It's still very much vaporware. The hazy plan is some combination of shell ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.oilshell.org\/blog\/2017\/02\/05.html"
                            },
                            {
                                "type": "text",
                                "text": "), awk ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.oilshell.org\/blog\/2016\/11\/13.html"
                            },
                            {
                                "type": "text",
                                "text": ") and lisp ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/paulgraham.com\/bel.html"
                            },
                            {
                                "type": "text",
                                "text": "). But it'll stay interpreted so the implementation is easy to understand. To do anything that requires performance I expect people to write small pieces in the existing level 2 (with registers) that can then be glued together using level 3.\n\nI'm not attached to any particular syntax for level 3, I just don't want separate languages for commandline vs scripts. And I don't want the commandline to accrete features without a coherent design the way shells historically did. In the fullness of time I fully expect a MuPy fork, a MuSmalltalk fork, and so on. I'd love to contribute to them if someone else starts them.\n\nCPU architectures similarly will need their own fork. From "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/akkartik-convivial-20200607.pdf"
                            },
                            {
                                "type": "text",
                                "text": " (section 2.1):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Portability is explicitly a non-goal. Portability guarantees require extra effort to maintain, and can be particularly challenging for newcomers who may not be inclined to ensure their changes work on platforms they don't regularly run. Rather than attempt to fight a losing battle, we retreat from it entirely."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That doesn't mean it's somebody else's problem. I'm very interested in contributing to a RISC-V fork or ARM fork (which has been increasingly on my mind). But it's unlikely to be a priority in 2020 at least."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1593704076.033700",
        "client_msg_id": "1a539171-6725-48fe-ae2d-ff4dca3d190e",
        "text": "how much do you envision those forks sharing? or once forked they have to be kept in sync \"manually\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vIEN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "how much do you envision those forks sharing? or once forked they have to be kept in sync \"manually\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1593704110.033900",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1593704125.000000"
        },
        "client_msg_id": "1fa7a39c-4bfb-4757-ae88-0c3da8a02c0f",
        "text": "at some point in the abstractions (I know you don't like that word :P) do you think some upper layer can ignore which of the forks is below?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hs=sd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "at some point in the abstractions (I know you don't like that word :P) do you think some upper layer can ignore which of the forks is below?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1593704524.034200",
        "client_msg_id": "cef6a19a-e396-4ff4-84a2-f08c005612d0",
        "text": "I hope we can come up with tools to reduce\/automate the manual burden of merging, particularly if forks have good tests. But I don't plan to mandate some 'standard' that all forks have to follow below some level. I think that gets us to the same situation as today, with creeping complexity. Anybody can do what they want within their fork, and the goal is to make it easy for forks to stay internally consistent and comprehensible. Going between forks is important but secondary.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BC\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hope we can come up with tools to reduce\/automate the manual burden of merging, particularly if forks have good tests. But I don't plan to mandate some 'standard' that all forks have to follow below some level. I think that gets us to the same situation as today, with creeping complexity. Anybody can do what they want within their fork, and the goal is to make it easy for forks to stay internally consistent and comprehensible. Going between forks is important but secondary."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1593704928.034500",
        "client_msg_id": "37475713-a694-4f03-ae23-796b32fdf8fc",
        "text": "I'm also looking forward to seeing the 3D. I've already got 3D animated graphics, and I'm interested in ways to make the programming interface more visual (right now programs are plain text). Integrating 2D and 3D in the same UI is something I'm thinking about.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hteX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm also looking forward to seeing the 3D. I've already got 3D animated graphics, and I'm interested in ways to make the programming interface more visual (right now programs are plain text). Integrating 2D and 3D in the same UI is something I'm thinking about."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1593705718.034700",
        "client_msg_id": "b7a99d4f-0079-47bd-b713-250cb7ce3083",
        "text": "My plan is to have the programming model be 2D, but embedded in a 3D space. This allows for a few things I think I'll like, such as:\n• Depth (with DOF\/volumetrics to limit visual noise\/clutter) separates different working spaces akin to tabs in a text editor. Switch spaces by moving back and forth through Z. I don't plan for this to be truly spatial — rather, spaces can come and go as needed.\n• Splines can be used to show connections between spaces separated in Z. Splines, like spaces, will come and go as needed. My goal is that, even if points can be \"teleported\" or \"jumped\" without wires, there should be a way to visualize the movement using a transient wire. Nelson's \"show connections\" is a Hest doctrine.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3E2h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My plan is to have the programming model be 2D, but embedded in a 3D space. This allows for a few things I think I'll like, such as:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Depth (with DOF\/volumetrics to limit visual noise\/clutter) separates different working spaces akin to tabs in a text editor. Switch spaces by moving back and forth through Z. I don't plan for this to be truly spatial — rather, spaces can come and go as needed."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Splines can be used to show connections between spaces separated in Z. Splines, like spaces, will come and go as needed. My goal is that, even if points can be \"teleported\" or \"jumped\" without wires, there should be a way to visualize the movement using a transient wire. Nelson's \"show connections\" is a Hest doctrine."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "ULK0Z4MPV",
        "type": "message",
        "ts": "1593707484.035100",
        "client_msg_id": "13e4f7bb-c485-40e1-8a83-85c9da006d60",
        "text": "Jeez, going super deep! I have a similar 2D \/3D model in my project. One thing the watch out for is aligning 3D objects to a 2D coordinate space - Perspective cams can really make the alignment difficult to see, especially if the cam can't rotate around object and can only pan\/zoom. I've stuck with ortho because of this. Looking forward to seeing what you build!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "84fdccb39d9b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-07\/1111736156419_84fdccb39d9b31c2626b_72.jpg",
            "first_name": "",
            "real_name": "Ryan King",
            "display_name": "Ryan King",
            "team": "T5TCAFTA9",
            "name": "ryan.king1809",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vrhx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Jeez, going super deep! I have a similar 2D \/3D model in my project. One thing the watch out for is aligning 3D objects to a 2D coordinate space - Perspective cams can really make the alignment difficult to see, especially if the cam can't rotate around object and can only pan\/zoom. I've stuck with ortho because of this. Looking forward to seeing what you build!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1593712110.035400",
        "client_msg_id": "5b686306-df6e-4191-b2ef-c8fb9569b024",
        "text": "The point of the project is to teach people knowledge from the 'ground up' right?  I guess adding abstractions moves further away from that goal?  Nice video, as always :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rpTD5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The point of the project is to teach people knowledge from the 'ground up' right?  I guess adding abstractions moves further away from that goal?  Nice video, as always "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1593714642.035800",
        "client_msg_id": "50ad91c2-bb50-454f-8e26-0f382ca5b04a",
        "text": "This evokes the most excellent research question, \"What does productive programming look like in VR?\" :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5+JgU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This evokes the most excellent research question, \"What does productive programming look like in VR?\" "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1593716104.036100",
        "client_msg_id": "436178eb-0e25-4d3c-8aa8-9922d5678933",
        "text": "<@ULK0Z4MPV> — Great advice. On the one hand, I trust my instincts here, because I have a background in 3d animation. On the other hand, that means I've had more practice comprehending 3d spaces than most people. So this idea will either be something I can strike a good balance on, or something I need to toss out and take a different direction. One way to find out :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/tu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULK0Z4MPV"
                            },
                            {
                                "type": "text",
                                "text": " — Great advice. On the one hand, I trust my instincts here, because I have a background in 3d animation. On the other hand, that means I've had more practice comprehending 3d spaces than most people. So this idea will either be something I can strike a good balance on, or something I need to toss out and take a different direction. One way to find out :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "muscle",
                "users": [
                    "ULK0Z4MPV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1593716210.036300",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1593716216.000000"
        },
        "client_msg_id": "8b5c43f7-4fec-488e-bfae-77fcc7d0c6cf",
        "text": "<@U01661S9F34> — For my money, it certainly doesn't look like all the VR coding environments I've seen which just.. put your text code in a floating rectangle. I'd think it looks more like <@UULA9D1GT>'s <https:\/\/www.graycrawford.com|work>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ewV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01661S9F34"
                            },
                            {
                                "type": "text",
                                "text": " — For my money, it certainly doesn't look like all the VR coding environments I've seen which just.. put your text code in a floating rectangle. I'd think it looks more like "
                            },
                            {
                                "type": "user",
                                "user_id": "UULA9D1GT"
                            },
                            {
                                "type": "text",
                                "text": "'s "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.graycrawford.com",
                                "text": "work"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01661S9F34",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "heart_eyes",
                "users": [
                    "ULK0Z4MPV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1593716602.037000",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1593717019.000000"
        },
        "client_msg_id": "3f68614c-0c84-42c5-b80e-151a1b2e63c8",
        "text": "Also reminds me of the Zoomable GUI stuff: <https:\/\/ieeexplore.ieee.org\/document\/1316870>\n<https:\/\/blog.codinghorror.com\/zoomable-interfaces\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lo8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also reminds me of the Zoomable GUI stuff: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ieeexplore.ieee.org\/document\/1316870"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.codinghorror.com\/zoomable-interfaces\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1593717297.037600",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1593717301.000000"
        },
        "client_msg_id": "4ad085c8-4c9e-45a2-bb5d-a4dc3b02ec11",
        "text": "Yes! I'm building Hest initially just for my teammates, who make these zoomable interactive industrial <https:\/\/www.lunchboxsessions.com\/materials\/deere-hitachi-excavators-shovels\/hitachi-john-deere-main-pump-regulator-simulation|simulations>. So the design of Hest is, in many ways, an outgrowth of our design work on these simulations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4tpZ=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes! I'm building Hest initially just for my teammates, who make these zoomable interactive industrial "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.lunchboxsessions.com\/materials\/deere-hitachi-excavators-shovels\/hitachi-john-deere-main-pump-regulator-simulation",
                                "text": "simulations"
                            },
                            {
                                "type": "text",
                                "text": ". So the design of Hest is, in many ways, an outgrowth of our design work on these simulations."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1593717429.038000",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1593718088.000000"
        },
        "client_msg_id": "4024ac92-ce6c-42bb-a14a-3daf81916f0e",
        "text": "Next step, a re-implementation of ncurses :stuck_out_tongue:\n\nI find your choice to stay with hex and the choice to maintain the numerical op codes instead of mnemonics very interesting. I understand why you made those decisions, but it does seem intuitively \"weird\" to me.\n\nIs it just because it's foreign to me and different from the status quo, or do those choices fundamentally make the language more or less clear in some way?\n\nYou already make a distinction between SubX with syntax sugar and SubX without syntax sugar. Is it worth it to add another layer of syntax sugar for translating bases (or translating mnemonics)?\n\nI've been thinking about your mnemonics debate. IIUC, You are worried about ambiguity, but if it's a \"separate pass\" it could be easily user modifiable, allowing the user to choose names that are less ambiguous to them. You could have \"syntax skins\".\n\nMore layers of syntax sugar arguably goes against your principle, \"It uses as few notations (languages, syntaxes, intermediate representations) as possible.\"\nBut it might help with the principle of \"It focuses on encoding intention\". Or at least encoding understanding. I'm not sure. I very easily fall into the trap of assuming \"more productive\" is equivalent to \"better understanding\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xlS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Next step, a re-implementation of ncurses "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI find your choice to stay with hex and the choice to maintain the numerical op codes instead of mnemonics very interesting. I understand why you made those decisions, but it does seem intuitively \"weird\" to me.\n\nIs it just because it's foreign to me and different from the status quo, or do those choices fundamentally make the language more or less clear in some way?\n\nYou already make a distinction between SubX with syntax sugar and SubX without syntax sugar. Is it worth it to add another layer of syntax sugar for translating bases (or translating mnemonics)?\n\nI've been thinking about your mnemonics debate. IIUC, You are worried about ambiguity, but if it's a \"separate pass\" it could be easily user modifiable, allowing the user to choose names that are less ambiguous to them. You could have \"syntax skins\".\n\nMore layers of syntax sugar arguably goes against your principle, \"It uses as few notations (languages, syntaxes, intermediate representations) as possible.\"\nBut it might help with the principle of \"It focuses on encoding intention\". Or at least encoding understanding. I'm not sure. I very easily fall into the trap of assuming \"more productive\" is equivalent to \"better understanding\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1593722957.039700",
        "client_msg_id": "30530261-6FB1-4D02-BA3A-A5A4BB7B47C3",
        "text": "on the off chance you haven’t checked it out, 3blue1brown has a great series on linear algebra that i’ve been going through: <https:\/\/www.youtube.com\/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab|https:\/\/www.youtube.com\/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "service_name": "YouTube",
                "title": "Essence of linear algebra",
                "title_link": "https:\/\/www.youtube.com\/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab",
                "text": "A geometric understanding of matrices, determinants, eigen-stuffs and more.",
                "fallback": "YouTube: Essence of linear algebra",
                "thumb_url": "https:\/\/i9.ytimg.com\/s_p\/PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab\/landscape_mqdefault.jpg?sqp=CMyO-fcFir7X7AMGCOqwiNsF&rs=AOn4CLDaGFwiS2ovyyPlVzAtROoqME4t7g&v=5b62186a",
                "from_url": "https:\/\/www.youtube.com\/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab",
                "thumb_width": 320,
                "thumb_height": 180,
                "service_icon": "https:\/\/s.ytimg.com\/yts\/img\/favicon-vfl8qSV2F.ico",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3ca",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "on the off chance you haven’t checked it out, 3blue1brown has a great series on linear algebra that i’ve been going through: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab",
                                "text": "https:\/\/www.youtube.com\/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1593723001.041300",
        "client_msg_id": "4AC256F4-00A7-4295-8D1A-F7F56235AED1",
        "text": "in the middle of it i realized that i could probably de-abstract a lot of it into examples using pictures of dogs... so that’s one of the newer projects i’m working on",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aGIu1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in the middle of it i realized that i could probably de-abstract a lot of it into examples using pictures of dogs... so that’s one of the newer projects i’m working on"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1593723514.042400",
        "client_msg_id": "370B0D44-E3F6-459A-AAFB-0FC68A6668E4",
        "text": "Grant's video on the determinant was quite helpful to me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qGga",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Grant's video on the determinant was quite helpful to me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1593724898.042600",
        "client_msg_id": "0cc063e3-5b27-4f03-bcdb-23ed3649f019",
        "text": "Funny story on ncurses: I started out with a Lisp prototype of Mu back in 2015 that depended on a wrapper around ncurses. Since then I've gradually moved down the stack to:\n* a C program calling ncurses\n* a C program calling termbox, which is a simpler replacement for ncurses\n* forking termbox to rip out stuff I didn't use, gradually understanding its internals, still sending patches upstream (<http:\/\/arclanguage.org\/item?id=20221>)\n* dropping my fork of termbox and making syscalls directly. What was interesting here was realizing how few syscalls I need. ncurses actually doesn't do much for many features we associate with it, just prints bytes to stdout.\n\nBottomline: ncurses is quite old, and a lot of the stuff it does was valuable in a world where everyone had thin terminals and very slow internet connections to their servers. It manages an in-memory copy of the screen just so it can compute the minimum it needs to change and send only those bytes over the wire to the server. But for most of us it now runs locally and there's nothing to send. It's all complexity we pay for but don't need. Another source of complexity is support for a huge database of ancient terminal types, none of which anyone uses anymore.\n\nSo check out <http:\/\/akkartik.github.io\/mu\/html\/103screen.subx.html>. It's been quite a journey to boil ncurses down to ~300 static instructions of machine code. And there's exactly one `ioctl()` in there, see if you can spot what it's needed for.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wgnaf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Funny story on ncurses: I started out with a Lisp prototype of Mu back in 2015 that depended on a wrapper around ncurses. Since then I've gradually moved down the stack to:\n* a C program calling ncurses\n* a C program calling termbox, which is a simpler replacement for ncurses\n* forking termbox to rip out stuff I didn't use, gradually understanding its internals, still sending patches upstream ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/arclanguage.org\/item?id=20221"
                            },
                            {
                                "type": "text",
                                "text": ")\n* dropping my fork of termbox and making syscalls directly. What was interesting here was realizing how few syscalls I need. ncurses actually doesn't do much for many features we associate with it, just prints bytes to stdout.\n\nBottomline: ncurses is quite old, and a lot of the stuff it does was valuable in a world where everyone had thin terminals and very slow internet connections to their servers. It manages an in-memory copy of the screen just so it can compute the minimum it needs to change and send only those bytes over the wire to the server. But for most of us it now runs locally and there's nothing to send. It's all complexity we pay for but don't need. Another source of complexity is support for a huge database of ancient terminal types, none of which anyone uses anymore.\n\nSo check out "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.github.io\/mu\/html\/103screen.subx.html"
                            },
                            {
                                "type": "text",
                                "text": ". It's been quite a journey to boil ncurses down to ~300 static instructions of machine code. And there's exactly one "
                            },
                            {
                                "type": "text",
                                "text": "ioctl()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in there, see if you can spot what it's needed for."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1593725262.042900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1593725291.000000"
        },
        "client_msg_id": "7ec448b6-0c57-4e11-b02c-279a576088f2",
        "text": "<@U01661S9F34> \"Mnemonics debate\" sounds like you've been reading more deeply here than most people I talk to. Can you point me at any links to stuff you've read on my site or repo, just so I can respond at the best level for you? Or let me know if you're just going by the paper, and I'll respond.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cUz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01661S9F34"
                            },
                            {
                                "type": "text",
                                "text": " \"Mnemonics debate\" sounds like you've been reading more deeply here than most people I talk to. Can you point me at any links to stuff you've read on my site or repo, just so I can respond at the best level for you? Or let me know if you're just going by the paper, and I'll respond."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1593730170.043200",
        "client_msg_id": "f399f859-7e9f-451e-99b3-3374a3a00209",
        "text": "<@UCUSW7WVD>\nYour journey with ncurses and termbox is fascinating. Thanks for sharing. I've tried both for some toy side projects, including dealing with bindings to other languages. TBH, even at the api leveI, I came to similar conclusions. They were big dependencies and I ended up having to manage most of my own state anyway. There was a point where I was looking into creating a terminal emulator, and I ran into the \"huge database of terminal types\" problem. There is an almost absurd backwards compatibility burden these things impose. It's such a weird artifact of history with seemingly little modern benefit.\n\nThis is a tangent, but there is a lot of hidden conservative corporate politics that keep that stuff alive. The recent news about Cobol programmers still being needed for maintenance should tell you that these old mainframes and their dumb terminals are still around, and have a surprisingly long shelf life.\n\nRe: `ioctl` Damn screen size :stuck_out_tongue: you could just force a fixed terminal size. It would be like programming a graphing calculator. It adds to the authenticity of the experience \/sarcasm. (I'm full of terribly bad jokes. Ignore me and don't actually do this lol.)\n\nRe: the \"mnemonics debate\"\nYour project has really caught my attention! I think it's a very cool idea.\nI've read two of your blog posts:\n<http:\/\/akkartik.name\/post\/mu-2019-1>\n<http:\/\/akkartik.name\/post\/mu-2019-2>\nand the github issue here:\n<https:\/\/github.com\/akkartik\/mu\/issues\/39>\nI'm about a 1\/3 through your paper. I'm slowly reading it in my free minutes through-out the day.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "author_name": "akkartik",
                "fallback": "[akkartik\/mu] #39 Opcode mnemonics for SubX",
                "text": "Giving mnemonics to x86 opcodes might make SubX easier for newcomers to read. This issue is intended to track the pros and cons.\n\nPrevious discussion: <https:\/\/news.ycombinator.com\/item?id=21268252#21293301|https:\/\/news.ycombinator.com\/item?id=21268252#21293301>\n\nInitial list of pros and cons:\n\n• Pro: names give some indication (albeit imprecise) of the operation being performed.\n• Pro: names can be checked by tooling. Typoing `8d` for `8f` seems easier than typoing `copy` for `pop`.\n• Con: per-opcode mnemonics are an additional set of things for the new reader to understand and navigate. And cross-correlate with the Intel manual, since it only gives names to sets of opcodes.\n• Con: tooling may have a hard time giving a good error message when a user typos one variant of say `add` for another.",
                "title": "#39 Opcode mnemonics for SubX",
                "footer": "<https:\/\/github.com\/akkartik\/mu|akkartik\/mu>",
                "id": 1,
                "title_link": "https:\/\/github.com\/akkartik\/mu\/issues\/39",
                "author_link": "https:\/\/github.com\/akkartik",
                "author_icon": "https:\/\/avatars3.githubusercontent.com\/u\/3161?v=4",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1571502934,
                "color": "36a64f",
                "fields": [
                    {
                        "title": "Labels",
                        "value": "proposals solicited",
                        "short": true
                    },
                    {
                        "title": "Comments",
                        "value": "5",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/akkartik\/mu\/issues\/39",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t8D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "\nYour journey with ncurses and termbox is fascinating. Thanks for sharing. I've tried both for some toy side projects, including dealing with bindings to other languages. TBH, even at the api leveI, I came to similar conclusions. They were big dependencies and I ended up having to manage most of my own state anyway. There was a point where I was looking into creating a terminal emulator, and I ran into the \"huge database of terminal types\" problem. There is an almost absurd backwards compatibility burden these things impose. It's such a weird artifact of history with seemingly little modern benefit.\n\nThis is a tangent, but there is a lot of hidden conservative corporate politics that keep that stuff alive. The recent news about Cobol programmers still being needed for maintenance should tell you that these old mainframes and their dumb terminals are still around, and have a surprisingly long shelf life.\n\nRe: "
                            },
                            {
                                "type": "text",
                                "text": "ioctl",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Damn screen size "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": " you could just force a fixed terminal size. It would be like programming a graphing calculator. It adds to the authenticity of the experience \/sarcasm. (I'm full of terribly bad jokes. Ignore me and don't actually do this lol.)\n\nRe: the \"mnemonics debate\"\nYour project has really caught my attention! I think it's a very cool idea.\nI've read two of your blog posts:\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/mu-2019-1"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/mu-2019-2"
                            },
                            {
                                "type": "text",
                                "text": "\nand the github issue here:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu\/issues\/39"
                            },
                            {
                                "type": "text",
                                "text": "\nI'm about a 1\/3 through your paper. I'm slowly reading it in my free minutes through-out the day."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1593731449.043600",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1593731488.000000"
        },
        "client_msg_id": "668b735f-3bfd-42a2-b547-6b4eac634cce",
        "text": "I knew it! You've already read almost anything I could say about mnemonics. The only argument left to mention, I think, is that ambiguity complicates error handling, and again this is error handling one must implement fairly close to the metal, in unsafe machine code.\n\n<https:\/\/www.laarc.io\/item?id=1945>\n\nThis, incidentally, is also why I try to minimize syntax sugar: any part of the pipeline that emits error messages can be confusing if the code it's referring to was generated by some syntax sugar it's oblivious to.\n\nThat said, syntax skins that don't persist in the source code could be interesting. None of this stuff is black and white. SubX does use syntax sugar, as you point out. We just have to take costs into account. I don't yet feel confident that I am estimating costs right in any of my design choices so far. That'll require a newcomer to actually spend time with Mu and tell me how easy it has been for them to learn\/retain.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "26rs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I knew it! You've already read almost anything I could say about mnemonics. The only argument left to mention, I think, is that ambiguity complicates error handling, and again this is error handling one must implement fairly close to the metal, in unsafe machine code.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.laarc.io\/item?id=1945"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis, incidentally, is also why I try to minimize syntax sugar: any part of the pipeline that emits error messages can be confusing if the code it's referring to was generated by some syntax sugar it's oblivious to.\n\nThat said, syntax skins that don't persist in the source code could be interesting. None of this stuff is black and white. SubX does use syntax sugar, as you point out. We just have to take costs into account. I don't yet feel confident that I am estimating costs right in any of my design choices so far. That'll require a newcomer to actually spend time with Mu and tell me how easy it has been for them to learn\/retain."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1593742264.044200",
        "client_msg_id": "5b3dc060-3bda-4af2-891a-9975dd775124",
        "text": "Fun tidbit, because it was mentioned in the laarc thread you reference, I first learned assembly with \"the Art of Assembly\" book and HLA. I have fond memories of it. That probably gives away some bias I have :smile:\n\nYou have definitely made me question some assumptions I had about assembly language. I intuitively want mnemonics. I think your worry about making the user have to look up extra tables in their mind may not be as big of a problem as you think (especially if you provide good documentation). But you bring up some really good points about the implementation complexity, especially around error messages at this level.\n\nIf you do support mnemonics, also supporting a base 10 to base 16 translation seems like a natural next step. The two syntax sugars compliment each other.\n\nThere is probably still value in having a base 10 translation pass without a mnemonics pass, but maybe less so.\n\n\"That'll require a newcomer to actually spend time with Mu and tell me how easy it has been for them to learn\/retain.\"\n\nlol. I get the hint. Curiosity might get the better of me and convince me to pull the repo and play with Mu. But I make no promises :smirk:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JSMor",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fun tidbit, because it was mentioned in the laarc thread you reference, I first learned assembly with \"the Art of Assembly\" book and HLA. I have fond memories of it. That probably gives away some bias I have "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYou have definitely made me question some assumptions I had about assembly language. I intuitively want mnemonics. I think your worry about making the user have to look up extra tables in their mind may not be as big of a problem as you think (especially if you provide good documentation). But you bring up some really good points about the implementation complexity, especially around error messages at this level.\n\nIf you do support mnemonics, also supporting a base 10 to base 16 translation seems like a natural next step. The two syntax sugars compliment each other.\n\nThere is probably still value in having a base 10 translation pass without a mnemonics pass, but maybe less so.\n\n\"That'll require a newcomer to actually spend time with Mu and tell me how easy it has been for them to learn\/retain.\"\n\nlol. I get the hint. Curiosity might get the better of me and convince me to pull the repo and play with Mu. But I make no promises "
                            },
                            {
                                "type": "emoji",
                                "name": "smirk",
                                "unicode": "1f60f"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]