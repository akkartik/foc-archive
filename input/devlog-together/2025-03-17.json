[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1742204983.763659",
        "client_msg_id": "eec6b3f9-fcec-47a6-96dc-78b8613182e0",
        "text": "Thanks <@U71PMQ1V0> for this important complement. The tensions between liveness\/malleability and immutability are well-known, it will be interesting to see which compromise you will end up adopting.\n\nOne issue I see with your idea of recompiling the world at every change, for consistency, is data obtained from obsolete code. For me this is a major reason for wanting a live system. The typical situation is that I have some code that I have used to load and process some data, burning a lot of CPU time. And then I discover a bug that makes me fix some of the code that has produced the data. I assume that in your scheme, the right way is to recompute the data after reloading the code, to ensure consistency. But if that takes an hour, the liveness is gone. It should be up to me, the user, to make the choice between consistency and fast feedback. What I expect from an ideal language\/runtime is not to guarantee consistency at any cost, but to help me see and then understand critical situations. Current systems (Lisp, Smalltalk) fail mainly in not alerting me, but they are pretty good at letting me deal with the issues once I am aware of them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742095730.055319",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FTzZI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": " for this important complement. The tensions between liveness\/malleability and immutability are well-known, it will be interesting to see which compromise you will end up adopting.\n\nOne issue I see with your idea of recompiling the world at every change, for consistency, is data obtained from obsolete code. For me this is a major reason for wanting a live system. The typical situation is that I have some code that I have used to load and process some data, burning a lot of CPU time. And then I discover a bug that makes me fix some of the code that has produced the data. I assume that in your scheme, the right way is to recompute the data after reloading the code, to ensure consistency. But if that takes an hour, the liveness is gone. It should be up to me, the user, to make the choice between consistency and fast feedback. What I expect from an ideal language\/runtime is not to guarantee consistency at any cost, but to help me see and then understand critical situations. Current systems (Lisp, Smalltalk) fail mainly in not alerting me, but they are pretty good at letting me deal with the issues once I am aware of them."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U6KQ2S410",
        "type": "message",
        "ts": "1742223088.771189",
        "client_msg_id": "a8745c20-b813-45d8-87ba-7172d94bd1ca",
        "text": "Very interesting and principled set of design choices <@U71PMQ1V0>.\nWhen live reloading code, do you support the common hack of allowing new fields to be added to the end of structures? Since you want to pack structures I’m guessing not.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e8f4c2151d2b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-09\/225308926294_e8f4c2151d2b70ebfae3_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Edwards",
            "display_name": "jonathoda",
            "team": "T5TCAFTA9",
            "name": "jonathoda",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742095730.055319",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PYdGq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting and principled set of design choices "
                            },
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": ".\nWhen live reloading code, do you support the common hack of allowing new fields to be added to the end of structures? Since you want to pack structures I’m guessing not."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1742238191.987429",
        "client_msg_id": "cd60cd58-4cd0-4357-b8f3-a2e1db245ce6",
        "text": "&gt; I assume that in your scheme, the right way is to recompute the data after reloading the code, to ensure consistency.\nThe point of not allowing nominal types is that data is independent of the code that produced it, so you can keep data around while reloading the code, or send it to a different process or save it to disk.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742095730.055319",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jJezw",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I assume that in your scheme, the right way is to recompute the data after reloading the code, to ensure consistency."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe point of not allowing nominal types is that data is independent of the code that produced it, so you can keep data around while reloading the code, or send it to a different process or save it to disk."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1742238383.296209",
        "client_msg_id": "65abae6b-19c6-4643-b60d-181925f0f59d",
        "text": "&gt; When live reloading code, do you support the common hack of allowing new fields to be added to the end of structures? \nI think that's something that only has meaning for nominal types. If your types are structural then they have no identity and there is no meaningful way to talk about having changed the type.\n\nBut the goal of having a dynamic dialect is to have a language in which it's easy to talk about migrations. So I could write a function that adds a field to my structs.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742095730.055319",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iXt8L",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When live reloading code, do you support the common hack of allowing new fields to be added to the end of structures? "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI think that's something that only has meaning for nominal types. If your types are structural then they have no identity and there is no meaningful way to talk about having changed the type.\n\nBut the goal of having a dynamic dialect is to have a language in which it's easy to talk about migrations. So I could write a function that adds a field to my structs."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]