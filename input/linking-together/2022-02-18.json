[
    {
        "user": "UF1ATC4RF",
        "type": "message",
        "ts": "1645212516.240969",
        "client_msg_id": "204eb15b-386d-42ff-a426-c95104ad038f",
        "text": "<https:\/\/www.youtube.com\/watch?v=KvMnpVMp0jk>\n\n*Programming Tools for the Future of Data Science*\n&gt; In the future, anyone will be able to write programs that are currently the exclusive domain of advanced programmers. For now, there’s still a big gap between the programming skills of occasional programmers - social scientists, journalists, data scientists - and the skills required to write the programs they want. However, the need is pressing; while there are about 20 million programmers in the world, there are now at least twice as many end users writing code to work with data. In this talk, I’ll describe Helena, an ecosystem of programming languages and programming tools that I have used to study how we can support social scientists programming needs. Non-programmers use Helena to collect datasets from the web and, more broadly, to develop custom web automation programs. It brings together the following key innovations: (i) The Helena programming environment uses Programming by Demonstration (PBD); it takes a single-shot learning approach, synthesizing scripts based on recording a single user demonstration. (ii) Helena’s adaptive replayer makes scripts robust to webpage redesigns and obfuscation, which enables longitudinal experiments. (iii) With novel language constructs, non-coders can conduct programming tasks usually limited to expert programmers - e.g., failure recovery, parallelization.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f7d23ee4d8b2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-24\/1069322068471_f7d23ee4d8b2dbb3c1ad_72.jpg",
            "first_name": "Deepak",
            "real_name": "Deepak Karki",
            "display_name": "karki",
            "team": "T5TCAFTA9",
            "name": "deepak6k",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=KvMnpVMp0jk",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/KvMnpVMp0jk\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/KvMnpVMp0jk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=KvMnpVMp0jk",
                "fallback": "YouTube Video: Stanford Seminar - Programming Tools for the Future of Data Science",
                "title": "Stanford Seminar - Programming Tools for the Future of Data Science",
                "title_link": "https:\/\/www.youtube.com\/watch?v=KvMnpVMp0jk",
                "author_name": "stanfordonline",
                "author_link": "https:\/\/www.youtube.com\/user\/stanfordonline",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eYuln",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=KvMnpVMp0jk"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Programming Tools for the Future of Data Science",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the future, anyone will be able to write programs that are currently the exclusive domain of advanced programmers. For now, there’s still a big gap between the programming skills of occasional programmers - social scientists, journalists, data scientists - and the skills required to write the programs they want. However, the need is pressing; while there are about 20 million programmers in the world, there are now at least twice as many end users writing code to work with data. In this talk, I’ll describe Helena, an ecosystem of programming languages and programming tools that I have used to study how we can support social scientists programming needs. Non-programmers use Helena to collect datasets from the web and, more broadly, to develop custom web automation programs. It brings together the following key innovations: (i) The Helena programming environment uses Programming by Demonstration (PBD); it takes a single-shot learning approach, synthesizing scripts based on recording a single user demonstration. (ii) Helena’s adaptive replayer makes scripts robust to webpage redesigns and obfuscation, which enables longitudinal experiments. (iii) With novel language constructs, non-coders can conduct programming tasks usually limited to expert programmers - e.g., failure recovery, parallelization."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UMV4B97GT",
                    "UPVBV34EL"
                ],
                "count": 2
            }
        ]
    }
]