[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1560332768.302700",
        "client_msg_id": "d4683d7c-7059-43ec-b5ec-41867bc35bc4",
        "text": "Best to begin with, \"in the following programming stew, the ideas ingredients have long been added for tasty effect.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560280382.290800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H1JQn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Best to begin with, \"in the following programming stew, the ideas ingredients have long been added for tasty effect.\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1560333628.302900",
        "edited": {
            "user": "U79HM6726",
            "ts": "1560333639.000000"
        },
        "client_msg_id": "e955e232-dc4b-4acd-8057-0d1d8d334014",
        "text": "If the gap problem interests you, I recommend checking out Lamdu, which Cyrus forgot to mention as prior art.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560307792.297200",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yKs9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If the gap problem interests you, I recommend checking out Lamdu, which Cyrus forgot to mention as prior art."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1560341369.303400",
        "client_msg_id": "71a8be42-3c25-47c1-a8dd-3419f6170161",
        "text": "I'm looking for an alternative to the overwhelming complexity of modern programming languages. How simple can a language be while still remaining viable, and how do we make languages easier to use? Some of my inspiration comes from research of the 1960's and '70s, before everyone was infected by the OOP virus. (The OOP fad led to a big increase in language complexity.) You mention Wirth: his Euler language is largely forgotten, but  is simpler and more powerful than Pascal, which focussed more on efficiency.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560317414.301000",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XPfa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm looking for an alternative to the overwhelming complexity of modern programming languages. How simple can a language be while still remaining viable, and how do we make languages easier to use? Some of my inspiration comes from research of the 1960's and '70s, before everyone was infected by the OOP virus. (The OOP fad led to a big increase in language complexity.) You mention Wirth: his Euler language is largely forgotten, but  is simpler and more powerful than Pascal, which focussed more on efficiency."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1560348863.304200",
        "client_msg_id": "63489DFB-A296-44F7-B06F-48B4DA1BAAA2",
        "text": "Ok, lets go for tomorrow: <https:\/\/doodle.com\/poll\/454fbh823939bxa4>\n\nCheck back on Doodle for your local time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "title": "Doodle: Category Theory Study Group Kick-off",
                "title_link": "https:\/\/doodle.com\/poll\/454fbh823939bxa4",
                "text": "Doodle is the simplest way to schedule meetings with clients, colleagues, or friends. Find the best time for one-to-ones and team meetings with our user-friendly calendar tool. Get started today!",
                "fallback": "Doodle: Category Theory Study Group Kick-off",
                "image_url": "https:\/\/doodle.com\/graphics\/static\/facebookSharingThumbnail.png",
                "from_url": "https:\/\/doodle.com\/poll\/454fbh823939bxa4",
                "image_width": 300,
                "image_height": 200,
                "image_bytes": 6864,
                "service_icon": "https:\/\/cdn2.doodle.com\/dist\/i\/7479b568749fca315a2969e30cbee4f5.png",
                "service_name": "doodle.com",
                "id": 1,
                "original_url": "https:\/\/doodle.com\/poll\/454fbh823939bxa4"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YjC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, lets go for tomorrow: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/doodle.com\/poll\/454fbh823939bxa4"
                            },
                            {
                                "type": "text",
                                "text": "\n\nCheck back on Doodle for your local time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1560348921.305400",
        "client_msg_id": "268427CF-6640-47A8-B7B9-FAF8FCACF4F2",
        "text": "I’ll set up a Zoom call that will disconnect us after an hour I think.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HM\/fd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ll set up a Zoom call that will disconnect us after an hour I think."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1560348960.306200",
        "client_msg_id": "E464D69B-B572-4143-A152-2BFC0097F075",
        "text": "So please make sure you have that installed: <https:\/\/zoom.us\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "service_name": "Zoom Video",
                "title": "Video Conferencing, Web Conferencing, Webinars, Screen Sharing",
                "title_link": "https:\/\/zoom.us\/",
                "text": "Zoom is the leader in modern enterprise video communications, with an easy, reliable cloud platform for video and audio conferencing, chat, and webinars across mobile, desktop, and room systems. Zoom Rooms is the original software-based conference room solution used around the world in board, conference, huddle, and training rooms, as well as executive offices and classrooms. Founded in 2011, Zoom helps businesses and organizations bring their teams together in a frictionless environment to get more done. Zoom is a publicly traded company headquartered in San Jose, CA.",
                "fallback": "Zoom Video: Video Conferencing, Web Conferencing, Webinars, Screen Sharing",
                "image_url": "https:\/\/d24cgw3uvb9a9h.cloudfront.net\/static\/93583\/image\/thumb.png",
                "from_url": "https:\/\/zoom.us\/",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 12961,
                "service_icon": "https:\/\/d24cgw3uvb9a9h.cloudfront.net\/zoom.ico",
                "id": 1,
                "original_url": "https:\/\/zoom.us\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "brjA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So please make sure you have that installed: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/zoom.us\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1560349131.309700",
        "client_msg_id": "9342827D-F25A-437A-AE61-3ADB74DE1707",
        "text": "I know the timing will not be ideal for everyone, but if you can’t make it for this call, it doesn’t mean you can’t join us later.\nLet’s use the call to figure out process, materials, pace, and how we stay in touch going forward. So if you have a few minutes to think about that, I’ll appreciate to hear your suggestions on the call.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2NedO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know the timing will not be ideal for everyone, but if you can’t make it for this call, it doesn’t mean you can’t join us later.\nLet’s use the call to figure out process, materials, pace, and how we stay in touch going forward. So if you have a few minutes to think about that, I’ll appreciate to hear your suggestions on the call."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1560349203.310200",
        "client_msg_id": "038881E2-2B83-4CC1-9896-852C624B42B1",
        "text": "Just to be sure… ^^ \n\/ping <@UA14TGLTC> <@UAL7940NM> <@U5TCAFTD3> <@UJK8MKYAZ> <@UJN1TAYEQ> <@UHWC9PXBL>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UATOC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just to be sure… ^^ \n\/ping "
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UAL7940NM"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UJK8MKYAZ"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1560352257.310500",
        "client_msg_id": "a27a6dd9-27ca-4831-aa87-a65946785233",
        "text": "Yes, Zoom disconnects after an hour.  Oh!  That's Friday morning at 1am.  That will work for me.  I look forward to chatting with you all.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HXp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, Zoom disconnects after an hour.  Oh!  That's Friday morning at 1am.  That will work for me.  I look forward to chatting with you all."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1560352455.311600",
        "client_msg_id": "AB26D8A6-7E2F-494C-8635-C464C19759CF",
        "text": "<@UA14TGLTC> Appreciate that you want to join us at such an unreasonable time!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EaZw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " Appreciate that you want to join us at such an unreasonable time!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1560352484.311800",
        "client_msg_id": "dbaf0a15-a03a-4b92-9403-f39119bcf709",
        "text": "<@UJN1TAYEQ> What makes you think that OO was a major cause of the explosion of complexity? I tend to see the two phenomena as simultaneous but not causally related.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560317414.301000",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IDKNR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " What makes you think that OO was a major cause of the explosion of complexity? I tend to see the two phenomena as simultaneous but not causally related."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1560352610.312000",
        "client_msg_id": "8d1c0ee6-c32e-4b12-aebb-575e996bb45d",
        "text": "glad you enjoyed :-) if you'd like to discuss the paper or participate in the project, let me know :-)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560307792.297200",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wEiAW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "glad you enjoyed :-) if you'd like to discuss the paper or participate in the project, let me know :-)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1560352691.312200",
        "client_msg_id": "388dd645-a70e-4c18-93da-8069271280f2",
        "text": "Lamdu is another cool take on the problem. our focus was on doing the type theory, and we're working on exploring a somewhat different part of the UI design space",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560307792.297200",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QqM0T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lamdu is another cool take on the problem. our focus was on doing the type theory, and we're working on exploring a somewhat different part of the UI design space"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1560352754.312400",
        "client_msg_id": "d965ab1e-18ac-469f-b5ff-2aefe6fc3c2e",
        "text": "I also don't think systems that stop at the first hole completely solve the gap problem wrt run time feedback",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560307792.297200",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xs0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also don't think systems that stop at the first hole completely solve the gap problem wrt run time feedback"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1560354062.315400",
        "client_msg_id": "F0DFBF36-8FDE-46A2-945C-8349C5C95892",
        "text": "<@UJBAJNFLK> it reminded me of this project <http:\/\/zells.org>. It has some spacial visualizations, but I don’t think it has a way to constrain data space. I haven’t checked in a while, maybe it has some more stuff now",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dzP7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " it reminded me of this project "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/zells.org"
                            },
                            {
                                "type": "text",
                                "text": ". It has some spacial visualizations, but I don’t think it has a way to constrain data space. I haven’t checked in a while, maybe it has some more stuff now"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1560354102.315700",
        "client_msg_id": "60991943-BBAD-47EC-B0F4-0FB688957387",
        "text": "<http:\/\/www.e-dejong.com\/the-beads-project> ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "swmaV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/www.e-dejong.com\/the-beads-project"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1560355404.316100",
        "client_msg_id": "EE39779C-4143-493D-A9D4-55C11CC29191",
        "text": "yes this works for me",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "boON",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yes this works for me"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1560355626.318300",
        "client_msg_id": "2CA97525-9FF9-459C-B993-7FEA4682EAC6",
        "text": "heads up for boston-based folks: <@UGLSY9X3J> and I are working on resurrecting the Boston meetup over in the <#CDYTXF6UA|in-boston> channel",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jdlJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "heads up for boston-based folks: "
                            },
                            {
                                "type": "user",
                                "user_id": "UGLSY9X3J"
                            },
                            {
                                "type": "text",
                                "text": " and I are working on resurrecting the Boston meetup over in the "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CDYTXF6UA"
                            },
                            {
                                "type": "text",
                                "text": " channel"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1560360628.318400",
        "client_msg_id": "f427b9c5-7e41-41eb-8d7a-0cd73e3f0fa7",
        "text": "Here's the link for tomorrow's call: <https:\/\/zoom.us\/j\/205742379>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "service_name": "Zoom Video",
                "title": "Join our Cloud HD Video Meeting now",
                "title_link": "https:\/\/zoom.us\/j\/205742379",
                "text": "Zoom is the leader in modern enterprise video communications, with an easy, reliable cloud platform for video and audio conferencing, chat, and webinars across mobile, desktop, and room systems. Zoom Rooms is the original software-based conference room solution used around the world in board, conference, huddle, and training rooms, as well as executive offices and classrooms. Founded in 2011, Zoom helps businesses and organizations bring their teams together in a frictionless environment to get more done. Zoom is a publicly traded company headquartered in San Jose, CA.",
                "fallback": "Zoom Video: Join our Cloud HD Video Meeting now",
                "image_url": "https:\/\/d24cgw3uvb9a9h.cloudfront.net\/static\/93583\/image\/thumb.png",
                "from_url": "https:\/\/zoom.us\/j\/205742379",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 12961,
                "service_icon": "https:\/\/d24cgw3uvb9a9h.cloudfront.net\/zoom.ico",
                "id": 1,
                "original_url": "https:\/\/zoom.us\/j\/205742379"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v\/7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's the link for tomorrow's call: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/zoom.us\/j\/205742379"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1560360741.318700",
        "client_msg_id": "3f61f03a-50e6-4265-a65b-e2c3da47e4c4",
        "text": "Zoom reminded me that the call will be cut-off after 40 minutes. Let's see how it goes. We can always dial back in.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kg+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Zoom reminded me that the call will be cut-off after 40 minutes. Let's see how it goes. We can always dial back in."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1560363867.318900",
        "client_msg_id": "3143dd23-4641-47a9-ad6c-e67bbca8949d",
        "text": "Thanks <@U85HCL7JP> and <@UHWC9PXBL> for those pointers!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BEO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U85HCL7JP"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " for those pointers!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1560370382.324400",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1560370480.000000"
        },
        "client_msg_id": "7d74dac1-2c18-4785-8318-f238b8953ae6",
        "text": "<@UJBAJNFLK> One of the core ideas in the original formulation of OOP is to make shared mutable state pervasive and inescapable. That was the point of the story about `true becomes: false`. <@U85HCL7JP> In Smalltalk, objects encapsulate their state, at least in theory. But if you send a message to an object to query its state, the object has no choice but to return another mutable object in answer to the query. Which the caller can then mutate, possibly by accident. If an object returns one of its instance variables in response to a query (which might be the simplest way to write the code), then the caller can mutate the object's internal state without going through the object's message interface. Which could make the object's internal state invalid. So OOP creates this huge problem with shared mutable state, which can be mitigated by design patterns, coding hygiene, and additional language complexity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o4X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " One of the core ideas in the original formulation of OOP is to make shared mutable state pervasive and inescapable. That was the point of the story about "
                            },
                            {
                                "type": "text",
                                "text": "true becomes: false",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". "
                            },
                            {
                                "type": "user",
                                "user_id": "U85HCL7JP"
                            },
                            {
                                "type": "text",
                                "text": " In Smalltalk, objects encapsulate their state, at least in theory. But if you send a message to an object to query its state, the object has no choice but to return another mutable object in answer to the query. Which the caller can then mutate, possibly by accident. If an object returns one of its instance variables in response to a query (which might be the simplest way to write the code), then the caller can mutate the object's internal state without going through the object's message interface. Which could make the object's internal state invalid. So OOP creates this huge problem with shared mutable state, which can be mitigated by design patterns, coding hygiene, and additional language complexity."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1560370495.325500",
        "client_msg_id": "B35D5F5B-2CCC-498F-8C3D-D4A12F63CD14",
        "text": "another good category theory intro (super basic but I'd argue charming): <https:\/\/youtu.be\/JMP6gI5mLHc>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558782017.061500",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Category Theory, The essence of interface-based design - Erik Meijer",
                "title_link": "https:\/\/youtu.be\/JMP6gI5mLHc",
                "author_name": "FooCafe",
                "author_link": "https:\/\/www.youtube.com\/user\/FooCafe",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/JMP6gI5mLHc\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Category Theory, The essence of interface-based design - Erik Meijer",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/JMP6gI5mLHc?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/JMP6gI5mLHc",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/JMP6gI5mLHc"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IcgZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "another good category theory intro (super basic but I'd argue charming): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/JMP6gI5mLHc"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560382269.325800",
        "client_msg_id": "a2e593cc-22c7-445d-8029-dbf3eaa582c5",
        "text": "Even though I like the ideas in OOP, I do agree with <@UJN1TAYEQ> that in the current tools and languages, you end with accidentally shared state without consistency checks. However I think the fundamental ideas of encapsulation and identity\/state are useful perspectives and the ideas are perhaps incompletely explored. One variant is erlang-style - state really hidden because messages are always values. Another is messaging via a tuplespace.  Another one might be a recursive design (e.g. inner objects + their tuple space complete encapsulated inside an outer one). IOW, I don't think identity and state themselves are problematic as starting points, but it is how they are coupled and driven forward in time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kW8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Even though I like the ideas in OOP, I do agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " that in the current tools and languages, you end with accidentally shared state without consistency checks. However I think the fundamental ideas of encapsulation and identity\/state are useful perspectives and the ideas are perhaps incompletely explored. One variant is erlang-style - state really hidden because messages are always values. Another is messaging via a tuplespace.  Another one might be a recursive design (e.g. inner objects + their tuple space complete encapsulated inside an outer one). IOW, I don't think identity and state themselves are problematic as starting points, but it is how they are coupled and driven forward in time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560382734.326100",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1560383091.000000"
        },
        "client_msg_id": "b222c07e-e20e-4219-934e-64894ad6d0d3",
        "text": "Yes the real word does have shared mutable state in many respects. I put an object on the desk which is now put for everyone. It is easy to see the locality of effect here. What if laws of physics were also objects I could mutate? \"I wish to change g for my experiment with gravity in this room\".. then I later walk out to the street and see all cars are floating (~Smalltalk). So one angle is to localize\/control\/view the effect of these mutations. An interesting take is Worlds - where you reify the entire state of the system so you can roll back time or explore parallel times, in a sense (maybe this is objects + datalog) <http:\/\/www.vpri.org\/pdf\/tr2011001_final_worlds.pdf>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HkMwh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes the real word does have shared mutable state in many respects. I put an object on the desk which is now put for everyone. It is easy to see the locality of effect here. What if laws of physics were also objects I could mutate? \"I wish to change g for my experiment with gravity in this room\".. then I later walk out to the street and see all cars are floating (~Smalltalk). So one angle is to localize\/control\/view the effect of these mutations. An interesting take is Worlds - where you reify the entire state of the system so you can roll back time or explore parallel times, in a sense (maybe this is objects + datalog) "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.vpri.org\/pdf\/tr2011001_final_worlds.pdf"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1560390978.326600",
        "edited": {
            "user": "UC6997THT",
            "ts": "1560391256.000000"
        },
        "client_msg_id": "30f9b406-9ff1-42bf-acac-d0476ac6d46b",
        "text": "I wrote apps in Modula-2. What is special about Modula-2 modules vs Java or C# or any other modern language that doesn't use header files?\n\nC++ has different goals IMO than many other languages which is one reason I value it. One of its goals is to generate optimal code. You can write very complex type safe classes with lots of methods and know that even though they've been specialized via templates and even though they're using all kinds of  other classes as helpers the code they generate when optimization is on is 1 or 2 instructions.\n\nI don't know which other languages can make guarantees like that. AFAIK Java, C#, Swift, Modula-2 etc can not.\n\nThe only way to do that that I know of is either to use header files (or precompiled header files) since you need tons of knowledge at the time of code generation to do it, OR, put tons of code generation logic in the linker since it would be the only other place that kind of optimization would have access to enough knowledge to be able to do similar optimizations.\n\nIf you don't care about perf to that level suddenly you're open to a whole lot of other solutions. When I'm doing game dev or OS dev or driver dev I do care about that level of perf. When I'm doing app dev or web dev or server dev usually don't",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560317414.301000",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KJ0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wrote apps in Modula-2. What is special about Modula-2 modules vs Java or C# or any other modern language that doesn't use header files?\n\nC++ has different goals IMO than many other languages which is one reason I value it. One of its goals is to generate optimal code. You can write very complex type safe classes with lots of methods and know that even though they've been specialized via templates and even though they're using all kinds of  other classes as helpers the code they generate when optimization is on is 1 or 2 instructions.\n\nI don't know which other languages can make guarantees like that. AFAIK Java, C#, Swift, Modula-2 etc can not.\n\nThe only way to do that that I know of is either to use header files (or precompiled header files) since you need tons of knowledge at the time of code generation to do it, OR, put tons of code generation logic in the linker since it would be the only other place that kind of optimization would have access to enough knowledge to be able to do similar optimizations.\n\nIf you don't care about perf to that level suddenly you're open to a whole lot of other solutions. When I'm doing game dev or OS dev or driver dev I do care about that level of perf. When I'm doing app dev or web dev or server dev usually don't"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1560392026.327000",
        "client_msg_id": "7e6bf904-84bd-458c-8805-c78bf927b42e",
        "text": "Alan Kay's original pitch for Object Oriented Programming included the idea that \"the real world\" is made of stateful objects, therefore a programming model where there are no values, and *everything* is a reference to a stateful object, must be more natural, and if it's more natural, then it's a better style of programming. The argument seems like an example of the naturalistic fallacy. 45 years later, I think this idea is old and busted. What's actually important is the amount of cognitive load that you must take on in order to understand a program. If you have to simulate all of the state in the entire program, in your head, in order to understand it, that's bad. If the language provides guarantees that permit you to reason locally about the meaning of code, then that's good. After decades of OOP, the problems with that model are now evident, and that's why functional programming is on the rise. Pure functions (in a pure functional language) are guaranteed to compute a result based only on the argument values, so they are easy to reason about. Erlang provides a lot more scoping and control over mutable state than Smalltalk does, so it's an improvement.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8ey",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Alan Kay's original pitch for Object Oriented Programming included the idea that \"the real world\" is made of stateful objects, therefore a programming model where there are no values, and "
                            },
                            {
                                "type": "text",
                                "text": "everything",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a reference to a stateful object, must be more natural, and if it's more natural, then it's a better style of programming. The argument seems like an example of the naturalistic fallacy. 45 years later, I think this idea is old and busted. What's actually important is the amount of cognitive load that you must take on in order to understand a program. If you have to simulate all of the state in the entire program, in your head, in order to understand it, that's bad. If the language provides guarantees that permit you to reason locally about the meaning of code, then that's good. After decades of OOP, the problems with that model are now evident, and that's why functional programming is on the rise. Pure functions (in a pure functional language) are guaranteed to compute a result based only on the argument values, so they are easy to reason about. Erlang provides a lot more scoping and control over mutable state than Smalltalk does, so it's an improvement."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1560392966.327200",
        "client_msg_id": "d8bd74d7-9184-49b3-a1c8-4c223e2a4c40",
        "text": "Header files are widely recognized as creating a lot of problems. That's why C++20 will have modules. Read more about the problems with header files: <https:\/\/clang.llvm.org\/docs\/Modules.html#problems-with-the-current-model>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560317414.301000",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c8CcV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Header files are widely recognized as creating a lot of problems. That's why C++20 will have modules. Read more about the problems with header files: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/clang.llvm.org\/docs\/Modules.html#problems-with-the-current-model"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1560393002.327400",
        "client_msg_id": "3143896e-4a79-448e-8d02-113a70985074",
        "text": "How about \"Those who do not learn history are doomed to repeat it\"? When I see some new thing that is basically a rediscovery of some old thing, especially an old thing that failed for good reasons, it makes me wonder \"How'd they solve the issues that sunk the previous try at this idea?\". If they have some new novel solution, great! If they don't actually have a solution then likely they are going to hit the same wall.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560280382.290800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zl=w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How about \"Those who do not learn history are doomed to repeat it\"? When I see some new thing that is basically a rediscovery of some old thing, especially an old thing that failed for good reasons, it makes me wonder \"How'd they solve the issues that sunk the previous try at this idea?\". If they have some new novel solution, great! If they don't actually have a solution then likely they are going to hit the same wall."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UJK8MKYAZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1560396714.327800",
        "client_msg_id": "04dd6747-3410-4b20-a5ff-081769b092bd",
        "text": "aren't functional programming and OOP just 2 different tools to be used when the tool fits the job?\n\nthe obvious example where pure functions fail is databases. You can't pass in an immutable copy of a petabyte database and get a new copy out. Not saying OOP solves that issue. Only that pure functions are not a solution there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qo+FG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "aren't functional programming and OOP just 2 different tools to be used when the tool fits the job?\n\nthe obvious example where pure functions fail is databases. You can't pass in an immutable copy of a petabyte database and get a new copy out. Not saying OOP solves that issue. Only that pure functions are not a solution there."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560403548.328200",
        "client_msg_id": "7c496ffa-e879-457c-9888-0bd2eb559376",
        "text": "&gt; Alan Kay's original pitch for Object Oriented Programming included the idea that \"the real world\" is made of stateful objects, therefore a programming model where there are no values, and *everything* is a reference to a stateful object, must be more natural, and if it's more natural, then it's a better style of programming.\nDo you have a source for this?\n\nObject based metaphors pop up all over different domains, not just the physical world. Even the final products of any programming - buttons that push, windows that move, pictures that can be cropped, shipped around etc. - are all virtual objects. People don't want pure functions, they want their computers to have state and be able to manipulate it. This doesn't mean programming has to be OO, of course. But perhaps it means we should start with objects as an underlying *substrate* (directly modifying these would be considered primitive) and then work up to pure transforms or other ideas that operate on this substrate. So I don't think OO and FP are mutually exclusive, but more like clusters of concepts - some of which can be integrated.\n\nThis is not just for personal computers but also large scale services. Once you compile and run an FP program, it becomes an object 'in the large'. Because when you zoom out from a single program to a whole system, all the microservices, monoliths, databases, etc. are objects of a kind (have state + communicate via messaging). Again, what we ended up building and reasoning about are object-based models. So does it mean we've just kicked the can down the road?\n\nRegarding 'local reasoning' and 'simulating in your head', what I feel is any single programming paradigm is going to fail in some scenario because there will always be some cross-cutting concerns (no matter what kind of slices form the program). So no single paradigm is going to work in all cases - perhaps we should thing about multi-perspective as a base requirement. E.g. a system where you can query the computer about the relationship between one entity and another. And query the system also about the effects of a change to an entity you are about to make. We're way past the point of scaling where mental reasoning can work for us.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i+xA",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Alan Kay's original pitch for Object Oriented Programming included the idea that \"the real world\" is made of stateful objects, therefore a programming model where there are no values, and "
                            },
                            {
                                "type": "text",
                                "text": "everything",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a reference to a stateful object, must be more natural, and if it's more natural, then it's a better style of programming."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you have a source for this?\n\nObject based metaphors pop up all over different domains, not just the physical world. Even the final products of any programming - buttons that push, windows that move, pictures that can be cropped, shipped around etc. - are all virtual objects. People don't want pure functions, they want their computers to have state and be able to manipulate it. This doesn't mean programming has to be OO, of course. But perhaps it means we should start with objects as an underlying "
                            },
                            {
                                "type": "text",
                                "text": "substrate",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (directly modifying these would be considered primitive) and then work up to pure transforms or other ideas that operate on this substrate. So I don't think OO and FP are mutually exclusive, but more like clusters of concepts - some of which can be integrated.\n\nThis is not just for personal computers but also large scale services. Once you compile and run an FP program, it becomes an object 'in the large'. Because when you zoom out from a single program to a whole system, all the microservices, monoliths, databases, etc. are objects of a kind (have state + communicate via messaging). Again, what we ended up building and reasoning about are object-based models. So does it mean we've just kicked the can down the road?\n\nRegarding 'local reasoning' and 'simulating in your head', what I feel is any single programming paradigm is going to fail in some scenario because there will always be some cross-cutting concerns (no matter what kind of slices form the program). So no single paradigm is going to work in all cases - perhaps we should thing about multi-perspective as a base requirement. E.g. a system where you can query the computer about the relationship between one entity and another. And query the system also about the effects of a change to an entity you are about to make. We're way past the point of scaling where mental reasoning can work for us."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1560408085.328400",
        "client_msg_id": "3915a285-e58f-47b2-895f-f2a53826ce3a",
        "text": "Reminds me of \"first\" mover advantage, which often refers to the first one to go big.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560280382.290800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=CQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me of \"first\" mover advantage, which often refers to the first one to go big."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]