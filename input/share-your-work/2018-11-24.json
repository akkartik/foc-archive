[
    {
        "subtype": "thread_broadcast",
        "user": "UCKRZS3DZ",
        "thread_ts": "1543012054.056800",
        "root": {
            "user": "U5TCAFTD3",
            "type": "message",
            "ts": "1543012054.056800",
            "edited": {
                "user": "U5TCAFTD3",
                "ts": "1543012163.000000"
            },
            "client_msg_id": "fe9e145e-5a49-4d9f-baa6-b2de4fad274f",
            "text": "New experiment... <@UCUSW7WVD> and I just chatted for the first time. It was quite fun! And we recorded it! I'm curious if anyone watches it and finds value. If so, maybe we'll do it again, and maybe I'll convince others to go on the air with me in casual chats. Thanks Kartik for going out on a limb and trying this with me. Really amazing to finally chat! <https:\/\/www.youtube.com\/watch?v=DuMdDXCMDk0>\n\nFor reference on what we talked about, here are the notes I took from the convo:\n```\n* first computer experience when he was 18\n* studying engineering in India in college\n* before he found computers, he was going to do MBA and be business guy\n* UT Austin PhD in computer systems (compiler and micro architecture)\n  * wanted to re-think *all* the assumptions from the ground up based on what we know about compilers\n  * as well as the other direction, redesigning compilers based on ISA architectures\n  * it was all very theoretical because nobody was going to use it, because backwards-compatibility has force. who's going to invest in a new processor?\n  * we're in a x86-mono culture\n* and then Bay area ever since\n* my idea of convervatism is don't change things because we don't know why they work: Chesterton's fence. You can't tear it down until you tell me why it was erected in the first place.\n  * threading the needle: refactoring a legacy code base with tests and refactoring slowly, incrementalism\n* legacy is code no person on your team understands\n* he's not an IDE programmer, just a text editor guy... love how he says this outright up front\n* all the things you do to see if your code works after you right it is lost unless you encode as a test\n* joined Google in 2010 and was disheartening to see how the meat was made\n* the code at Google was shit despite great engineers, because it was passed through hands\n* law of software: suckage increases over time\n* all langauges (python 3, perl 6) go through period of backwards incompatible changes\n* big course corrections are a sign of a big mistake\n* also applies to countries: USA, Rome\n  * coleen mccoulogh historical fiction novels about rome: the first man in Rome\n* but the decay in software is not entropy\n  * it's more like complexity creep, which is quite similar to law creep\n* the deepness in the sky - one of his favorite sci fi books with real programmers\n* code runs on the trunk but there should be lot more forking activity....\n```",
            "team": "T5TCAFTA9",
            "thread_ts": "1543012054.056800",
            "reply_count": 22,
            "reply_users_count": 5,
            "latest_reply": "1543224998.076800",
            "reply_users": [
                "UCUSW7WVD",
                "UAL7940NM",
                "UCKRZS3DZ",
                "UBAP530VB",
                "UDJ2TKB99"
            ],
            "replies": [
                {
                    "user": "UCUSW7WVD",
                    "ts": "1543012482.057500"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1543018006.058100"
                },
                {
                    "user": "UCKRZS3DZ",
                    "ts": "1543054999.058500"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1543069776.062400"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1543079558.063300"
                },
                {
                    "user": "UCKRZS3DZ",
                    "ts": "1543082603.063800"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1543084173.064000"
                },
                {
                    "user": "UBAP530VB",
                    "ts": "1543084578.064200"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1543085478.064400"
                },
                {
                    "user": "UBAP530VB",
                    "ts": "1543091012.064800"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1543091728.065000"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1543098835.070300"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1543099997.070500"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1543135401.071400"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1543149344.071600"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1543161718.071900"
                },
                {
                    "user": "UDJ2TKB99",
                    "ts": "1543183104.072100"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1543184201.072400"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1543185808.072900"
                },
                {
                    "user": "UCKRZS3DZ",
                    "ts": "1543214939.073400"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1543221206.073800"
                },
                {
                    "user": "UCKRZS3DZ",
                    "ts": "1543224998.076800"
                }
            ],
            "is_locked": false,
            "subscribed": true,
            "last_read": "1543239317.000000",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "\/cVVl",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "New experiment... "
                                },
                                {
                                    "type": "user",
                                    "user_id": "UCUSW7WVD"
                                },
                                {
                                    "type": "text",
                                    "text": " and I just chatted for the first time. It was quite fun! And we recorded it! I'm curious if anyone watches it and finds value. If so, maybe we'll do it again, and maybe I'll convince others to go on the air with me in casual chats. Thanks Kartik for going out on a limb and trying this with me. Really amazing to finally chat! "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/www.youtube.com\/watch?v=DuMdDXCMDk0"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nFor reference on what we talked about, here are the notes I took from the convo:"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_preformatted",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "* first computer experience when he was 18\n* studying engineering in India in college\n* before he found computers, he was going to do MBA and be business guy\n* UT Austin PhD in computer systems (compiler and micro architecture)\n  * wanted to re-think *all* the assumptions from the ground up based on what we know about compilers\n  * as well as the other direction, redesigning compilers based on ISA architectures\n  * it was all very theoretical because nobody was going to use it, because backwards-compatibility has force. who's going to invest in a new processor?\n  * we're in a x86-mono culture\n* and then Bay area ever since\n* my idea of convervatism is don't change things because we don't know why they work: Chesterton's fence. You can't tear it down until you tell me why it was erected in the first place.\n  * threading the needle: refactoring a legacy code base with tests and refactoring slowly, incrementalism\n* legacy is code no person on your team understands\n* he's not an IDE programmer, just a text editor guy... love how he says this outright up front\n* all the things you do to see if your code works after you right it is lost unless you encode as a test\n* joined Google in 2010 and was disheartening to see how the meat was made\n* the code at Google was shit despite great engineers, because it was passed through hands\n* law of software: suckage increases over time\n* all langauges (python 3, perl 6) go through period of backwards incompatible changes\n* big course corrections are a sign of a big mistake\n* also applies to countries: USA, Rome\n  * coleen mccoulogh historical fiction novels about rome: the first man in Rome\n* but the decay in software is not entropy\n  * it's more like complexity creep, which is quite similar to law creep\n* the deepness in the sky - one of his favorite sci fi books with real programmers\n* code runs on the trunk but there should be lot more forking activity....\n"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1543054999.058500",
        "client_msg_id": "1d2720af-38a9-4457-9b35-9aac22798f15",
        "text": "I like this thought from video that everything eventually gonna suck no matter how perfectly designed it was. And it sounds natural -- designer is a limited human being and can't predict the future.\n\nSo support of legacy code and eventual compatability break are inevitable pain.\n\nHow can we minimize this pain, make transitions between different generations of code more smooth?\n\nOne idea is than we should focus on developing proper interface for building blocks. Independent building blocks allow to migrate code slowly, without painful total rewrite.\n\nGood example of such building block is docker. As long as container communicates through sockets in same way, we can totally rewrite what's inside.\n\nShould we invent a convenient building block, similar to docker container, but smaller? Something easier to compose. Library with C FFI is somewhat similar, but they are unsafe to use.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "41ko",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like this thought from video that everything eventually gonna suck no matter how perfectly designed it was. And it sounds natural -- designer is a limited human being and can't predict the future.\n\nSo support of legacy code and eventual compatability break are inevitable pain.\n\nHow can we minimize this pain, make transitions between different generations of code more smooth?\n\nOne idea is than we should focus on developing proper interface for building blocks. Independent building blocks allow to migrate code slowly, without painful total rewrite.\n\nGood example of such building block is docker. As long as container communicates through sockets in same way, we can totally rewrite what's inside.\n\nShould we invent a convenient building block, similar to docker container, but smaller? Something easier to compose. Library with C FFI is somewhat similar, but they are unsafe to use."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UCXR52MU2",
                    "U8A5MS6R1"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1543057253.058800",
        "client_msg_id": "47a5931c-c900-4af9-9e3e-6a82c5a01587",
        "text": "Hey <@UCUSW7WVD>, thanks for your feedback! Better navigation would definitely be beneficial. Having a cursor and being able to easily jump between definitions\/usages would be great. Since whitespace doesnt matter, I could think of a cursor that selects tokens\/words instead of characters. Thanks for the link to `ctags`, I wasn't aware of it.\nThis is unrelated to the \"documentation owned by everyone\" idea, but I think both are worth looking into.\n\"Growing\" ideas seems important to me. I've tried to create an AST-based code editor for Python (<https:\/\/github.com\/fkohlgrueber\/vrite>) before but failed because it turned out to be much harder than I thought. Starting with a small subproblem (viewing instead of editing, terminal instead of HTML, ... in my case) and expanding the scope once you've got it right seems to be a good way to approach hard problems.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543003934.053400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=tC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": ", thanks for your feedback! Better navigation would definitely be beneficial. Having a cursor and being able to easily jump between definitions\/usages would be great. Since whitespace doesnt matter, I could think of a cursor that selects tokens\/words instead of characters. Thanks for the link to "
                            },
                            {
                                "type": "text",
                                "text": "ctags",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", I wasn't aware of it.\nThis is unrelated to the \"documentation owned by everyone\" idea, but I think both are worth looking into.\n\"Growing\" ideas seems important to me. I've tried to create an AST-based code editor for Python ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/fkohlgrueber\/vrite"
                            },
                            {
                                "type": "text",
                                "text": ") before but failed because it turned out to be much harder than I thought. Starting with a small subproblem (viewing instead of editing, terminal instead of HTML, ... in my case) and expanding the scope once you've got it right seems to be a good way to approach hard problems."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1543069776.062400",
        "edited": {
            "user": "UAL7940NM",
            "ts": "1543069804.000000"
        },
        "client_msg_id": "f3d3d688-9874-4ce1-a530-b849f81d70af",
        "text": "Really interesting conversation! From time to time, it was hard for me to understand Steve, especially when both of you were talking simultaneously. But that wasn’t a big issue and overall, I really enjoyed listening to your conversation and would like to see more of these.\nI wanted to share some of my thoughts on the topics you discussed, but when I started writing them down I realized that they're to many to fit into a slack response. I'll try to organize them into a blog post and post it here once it's ready.\nIn the meantime, I can share the parts I found most interesting (as a teaser for others to watch the video):\n- \"Things suck over time. They start out great and they gradually suck more and more over time.\" (Kartik, 30:30)\n- Entropy and decay don’t apply to software like they do to bridges for example (Kartik, 36:30).\n- “We need to find a way to periodically reduce complexity …” (Kartik, 36:45)\n- “Software is not really like anything we’ve seen before” (Kartik, 39:30)\n- “No matter what better system I come up with or you come up with, it’ll have to go through breaking changes and eventually someone will come up with something so much better that it will die.” (Steve, 41:45)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x6d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really interesting conversation! From time to time, it was hard for me to understand Steve, especially when both of you were talking simultaneously. But that wasn’t a big issue and overall, I really enjoyed listening to your conversation and would like to see more of these.\nI wanted to share some of my thoughts on the topics you discussed, but when I started writing them down I realized that they're to many to fit into a slack response. I'll try to organize them into a blog post and post it here once it's ready.\nIn the meantime, I can share the parts I found most interesting (as a teaser for others to watch the video):\n- \"Things suck over time. They start out great and they gradually suck more and more over time.\" (Kartik, 30:30)\n- Entropy and decay don’t apply to software like they do to bridges for example (Kartik, 36:30).\n- “We need to find a way to periodically reduce complexity …” (Kartik, 36:45)\n- “Software is not really like anything we’ve seen before” (Kartik, 39:30)\n- “No matter what better system I come up with or you come up with, it’ll have to go through breaking changes and eventually someone will come up with something so much better that it will die.” (Steve, 41:45)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3",
                    "UCKRZS3DZ"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543079558.063300",
        "client_msg_id": "c6df37bb-1459-4f62-a357-a0311d520b77",
        "text": "<@UCKRZS3DZ> You're right that interfaces are part of the solution. They're the well-understood half, and we certainly can't do without them. They help when the change you want to make is on one side or the other. But what if you want to change the interface itself? If you can't make arbitrary changes to it, it becomes a vector for complexity creep. I think most of the bloat in modern stacks comes from interfaces growing monotonically more complex. Any ideas on how we can stack that problem? :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SY2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCKRZS3DZ"
                            },
                            {
                                "type": "text",
                                "text": " You're right that interfaces are part of the solution. They're the well-understood half, and we certainly can't do without them. They help when the change you want to make is on one side or the other. But what if you want to change the interface itself? If you can't make arbitrary changes to it, it becomes a vector for complexity creep. I think most of the bloat in modern stacks comes from interfaces growing monotonically more complex. Any ideas on how we can stack that problem? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1543082345.063600",
        "client_msg_id": "780d7d99-cf01-4577-961e-dfd5ef7d2dca",
        "text": "I found a pretty solid explaination of original FRP <http:\/\/vindum.io\/blog\/lets-reinvent-frp\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rzen",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I found a pretty solid explaination of original FRP "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/vindum.io\/blog\/lets-reinvent-frp\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1543082603.063800",
        "client_msg_id": "fd4d95be-575a-47d2-9080-469a72b81b9c",
        "text": "No idea)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9VS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No idea)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543084173.064000",
        "client_msg_id": "11801214-24f4-4aae-95e1-71244ccf6e20",
        "text": "Yeah, it's a hard problem. Let me know if you think of anything. Hopefully you're convinced that it's an important problem. (I think it's _the_ most important problem in software.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xJdsm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, it's a hard problem. Let me know if you think of anything. Hopefully you're convinced that it's an important problem. (I think it's "
                            },
                            {
                                "type": "text",
                                "text": "the",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " most important problem in software.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBAP530VB",
        "type": "message",
        "ts": "1543084578.064200",
        "client_msg_id": "fec08653-27e1-4cab-bf1a-98e01e07e03d",
        "text": "<@UCUSW7WVD> agreed its a problem. But do you honestly thinks it's a problem that can ever be solved? If the interface has 2 change for some valid reasons, it obviously induces changes to the things that interface with the interface being changed. Can we avoid that really? Without developing a rigid system? ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6238acad861",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/96238acad86155c89f7e5324712c7cb5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Dinesh",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "babusd",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FPjXR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " agreed its a problem. But do you honestly thinks it's a problem that can ever be solved? If the interface has 2 change for some valid reasons, it obviously induces changes to the things that interface with the interface being changed. Can we avoid that really? Without developing a rigid system?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543085478.064400",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1543085503.000000"
        },
        "client_msg_id": "1b59e0ac-d7ee-4a27-8ae2-42ec4e37e685",
        "text": "Yeah, that's the $64,000 question. And maybe you're right and the problem's just hopelessly over-constrained. To confirm that we need to think about all the assumptions baked into the word 'interface'. To throw out a few:\n\na) The interfaces we currently rely on are isomorphic with the way we've divided up the labor that goes into producing a working system (because <https:\/\/en.wikipedia.org\/wiki\/Conway%27s_law> applies to open source too). Is that the best set of interfaces possible, or can we reorganize to some smaller set of interfaces? That would transfer more of the problem to the 'easy' side.\n\nb) Right now the interfaces on my system are the same as the interfaces on yours. Is that really necessary? Does my laptop _really_ need the latest hyper-optimizations for http added by Google to serve 2% more requests per dollar per watt in their data centers? Even worse, does the software on my laptop really need layers and layers of compatibility for processors it will never ever encounter?\n\nMy goal is not a rigid system. My goal is a _rewrite-friendly_ system, one where you don't pay for what you don't use. One where all the pieces are designed to work well together -- and _not at all designed to work well with anything outside_. (We have protocols for that, if you include things like unicode in that category.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BVHl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, that's the $64,000 question. And maybe you're right and the problem's just hopelessly over-constrained. To confirm that we need to think about all the assumptions baked into the word 'interface'. To throw out a few:\n\na) The interfaces we currently rely on are isomorphic with the way we've divided up the labor that goes into producing a working system (because "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Conway%27s_law"
                            },
                            {
                                "type": "text",
                                "text": " applies to open source too). Is that the best set of interfaces possible, or can we reorganize to some smaller set of interfaces? That would transfer more of the problem to the 'easy' side.\n\nb) Right now the interfaces on my system are the same as the interfaces on yours. Is that really necessary? Does my laptop "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " need the latest hyper-optimizations for http added by Google to serve 2% more requests per dollar per watt in their data centers? Even worse, does the software on my laptop really need layers and layers of compatibility for processors it will never ever encounter?\n\nMy goal is not a rigid system. My goal is a "
                            },
                            {
                                "type": "text",
                                "text": "rewrite-friendly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " system, one where you don't pay for what you don't use. One where all the pieces are designed to work well together -- and "
                            },
                            {
                                "type": "text",
                                "text": "not at all designed to work well with anything outside",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". (We have protocols for that, if you include things like unicode in that category.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBAP530VB",
        "type": "message",
        "ts": "1543091012.064800",
        "client_msg_id": "ca32a347-fef5-4b48-8f29-5dc6c43112c1",
        "text": "If I understand that stmt correctly, your goal is a rewrite friendly system where (even when) changing interfaces is a Non breaking change? Or is, as friendly as possible? IMHO, some of this is a reflection of nature. There is always some amt of  friction and tension at the boundaries (of any two things. 2 persons, 2 teams, 2 components, nations etc. Maybe cuz of diff in purposes). I am genuinely curious to see how this can be solved and how scalable the solution would be. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6238acad861",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/96238acad86155c89f7e5324712c7cb5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Dinesh",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "babusd",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mnkG5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If I understand that stmt correctly, your goal is a rewrite friendly system where (even when) changing interfaces is a Non breaking change? Or is, as friendly as possible? IMHO, some of this is a reflection of nature. There is always some amt of  friction and tension at the boundaries (of any two things. 2 persons, 2 teams, 2 components, nations etc. Maybe cuz of diff in purposes). I am genuinely curious to see how this can be solved and how scalable the solution would be."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1543091728.065000",
        "client_msg_id": "b2e011df-ddbd-409f-b522-5afe66597912",
        "text": "I would add that interface changes rarely remove support for previously supported use-cases. Most breaking changes are just because you have to do things differently. In these cases, you could use tooling that automatically upgrades your code to use the new interface.\nIf an interface changes, all uses of it need to change as well. There might be no way around this. But what you could do is to make the upgrade process as smooth as possible. I suspect that given the right tools, 90% of backwards-incompatible changes could be resolved automatically.\nInterfaces are a very wide field and it's hard to give a general answer. Do you have specific tricky interfaces in mind?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7k1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would add that interface changes rarely remove support for previously supported use-cases. Most breaking changes are just because you have to do things differently. In these cases, you could use tooling that automatically upgrades your code to use the new interface.\nIf an interface changes, all uses of it need to change as well. There might be no way around this. But what you could do is to make the upgrade process as smooth as possible. I suspect that given the right tools, 90% of backwards-incompatible changes could be resolved automatically.\nInterfaces are a very wide field and it's hard to give a general answer. Do you have specific tricky interfaces in mind?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543092209.065200",
        "client_msg_id": "697075d5-ff45-4163-a880-8e2f59e20ee5",
        "text": "So, it seems to me that this kind of conversation is core to the purpose of this Slack workspace - the future of (and nature of?) programming. So would it be possible to set up a channel exclusively for this kind of subject? Or is that what \"general\" was for? <@U5TCAFTD3>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "66NaE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So, it seems to me that this kind of conversation is core to the purpose of this Slack workspace - the future of (and nature of?) programming. So would it be possible to set up a channel exclusively for this kind of subject? Or is that what \"general\" was for? "
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543092238.065400",
        "client_msg_id": "29bfb6fd-66a0-41b3-b711-3a69ae5f2f8e",
        "text": "I feel a bit squished over here on the right panel",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mqqh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel a bit squished over here on the right panel"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543092248.065600",
        "client_msg_id": "8762ebca-dd8b-4698-9f61-94d687764eb4",
        "text": "=0)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "utAyR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "=0)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1543092321.066400",
        "client_msg_id": "ACAB8BEF-2E1F-4FBB-8A27-684AD53E2A9E",
        "text": "The threading is to keep conversations more organized ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XYleQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The threading is to keep conversations more organized"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1543092386.067900",
        "edited": {
            "user": "U5TCAFTD3",
            "ts": "1543092403.000000"
        },
        "client_msg_id": "32F4C10D-57E2-41F9-82A0-DE75E6EB1260",
        "text": "<#C5T9GPWFL|thinking-together> is for sharing relevant stuff that you didn't make. <#CCL5VVBAN|share-your-work> is for sharing your own stuff",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PXV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " is for sharing relevant stuff that you didn't make. "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": " is for sharing your own stuff"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1543092523.068600",
        "client_msg_id": "F535DF2C-4D94-493E-A20C-A1C851F1591F",
        "text": "What about this feels squished?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fFIc9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What about this feels squished?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543092932.068800",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1543093538.000000"
        },
        "client_msg_id": "db4fffa9-fbed-4cd6-9394-2a62b8fe7321",
        "text": "It's the main topic and we're not allowed to splurge it all over the main channels, we have to have all the meaty chat over here away from the main thread, where people are less likely to get involved, cos it's a scroll-back-and-click-the-link exercise",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QdVzW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's the main topic and we're not allowed to splurge it all over the main channels, we have to have all the meaty chat over here away from the main thread, where people are less likely to get involved, cos it's a scroll-back-and-click-the-link exercise"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543094536.069200",
        "client_msg_id": "348f43a2-eab2-48fd-b68a-6de1b5f1452e",
        "text": "Righto .. here we go: your replies!!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "umJaw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Righto .. here we go: your replies!!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543094560.069400",
        "client_msg_id": "96cada1a-3598-4118-928a-73f9834722da",
        "text": "aw crap - \"text is too long\" !! :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iTOX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "aw crap - \"text is too long\" !! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543094575.069600",
        "client_msg_id": "17ca65f3-6ed9-4b72-858d-19d7bc5da674",
        "text": "&gt;&gt; As far as I'm concerned, \"like reality\" is absolutely what this is about: \"programming is casting spells over reality\", even if that reality is generated by machines. It's about the perception of the person doing the programming being met well enough.\n\n&gt;It's a two-sided problem as described in this Bret Victor photo: <http:\/\/worrydream.com\/ABriefRantOnTheFutureOfInteractionDesign\/Images\/Tool2.png> (26 kB)\n&gt;I'm arguing that the \"part that fits the person\" doesn't need to be that closely related to the \"part that fits the problem\". We have some flexibility here.\n\nWell if the handle is the \"What\" of programming (thus declaratively in my preference) and the head is the \"How\" (the imperative machinery of the computer), then I think everything about the How part can and should be hidden away, on its way to achieving the human visible or interactable What. So I think that much we can agree. Our \"spells over reality\" are the What; the handle. Our perception of success is What-like, reality-like, in the terms of the reality our spells are intended to influence. All the hidden mechanism - the How - is still \"real\", sure, but we both agree can be hidden complexity. So maybe we agree?\n\n&gt;&gt; I don't like streams or event streams or anything that forces natural models of reality into a theoretical straitjacket. My mother doesn't see a stream of events around her: she sees changing state!\n\n&gt;Your mother also doesn't see the equations for the laws of physics but they are the best way to *model* reality (that we have discovered so far). They are the best tool for the job for understanding and predicting reality. That's the key -- not to simply defer to what people already have in their brains but to build a powerful tool to extend their capabilities, which will require them to grow what's in their brains to meet the \"tool\" halfway.\n\nObviously kids don't have to learn the laws of physics in order to quickly get started building a fun game in something like Roblox or Minecraft. Which is re-use or library territory: they can implement their own physics laws one day, but for now, just re-use this pre-packaged knowledge. I think we should not ask too much of people - the tools\/language\/IDE\/pre-created libraries should do everything they can to meet the non-technical person who's programming in their own terms, building on what they already know.\n\nAnd what they already know is that there's the familiar states of things, and those states change in familiar behavioural ways. So allow them to declare states, attach pre-packaged behaviours and extend those behaviours with new ones.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "attachments": [
            {
                "fallback": "328x348px image",
                "image_url": "http:\/\/worrydream.com\/ABriefRantOnTheFutureOfInteractionDesign\/Images\/Tool2.png",
                "image_width": 328,
                "image_height": 348,
                "image_bytes": 26490,
                "from_url": "http:\/\/worrydream.com\/ABriefRantOnTheFutureOfInteractionDesign\/Images\/Tool2.png",
                "id": 1,
                "original_url": "http:\/\/worrydream.com\/ABriefRantOnTheFutureOfInteractionDesign\/Images\/Tool2.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qb3",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> As far as I'm concerned, \"like reality\" is absolutely what this is about: \"programming is casting spells over reality\", even if that reality is generated by machines. It's about the perception of the person doing the programming being met well enough."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's a two-sided problem as described in this Bret Victor photo: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/worrydream.com\/ABriefRantOnTheFutureOfInteractionDesign\/Images\/Tool2.png"
                            },
                            {
                                "type": "text",
                                "text": " (26 kB)\nI'm arguing that the \"part that fits the person\" doesn't need to be that closely related to the \"part that fits the problem\". We have some flexibility here."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nWell if the handle is the \"What\" of programming (thus declaratively in my preference) and the head is the \"How\" (the imperative machinery of the computer), then I think everything about the How part can and should be hidden away, on its way to achieving the human visible or interactable What. So I think that much we can agree. Our \"spells over reality\" are the What; the handle. Our perception of success is What-like, reality-like, in the terms of the reality our spells are intended to influence. All the hidden mechanism - the How - is still \"real\", sure, but we both agree can be hidden complexity. So maybe we agree?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> I don't like streams or event streams or anything that forces natural models of reality into a theoretical straitjacket. My mother doesn't see a stream of events around her: she sees changing state!"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Your mother also doesn't see the equations for the laws of physics but they are the best way to "
                            },
                            {
                                "type": "text",
                                "text": "model",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reality (that we have discovered so far). They are the best tool for the job for understanding and predicting reality. That's the key -- not to simply defer to what people already have in their brains but to build a powerful tool to extend their capabilities, which will require them to grow what's in their brains to meet the \"tool\" halfway."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nObviously kids don't have to learn the laws of physics in order to quickly get started building a fun game in something like Roblox or Minecraft. Which is re-use or library territory: they can implement their own physics laws one day, but for now, just re-use this pre-packaged knowledge. I think we should not ask too much of people - the tools\/language\/IDE\/pre-created libraries should do everything they can to meet the non-technical person who's programming in their own terms, building on what they already know.\n\nAnd what they already know is that there's the familiar states of things, and those states change in familiar behavioural ways. So allow them to declare states, attach pre-packaged behaviours and extend those behaviours with new ones."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543094584.069900",
        "client_msg_id": "e626f6bd-642d-4746-a38e-f89a61c3bd30",
        "text": "&gt;&gt;&gt; state in the \"real world\" is not visible everywhere\n\n&gt;&gt; My mother would disagree - everywhere she looks and walks is a whole bunch of state that was there yesterday and will probably be there tomorrow, with a few changes perhaps..\n\n&gt;There's a ton of state that is hidden to us all. For example, the other night I felt like I was getting sick. I didn't know. It was all hidden inside me. Turns out it was just a blip. I have no idea why. Reality is quite opaque for a lot of questions. Software has the potential to be *infinitely* understandable and *infinitely* customizable* - why settle for the meagerness of reality?\n\nI'm sorry, but I don't get this point! If there's state that's hidden, then it's not part of our reality over which we want to cast our magic programs. The meagerness of reality is what people want to animate with their magic. Not sure I get where you're going with the *infinitely* part.. ?\n\n&gt;&gt;&gt; *composability* is a really important property, and it's hindered by global state.\n\n&gt;&gt; Not if you structure your global state - the web is composed very well, thanks!\n\n&gt;This is only because the web as global state is just static pages. The web doesn't have dynamic global state, where one web page can modify another page's state. That's maintained by ugly HTTP plumbing code on the side.\n\nWell, funny you should describe that concept, as that's related to how the Object Network works, except that Object Net Objects can't modify each other: they are masters of their own state, and depend on the states around them in the web\/net of Objects, no ugly pipework, just declarative rules.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3yHu",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "state in the \"real world\" is not visible everywhere\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> My mother would disagree - everywhere she looks and walks is a whole bunch of state that was there yesterday and will probably be there tomorrow, with a few changes perhaps.."
                            }
                        ],
                        "border": 1
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a ton of state that is hidden to us all. For example, the other night I felt like I was getting sick. I didn't know. It was all hidden inside me. Turns out it was just a blip. I have no idea why. Reality is quite opaque for a lot of questions. Software has the potential to be "
                            },
                            {
                                "type": "text",
                                "text": "infinitely",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " understandable and "
                            },
                            {
                                "type": "text",
                                "text": "infinitely",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " customizable* - why settle for the meagerness of reality?"
                            }
                        ],
                        "border": 1
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI'm sorry, but I don't get this point! If there's state that's hidden, then it's not part of our reality over which we want to cast our magic programs. The meagerness of reality is what people want to animate with their magic. Not sure I get where you're going with the "
                            },
                            {
                                "type": "text",
                                "text": "infinitely",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " part.. ?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": ">> "
                            },
                            {
                                "type": "text",
                                "text": "composability",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a really important property, and it's hindered by global state."
                            }
                        ],
                        "border": 1
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> Not if you structure your global state - the web is composed very well, thanks!"
                            }
                        ],
                        "border": 1
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is only because the web as global state is just static pages. The web doesn't have dynamic global state, where one web page can modify another page's state. That's maintained by ugly HTTP plumbing code on the side."
                            }
                        ],
                        "border": 1
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nWell, funny you should describe that concept, as that's related to how the Object Network works, except that Object Net Objects can't modify each other: they are masters of their own state, and depend on the states around them in the web\/net of Objects, no ugly pipework, just declarative rules."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543097584.070100",
        "client_msg_id": "373b89f5-8a2e-4572-b65f-43e618dd14ef",
        "text": "so we definitely need a new channel, <@U5TCAFTD3>, for discussion of the nature and future of programming, going by your description of the existing ones!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2I3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so we definitely need a new channel, "
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": ", for discussion of the nature and future of programming, going by your description of the existing ones!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543098835.070300",
        "client_msg_id": "cc69a76d-c68c-4321-bfe3-356de1313b2e",
        "text": "I should clarify: I actually want to support removing features. I think every system should. Even if you the author care about all the features, someone else may not. It should be easy to fork and remove the feature. Now users can choose which fork to use. That seems like a good thing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fzry0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I should clarify: I actually want to support removing features. I think every system should. Even if you the author care about all the features, someone else may not. It should be easy to fork and remove the feature. Now users can choose which fork to use. That seems like a good thing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543099997.070500",
        "client_msg_id": "4bae57c8-3106-461e-b6b9-14f33363d9b8",
        "text": "Vim has this nice ability to build vim-tiny or vim-large or even more fine-grained combinations of features. Unfortunately it's done with a rat's nest of `#ifdef`s, so you still pay the comprehension cost for all features. What if Vim wasn't a single repo but a family of lazily created and maintained forks?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3TyBR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Vim has this nice ability to build vim-tiny or vim-large or even more fine-grained combinations of features. Unfortunately it's done with a rat's nest of "
                            },
                            {
                                "type": "text",
                                "text": "#ifdef",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "s, so you still pay the comprehension cost for all features. What if Vim wasn't a single repo but a family of lazily created and maintained forks?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCXR52MU2",
        "type": "message",
        "ts": "1543122801.071200",
        "client_msg_id": "4f0354b5-c8c2-4635-8672-58eb51c4c0e9",
        "text": "Good book, reread it recently",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cb32dfce4716",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-05\/811235948051_cb32dfce4716b0783b45_72.jpg",
            "first_name": "Rui",
            "real_name": "Rui Min Sim",
            "display_name": "Rui Min",
            "team": "T5TCAFTA9",
            "name": "ruimin.sim",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542969044.038200",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aqL47",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good book, reread it recently"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]