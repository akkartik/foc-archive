[
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563865425.192700",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1563892166.000000"
        },
        "client_msg_id": "59841d66-771f-4516-9015-9a20915589f7",
        "text": "I'm just going to spill some thoughts here:\n\nThere are multiple aspects to making programming more comprehensible, or perhaps even properly doable in the first place.\n\nThe first obvious one is language. But even if you could have the perfect language, textual code is not the best for comprehending and manipulating complex models.\n\nSo then there's presentation &amp; modeling: perhaps some things are much better represented in a visually, or much easier to edit or build if working with a direct structure (rather than a typed out one). But if your program-flow is a mess or the abstractions are bad, then it's going to be hard to follow regardless.\n\nSo then there's the actual form of the program itself: does it lay out what it is and what it does in a fairly straightforward and obvious way? How big of a gap is there between a human understanding of the software, and how it reads? Do you have to reverse engineer the code to make sense of it?\n\nAll these things are essential: the presence of one cannot compensate for the absence of the other. For example, you can have a horrible mess of code, but that horrible mess can be diagrammed in a way that makes the exact nature \/ layout of that horrible mess immediately obvious. And having the flow and components of a program be obvious at a glance, does not mean that that flow itself is not convoluted and hard to follow in it's own rite. And likewise, a mass of textual code may do a horrible job of making a program easy to understand by looking at it, but the components and flow of the program may be laid out well and very easy to follow.\n\nI have a couple points about this, but I'll have to save it for a follow-up post",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563865425.192700",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1563889116.201800",
        "reply_users": [
            "UL3CJ7YKC"
        ],
        "replies": [
            {
                "user": "UL3CJ7YKC",
                "ts": "1563888957.201500"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1563889116.201800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Xlqz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm just going to spill some thoughts here:\n\nThere are multiple aspects to making programming more comprehensible, or perhaps even properly doable in the first place.\n\nThe first obvious one is language. But even if you could have the perfect language, textual code is not the best for comprehending and manipulating complex models.\n\nSo then there's presentation & modeling: perhaps some things are much better represented in a visually, or much easier to edit or build if working with a direct structure (rather than a typed out one). But if your program-flow is a mess or the abstractions are bad, then it's going to be hard to follow regardless.\n\nSo then there's the actual form of the program itself: does it lay out what it is and what it does in a fairly straightforward and obvious way? How big of a gap is there between a human understanding of the software, and how it reads? Do you have to reverse engineer the code to make sense of it?\n\nAll these things are essential: the presence of one cannot compensate for the absence of the other. For example, you can have a horrible mess of code, but that horrible mess can be diagrammed in a way that makes the exact nature \/ layout of that horrible mess immediately obvious. And having the flow and components of a program be obvious at a glance, does not mean that that flow itself is not convoluted and hard to follow in it's own rite. And likewise, a mass of textual code may do a horrible job of making a program easy to understand by looking at it, but the components and flow of the program may be laid out well and very easy to follow.\n\nI have a couple points about this, but I'll have to save it for a follow-up post"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEF95M2RH",
        "type": "message",
        "ts": "1563878052.200400",
        "client_msg_id": "0760dd9b-a75d-456e-9d9d-651b99443fc4",
        "text": "<@UJK8MKYAZ> what kinds of problems do you see answer set programming as being particularly well-suited for? I've heard of it and know vaguely what it does (finds all minimal models, like Datalog but without the stratification condition), but don't know what I'd use it for.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4e6637707ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c4e6637707ff62601f3dd21ec7626095.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Michael Arntzenius",
            "display_name": "rntz",
            "team": "T5TCAFTA9",
            "name": "daekharel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563878052.200400",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1564046590.299000",
        "reply_users": [
            "UJK8MKYAZ",
            "UEF95M2RH"
        ],
        "replies": [
            {
                "user": "UJK8MKYAZ",
                "ts": "1563894660.232000"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1563894734.232700"
            },
            {
                "user": "UEF95M2RH",
                "ts": "1564046590.299000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a2Ss",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJK8MKYAZ"
                            },
                            {
                                "type": "text",
                                "text": " what kinds of problems do you see answer set programming as being particularly well-suited for? I've heard of it and know vaguely what it does (finds all minimal models, like Datalog but without the stratification condition), but don't know what I'd use it for."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1563888957.201500",
        "client_msg_id": "61b69202-c956-446c-8607-fa58749ceb3a",
        "text": "What I am waiting for is an “IDE” which makes it easier to create and inspect the different “views”\/“aspects” of your program.\n\nIt would be like Views for SQL Databases but for code: in that case only the “currently relevant” parts would be on the screen - like a sequence diagram.\n\nAs the code changes the “Views\/aspects” of the code might change accordingly: or they would break totally: but in that case the programmer would be prompted to fix the View(s) which went broke.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563865425.192700",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7MfT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What I am waiting for is an “IDE” which makes it easier to create and inspect the different “views”\/“aspects” of your program.\n\nIt would be like Views for SQL Databases but for code: in that case only the “currently relevant” parts would be on the screen - like a sequence diagram.\n\nAs the code changes the “Views\/aspects” of the code might change accordingly: or they would break totally: but in that case the programmer would be prompted to fix the View(s) which went broke."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1563889116.201800",
        "client_msg_id": "a148b6a5-8171-46f7-a84d-37bce47b03a8",
        "text": "Tests are quite close in terms of related parts: it would be nice to see the related `production code` parts together without navigating back and forth in them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563865425.192700",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2kMc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tests are quite close in terms of related parts: it would be nice to see the related "
                            },
                            {
                                "type": "text",
                                "text": "production code",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " parts together without navigating back and forth in them."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1563889688.204700",
        "client_msg_id": "BC8F5F11-6806-4A20-8EB7-47B80401EFA9",
        "text": "A Guardian interview with some valuable thoughts from the programmer\/engineer who lead the software teams for NASA’s Apollo missions, Margaret Hamilton:\n<https:\/\/www.theguardian.com\/technology\/2019\/jul\/13\/margaret-hamilton-computer-scientist-interview-software-apollo-missions-1969-moon-landing-nasa-women>\n\n&gt;At the beginning, nobody thought software was that big a deal. But then they began to realise how much they were relying on it. The group grew so there were approximately 100 software engineers on my team. Astronauts’ lives were at stake. Our software needed to be ultra-reliable and it needed to be able to detect an error and recover from it at any time during the mission. And it all had to fit on the hardware.\n\n&gt;I thought: my God – this could inadvertently happen in a real mission. I suggested a program change to prevent a prelaunch program being selected during flight. But the higher-ups at MIT and Nasa said the astronauts were too well trained to make such a mistake. Midcourse on the very next mission – Apollo 8 – one of the astronauts on board accidentally did exactly what Lauren had done. The Lauren bug! It created much havoc and required the mission to be reconfigured. After that, they let me put the program change in, all right.\n\n&gt;During the early days of Apollo, software was not taken as seriously as other engineering disciplines. Though in fact we had a complex system of systems, we weren’t getting credit for what was a legitimate field. It was out of desperation I came up with the term, to say: “Hey, we’re engineering too.” It was an ongoing joke for a long time. Then one day in a meeting, one of the most respected hardware gurus explained to everyone that he agreed with me. The process of building software should also be considered an engineering discipline, just like with hardware. It was a memorable moment.\n\n&gt;Also, what became apparent with Apollo – though it is not how it worked – is that it is better to define your system up front to minimise errors, rather than producing a bunch of code that then has to be corrected with patches on patches. It’s a message that seems to have gone unheeded – in this respect, software today is still built the way it was 50 years ago.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "the Guardian",
                "title": "Margaret Hamilton: ‘They worried that the men might rebel. They didn’t’",
                "title_link": "https:\/\/www.theguardian.com\/technology\/2019\/jul\/13\/margaret-hamilton-computer-scientist-interview-software-apollo-missions-1969-moon-landing-nasa-women",
                "text": "The trailblazing computer scientist on being in charge of the software for the 1969 Apollo moon landing",
                "fallback": "the Guardian: Margaret Hamilton: ‘They worried that the men might rebel. They didn’t’",
                "image_url": "https:\/\/i.guim.co.uk\/img\/media\/c0b190a0695f9f2a5d2900078774ae6e479bb76c\/0_8_4735_2841\/master\/4735.jpg?width=1200&height=630&quality=85&auto=format&fit=crop&overlay-align=bottom%2Cleft&overlay-width=100p&overlay-base64=L2ltZy9zdGF0aWMvb3ZlcmxheXMvdG8tZGVmYXVsdC5wbmc&enable=upscale&s=a0ea88e8b471d0648450ea660d1c085d",
                "image_width": 476,
                "image_height": 250,
                "ts": 1563033606,
                "from_url": "https:\/\/www.theguardian.com\/technology\/2019\/jul\/13\/margaret-hamilton-computer-scientist-interview-software-apollo-missions-1969-moon-landing-nasa-women",
                "image_bytes": 104048,
                "service_icon": "https:\/\/assets.guim.co.uk\/images\/favicons\/fee5e2d638d1c35f6d501fa397e53329\/152x152.png",
                "id": 1,
                "original_url": "https:\/\/www.theguardian.com\/technology\/2019\/jul\/13\/margaret-hamilton-computer-scientist-interview-software-apollo-missions-1969-moon-landing-nasa-women"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9QeS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A Guardian interview with some valuable thoughts from the programmer\/engineer who lead the software teams for NASA’s Apollo missions, Margaret Hamilton:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.theguardian.com\/technology\/2019\/jul\/13\/margaret-hamilton-computer-scientist-interview-software-apollo-missions-1969-moon-landing-nasa-women"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At the beginning, nobody thought software was that big a deal. But then they began to realise how much they were relying on it. The group grew so there were approximately 100 software engineers on my team. Astronauts’ lives were at stake. Our software needed to be ultra-reliable and it needed to be able to detect an error and recover from it at any time during the mission. And it all had to fit on the hardware."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I thought: my God – this could inadvertently happen in a real mission. I suggested a program change to prevent a prelaunch program being selected during flight. But the higher-ups at MIT and Nasa said the astronauts were too well trained to make such a mistake. Midcourse on the very next mission – Apollo 8 – one of the astronauts on board accidentally did exactly what Lauren had done. The Lauren bug! It created much havoc and required the mission to be reconfigured. After that, they let me put the program change in, all right."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "During the early days of Apollo, software was not taken as seriously as other engineering disciplines. Though in fact we had a complex system of systems, we weren’t getting credit for what was a legitimate field. It was out of desperation I came up with the term, to say: “Hey, we’re engineering too.” It was an ongoing joke for a long time. Then one day in a meeting, one of the most respected hardware gurus explained to everyone that he agreed with me. The process of building software should also be considered an engineering discipline, just like with hardware. It was a memorable moment."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, what became apparent with Apollo – though it is not how it worked – is that it is better to define your system up front to minimise errors, rather than producing a bunch of code that then has to be corrected with patches on patches. It’s a message that seems to have gone unheeded – in this respect, software today is still built the way it was 50 years ago."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJVEPCVT6",
                    "UHWC9PXBL",
                    "UAVCC2X70",
                    "UCSJ44X1S"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1563891944.205800",
        "client_msg_id": "62169789-08BB-4E14-9020-08867E82114F",
        "text": "As a lot of people here develop their own languages, this seems useful: <http:\/\/thume.ca\/2019\/07\/14\/a-tour-of-metaprogramming-models-for-generics\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dIg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As a lot of people here develop their own languages, this seems useful: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/thume.ca\/2019\/07\/14\/a-tour-of-metaprogramming-models-for-generics\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKT951SPR",
                    "UHWC9PXBL",
                    "UDKTZSD6H",
                    "U79HM6726"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1563894660.232000",
        "client_msg_id": "4880cb0f-55b4-4e94-85c2-82af7f6d79ef",
        "text": "You’re much deeper into logic programming than me - I’m only getting started. However, I can attest to the applications I saw at Philadelphia Logic Week in June. ASP can have strong and weak constraints, and can do optimizations over natural and real numbers. Using this in conjunction with the powerful relational capabilities you know from Datalog, I saw the following applications:\n- Lots of robotics planning. The task in vogue right now seems to be planning the robots that power Amazon’s warehouses, which involves coordinating dozens of agents at once, but ASP handled this very well.\n- Any kind of scheduling tasks. Nurse scheduling, train scheduling.\n- One researcher was using ASP to analyze global-scale internet networks for routing problems (i.e, certain routing configurations could have emergent behavior such that packets never get to their destination, and the researcher was able to encode the problem into ASP).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563878052.200400",
        "parent_user_id": "UEF95M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VSv7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You’re much deeper into logic programming than me - I’m only getting started. However, I can attest to the applications I saw at Philadelphia Logic Week in June. ASP can have strong and weak constraints, and can do optimizations over natural and real numbers. Using this in conjunction with the powerful relational capabilities you know from Datalog, I saw the following applications:\n- Lots of robotics planning. The task in vogue right now seems to be planning the robots that power Amazon’s warehouses, which involves coordinating dozens of agents at once, but ASP handled this very well.\n- Any kind of scheduling tasks. Nurse scheduling, train scheduling.\n- One researcher was using ASP to analyze global-scale internet networks for routing problems (i.e, certain routing configurations could have emergent behavior such that packets never get to their destination, and the researcher was able to encode the problem into ASP)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1563894734.232700",
        "client_msg_id": "a386e147-1898-4197-aec4-58d6d44bf77e",
        "text": "I’m working on applying ASP to user interface problems. I think it’s a great medium for encoding the window management capabilities one expects from an operating system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563878052.200400",
        "parent_user_id": "UEF95M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "baVe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m working on applying ASP to user interface problems. I think it’s a great medium for encoding the window management capabilities one expects from an operating system."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563895385.245000",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1563895877.000000"
        },
        "client_msg_id": "b8fef432-3c25-468a-820e-fc9bdd597be1",
        "text": "There are plenty of instances of badly written software putting lives in danger. And true, it was a new field at some point, but what *still* is allowed to pass as \"professional\" software is alarming and embarrassing.\n\nSo that's one of my main points: on the whole, it's like even basic fundamentals of designing coherent software are by and large missing, ignored, or not even grasped. Things like proper decomposition and abstraction, etc.\n\nMy guess is that this is largely due to that fact that you cannot \"see\" what's in a program: the data flows and execution flows, etc. Like many programmers are so used to having to decipher code anyway, that they either don't realize that it doesn't make sense, or that it *can* make straightforward sense.\n\nThere are multiple times in my career where I've thought to myself: if the components and flows and organization in our code was something physical that any non-programmer could walk by and see -- if it was at least vaguely visible what their software \"engineers\" were doing with\/in their software -- the business would be *appalled*. Hey, that's our name on that! We don't have time and money to waste this convoluted nonsense! We expect or customers to *rely* on this stuff!\n\nI know many consider this to be a subjective matter, but I'm not taking about I prefer Jim's style of writing versus Joe's, I'm taking about Sarah laid out the business requirements in two clear paragraphs and a few bullet points, and Sue wrote 5 pages about the same thing with no coherent train of thought. (names and examples are made up).\n\nMy point is that language and tools will not fill this gap, but is something that needs to be understood and fixed in it's own rite.\n\nHOWEVER, I do think it can help tremendously if it's obvious at a glance whether a program (or software component) is straightforward, or horribly convoluted. If we can see what we're doing, maybe we can begin to understand what we're doing, see what we're doing, and talk about it and take ownership of it.\n\n(This is mostly coming from a context of what happens in professional software development, based on my experience and observations)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563895385.245000",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1563912135.276700",
        "reply_users": [
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1563912135.276700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dud",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are plenty of instances of badly written software putting lives in danger. And true, it was a new field at some point, but what "
                            },
                            {
                                "type": "text",
                                "text": "still",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is allowed to pass as \"professional\" software is alarming and embarrassing.\n\nSo that's one of my main points: on the whole, it's like even basic fundamentals of designing coherent software are by and large missing, ignored, or not even grasped. Things like proper decomposition and abstraction, etc.\n\nMy guess is that this is largely due to that fact that you cannot \"see\" what's in a program: the data flows and execution flows, etc. Like many programmers are so used to having to decipher code anyway, that they either don't realize that it doesn't make sense, or that it "
                            },
                            {
                                "type": "text",
                                "text": "can",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " make straightforward sense.\n\nThere are multiple times in my career where I've thought to myself: if the components and flows and organization in our code was something physical that any non-programmer could walk by and see -- if it was at least vaguely visible what their software \"engineers\" were doing with\/in their software -- the business would be "
                            },
                            {
                                "type": "text",
                                "text": "appalled",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Hey, that's our name on that! We don't have time and money to waste this convoluted nonsense! We expect or customers to "
                            },
                            {
                                "type": "text",
                                "text": "rely",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on this stuff!\n\nI know many consider this to be a subjective matter, but I'm not taking about I prefer Jim's style of writing versus Joe's, I'm taking about Sarah laid out the business requirements in two clear paragraphs and a few bullet points, and Sue wrote 5 pages about the same thing with no coherent train of thought. (names and examples are made up).\n\nMy point is that language and tools will not fill this gap, but is something that needs to be understood and fixed in it's own rite.\n\nHOWEVER, I do think it can help tremendously if it's obvious at a glance whether a program (or software component) is straightforward, or horribly convoluted. If we can see what we're doing, maybe we can begin to understand what we're doing, see what we're doing, and talk about it and take ownership of it.\n\n(This is mostly coming from a context of what happens in professional software development, based on my experience and observations)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563896162.247800",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1563912376.000000"
        },
        "client_msg_id": "60e172a8-d7d8-482c-bc62-ca15c3774e23",
        "text": "And the other question is, how do you distill the principles of designing coherent software into something that can easily be explained and taught? I think this is a vital component missing in almost all software education.\n\nI already have some of these figured out, or at least I've been thinking about it and observing it in practice for years. It's somewhat hard to explain without visuals, but essentially it's about making your code match closely with the user mental model, and reducing the gap between code and running program.\n\nSome of it is related to Bret Victor's \"Learnable Programming\" and \"Magic Ink\", but Jim Coplien's work is actually what got me thinking about this stuff to begin with. I recommend watching his \"Reflections on reflection\", as it ties a lot of this together (and draws parallels between Alan Kay, Christopher Alexander, Piaget, etc.): <https:\/\/www.infoq.com\/presentations\/Reflection-OOP-Social\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ynY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And the other question is, how do you distill the principles of designing coherent software into something that can easily be explained and taught? I think this is a vital component missing in almost all software education.\n\nI already have some of these figured out, or at least I've been thinking about it and observing it in practice for years. It's somewhat hard to explain without visuals, but essentially it's about making your code match closely with the user mental model, and reducing the gap between code and running program.\n\nSome of it is related to Bret Victor's \"Learnable Programming\" and \"Magic Ink\", but Jim Coplien's work is actually what got me thinking about this stuff to begin with. I recommend watching his \"Reflections on reflection\", as it ties a lot of this together (and draws parallels between Alan Kay, Christopher Alexander, Piaget, etc.): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.infoq.com\/presentations\/Reflection-OOP-Social\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563898361.264700",
        "client_msg_id": "1c262f7e-46fc-4f73-9139-1706b3a08ae2",
        "text": "<@UAVCC2X70> I think you are over estimating the amount with which new representations can make code clearer, or at least, we haven't found such representations yet. There is plenty of super complex code out there that even a well meaning, talented programmer couldn't make simple, be it by \"decomposition and abstraction\" as you say (which are very limited in their power), or by using better representations of the code. The real complexity is in the \"logic\" (for want of a better word) of the code, and we have no silver bullet to simplify it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "reply_count": 29,
        "reply_users_count": 4,
        "latest_reply": "1564253860.359100",
        "reply_users": [
            "UJCHWTMH6",
            "UHDQ62M4P",
            "UAVCC2X70",
            "UJ6LDMMN0"
        ],
        "replies": [
            {
                "user": "UJCHWTMH6",
                "ts": "1563899425.265000"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563902328.274500"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563902368.275100"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1563913192.277500"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563914740.277800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1563915549.278300"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563915725.278700"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1563916006.279100"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1563941574.282800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1563942052.283000"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563982419.286200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563982532.286400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563982626.286600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563982679.286800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1563986380.289100"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1563986919.289700"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563987850.290200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563987927.290400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563988052.290600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564000647.291200"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564000795.291500"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1564003811.291900"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1564003847.292100"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1564004093.292300"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1564004230.292500"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1564005442.293600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1564005462.293900"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1564141421.330200"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564253860.359100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9f7g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " I think you are over estimating the amount with which new representations can make code clearer, or at least, we haven't found such representations yet. There is plenty of super complex code out there that even a well meaning, talented programmer couldn't make simple, be it by \"decomposition and abstraction\" as you say (which are very limited in their power), or by using better representations of the code. The real complexity is in the \"logic\" (for want of a better word) of the code, and we have no silver bullet to simplify it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJCHWTMH6",
        "type": "message",
        "ts": "1563899425.265000",
        "edited": {
            "user": "UJCHWTMH6",
            "ts": "1563899483.000000"
        },
        "client_msg_id": "fe258591-9011-4402-8a9c-340adf5bc406",
        "text": "I only agree with the part of your statement that says, \"we haven't found such representations yet.\"  And I think we have to keep trying.  And it's a faith-based argument because you can't prove it until you can prove it.\n\nAlso, I think the problem can be split into two, where there is a pure endpoint and the other which is just better than this kitchen-sink chaos of a technical stack that we use today.  I think the former is both possible and exciting, and the latter is obvious.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8d51e2f74ae",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a8d51e2f74ae5104ac5378a9a5689411.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "David Broderick",
            "display_name": "David Broderick",
            "team": "T5TCAFTA9",
            "name": "david927",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oHW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I only agree with the part of your statement that says, \"we haven't found such representations yet.\"  And I think we have to keep trying.  And it's a faith-based argument because you can't prove it until you can prove it.\n\nAlso, I think the problem can be split into two, where there is a pure endpoint and the other which is just better than this kitchen-sink chaos of a technical stack that we use today.  I think the former is both possible and exciting, and the latter is obvious."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFS53UWE5",
        "type": "message",
        "ts": "1563899980.265700",
        "client_msg_id": "9f1b5e8d-371a-4683-97bf-f8a8ffcbf644",
        "text": "Not sure if this has been posted before, but this is quite close to the sort of thing I've been working on: <http:\/\/nodes.io\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a88832bbbfe7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-12\/1359700849458_a88832bbbfe7c26df530_72.jpg",
            "first_name": "John",
            "real_name": "John Austin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kleptine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563899980.265700",
        "reply_count": 10,
        "reply_users_count": 5,
        "latest_reply": "1564079198.309600",
        "reply_users": [
            "UC2A2ARPT",
            "UGLSY9X3J",
            "UFS53UWE5",
            "UBSMEUXAA",
            "UCGAK10LS"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1563900080.266200"
            },
            {
                "user": "UGLSY9X3J",
                "ts": "1563900083.266400"
            },
            {
                "user": "UFS53UWE5",
                "ts": "1563900267.266600"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1563905501.276100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1563931122.280500"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1563931898.280700"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1563932161.281000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1563932190.281200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1563932451.281600"
            },
            {
                "user": "UFS53UWE5",
                "ts": "1564079198.309600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "Nodes",
                "title_link": "http:\/\/nodes.io\/",
                "text": "Nodes is a new way to create with code",
                "fallback": "Nodes",
                "image_url": "http:\/\/nodes.io\/assets\/video-cover.jpg",
                "from_url": "http:\/\/nodes.io\/",
                "image_width": 444,
                "image_height": 250,
                "image_bytes": 99944,
                "service_name": "nodes.io",
                "id": 1,
                "original_url": "http:\/\/nodes.io\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=bAf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if this has been posted before, but this is quite close to the sort of thing I've been working on: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/nodes.io\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1563900080.266200",
        "client_msg_id": "E4ECB8BA-161C-4FD8-A10B-3A20395CFA3A",
        "text": "This was just posted in <#CCL5VVBAN|share-your-work> :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563899980.265700",
        "parent_user_id": "UFS53UWE5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KsBp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This was just posted in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": " :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1563900083.266400",
        "client_msg_id": "d14eee85-01b5-4a29-9aa9-f3e0cc873af5",
        "text": "saw this y’day, it looks super neat!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563899980.265700",
        "parent_user_id": "UFS53UWE5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rRP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "saw this y’day, it looks super neat!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFS53UWE5",
        "type": "message",
        "ts": "1563900267.266600",
        "client_msg_id": "e914ca34-76f0-415d-accd-4091acda2e65",
        "text": "Hah!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a88832bbbfe7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-12\/1359700849458_a88832bbbfe7c26df530_72.jpg",
            "first_name": "John",
            "real_name": "John Austin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kleptine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563899980.265700",
        "parent_user_id": "UFS53UWE5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZmUf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hah!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULADE0N0J",
        "type": "message",
        "ts": "1563901864.273700",
        "client_msg_id": "383b584e-5ae2-4002-b6d9-99cf0b8c8745",
        "text": "So, I’ve been working on expert systems for two years. The central pitch (of a rules engine) is that it will allow business people to build their rules without programmer involvement. sounds nice, but is not often nice in practice. rule systems can grow very hard to maintain over time. and you maybe need tooling so you can cope with it by detecting overlapping rules or visualize the program flow.\n\nThere is also the question, what skills you need to author and maintain rules. Do people who author rules automatically learn quasi programming skills? Is it maybe better to let (carreer) programmers author the rules, and have business-readable notation instead, to still allow to build a rich and deep communication channel between programmers and business\/underlying domain?\n\nI’ve been reading halfway through “out of the tar pit”, watched half a dozen of lighttable\/eve talks with all the eve experiments, and look into vega dataflow code. I think I’ll work in this area more in the upcoming months.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7d86046c255c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-23\/692084499154_7d86046c255cf2735e1c_72.jpg",
            "first_name": "",
            "real_name": "Benjamin Gudehus",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "hastebrot",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563901864.273700",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1563958792.285800",
        "reply_users": [
            "UC2A2ARPT",
            "UEBG0NPDK",
            "ULADE0N0J"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1563903742.275600"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1563904982.275800"
            },
            {
                "user": "ULADE0N0J",
                "ts": "1563958792.285800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3mgCq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So, I’ve been working on expert systems for two years. The central pitch (of a rules engine) is that it will allow business people to build their rules without programmer involvement. sounds nice, but is not often nice in practice. rule systems can grow very hard to maintain over time. and you maybe need tooling so you can cope with it by detecting overlapping rules or visualize the program flow.\n\nThere is also the question, what skills you need to author and maintain rules. Do people who author rules automatically learn quasi programming skills? Is it maybe better to let (carreer) programmers author the rules, and have business-readable notation instead, to still allow to build a rich and deep communication channel between programmers and business\/underlying domain?\n\nI’ve been reading halfway through “out of the tar pit”, watched half a dozen of lighttable\/eve talks with all the eve experiments, and look into vega dataflow code. I think I’ll work in this area more in the upcoming months."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563902328.274500",
        "client_msg_id": "5aff01a6-a63f-4ac5-bb59-09e38227a438",
        "text": "Yes, I've been trying for many years.. I just set my expectations differently nowadays",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EU=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, I've been trying for many years.. I just set my expectations differently nowadays"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563902368.275100",
        "client_msg_id": "4a174b3d-741b-466c-b0e7-a3e62acb7f2c",
        "text": "There's already plenty more sensible stacks nowadays.. the problem is getting paid to use them :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aNimE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's already plenty more sensible stacks nowadays.. the problem is getting paid to use them "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULADE0N0J",
        "type": "message",
        "ts": "1563902393.275400",
        "client_msg_id": "74c8766e-b98b-4d21-87a7-4062c5e9d6e0",
        "text": "Ahh, and the idea is to blog and open-source code while learning and building prototypes. Starting with an analysis of the vega dataflow paper (Reactive Vega: A Streaming Dataflow Architecture for Declarative Interactive Visualization) and code examples.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7d86046c255c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-23\/692084499154_7d86046c255cf2735e1c_72.jpg",
            "first_name": "",
            "real_name": "Benjamin Gudehus",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "hastebrot",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563902393.275400",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1563932863.282000",
        "reply_users": [
            "UJTHWNH2T",
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "UJTHWNH2T",
                "ts": "1563916122.279600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1563932863.282000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NLLjI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ahh, and the idea is to blog and open-source code while learning and building prototypes. Starting with an analysis of the vega dataflow paper (Reactive Vega: A Streaming Dataflow Architecture for Declarative Interactive Visualization) and code examples."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1563903742.275600",
        "client_msg_id": "b0faa3dc-61fc-4b92-9f87-590da0cfcfac",
        "text": "I had no idea people still used expert systems — there was a ton of hype around them in the 80s (IIRC), maybe earlier, but I haven't heard much of them since. Wild.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563901864.273700",
        "parent_user_id": "ULADE0N0J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gD9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I had no idea people still used expert systems — there was a ton of hype around them in the 80s (IIRC), maybe earlier, but I haven't heard much of them since. Wild."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1563904982.275800",
        "client_msg_id": "ea5f45db-cdb4-47c5-a6c2-1693fd0127c8",
        "text": "They're used all over the place actually! A *ton* of enterprise systems are run off of rules engines. Blaze is probably the leader from a commercial perspective, but it's very old.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563901864.273700",
        "parent_user_id": "ULADE0N0J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SBXZp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They're used all over the place actually! A "
                            },
                            {
                                "type": "text",
                                "text": "ton",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of enterprise systems are run off of rules engines. Blaze is probably the leader from a commercial perspective, but it's very old."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1563905501.276100",
        "client_msg_id": "5a610fe2-1beb-4a44-978c-d75009c3f20a",
        "text": "just saw this it looks good",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563899980.265700",
        "parent_user_id": "UFS53UWE5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iJ+in",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "just saw this it looks good"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1563911602.276500",
        "client_msg_id": "b6596423-265d-41eb-968a-084f34258c12",
        "text": "yeah, i'm not counting parameters as scope. i think there needs to be some form of abstract reference to do anything interesting at all in a programming language",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563814799.068500",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wi3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah, i'm not counting parameters as scope. i think there needs to be some form of abstract reference to do anything interesting at all in a programming language"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1563912135.276700",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1563912852.000000"
        },
        "client_msg_id": "920a1253-a03c-4a99-ab4a-c80490465c93",
        "text": "I think you're ignoring the largest source of problems, the elephant in the room that never gets discussed: incoherence of _ownership_.\n\nSoftware is in a pretty nice state today. Everybody accepts bugs, and unlike other fields we can get away with \"NO WARRANTY\" licenses. So the fundamental problem is one of incentive. As in, giving people an incentive to do better. Right now we can get away with constantly pointing at somebody else when there's a problem. Maybe that will always be true. There are certainly other fields that are sustainably high status relative to their customers. And they tend to involve a priesthood that understands arcane rules. So maybe we can get away with it indefinitely, turning gradually into an ossified field that requires tons of accreditation before you're permitted to write a line of code, and writing code for yourself, well _perish the thought_. Or maybe we create a crisis so vast that the population at large throws their arms up and turns away from the open sea (as happened with <https:\/\/en.wikipedia.org\/wiki\/Zheng_He>). This is a personal preference, but I prefer the latter future to the former.\n\nBut really I'd like to avoid both these endgames. And that seems to require _taking responsibility_ for your dependencies. _That_ is the prerequisite. Asking for better representations for your dependencies before you take responsibility is akin to asking for more resources before you can do the work your boss tells you to do. We all know how that conversation goes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563895385.245000",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bkt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you're ignoring the largest source of problems, the elephant in the room that never gets discussed: incoherence of "
                            },
                            {
                                "type": "text",
                                "text": "ownership",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nSoftware is in a pretty nice state today. Everybody accepts bugs, and unlike other fields we can get away with \"NO WARRANTY\" licenses. So the fundamental problem is one of incentive. As in, giving people an incentive to do better. Right now we can get away with constantly pointing at somebody else when there's a problem. Maybe that will always be true. There are certainly other fields that are sustainably high status relative to their customers. And they tend to involve a priesthood that understands arcane rules. So maybe we can get away with it indefinitely, turning gradually into an ossified field that requires tons of accreditation before you're permitted to write a line of code, and writing code for yourself, well "
                            },
                            {
                                "type": "text",
                                "text": "perish the thought",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Or maybe we create a crisis so vast that the population at large throws their arms up and turns away from the open sea (as happened with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Zheng_He"
                            },
                            {
                                "type": "text",
                                "text": "). This is a personal preference, but I prefer the latter future to the former.\n\nBut really I'd like to avoid both these endgames. And that seems to require "
                            },
                            {
                                "type": "text",
                                "text": "taking responsibility",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for your dependencies. "
                            },
                            {
                                "type": "text",
                                "text": "That",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is the prerequisite. Asking for better representations for your dependencies before you take responsibility is akin to asking for more resources before you can do the work your boss tells you to do. We all know how that conversation goes."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563913192.277500",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1563915321.000000"
        },
        "client_msg_id": "9a30700f-122d-491c-aea3-01e01b6e8552",
        "text": "No no, I don't support using \"new representations to make code cleaner\". Quite the opposite, I think much can be done by going back to the basics. Coplien's DCI paradigm helped me figure a lot of that out; but I don't think it's necessary at all to use mechanisms like DCI to do it.\n\nBut I'm adamant that you can get most code, regardless of the size and complexity, into a relatively same straightforward form. This is hard to believe, but that's because you can't do it if either your data model or your execution flow model is a mess. Most practices are more one way than the other, but I know how to keep both models sane, and it's always applicable.\n\nGranted, you're not going to get simpler than the complexity of the thing you're designing; but compare how you explain it to a person, to how the code explains it. *That* gap can almost always be greatly reduced.\n\nFailing to do this results in a mess, regardless of language or tool, etc. Though all such things certainly are an important part of the overall puzzle to having coherent software.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qvlk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No no, I don't support using \"new representations to make code cleaner\". Quite the opposite, I think much can be done by going back to the basics. Coplien's DCI paradigm helped me figure a lot of that out; but I don't think it's necessary at all to use mechanisms like DCI to do it.\n\nBut I'm adamant that you can get most code, regardless of the size and complexity, into a relatively same straightforward form. This is hard to believe, but that's because you can't do it if either your data model or your execution flow model is a mess. Most practices are more one way than the other, but I know how to keep both models sane, and it's always applicable.\n\nGranted, you're not going to get simpler than the complexity of the thing you're designing; but compare how you explain it to a person, to how the code explains it. "
                            },
                            {
                                "type": "text",
                                "text": "That",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " gap can almost always be greatly reduced.\n\nFailing to do this results in a mess, regardless of language or tool, etc. Though all such things certainly are an important part of the overall puzzle to having coherent software."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563914740.277800",
        "client_msg_id": "826d9834-7e58-49bc-bfa6-4074dd74e3d3",
        "text": "I guess we are from very divergent planets",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TUtF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess we are from very divergent planets"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563915549.278300",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1563915578.000000"
        },
        "client_msg_id": "ffad68fe-827e-4e23-b437-e02170f34d24",
        "text": "Or maybe we have very different experiences or contexts that we are operating within. If there was some example codebase, especially one that's fairly complex (not necessarily in size), I could demonstrate what I mean",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ivy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or maybe we have very different experiences or contexts that we are operating within. If there was some example codebase, especially one that's fairly complex (not necessarily in size), I could demonstrate what I mean"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563915725.278700",
        "client_msg_id": "78363470-015f-47ee-b8d9-f012398db239",
        "text": "Ok, this one is small, clean, but complex: <https:\/\/bellard.org\/quickjs\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8GRPn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, this one is small, clean, but complex: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bellard.org\/quickjs\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1563915838.278900",
        "client_msg_id": "aa158111-96a4-49f4-8db5-3c9ad2d6a8a6",
        "text": "<http:\/\/www.red-lang.org|www.red-lang.org> is the link to start with.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563741130.059800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rjH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/www.red-lang.org",
                                "text": "www.red-lang.org"
                            },
                            {
                                "type": "text",
                                "text": " is the link to start with."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563916006.279100",
        "client_msg_id": "141ab16e-ae61-45dd-8a1e-f2eded477e0c",
        "text": "Alrighty, when I have time (might not be soon) I'll see if I can eat my words in this code :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NrD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Alrighty, when I have time (might not be soon) I'll see if I can eat my words in this code :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1563916112.279400",
        "client_msg_id": "e4ba3168-4f5b-4fca-b4af-b7066be5d8dd",
        "text": "Red is the work of Nenad Rakocevic, who took an old language called REBOL and rebooted it, with various improvements. It is a language that lets you create domain specific languages and then program in your own dialect. So it has some FORTH flavor in that regard. For doing text parsing types of projects, only ICON can beat it. But it also has a system variant that generates executable files, and with the graphics module you can make applications. Anyway it is a substantial project that will generate a sizable audience.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563741130.059800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2uglb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Red is the work of Nenad Rakocevic, who took an old language called REBOL and rebooted it, with various improvements. It is a language that lets you create domain specific languages and then program in your own dialect. So it has some FORTH flavor in that regard. For doing text parsing types of projects, only ICON can beat it. But it also has a system variant that generates executable files, and with the graphics module you can make applications. Anyway it is a substantial project that will generate a sizable audience."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1563916122.279600",
        "client_msg_id": "f21e9f39-6a1a-404e-af4b-7ee6a34333ad",
        "text": "I always find it spooky when someone mentions something in here I've never heard of and then I stumble upon it later inadvertently that same day",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563902393.275400",
        "parent_user_id": "ULADE0N0J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XIA\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I always find it spooky when someone mentions something in here I've never heard of and then I stumble upon it later inadvertently that same day"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULF1Y4N4V",
        "type": "message",
        "ts": "1563926839.280300",
        "client_msg_id": "07485378-a17b-4ce6-a240-2c89c2797f08",
        "text": "This is interesting. I don't have much experience with Agda\/Idris. I have heard they are great tools - but the proof burden is high and modelling a real software is often challenging. It would definitely doable though. It would be great if you can share your experiences.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2a53107d979",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e2a53107d979ba1664095aa67435359e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Sankha Narayan Guria",
            "display_name": "Sankha Narayan Guria",
            "team": "T5TCAFTA9",
            "name": "sankha93",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563663701.039700",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YZ=l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is interesting. I don't have much experience with Agda\/Idris. I have heard they are great tools - but the proof burden is high and modelling a real software is often challenging. It would definitely doable though. It would be great if you can share your experiences."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1563931122.280500",
        "client_msg_id": "9bba5cd1-a727-4e6e-86c3-a4169f267bc3",
        "text": "Looks like a typical boxes-and-arrows code composer. What excites you about it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563899980.265700",
        "parent_user_id": "UFS53UWE5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f9zll",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks like a typical boxes-and-arrows code composer. What excites you about it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1563931898.280700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1563932290.000000"
        },
        "client_msg_id": "4019c1cb-7669-471c-9ba3-fcb95de8b13e",
        "text": "• I like their approach to commenting and annotation.\n• The visual design of the nodes themselves is simple and effective. (You'd be surprised how many VPLs do a bad job of this)\n• They've done a good job of carving out parts of the problem space well suited to nodes-and-lines (eg: interactively composing subsystems), while providing a nice GUI for editing properties and a text editor for doing nitty-gritty.\n• The different views of the node graph are handy — things like recoloring to show performance or hiding inactive edges.\n• The search features are nice.\n• There seem to be lots of nice touches. This looks like a tool that they've put a lot of thought into.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563899980.265700",
        "parent_user_id": "UFS53UWE5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7NBWN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "• I like their approach to commenting and annotation.\n• The visual design of the nodes themselves is simple and effective. (You'd be surprised how many VPLs do a bad job of this)\n• They've done a good job of carving out parts of the problem space well suited to nodes-and-lines (eg: interactively composing subsystems), while providing a nice GUI for editing properties and a text editor for doing nitty-gritty.\n• The different views of the node graph are handy — things like recoloring to show performance or hiding inactive edges.\n• The search features are nice.\n• There seem to be lots of nice touches. This looks like a tool that they've put a lot of thought into."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1563932161.281000",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1563932332.000000"
        },
        "client_msg_id": "dddc20bb-ae85-465a-bbdf-0aee89af1dc9",
        "text": "I'd say all of the design considerations outlined in their Story writeup are important (though different tools should reach for different solutions). But I'd also say 90% of VPLs don't even consider all of these things. Hell, even Pd and Origami do a bad job of some of this stuff.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563899980.265700",
        "parent_user_id": "UFS53UWE5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A0r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd say all of the design considerations outlined in their Story writeup are important (though different tools should reach for different solutions). But I'd also say 90% of VPLs don't even consider all of these things. Hell, even Pd and Origami do a bad job of some of this stuff."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1563932190.281200",
        "client_msg_id": "05f07313-1ce6-457a-b6f2-9ed908bd8239",
        "text": "Nodes isn't god-tier (yet), but it's definitely ahead of the pack.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563899980.265700",
        "parent_user_id": "UFS53UWE5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yj\/fK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nodes isn't god-tier (yet), but it's definitely ahead of the pack."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1563932451.281600",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1563932548.000000"
        },
        "client_msg_id": "b26d9b89-80db-47ee-a269-5f5ed1aec0ba",
        "text": "Here's one very concrete example of something I like:\nTheir nodes have the Pd \/ Max \/ vvvv \/ etc style of a row of inputs on the top, and a row of outputs on the bottom. In Nodes, they've devoted the entire node box graphic to inputs and outputs, by putting the node name off to the side. Each input and output is a square. There's no padding. This means the hit target for each input and output is as large as can be given the size of the node and the uniformity of the squares. That makes patching less fiddly than it is in tools with smaller hit targets.\n\nHere's a criticism:\nAll their edges appear to be S-curves. That's fine as a default, but it definitely leaves a huge part of the possibility space unexplored.\n\nWhen evaluating these sorts of VPLs, the devil is in _those_ sorts of details.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563899980.265700",
        "parent_user_id": "UFS53UWE5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=g=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's one very concrete example of something I like:\nTheir nodes have the Pd \/ Max \/ vvvv \/ etc style of a row of inputs on the top, and a row of outputs on the bottom. In Nodes, they've devoted the entire node box graphic to inputs and outputs, by putting the node name off to the side. Each input and output is a square. There's no padding. This means the hit target for each input and output is as large as can be given the size of the node and the uniformity of the squares. That makes patching less fiddly than it is in tools with smaller hit targets.\n\nHere's a criticism:\nAll their edges appear to be S-curves. That's fine as a default, but it definitely leaves a huge part of the possibility space unexplored.\n\nWhen evaluating these sorts of VPLs, the devil is in "
                            },
                            {
                                "type": "text",
                                "text": "those",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " sorts of details."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563932863.282000",
        "client_msg_id": "0fe95ba8-3798-4d19-b04e-916742c18277",
        "text": "It's the invisible Google spybots everywhere",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563902393.275400",
        "parent_user_id": "ULADE0N0J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Tmi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's the invisible Google spybots everywhere"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "fearful",
                "users": [
                    "UJTHWNH2T",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563941574.282800",
        "client_msg_id": "fe78ded4-452c-48cb-8aae-9206acfa36af",
        "text": "I've gotta admit, based on a quick skim through, that code is pretty clean, and it's not immediately obvious that I could make it much better. Also, although it's \"small\" by industry standards, it's more code than I can invest my time in right now.\n\nBut I suspect that the tons of functions and typedefs\/enums\/etc. could be replaced with (or even just organized\/grouped into) fewer more high level components, which would help a ton with being able understand it all more immediately from a high level, and each component could be understood more or less in isolation.\n\nI concede that that's entirely speculative though, since I'm not taking the time to reverse engineer tens of thousands of lines of procedural code right now.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eW4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've gotta admit, based on a quick skim through, that code is pretty clean, and it's not immediately obvious that I could make it much better. Also, although it's \"small\" by industry standards, it's more code than I can invest my time in right now.\n\nBut I suspect that the tons of functions and typedefs\/enums\/etc. could be replaced with (or even just organized\/grouped into) fewer more high level components, which would help a ton with being able understand it all more immediately from a high level, and each component could be understood more or less in isolation.\n\nI concede that that's entirely speculative though, since I'm not taking the time to reverse engineer tens of thousands of lines of procedural code right now."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563942052.283000",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1563943661.000000"
        },
        "client_msg_id": "1fae494e-db0d-4949-a8cb-5aba08825b47",
        "text": "I may largely just be speaking for the kind of over-engineering that tends to occur in OOP contexts, where patterns, frameworks, IOC, AOP, etc. are applied at every possible angle. I see it a lot in C#, Java, and JavaScript.\n\nHere's an article that describes some of that: <https:\/\/www.eecis.udel.edu\/~decker\/courses\/280f07\/paper\/KingJava.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WegZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I may largely just be speaking for the kind of over-engineering that tends to occur in OOP contexts, where patterns, frameworks, IOC, AOP, etc. are applied at every possible angle. I see it a lot in C#, Java, and JavaScript.\n\nHere's an article that describes some of that: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.eecis.udel.edu\/~decker\/courses\/280f07\/paper\/KingJava.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJCHWTMH6",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1563948207.284200",
        "client_msg_id": "21dccb61-0485-49e9-9072-370a0aa7a5a0",
        "text": "Nice chat friends.  I'll reiterate that conciseness is not a virtue once to control for ease of change.  Point-free style is a good example since it is often elegant but it goes wonky relatively easily.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563646806.006100",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VvPV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice chat friends.  I'll reiterate that conciseness is not a virtue once to control for ease of change.  Point-free style is a good example since it is often elegant but it goes wonky relatively easily."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1563949594.284600",
        "client_msg_id": "e3d577f3-0f40-4757-9dbb-f02dcd96cf14",
        "text": "Historically, declarative answers what, imperative answers how — and beyond that a lot of context matters.  At the least, we could say language\/framework\/library is declarative for a use if it does some part of it automatically or implicitly, which would otherwise require some tedious or tricky work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QNL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Historically, declarative answers what, imperative answers how — and beyond that a lot of context matters.  At the least, we could say language\/framework\/library is declarative for a use if it does some part of it automatically or implicitly, which would otherwise require some tedious or tricky work."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]