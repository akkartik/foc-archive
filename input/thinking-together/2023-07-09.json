[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1688893365.930029",
        "client_msg_id": "55f9bb6e-24ce-4782-a21c-2be502749578",
        "text": "cough, cough\n<https:\/\/px23.clerk.vision>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "from_url": "https:\/\/px23.clerk.vision\/",
                "id": 1,
                "original_url": "https:\/\/px23.clerk.vision",
                "fallback": "Clerk: Moldable Live Programming for Clojure",
                "text": "Clerk is an open source Clojure programmer’s assistant that builds upon the traditions of interactive and literate programming to provide a holistic moldable development environment. Clerk layers static analysis, incremental computation, and rich browser-based graphical presentations on top of a Clojure programmer's familiar toolkit to enhance their workflow.",
                "title": "Clerk: Moldable Live Programming for Clojure",
                "title_link": "https:\/\/px23.clerk.vision\/",
                "service_name": "px23.clerk.vision"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GQaa+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "cough, cough\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/px23.clerk.vision"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMQ6LR9NZ",
                    "U04E5QAD6DD",
                    "U02JQA5FY5C"
                ],
                "count": 3
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1688893414.176099",
        "client_msg_id": "d8679ca0-efe8-4c33-a74a-569a193097ed",
        "text": "“generative testing” is the broadest umbrella term",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688859598.254939",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mHrIt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“generative testing” is the broadest umbrella term"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1688895059.549569",
        "client_msg_id": "04b3d4f7-733d-469b-b5a4-3ace9360b037",
        "text": "&gt; a little pocketbook tucked into the back flap of a function? \nReminds me of some paper I've seen attaching hand-written ink annotations to code.  don't remember the specific paper, but found now several on <https:\/\/www.cs.auckland.ac.nz\/~beryl\/mypublications.html|Beryl Plimmer's publications>, sounds like a good starting point...\n(I have to question the long-term accuracy of anything you can't grep, but actually handwriting recognition might mean you can, and anyway there is interesting value in enabling the kind illustrations we tend to draw on whiteboards but rarely commit.)\n\nVarying font size go nicely with zooming!  <https:\/\/www.microsoft.com\/en-us\/research\/project\/code-canvas\/|Code Canvas> tried quite a lot of that.  Imperfect aesthetics, but some interesting gradual-reveal functionality :+1:\n<https:\/\/eaglemode.sourceforge.net\/> file manager does quite unusual UI tricks with zooming and font sizes – e.g. instead of tooltips, UI elements (buttons etc) documentation is engraved right on them in tiny font.  See \"project philosophy\" there.\nAnd <https:\/\/museapp.com\/>.\n\nPrototyping tips: (1) Emacs supports varying fonts. The poster child is <https:\/\/www.ubuntupit.com\/best-latex-editor-reviewed-for-linux-nerds\/#h-22-emacs-with-auctex|latex> but you can apply it to any kind of syntax-highlight.  Plus various support for folding. (2) on the web, <https:\/\/codemirror.net\/5\/demo\/variableheight.html|CodeMirror>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eXt",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a little pocketbook tucked into the back flap of a function? "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me of some paper I've seen attaching hand-written ink annotations to code.  don't remember the specific paper, but found now several on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.auckland.ac.nz\/~beryl\/mypublications.html",
                                "text": "Beryl Plimmer's publications"
                            },
                            {
                                "type": "text",
                                "text": ", sounds like a good starting point...\n(I have to question the long-term accuracy of anything you can't grep, but actually handwriting recognition might mean you can, and anyway there is interesting value in enabling the kind illustrations we tend to draw on whiteboards but rarely commit.)\n\nVarying font size go nicely with zooming!  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.microsoft.com\/en-us\/research\/project\/code-canvas\/",
                                "text": "Code Canvas"
                            },
                            {
                                "type": "text",
                                "text": " tried quite a lot of that.  Imperfect aesthetics, but some interesting gradual-reveal functionality "
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/eaglemode.sourceforge.net\/"
                            },
                            {
                                "type": "text",
                                "text": " file manager does quite unusual UI tricks with zooming and font sizes – e.g. instead of tooltips, UI elements (buttons etc) documentation is engraved right on them in tiny font.  See \"project philosophy\" there.\nAnd "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/museapp.com\/"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nPrototyping tips: (1) Emacs supports varying fonts. The poster child is "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.ubuntupit.com\/best-latex-editor-reviewed-for-linux-nerds\/#h-22-emacs-with-auctex",
                                "text": "latex"
                            },
                            {
                                "type": "text",
                                "text": " but you can apply it to any kind of syntax-highlight.  Plus various support for folding. (2) on the web, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/codemirror.net\/5\/demo\/variableheight.html",
                                "text": "CodeMirror"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "a emacs screenshot with rather ugly mix of fonts I just tweaked away:\nEmacs has many packages to add custom \"faces\" (its term for stylable fonts, a-la CSS class) to things like \"TODO\" or any regexp really, so you could add some custom \"constructs\".  (OTOH really customizing the font-lock parsing is ...ad-hoc pain. maybe LSP-mode makes that more approachable?)",
        "files": [
            {
                "id": "F05G5AFJM5Z",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U02QC0PPER3",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HJd4e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a emacs screenshot with rather ugly mix of fonts I just tweaked away:\nEmacs has many packages to add custom \"faces\" (its term for stylable fonts, a-la CSS class) to things like \"TODO\" or any regexp really, so you could add some custom \"constructs\".  (OTOH really customizing the font-lock parsing is ...ad-hoc pain. maybe LSP-mode makes that more approachable?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1688895459.417009",
        "edited": {
            "user": "U02QC0PPER3",
            "ts": "1688895493.000000"
        },
        "client_msg_id": "e733ddef-3772-46ad-be28-b457f93c9862",
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U035QJ14NN9",
        "type": "message",
        "ts": "1688907491.073889",
        "client_msg_id": "D792DDD3-011C-4DA4-BA25-96B00CE53BB9",
        "text": "Common writing advice says to delay styling until the writing is done. Most code is never finished; it's merely released, to be edited again soon.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "db778188df26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-05\/3210121425649_db778188df26a0e022f5_72.jpg",
            "first_name": "Joakim",
            "real_name": "Joakim Ahnfelt-Rønne",
            "display_name": "Joakim Ahnfelt-Rønne",
            "team": "T5TCAFTA9",
            "name": "joakim.ahnfelt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZLlV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Common writing advice says to delay styling until the writing is done. Most code is never finished; it's merely released, to be edited again soon."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U035QJ14NN9",
        "type": "message",
        "ts": "1688907701.863759",
        "client_msg_id": "92723516-B60D-4C19-960D-225F0CA463D2",
        "text": "Re: Nodes and wires. I think text is already very good at visualizing code. The visual programming that is of interest to me visualizes the *data* flowing through the program, rather than the code itself.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "db778188df26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-05\/3210121425649_db778188df26a0e022f5_72.jpg",
            "first_name": "Joakim",
            "real_name": "Joakim Ahnfelt-Rønne",
            "display_name": "Joakim Ahnfelt-Rønne",
            "team": "T5TCAFTA9",
            "name": "joakim.ahnfelt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WVz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re: Nodes and wires. I think text is already very good at visualizing code. The visual programming that is of interest to me visualizes the "
                            },
                            {
                                "type": "text",
                                "text": "data",
                                "style": {
                                    "bold": true,
                                    "italic": false,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " flowing through the program"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " rather than the code itself"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1688910623.993159",
        "client_msg_id": "d24d4e0b-d89a-43c6-89e2-725d7053606e",
        "text": "<https:\/\/wiki.haskell.org\/QuickCheck_as_a_test_set_generator>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688859598.254939",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qxtpj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.haskell.org\/QuickCheck_as_a_test_set_generator"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1688915780.885249",
        "client_msg_id": "7700cbec-e88f-4ee8-ae5b-2f470ffc8a7a",
        "text": "<@U04UE0GNFU6> Nobody ever mistook it for a piece of art. Comments are usually of the type \"that's a nice way to use a TV\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688791144.142939",
        "parent_user_id": "U04UE0GNFU6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JgbYL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U04UE0GNFU6"
                            },
                            {
                                "type": "text",
                                "text": " Nobody ever mistook it for a piece of art. Comments are usually of the type \"that's a nice way to use a TV\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U04UE0GNFU6"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04E5QAD6DD",
        "type": "message",
        "ts": "1688933899.723689",
        "client_msg_id": "6068fa84-2408-4e7f-9f67-6c1af8a87257",
        "text": "Of _course_ emacs can do it. :smile: I'd imagine it gets progressively harder to do \"fancier\" layouts, though — some because of the limitations of the language's syntax, and some because of emac's limitations (uh, if it has any…). Out of curiosity, can comments be formatted as some sort of aside or margin notes in emacs?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3e6bba2ae45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-06\/5085861186081_e3e6bba2ae4575d17358_72.jpg",
            "first_name": "David",
            "real_name": "David Alan Hjelle",
            "display_name": "David Alan Hjelle",
            "team": "T5TCAFTA9",
            "name": "dahjelle_futureofcodi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kcon",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of "
                            },
                            {
                                "type": "text",
                                "text": "course",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " emacs can do it. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " I'd imagine it gets progressively harder to do \"fancier\" layouts, though — some because of the limitations of the language's syntax, and some because of emac's limitations (uh, if it has any…). Out of curiosity, can comments be formatted as some sort of aside or margin notes in emacs?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04E5QAD6DD",
        "type": "message",
        "ts": "1688934036.392139",
        "client_msg_id": "3c162228-b2b9-4d8f-94a1-d7fa93f131a6",
        "text": "So many interesting thoughts and takes in this thread! Thank you all!\n\n&gt; having tech edited and co-authored books, I'm much happier writing code. I'm also a lot better at it. There are two different skills at play.\nI definitely think there is an element to this. I am certainly more verbose than most of my co-workers — well, oddly, maybe more verbose in issues and merge requests, and perhaps more terse in code. That said — I'm personally thinking _less_ of literate programming and _more_ of fancy syntax highlighting.\n\n&gt; Mostly it's about structure.\nYes, exactly! What ways can we devise to communicate that structure more effectively to our brains?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3e6bba2ae45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-06\/5085861186081_e3e6bba2ae4575d17358_72.jpg",
            "first_name": "David",
            "real_name": "David Alan Hjelle",
            "display_name": "David Alan Hjelle",
            "team": "T5TCAFTA9",
            "name": "dahjelle_futureofcodi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CHbOw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So many interesting thoughts and takes in this thread! Thank you all!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "having tech edited and co-authored books, I'm much happier writing code. I'm also a lot better at it. There are two different skills at play."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI definitely think there is an element to this. I am certainly more verbose than most of my co-workers — well, oddly, maybe more verbose in issues and merge requests, and perhaps more terse in code. That said — I'm personally thinking "
                            },
                            {
                                "type": "text",
                                "text": "less",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of literate programming and "
                            },
                            {
                                "type": "text",
                                "text": "more",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of fancy syntax highlighting.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mostly it's about structure."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYes, exactly! What ways can we devise to communicate that structure more effectively to our brains?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05G67HTNHG",
        "type": "message",
        "ts": "1688938867.164299",
        "client_msg_id": "c71a9772-7dc3-4344-84ff-d38e1591aed3",
        "text": "Saw this in the weekly digest. \"Spreads\" (including this name) I borrowed from vvvv which is a dataflow nodes and wires environment. You can put a \"spread\" of values into any input pin and the output pins will be correspondingly \"spread\". It's like the List Monad I guess.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7d59e315978",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-09\/5550255962386_b7d59e3159787de5ff45_72.jpg",
            "first_name": "Toby",
            "real_name": "Toby Schachman",
            "display_name": "Toby Schachman",
            "team": "T5TCAFTA9",
            "name": "tobyschachman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688504807.631819",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7g4If",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Saw this in the weekly digest. \"Spreads\" (including this name) I borrowed from vvvv which is a dataflow nodes and wires environment. You can put a \"spread\" of values into any input pin and the output pins will be correspondingly \"spread\". It's like the List Monad I guess."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U05M5A8E0NT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1688942798.946489",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1688943072.000000"
        },
        "client_msg_id": "3E4CC426-CFAD-4F37-806C-94E25C0320B4",
        "text": "<@UE6EFEPTQ> I had similar thoughts when watching the dynamicland video though I was thinking more along the lines of an MS surface studio pro machine, or even larger multitouch screens. This would solve the lag and glitchiness issues seen in the DL demos and allow the app to be run on popular existing hardware and (if popular) help create a market for larger touch screen devices.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688338057.293999",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0gPK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " I had similar thoughts when watching the dynamicland video though I was thinking more along the lines of an MS surface studio pro machine, or even larger multitouch screens. This would solve the lag and glitchiness issues seen in the DL demos and allow the app to be run on popular existing hardware and (if popular) help create a market for larger touch screen devices."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1688950709.100939",
        "client_msg_id": "4D5423EB-CAE9-44CD-A60A-7B17869F312C",
        "text": "&gt; What ways can we devise to communicate that structure more effectively to our brains?\nSize, shape, space, similarity, sequence, segment, sound…\n\n.…smell, saturation, story, sitar, situation…\n\n…sauté, Solar, seat, seal, satire, superspirituality…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6cS",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What ways can we devise to communicate that structure more effectively to our brains?"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSize, shape, space, similarity, sequence, segment, sound…\n\n.…smell, saturation, story, sitar, situation…\n\n…sauté, Solar, seat, seal, satire, superspirituality…"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sos",
                "users": [
                    "UMQ6LR9NZ",
                    "U02U0AS3J49"
                ],
                "count": 2
            },
            {
                "name": "joy",
                "users": [
                    "U04E5QAD6DD",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1688951849.950989",
        "client_msg_id": "5563bcbe-420b-4700-84f1-64a596ae5da9",
        "text": "I think structure applies in-the-small as well as the large. Kind of like every book has beginning\/middle\/end as does each section, chapter, paragraph, and down to the sentence. What is the story a piece of software tells to us, as narrative-oriented creatures? I also like to think about <https:\/\/dictionary.cambridge.org\/grammar\/british-grammar\/adjectives-order>, as sometimes inheritance does it completely in reverse order. We get it, because we know the attributes have to apply to something, but there's no reason you _couldn't_ say \"give me a big red button at 100x200\" instead of \"at 100x200 button red 150x30`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "83IK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think structure applies in-the-small as well as the large. Kind of like every book has beginning\/middle\/end as does each section, chapter, paragraph, and down to the sentence. What is the story a piece of software tells to us, as narrative-oriented creatures? I also like to think about "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dictionary.cambridge.org\/grammar\/british-grammar\/adjectives-order"
                            },
                            {
                                "type": "text",
                                "text": ", as sometimes inheritance does it completely in reverse order. We get it, because we know the attributes have to apply to something, but there's no reason you "
                            },
                            {
                                "type": "text",
                                "text": "couldn't",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " say \"give me a big red button at 100x200\" instead of \"at 100x200 button red 150x30`."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1688952281.548209",
        "client_msg_id": "db09080c-3bdd-4e00-b0d2-1998655d9df6",
        "text": "It's interesting, too, to think about how we approach new code, and how it's affected by context (and job deadlines). Have you ever found some code and really enjoyed wandering through it, and getting to know it, reading its story? And why does that happen, but is often just the opposite, where you think \"I don't know how this works, so I need to look at that, and that leads to this other thing, but I have to remember...where did I start, and why do I feel lost in this \"terrible\" code, when my own code makes perfect sense? And why do people complain about *my* code?\n\nMaybe the first key to solving this problem is to *try* to help the reader, which nobody has cracked yet, that I know of. New models are hard, so it's a slow evolution and some mutations (auto-complete and syntax highlighting) stick over time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "owMQC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's interesting, too, to think about how we approach new code, and how it's affected by context (and job deadlines). Have you ever found some code and really enjoyed wandering through it, and getting to know it, reading its story? And why does that happen, but is often just the opposite, where you think \"I don't know how this works, so I need to look at that, and that leads to this other thing, but I have to remember...where did I start, and why do I feel lost in this \"terrible\" code, when my own code makes perfect sense? And why do people complain about "
                            },
                            {
                                "type": "text",
                                "text": "my",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code?\n\nMaybe the first key to solving this problem is to "
                            },
                            {
                                "type": "text",
                                "text": "try ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "to help the reader, which nobody has cracked yet, that I know of. New models are hard, so it's a slow evolution and some mutations (auto-complete and syntax highlighting) stick over time."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            }
        ]
    }
]