[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1658737633.044619",
        "client_msg_id": "8613ecd0-d420-4e26-a784-b492dd84d164",
        "text": "<@U017GNJM021> I've never found a node-based programming environment that I like. <@UC2A2ARPT> is a much better person to ask about this, as he is very focused on that area. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658710069.408479",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5GgqL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U017GNJM021"
                            },
                            {
                                "type": "text",
                                "text": " I've never found a node-based programming environment that I like. "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " is a much better person to ask about this, as he is very focused on that area. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03LMRE6MQE",
        "type": "message",
        "ts": "1658752861.226259",
        "client_msg_id": "68fa622f-883e-4253-9607-69610783d677",
        "text": "Has anyone seen an implementation of a structural REPL? Structural Editors are great but is there something that could be both structural and a repl. I'd love to be able to open a structural repl at a point in my program and investigate at that point.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ea29e26e919b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-06-23\/3708469439522_ea29e26e919bc202feb6_72.png",
            "first_name": "Peter",
            "real_name": "Peter Saxton",
            "display_name": "Peter Saxton",
            "team": "T5TCAFTA9",
            "name": "peterhsaxton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658752861.226259",
        "reply_count": 14,
        "reply_users_count": 7,
        "latest_reply": "1659037118.420929",
        "reply_users": [
            "UCUSW7WVD",
            "U013ZLJARC7",
            "U01NWARGPNC",
            "UA14TGLTC",
            "U03LMRE6MQE",
            "U79HM6726",
            "U02JQA5FY5C"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1658759115.018569"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1658773020.640109"
            },
            {
                "user": "U01NWARGPNC",
                "ts": "1658807399.726479"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1658826358.192039"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1658826379.254319"
            },
            {
                "user": "U03LMRE6MQE",
                "ts": "1658828263.936069"
            },
            {
                "user": "U03LMRE6MQE",
                "ts": "1658828292.525969"
            },
            {
                "user": "U03LMRE6MQE",
                "ts": "1658828330.284009"
            },
            {
                "user": "U01NWARGPNC",
                "ts": "1658828678.139599"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1658829802.286429"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1658830847.851599"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1658831927.592889"
            },
            {
                "user": "U79HM6726",
                "ts": "1659007577.549499"
            },
            {
                "user": "U02JQA5FY5C",
                "ts": "1659037118.420929"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GQX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone seen an implementation of a structural REPL? Structural Editors are great but is there something that could be both structural and a repl. I'd love to be able to open a structural repl at a point in my program and investigate at that point."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1658759115.018569",
        "client_msg_id": "bad21bc9-27e2-4487-ab25-8d26130ba14b",
        "text": "Does Scratch feel like a structural repl? If so, there's also this unreleased project for Python:\n<https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1650580496430299?thread_ts=1650580496.430299&amp;cid=C5U3SEW6A|https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1650580496430299?thread_ts=1650580496.430299&amp;cid=C5U3SEW6A>\n\nI don't follow your last sentence, though.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1650580496430299?thread_ts=1650580496.430299&amp;cid=C5U3SEW6A",
                "ts": "1650580496.430299",
                "author_id": "UCUSW7WVD",
                "channel_team": "T5TCAFTA9",
                "channel_id": "C5U3SEW6A",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5U3SEW6A",
                        "ts": "1650580496.430299",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "6=Bt",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "This is a pretty awesome story about a bunch of attempts at a somewhat-visual, more accessible programming language: "
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https:\/\/www.youtube.com\/watch?v=UH0A2iujtY8"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " by "
                                                },
                                                {
                                                    "type": "user",
                                                    "user_id": "U01NWARGPNC"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1650580496430299?thread_ts=1650580496.430299&amp;cid=C5U3SEW6A",
                "fallback": "[April 21st, 2022 3:34 PM] ak: This is a pretty awesome story about a bunch of attempts at a somewhat-visual, more accessible programming language: <https:\/\/www.youtube.com\/watch?v=UH0A2iujtY8> by <@U01NWARGPNC>",
                "text": "This is a pretty awesome story about a bunch of attempts at a somewhat-visual, more accessible programming language: <https:\/\/www.youtube.com\/watch?v=UH0A2iujtY8> by <@U01NWARGPNC>",
                "author_name": "Kartik Agaram",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UCUSW7WVD",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_48.png",
                "author_subname": "Kartik Agaram",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1uK5K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does Scratch feel like a structural repl? If so, there's also this unreleased project for Python:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1650580496430299?thread_ts=1650580496.430299&cid=C5U3SEW6A",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1650580496430299?thread_ts=1650580496.430299&cid=C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI don't follow your last sentence, though."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03PM543ANT",
        "type": "message",
        "ts": "1658759120.828739",
        "client_msg_id": "f71d7e66-58cd-4290-b661-398df3a037d8",
        "text": "One approach (perhaps equivalent to subroutines in textual code) is to be able to manually nest sub-graphs within a node.  Useful when there are different levels of abstraction perhaps.   I have seen this work quite effectively.\n\nIt may be interesting to try to partition the graph in this way automatically (using graph theory) to place highly connected components into sub-graphs.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "14d26aea3375",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-07-19\/3841524178160_14d26aea3375c925f7a8_72.jpg",
            "first_name": "Niall",
            "real_name": "Niall McCarroll",
            "display_name": "Niall McCarroll",
            "team": "T5TCAFTA9",
            "name": "niall.mccarroll",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658710069.408479",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZNaj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One approach (perhaps equivalent to subroutines in textual code) is to be able to manually nest sub-graphs within a node.  Useful when there are different levels of abstraction perhaps.   I have seen this work quite effectively.\n\nIt may be interesting to try to partition the graph in this way automatically (using graph theory) to place highly connected components into sub-graphs."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U017GNJM021"
                ],
                "count": 1
            },
            {
                "name": "nesting_dolls",
                "users": [
                    "U017GNJM021"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U017GNJM021",
        "type": "message",
        "ts": "1658759744.045669",
        "client_msg_id": "6bef2e44-cb0e-4282-9a7d-2b6f4eced47d",
        "text": "<@UC2A2ARPT> a simple example of what I mean by auto-hide: you have nodes A,B,C,D. The connections are A-&gt;B, B-&gt;C, C-&gt;D, A-&gt;D (last one is not a typo)\n\nYou are zoomed in on B and C and cannot see their other connections. But the wire from A-&gt;D could be going over that, creating visual clutter. Auto hide might involve hiding that connection while you are zoomed in, only showing when you zoom out or pan over to D",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gada15ee32be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ada15ee32bea73f6cfe00c7e36819a68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "hamish todd",
            "display_name": "hamish todd",
            "team": "T5TCAFTA9",
            "name": "hamish.todd1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658710069.408479",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "beyO1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " a simple example of what I mean by auto-hide: you have nodes A,B,C,D. The connections are A->B, B->C, C->D, A->D (last one is not a typo)\n\nYou are zoomed in on B and C and cannot see their other connections. But the wire from A->D could be going over that, creating visual clutter. Auto hide might involve hiding that connection while you are zoomed in, only showing when you zoom out or pan over to D"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1658763299.525269",
        "client_msg_id": "000c99a8-7df9-4d03-8f46-e4b609cadc66",
        "text": "Ah, okay!\n\nI haven't seen anything that does this exactly. I have seen some VPLs play with hiding wires in other ways:\n• fading out the middle parts of wires when they aren't selected, so you just see the beginning &amp; end\n• making wires sort to the back, so at the very least they won't be covering other nodes\n• forcing nodes to be on a grid, forcing connected nodes to have some degree of adjacency, so that wires _can't_ cross other unrelated nodes and tend to be short stubby things that might not even need to be rendered in the first place\nI don't really like any of these sorts of approaches, personally.\nMy pet \"solution\" to the issue of the wiry mess in visual programming is that graph layout should be conceived as a first-class concern of the programmer, and the tools for working with wires should be _fantastic_, such that it's actually pleasing to have wires. The whole point of a visual programming system is to have wires (IMO), and the point of the wires is to convey uniquely valuable information to the programmer. So rather than hiding the wires, I'd like to see VP systems that let you _wield_ the wires to great effect (which may, in fact, include hiding them sometimes — but that should be a thing you're fully in control of, akin to—say—code folding)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658710069.408479",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wUod",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, okay!\n\nI haven't seen anything that does this exactly. I have seen some VPLs play with hiding wires in other ways:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "fading out the middle parts of wires when they aren't selected, so you just see the beginning & end"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "making wires sort to the back, so at the very least they won't be covering other nodes"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "forcing nodes to be on a grid, forcing connected nodes to have some degree of adjacency, so that wires "
                                    },
                                    {
                                        "type": "text",
                                        "text": "can't",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " cross other unrelated nodes and tend to be short stubby things that might not even need to be rendered in the first place"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don't really like any of these sorts of approaches, personally.\nMy pet \"solution\" to the issue of the wiry mess in visual programming is that graph layout should be conceived as a first-class concern of the programmer, and the tools for working with wires should be "
                            },
                            {
                                "type": "text",
                                "text": "fantastic",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", such that it's actually pleasing to have wires. The whole point of a visual programming system is to have wires (IMO), and the point of the wires is to convey uniquely valuable information to the programmer. So rather than hiding the wires, I'd like to see VP systems that let you "
                            },
                            {
                                "type": "text",
                                "text": "wield ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "the wires to great effect (which may, in fact, include hiding them sometimes — but that should be a thing you're fully in control of, akin to—say—code folding)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U017GNJM021",
                    "UML4ZEKDK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1658773020.640109",
        "client_msg_id": "1340e351-04dd-402e-9e2f-3b07c6e3c217",
        "text": "Paredit is a structural editor for lisp-like languages in Emacs, which combines well with support for scheme, clojure, &amp;c, to give you this experience. There are a couple of in-progress projects using treesitter to give similar superpowers for infix languages...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4EdFL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Paredit is a structural editor for lisp-like languages in Emacs, which combines well with support for scheme, clojure, &c, to give you this experience. There are a couple of in-progress projects using treesitter to give similar superpowers for infix languages..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01NWARGPNC",
        "type": "message",
        "ts": "1658807399.726479",
        "client_msg_id": "34db4b3a-a453-4eca-9ff5-fdec3a7505be",
        "text": "Oh hey, I came here to mention what we’re doing with splootcode but it’s already mentioned! The goal is to get all the benefit of a REPL without the downsides.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "beaca7f5eafb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-15\/1767152625025_beaca7f5eafb1b6233d0_72.png",
            "first_name": "Katie",
            "real_name": "Katie Bell",
            "display_name": "Katie Bell",
            "team": "T5TCAFTA9",
            "name": "katie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Rq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh hey, I came here to mention what we’re doing with splootcode but it’s already mentioned! The goal is to get all the benefit of a REPL without the downsides."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]