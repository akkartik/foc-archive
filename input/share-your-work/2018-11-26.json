[
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1543221151.073600",
        "client_msg_id": "1f2bc8a7-f5c0-47eb-a82a-3b558027f4f3",
        "text": "Just catching up on this interesting thread. First, <@UCKRZS3DZ> - I liked the article - the chaos\/order balance seems to reappear in many forms.\n\n<@UE6EFEPTQ> - to see the threads in full width instead of the right panel, try the 'All Threads' link in the left pane?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vHWB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just catching up on this interesting thread. First, "
                            },
                            {
                                "type": "user",
                                "user_id": "UCKRZS3DZ"
                            },
                            {
                                "type": "text",
                                "text": " - I liked the article - the chaos\/order balance seems to reappear in many forms.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " - to see the threads in full width instead of the right panel, try the 'All Threads' link in the left pane?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543221206.073800",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1543221977.000000"
        },
        "client_msg_id": "7ced92e7-c245-4318-a655-48c1675d9525",
        "text": "1. You need to describe not just the system but the environment it is expected to operate in. That can get complex, because you may need to create arbitrarily detailed models for slices of the world\/universe, depending on what your program does. There's already a fairly decent way we communicate models of the world to each other. It's called language. (While a picture can convey a thousand words, pictures are usually used in fairly narrow ways established by convention (like maps). For describing arbitrary situations, language and text are unparalleled in their breadth and applicability.)\n\n2. How do you ensure the image\/knowledge\/documentation stays up to date? There's one sorta decent way we know to do this: it's called tests. This is meta code about the program that runs before committing any change; it ensures that the various 'descriptions' of the system are all in sync and internally consistent. (You could also do this with formal methods; perhaps that was what you were referring to as \"constraints described in structured documentation\"?[1] I'm not aware of broadly applicable systems for theorem proving that do this. But I'm not an expert in this area.)\n\n[1] If they're structured and automatically checked, I'd rather not call them \"documentation\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+rus",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "1. You need to describe not just the system but the environment it is expected to operate in. That can get complex, because you may need to create arbitrarily detailed models for slices of the world\/universe, depending on what your program does. There's already a fairly decent way we communicate models of the world to each other. It's called language. (While a picture can convey a thousand words, pictures are usually used in fairly narrow ways established by convention (like maps). For describing arbitrary situations, language and text are unparalleled in their breadth and applicability.)\n\n2. How do you ensure the image\/knowledge\/documentation stays up to date? There's one sorta decent way we know to do this: it's called tests. This is meta code about the program that runs before committing any change; it ensures that the various 'descriptions' of the system are all in sync and internally consistent. (You could also do this with formal methods; perhaps that was what you were referring to as \"constraints described in structured documentation\"?[1] I'm not aware of broadly applicable systems for theorem proving that do this. But I'm not an expert in this area.)\n\n[1] If they're structured and automatically checked, I'd rather not call them \"documentation\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1543221241.074000",
        "client_msg_id": "c87ffd39-18b1-4550-8b56-fa32a1318a31",
        "text": "Thanks. Seems like I need to expand this article more. More details and specific examples.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "458nq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks. Seems like I need to expand this article more. More details and specific examples."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543222017.074500",
        "client_msg_id": "bb8ceb9b-54b9-40d8-9252-f1a47cd4f35e",
        "text": "My concern is that these side threads are off the main channels and perhaps less visible to other potential contributors. Especially since all the meat of discussion happens here. My proposal is a new channel dedicated to discussing the future and nature of programming, without side threads.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GNK81",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My concern is that these side threads are off the main channels and perhaps less visible to other potential contributors. Especially since all the meat of discussion happens here. My proposal is a new channel dedicated to discussing the future and nature of programming, without side threads."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543222060.074700",
        "client_msg_id": "009971f7-4d8c-4868-91ce-79b98b60695d",
        "text": "Can I create a poll? :nerd_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jNx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can I create a poll? "
                            },
                            {
                                "type": "emoji",
                                "name": "nerd_face",
                                "unicode": "1f913"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1543222736.074900",
        "client_msg_id": "0ef2654b-9003-440c-b07c-08e3c27f07fe",
        "text": "Now onto the meaty stuff:\n\nIn general I agree with <@UE6EFEPTQ> about state - it absolutely needs to be a first class citizen. It's not just about being easier to start with, but everything we use the computer for involves state - our 'final goals' are state oriented. E.g. 'send person X a message Y', 'find my picture from yesterday, remove red-eye', 'move $X from my account to my friend' and so on - things have name, state, mutation, history etc. I'm not saying mathematical functions are not useful - but that we have to start with state and then incorporate the functional transforms. E.g. if we have an object with name N, we could consider its transformation somewhat mathematically. The transform definition (~function) itself could be considered another stateful object with history and could live in the same world as the objects it mutates - rather than in an outside world.\n\nI also agree with <@U5TCAFTD3> that IO is an implementation. Really this problem only appears if you first slice your system into programs because 'IO' is just messages leaving or entering your program. While if you look at the whole system, the only IO is what leaves the system, everything else is just messaging at the 'boundary of two subsystems' as Roly said? Orthogonal persistence also shares the idea that IO is an implementation.\n\nRe comrehensibility of large systems, I feel what's most useful is inspectability - the ability to ask the system specific questions - ask what is connected to what; what behavior will change when you change something etc. Any model - OO\/FP whatever will fail at scale because mental simulation wont scale up way. We already have some querying capability - source control tells us what files changed when, databases tell us what data changed, tracing\/logging tells us sequences of some events, build systems can be queried for dependencies etc. But all of these are ad hoc and compose so poorly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZTP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now onto the meaty stuff:\n\nIn general I agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " about state - it absolutely needs to be a first class citizen. It's not just about being easier to start with, but everything we use the computer for involves state - our 'final goals' are state oriented. E.g. 'send person X a message Y', 'find my picture from yesterday, remove red-eye', 'move $X from my account to my friend' and so on - things have name, state, mutation, history etc. I'm not saying mathematical functions are not useful - but that we have to start with state and then incorporate the functional transforms. E.g. if we have an object with name N, we could consider its transformation somewhat mathematically. The transform definition (~function) itself could be considered another stateful object with history and could live in the same world as the objects it mutates - rather than in an outside world.\n\nI also agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " that IO is an implementation. Really this problem only appears if you first slice your system into programs because 'IO' is just messages leaving or entering your program. While if you look at the whole system, the only IO is what leaves the system, everything else is just messaging at the 'boundary of two subsystems' as Roly said? Orthogonal persistence also shares the idea that IO is an implementation.\n\nRe comrehensibility of large systems, I feel what's most useful is inspectability - the ability to ask the system specific questions - ask what is connected to what; what behavior will change when you change something etc. Any model - OO\/FP whatever will fail at scale because mental simulation wont scale up way. We already have some querying capability - source control tells us what files changed when, databases tell us what data changed, tracing\/logging tells us sequences of some events, build systems can be queried for dependencies etc. But all of these are ad hoc and compose so poorly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543224338.076700",
        "client_msg_id": "a6322e60-b85f-403f-867d-5e68f16ff969",
        "text": "I just got my current side project to some sort of minor milestone, and redid its documentation from the ground up. Comments most appreciated: <https:\/\/github.com\/akkartik\/mu\/tree\/master\/subx#readme>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V+Pk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just got my current side project to some sort of minor milestone, and redid its documentation from the ground up. Comments most appreciated: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu\/tree\/master\/subx#readme"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3",
                    "UDYGH7K8V",
                    "UBAP530VB",
                    "U8A5MS6R1"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1543224998.076800",
        "client_msg_id": "ebb5a1fa-73e9-44dd-9cf7-c2963cef08db",
        "text": "I don't have clear understanding what I'm describing either.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543012054.056800",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sHg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't have clear understanding what I'm describing either."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543225378.077100",
        "client_msg_id": "53524474-99a1-4223-8925-3ac5b6c7fda9",
        "text": "<@U8A5MS6R1> :+1::blush:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UhNh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            },
                            {
                                "type": "emoji",
                                "name": "blush",
                                "unicode": "1f60a"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543225625.077300",
        "client_msg_id": "6d30ffd9-ae32-4bfc-abff-2dea9902fa03",
        "text": "And I\/O and state are related in the sense that the types (shapes or match-patterns) of state are only meaningful if there's I\/O. Which means the value of the system becomes \"transformation between types\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HOa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I\/O and state are related in the sense that the types (shapes or match-patterns) of state are only meaningful if there's I\/O. Which means the value of the system becomes \"transformation between types\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1543227649.077500",
        "client_msg_id": "ef442179-035a-4501-9263-03d36e9272ec",
        "text": "I feel like a broken record at this point but I feel I should mention that everything <@U8A5MS6R1> just said about systems represented by state undergoing functional transformations, and I\/O as messages to\/from the outside world, is expressed directly by the *actor model*. If that's how you want to represent systems, this is probably the model you want.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NePmb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel like a broken record at this point but I feel I should mention that everything "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " just said about systems represented by state undergoing functional transformations, and I\/O as messages to\/from the outside world, is expressed directly by the "
                            },
                            {
                                "type": "text",
                                "text": "actor model",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". If that's how you want to represent systems, this is probably the model you want."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDYGH7K8V",
        "type": "message",
        "ts": "1543240463.079200",
        "client_msg_id": "8728c3ab-ffb6-4773-95ed-78e1c27549f3",
        "text": "<http:\/\/www.dlederle.com\/2018\/11\/25\/reading-programs.html>\n\nShort post I put together this weekend reading through Donald Knuth’s notes on one of the very earliest compilers (~1953). Might be of interest to some folks here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g961f7cede00",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2961f7cede00f96aa9442898d24a5c4e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "Dylan",
            "real_name": "Dylan Lederle-Ensign",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dylan.lederle.ensign",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543240463.079200",
        "reply_count": 5,
        "reply_users_count": 2,
        "latest_reply": "1543462948.106700",
        "reply_users": [
            "UCUSW7WVD",
            "UDYGH7K8V"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1543245423.079900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543246119.080100"
            },
            {
                "user": "UDYGH7K8V",
                "ts": "1543247252.080300"
            },
            {
                "user": "UDYGH7K8V",
                "ts": "1543247263.080500"
            },
            {
                "user": "UDYGH7K8V",
                "ts": "1543462948.106700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Dylan Lederle-Ensign",
                "title": "Reading Programs with Donald Knuth",
                "title_link": "http:\/\/www.dlederle.com\/2018\/11\/25\/reading-programs.html",
                "text": "I believe that the time is ripe for significantly better documentation of programs, and that we can best achieve this by considering programs to be works of literature",
                "fallback": "Dylan Lederle-Ensign: Reading Programs with Donald Knuth",
                "image_url": "http:\/\/dlederle.com\/images\/knuth-notes.png",
                "ts": 1543104000,
                "from_url": "http:\/\/www.dlederle.com\/2018\/11\/25\/reading-programs.html",
                "image_width": 2382,
                "image_height": 250,
                "image_bytes": 570208,
                "id": 1,
                "original_url": "http:\/\/www.dlederle.com\/2018\/11\/25\/reading-programs.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eq=Di",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/www.dlederle.com\/2018\/11\/25\/reading-programs.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nShort post I put together this weekend reading through Donald Knuth’s notes on one of the very earliest compilers (~1953). Might be of interest to some folks here."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UAL7940NM"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U85MWBKEY",
        "type": "message",
        "ts": "1543241688.079600",
        "client_msg_id": "ca539569-ed5f-43a9-aa71-59f247be7147",
        "text": "Hey all -- We've gotten super focussed on using Optic to auto-document APIs and then provide autocomplete and compile-time feedback for API Requests. I think we can remove most of the friction between getting systems to communicate if systems are able to negotiate these more sophisticated contracts on their own w\/o the need for humans or documentation.\n\nI've gotten to see a ton of backends the last month as we've been pivoting to this new use case and I stumbled upon a really interesting trend in larger codebases: there's no one way to model data types.\n\nOne team was using Scala on the backend and they had case classes that represented each of their models, JSON Schemas for validation, MongoDB schemas to setup their tables and Play JSON schema validators that ran on the request body. On the JS frontends they had Ducktypes for each model, in Typescript they had interfaces, and on iOS they were using Swift Classes for each model. Oh and they maintain a Swagger Spec &amp; Raml Spec which duplicates all of this again...\n\nThat's at least 8 different representations of essentially the same information. Some of the differences affect syntax, like in JSON Schema it's `type: 'string'` while Ducktypes are `type: String`. Others are more functional -- like in MongoDB there's a notion of indices that are important for the domain of databases, but that's not important for the purposes of validating an object so folks like JSON Schema don't support it.\n\nAnyway they had 44 models so imagine the wasted time and headache. This whole thing came up because we were setting up Optic to read their backend and I had to ask which one of these representations was supposed to be the source of truth.\n\nCurious if A) you see this as a problem and B) how you might go about solving it. Hope this spawns some interesting ideas here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "88eacb7e65ed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-08\/681438296241_88eacb7e65edebc579ab_72.jpg",
            "first_name": "Aidan",
            "real_name": "Aidan Cunniffe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "acunniffe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543241688.079600",
        "reply_count": 15,
        "reply_users_count": 6,
        "latest_reply": "1543850871.002400",
        "reply_users": [
            "UCUSW7WVD",
            "U85MWBKEY",
            "U6KQ2S410",
            "U8A5MS6R1",
            "UC21F8Q48",
            "UC6997THT"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1543248457.080800"
            },
            {
                "user": "U85MWBKEY",
                "ts": "1543250194.084500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543252793.084700"
            },
            {
                "user": "U85MWBKEY",
                "ts": "1543263591.085400"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1543331039.094000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1543339770.094600"
            },
            {
                "user": "U85MWBKEY",
                "ts": "1543346305.101000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1543351551.101500"
            },
            {
                "user": "U85MWBKEY",
                "ts": "1543382791.105600"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1543422318.106000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543423734.106300"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1543615490.000600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543629316.000800"
            },
            {
                "user": "UC6997THT",
                "ts": "1543767865.001300"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1543850871.002400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1K=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey all -- We've gotten super focussed on using Optic to auto-document APIs and then provide autocomplete and compile-time feedback for API Requests. I think we can remove most of the friction between getting systems to communicate if systems are able to negotiate these more sophisticated contracts on their own w\/o the need for humans or documentation.\n\nI've gotten to see a ton of backends the last month as we've been pivoting to this new use case and I stumbled upon a really interesting trend in larger codebases: there's no one way to model data types.\n\nOne team was using Scala on the backend and they had case classes that represented each of their models, JSON Schemas for validation, MongoDB schemas to setup their tables and Play JSON schema validators that ran on the request body. On the JS frontends they had Ducktypes for each model, in Typescript they had interfaces, and on iOS they were using Swift Classes for each model. Oh and they maintain a Swagger Spec & Raml Spec which duplicates all of this again...\n\nThat's at least 8 different representations of essentially the same information. Some of the differences affect syntax, like in JSON Schema it's "
                            },
                            {
                                "type": "text",
                                "text": "type: 'string'",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " while Ducktypes are "
                            },
                            {
                                "type": "text",
                                "text": "type: String",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Others are more functional -- like in MongoDB there's a notion of indices that are important for the domain of databases, but that's not important for the purposes of validating an object so folks like JSON Schema don't support it.\n\nAnyway they had 44 models so imagine the wasted time and headache. This whole thing came up because we were setting up Optic to read their backend and I had to ask which one of these representations was supposed to be the source of truth.\n\nCurious if A) you see this as a problem and B) how you might go about solving it. Hope this spawns some interesting ideas here."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543245423.079900",
        "client_msg_id": "ee91f582-00b5-4caa-842c-ac223577c247",
        "text": "This was great!! A couple of years ago I asked:\n\n&gt; If you have spent time reading somebody else's literate programs, I want to hear about your experiences.\n(<http:\/\/akkartik.name\/post\/literate-programming>)\n\nAs you point out, this is a useful example even though the program isn't literate. Your point about needing to run programs to read them also gets thunderous agreement from me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543240463.079200",
        "parent_user_id": "UDYGH7K8V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j4D1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This was great!! A couple of years ago I asked:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you have spent time reading somebody else's literate programs, I want to hear about your experiences."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/literate-programming"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nAs you point out, this is a useful example even though the program isn't literate. Your point about needing to run programs to read them also gets thunderous agreement from me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543246119.080100",
        "client_msg_id": "02615358-6233-4a53-9eda-802865f81466",
        "text": "There's a little description of Luis Trabb Pardo at <https:\/\/news.ycombinator.com\/item?id=8303318>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543240463.079200",
        "parent_user_id": "UDYGH7K8V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LX962",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a little description of Luis Trabb Pardo at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=8303318"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDYGH7K8V",
        "type": "message",
        "ts": "1543247252.080300",
        "client_msg_id": "510de06c-8f3c-4827-8ccd-5cb6c1faafbb",
        "text": "Oooh, thanks for the pointer on Trabb Pardo\n&gt; Luis and Les Earnest spun off Imagen\n\nUnrelated to this I was emailing Les Earnest last month. I’ll ask him if he knows any more.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g961f7cede00",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2961f7cede00f96aa9442898d24a5c4e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "Dylan",
            "real_name": "Dylan Lederle-Ensign",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dylan.lederle.ensign",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543240463.079200",
        "parent_user_id": "UDYGH7K8V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nBFyi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oooh, thanks for the pointer on Trabb Pardo"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Luis and Les Earnest spun off Imagen"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nUnrelated to this I was emailing Les Earnest last month. I’ll ask him if he knows any more."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDYGH7K8V",
        "type": "message",
        "ts": "1543247263.080500",
        "client_msg_id": "1eb3c2ba-5fcf-4433-a790-7f5a6ece8d23",
        "text": "cool looking post, I’ll check it out",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g961f7cede00",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2961f7cede00f96aa9442898d24a5c4e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "Dylan",
            "real_name": "Dylan Lederle-Ensign",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dylan.lederle.ensign",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543240463.079200",
        "parent_user_id": "UDYGH7K8V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y5r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "cool looking post, I’ll check it out"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543248457.080800",
        "client_msg_id": "85e7a788-2299-419f-b4dc-ec8e846ac866",
        "text": "I've seen it a bit, but the problem seems to have really metastasized in this particular codebase. More common, I think, is 2-way duplication, say between a database migration and an ORM model definition. At that scale it's undesirable, but not too debilitating.\n\nA related pattern I've seen: the same data getting multiple, subtly different schemas as it passes through multiple systems owned by different teams. Conway's Law strikes again. Did your example involve multiple teams\/zones of ownership?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543241688.079600",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oiMjQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've seen it a bit, but the problem seems to have really metastasized in this particular codebase. More common, I think, is 2-way duplication, say between a database migration and an ORM model definition. At that scale it's undesirable, but not too debilitating.\n\nA related pattern I've seen: the same data getting multiple, subtly different schemas as it passes through multiple systems owned by different teams. Conway's Law strikes again. Did your example involve multiple teams\/zones of ownership?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85MWBKEY",
        "type": "message",
        "ts": "1543250194.084500",
        "client_msg_id": "277BF0CA-E4CB-41A6-BE4E-669A2F70FCE4",
        "text": "Yeah this one definitely seemed to be of a different level of severity. The team has high turnover and splits up responsibility. They have also adopted many new technologies along the way as the project has grown. \n\nOn your second point — what are some of the drivers for the subtly different schemes? Is data being omitted \/ included or do things just fall out of alignment over the years?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "88eacb7e65ed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-08\/681438296241_88eacb7e65edebc579ab_72.jpg",
            "first_name": "Aidan",
            "real_name": "Aidan Cunniffe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "acunniffe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543241688.079600",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s4zD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah this one definitely seemed to be of a different level of severity. The team has high turnover and splits up responsibility. They have also adopted many new technologies along the way as the project has grown. \n\nOn your second point — what are some of the drivers for the subtly different schemes? Is data being omitted \/ included or do things just fall out of alignment over the years?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543252793.084700",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1543253808.000000"
        },
        "client_msg_id": "af915154-cc75-4cd4-9fa7-bdf5f10bb574",
        "text": "It was at Google, where data modeling happened using Protocol Buffers. Proto definitions would commonly expand to a hundred fields, all optional. So one often couldn't look at another team's proto definition and easily deduce the constraints, such as which fields had to exist together or be used disjointedly. Worse, old constraints would often be broken for the next feature so you often learned not to rely on them even in your own team's protos. So teams would be paranoid and do their own data validation, and each team's rules would be subtly different for the same data in different phases of processing. It was impossible to tell if a discrepancy between phases was a bug, or the validation truly needed to be different between phases. So we'd end up treating the whole thing as a can of worms and not dig too deeply into what other teams were doing.\n\nAll this led to the meme\/lament that programming consisted of just translating between protos.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543241688.079600",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kS6x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It was at Google, where data modeling happened using Protocol Buffers. Proto definitions would commonly expand to a hundred fields, all optional. So one often couldn't look at another team's proto definition and easily deduce the constraints, such as which fields had to exist together or be used disjointedly. Worse, old constraints would often be broken for the next feature so you often learned not to rely on them even in your own team's protos. So teams would be paranoid and do their own data validation, and each team's rules would be subtly different for the same data in different phases of processing. It was impossible to tell if a discrepancy between phases was a bug, or the validation truly needed to be different between phases. So we'd end up treating the whole thing as a can of worms and not dig too deeply into what other teams were doing.\n\nAll this led to the meme\/lament that programming consisted of just translating between protos."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1543255123.085200",
        "client_msg_id": "2d709641-1f4b-4eaf-b73a-7681cd62e035",
        "text": "Yes I do like the actor model. But it is very underspecified. E.g. how exactly do you specify the state and the transformation? What is the machinery inside and actor? Do they share  predefined language of messages? How is that defined? Do you program these one at a time or do you have knobs to affect groups of these actors? Can you specify cross actor constraints? How does naming and versioning work? etc.\n\nOne thing I forgot to bring up is this: do we think a single model is sufficient\/best to do all programming? Can we have multiple models of the exact same state\/process? Can we use any of these to program the system?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/twQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes I do like the actor model. But it is very underspecified. E.g. how exactly do you specify the state and the transformation? What is the machinery inside and actor? Do they share  predefined language of messages? How is that defined? Do you program these one at a time or do you have knobs to affect groups of these actors? Can you specify cross actor constraints? How does naming and versioning work? etc.\n\nOne thing I forgot to bring up is this: do we think a single model is sufficient\/best to do all programming? Can we have multiple models of the exact same state\/process? Can we use any of these to program the system?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85MWBKEY",
        "type": "message",
        "ts": "1543263591.085400",
        "client_msg_id": "e695fb91-c5c8-44ea-8b32-5c0ee9a8036c",
        "text": "Wow that's a really interesting experience. I have yet to see any modeling language that handles correlated fields well. Even in Swagger's Spec for API Specs they often say \"only set content-type if 'X' is not specified\"\n\nI guess the danger of writing all that down is that it tied very heavily on business logic which might change independently of the spec.\n\nI'm having trouble envisioning how one would learn the structure of those Protobuffs without a lot of trial and error.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "88eacb7e65ed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-08\/681438296241_88eacb7e65edebc579ab_72.jpg",
            "first_name": "Aidan",
            "real_name": "Aidan Cunniffe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "acunniffe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543241688.079600",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=JB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow that's a really interesting experience. I have yet to see any modeling language that handles correlated fields well. Even in Swagger's Spec for API Specs they often say \"only set content-type if 'X' is not specified\"\n\nI guess the danger of writing all that down is that it tied very heavily on business logic which might change independently of the spec.\n\nI'm having trouble envisioning how one would learn the structure of those Protobuffs without a lot of trial and error."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1543276022.085900",
        "client_msg_id": "011ae565-4e94-4904-939f-48eecfdccc85",
        "text": "Yeah, the actor model is merely a foundation to build upon, not a comprehensive solution.\nI'm not sure about the utility of multiple models.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542958731.034300",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0reQV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, the actor model is merely a foundation to build upon, not a comprehensive solution.\nI'm not sure about the utility of multiple models."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]