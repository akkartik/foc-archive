[
    {
        "text": "I seem to have renewed my collaboration for a tablet-friendly programming environment. For the current version (<https:\/\/love2d.org\/forums\/viewtopic.php?t=94852>), my partner led and pushed for preserving LÖVE primitives. For example, the LÖVE event loop calls functions you define called `love.draw`, `love.keypressed`, etc., and it seems desirable to continue to support those for familiarity's sake. This can seem impossible if the environment is also built in LÖVE and uses those same functions for providing its infrastructure, but since Lua is a dynamic environment there are tricks to make it work reasonably nicely.\n\nLately I've been taking the lead on a riff of that project, and I find I'm advocating strongly to _not_ do this. I want to define new handlers like `shell.draw` and `shell.keypressed` that programs within my environment will have to call. And I finally figured out why I feel so strongly about this:\n1. LÖVE has a function to return the bounds of the device\/window. You typically can draw between x coordinates 0 and some width. And this information is often used to draw UI elements near the edges and corners. So should we now override functions like `line` to adjust coordinates and keep them in the client area? There's a lot of surface area to cover here. Bugs will inevitably happen, and when they do our attempts to create a seamless abstraction will cause more confusion.\n2. Ranting more broadly, the desire for a \"seamless experience\" is a disease. The provider wants to \"own the customer relationship,\" so that the user can forget there's anything in the universe but themselves and the app. Just like a casino. I'd rather not pretend we can wish the universe away with its possibility of errors. Let's me and the user treat each other as grown-ups, and not hide irreducible complexity in our supply chains. Here are the functions I provide, here are the functions LÖVE provides. I recommend you use my stuff where possible, but you don't have to. Yes, it's confusing. Welcome.",
        "files": [
            {
                "id": "F065TCK9XS9",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EF2Ti",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I seem to have renewed my collaboration for a tablet-friendly programming environment. For the current version ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/love2d.org\/forums\/viewtopic.php?t=94852"
                            },
                            {
                                "type": "text",
                                "text": "), my partner led and pushed for preserving LÖVE primitives. For example, the LÖVE event loop calls functions you define called "
                            },
                            {
                                "type": "text",
                                "text": "love.draw",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "love.keypressed",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", etc., and it seems desirable to continue to support those for familiarity's sake. This can seem impossible if the environment is also built in LÖVE and uses those same functions for providing its infrastructure, but since Lua is a dynamic environment there are tricks to make it work reasonably nicely.\n\nLately I've been taking the lead on a riff of that project, and I find I'm advocating strongly to "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " do this. I want to define new handlers like "
                            },
                            {
                                "type": "text",
                                "text": "shell.draw",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "shell.keypressed",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that programs within my environment will have to call. And I finally figured out why I feel so strongly about this:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "LÖVE has a function to return the bounds of the device\/window. You typically can draw between x coordinates 0 and some width. And this information is often used to draw UI elements near the edges and corners. So should we now override functions like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "line",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " to adjust coordinates and keep them in the client area? There's a lot of surface area to cover here. Bugs will inevitably happen, and when they do our attempts to create a seamless abstraction will cause more confusion."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Ranting more broadly, the desire for a \"seamless experience\" is a disease. The provider wants to \"own the customer relationship,\" so that the user can forget there's anything in the universe but themselves and the app. Just like a casino. I'd rather not pretend we can wish the universe away with its possibility of errors. Let's me and the user treat each other as grown-ups, and not hide irreducible complexity in our supply chains. Here are the functions I provide, here are the functions LÖVE provides. I recommend you use my stuff where possible, but you don't have to. Yes, it's confusing. Welcome."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1700066455.619009",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1700066882.000000"
        },
        "client_msg_id": "f6ac55d3-9471-4a93-843a-a509a01033e7",
        "thread_ts": "1700066455.619009",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1700287267.729549",
        "reply_users": [
            "UJBAJNFLK",
            "UFEQUBNNT",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1700116864.029719"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1700200715.519059"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1700232243.122339"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1700250762.494819"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1700287267.729549"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U03R0B9U1GD",
                    "U05UBCXHWM6",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1700116864.029719",
        "client_msg_id": "6d7b745c-2ebc-460b-a189-44bd434c19b4",
        "text": "The eternal issue of leaky abstractions (which in software means _any_ abstraction). Either you restrict your universe to the point that the leaks become irrelevant, or you live with the leaks. The second path involves more suffering but also more power to its adepts.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700066455.619009",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8gUGM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The eternal issue of leaky abstractions (which in software means "
                            },
                            {
                                "type": "text",
                                "text": "any",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " abstraction). Either you restrict your universe to the point that the leaks become irrelevant, or you live with the leaks. The second path involves more suffering but also more power to its adepts."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]