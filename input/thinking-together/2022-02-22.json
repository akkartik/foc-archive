[
    {
        "user": "U014WA16VNJ",
        "type": "message",
        "ts": "1645536490.028859",
        "client_msg_id": "cb649005-8de9-4e56-b880-3bc4a916a9c9",
        "text": "<@U02JDAYKW7J> I feel there’s a lot of truth to this actually. It’s kinda what I’m trying to get at. And it is a key distinction between provenance and its inverse. Provenance is about ‘immutable’ _values,_ reasoning about possible futures\/process\/transformation requires something like a notion of state. At the very least, reasoning about these things requires us to include the environment and context, where provenance can largely ignore any context that isn’t deemed important for provenance. The opposite is true in this case, as the _entire_ environment must be considered because we can’t know ahead of time what may influence it or what may be important.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "808c371ba009",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-15\/7281936611971_808c371ba00918560d75_72.jpg",
            "first_name": "Orion",
            "real_name": "Orion Reed",
            "display_name": "Orion Reed",
            "team": "T5TCAFTA9",
            "name": "orionreedt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645278659.673989",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zehFj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02JDAYKW7J"
                            },
                            {
                                "type": "text",
                                "text": " I feel there’s a lot of truth to this actually. It’s kinda what I’m trying to get at. And it is a key distinction between provenance and its inverse. Provenance is about ‘immutable’ "
                            },
                            {
                                "type": "text",
                                "text": "values, ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "reasoning about possible futures\/process\/transformation requires something like a notion of state. At the very least, reasoning about these things requires us to include the environment and context, where provenance can largely ignore any context that isn’t deemed important for provenance. The opposite is true in this case, as the "
                            },
                            {
                                "type": "text",
                                "text": "entire ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "environment must be considered because we can’t know ahead of time what may influence it or what may be important."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1645547960.982719",
        "client_msg_id": "E626990A-6837-4BEF-9EB2-959DDD10C1AA",
        "text": "Given that text only has symbolic meaning (unless you're specifically doing, like, error messages? Generative fiction?) I think the shade thrown on symbolic representation is light on substance.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645456763.075959",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7WV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Given that text only has symbolic meaning (unless you're specifically doing, like, error messages? Generative fiction?) I think the shade thrown on symbolic representation is light on substance."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U016VUZGUUQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1645551970.198989",
        "client_msg_id": "43b73163-bae5-4d83-932d-11e286c37441",
        "text": "It has an existing meaning in finance that you might need to overload, but I would go with prospectus.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645278659.673989",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n=T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It has an existing meaning in finance that you might need to overload, but I would go with prospectus."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1645552547.185509",
        "client_msg_id": "8419d216-f222-4abb-8dab-fe68aa4dee58",
        "text": "Yeah, I feel like Patrick had a good idea and expressed it badly. He's looking for examples where the visual interface looks like the thing it is modelling, and the spatial relationships model relationships in the modeled world. Programming using a map instead of a diagram. It's an issue I have with Blockly, that the two dimensional space is available, but not meaningful, and when it is meaningful the meaning is opaque, and we would be better off without it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645456763.075959",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ry4DK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I feel like Patrick had a good idea and expressed it badly. He's looking for examples where the visual interface looks like the thing it is modelling, and the spatial relationships model relationships in the modeled world. Programming using a map instead of a diagram. It's an issue I have with Blockly, that the two dimensional space is available, but not meaningful, and when it is meaningful the meaning is opaque, and we would be better off without it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "+1::skin-tone-5",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U014WA16VNJ",
        "type": "message",
        "ts": "1645553705.079219",
        "edited": {
            "user": "U014WA16VNJ",
            "ts": "1645554039.000000"
        },
        "client_msg_id": "5e40374f-ba72-4130-a449-611b736cc1cc",
        "text": "I’d really love to know if anyone knows of literature on _generating examples_ in mathematically robust ways. It’s hard to search for literature on this because of how Google interprets the query. I know there’s work here in formal language theory, as it’s usually straightforward to generate a sentence given a formal grammar. But I really want to know what work has been done in a more general context of mathematical structures.\n\nQuestions like ” what is the simplest example of structure X” or “smallest example that can be differentiated from the others” or “simplest counter-example”. I know there’s work on example-driven programming and the like, which I assume would have some relevance, but I’ve had no luck finding much. I just have to assume that this is a question that some mathematicians somewhere have asked before.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "808c371ba009",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-15\/7281936611971_808c371ba00918560d75_72.jpg",
            "first_name": "Orion",
            "real_name": "Orion Reed",
            "display_name": "Orion Reed",
            "team": "T5TCAFTA9",
            "name": "orionreedt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "reply_count": 15,
        "reply_users_count": 8,
        "latest_reply": "1645778298.211919",
        "reply_users": [
            "U014WA16VNJ",
            "UQ706GB9U",
            "UGWUJUZHT",
            "U016VUZGUUQ",
            "U02U0AS3J49",
            "UKJGU23KP",
            "UJBAJNFLK",
            "UFEQUBNNT"
        ],
        "replies": [
            {
                "user": "U014WA16VNJ",
                "ts": "1645553713.253719"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1645554089.612259"
            },
            {
                "user": "U014WA16VNJ",
                "ts": "1645554178.087529"
            },
            {
                "user": "U014WA16VNJ",
                "ts": "1645554273.552049"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1645554393.697999"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1645558506.900199"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1645574891.724909"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1645630152.475949"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1645634234.034139"
            },
            {
                "user": "U014WA16VNJ",
                "ts": "1645635870.066779"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1645687334.914769"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1645689690.499889"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1645689810.737829"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1645758686.983149"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1645778298.211919"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "26adx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’d really love to know if anyone knows of literature on "
                            },
                            {
                                "type": "text",
                                "text": "generating examples ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "in mathematically robust ways. It’s hard to search for literature on this because of how Google interprets the query. I know there’s work here in formal language theory, as it’s usually straightforward to generate a sentence given a formal grammar. But I really want to know what work has been done in a more general context of mathematical structures.\n\nQuestions like ” what is the simplest example of structure X” or “smallest example that can be differentiated from the others” or “simplest counter-example”. I know there’s work on example-driven programming and the like, which I assume would have some relevance, but I’ve had no luck finding much. I just have to assume that this is a question that some mathematicians somewhere have asked before."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U014WA16VNJ",
        "type": "message",
        "ts": "1645553713.253719",
        "client_msg_id": "d9ea077a-0298-4ad1-9849-be1a6a663ba5",
        "text": "Also, there was a talk I watched ages ago, don’t remember the context, it demonstrated a system that automatically generated the smallest possible example of an input that would break a test. I think it was probably from the functional programming folks and may have been in the context of its type system. It was super neat. Does anyone know what I’m talking about and where I might find it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "808c371ba009",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-15\/7281936611971_808c371ba00918560d75_72.jpg",
            "first_name": "Orion",
            "real_name": "Orion Reed",
            "display_name": "Orion Reed",
            "team": "T5TCAFTA9",
            "name": "orionreedt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a7b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, there was a talk I watched ages ago, don’t remember the context, it demonstrated a system that automatically generated the smallest possible example of an input that would break a test. I think it was probably from the functional programming folks and may have been in the context of its type system. It was super neat. Does anyone know what I’m talking about and where I might find it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U02028JHX37"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1645554089.612259",
        "client_msg_id": "baca5392-59a6-414c-acec-4fa2ca15c560",
        "text": "is this for testing? you might find a something with <https:\/\/en.wikipedia.org\/wiki\/QuickCheck|quickcheck> or its related research.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZSZZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "is this for testing? you might find a something with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/QuickCheck",
                                "text": "quickcheck"
                            },
                            {
                                "type": "text",
                                "text": " or its related research."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1645554094.254419",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1645554111.000000"
        },
        "client_msg_id": "aaa4492e-afe0-43ec-9236-a202b3bad64a",
        "text": "There are ways to represent things symbolically but in ways that make much better use of the visual channel. It's not an either\/or, or a single dimension. My personal view is that symbolic representation is good, but we deserve _amazing_ symbols used in powerful ways. No current visual programming system does a good job of this. Most of them don't even bother introducing their own symbolic meanings — they just put text in boxes, use color or shape to represent type information, and are exactly as static as textual languages. Shame.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645456763.075959",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B=j\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are ways to represent things symbolically but in ways that make much better use of the visual channel. It's not an either\/or, or a single dimension. My personal view is that symbolic representation is good, but we deserve "
                            },
                            {
                                "type": "text",
                                "text": "amazing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " symbols used in powerful ways. No current visual programming system does a good job of this. Most of them don't even bother introducing their own symbolic meanings — they just put text in boxes, use color or shape to represent type information, and are exactly as static as textual languages. Shame."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U016VUZGUUQ",
                    "U02028JHX37",
                    "UML4ZEKDK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U014WA16VNJ",
        "type": "message",
        "ts": "1645554178.087529",
        "client_msg_id": "29727c7f-b929-4862-a6ae-e5b70d1a9204",
        "text": "Not for testing, looking for theoretical work as the question is relevant to my current research. QuickCheck might be what I saw before! I’ll check it out.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "808c371ba009",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-15\/7281936611971_808c371ba00918560d75_72.jpg",
            "first_name": "Orion",
            "real_name": "Orion Reed",
            "display_name": "Orion Reed",
            "team": "T5TCAFTA9",
            "name": "orionreedt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kYG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not for testing, looking for theoretical work as the question is relevant to my current research. QuickCheck might be what I saw before! I’ll check it out."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U014WA16VNJ",
        "type": "message",
        "ts": "1645554273.552049",
        "client_msg_id": "08069590-1986-40c1-824b-d9cf106b6fb8",
        "text": "From the QuickCheck wiki:\n&gt; assertions are written about logical properties that a <https:\/\/en.wikipedia.org\/wiki\/Subroutine|function> should fulfill. Then QuickCheck attempts to generate a test case that <https:\/\/en.wikipedia.org\/wiki\/Falsifiability|falsifies> such assertions. Once such a test case is found, QuickCheck tries to reduce it to a minimal failing subset by removing or simplifying input data\ntotally in line with the stuff I’m looking for, thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "808c371ba009",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-15\/7281936611971_808c371ba00918560d75_72.jpg",
            "first_name": "Orion",
            "real_name": "Orion Reed",
            "display_name": "Orion Reed",
            "team": "T5TCAFTA9",
            "name": "orionreedt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5\/Dxq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From the QuickCheck wiki:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "assertions are written about logical properties that a "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Subroutine",
                                "text": "function"
                            },
                            {
                                "type": "text",
                                "text": " should fulfill. Then QuickCheck attempts to generate a test case that "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Falsifiability",
                                "text": "falsifies"
                            },
                            {
                                "type": "text",
                                "text": " such assertions. Once such a test case is found, QuickCheck tries to reduce it to a minimal failing subset by removing or simplifying input data"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\ntotally in line with the stuff I’m looking for, thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1645554393.697999",
        "client_msg_id": "e8883472-f041-44c5-bc02-22a04a3cdc11",
        "text": "This reminds me of Barliman <https:\/\/www.youtube.com\/watch?v=er_lLvkklsk>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=er_lLvkklsk",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/er_lLvkklsk\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/er_lLvkklsk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=er_lLvkklsk",
                "fallback": "YouTube Video: Barliman: trying the halting problem backwards, blindfolded - William Byrd, Greg Rosenblatt",
                "title": "Barliman: trying the halting problem backwards, blindfolded - William Byrd, Greg Rosenblatt",
                "title_link": "https:\/\/www.youtube.com\/watch?v=er_lLvkklsk",
                "author_name": "ClojureTV",
                "author_link": "https:\/\/www.youtube.com\/user\/ClojureTV",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v7W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This reminds me of Barliman "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=er_lLvkklsk"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1645558506.900199",
        "client_msg_id": "12b5f0b3-ec51-4c7e-90e3-cef7e0e41ebe",
        "text": "Besides Quickcheck, I thought of model-checking software like Z3 (very easy to play with in Python!), Alloy, MiniZinc, maybe even TLA+. I haven't used the latter three (which are not an exhaustive list either), but they seem to be very powerful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WoQI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Besides Quickcheck, I thought of model-checking software like Z3 (very easy to play with in Python!), Alloy, MiniZinc, maybe even TLA+. I haven't used the latter three (which are not an exhaustive list either), but they seem to be very powerful."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02028JHX37",
        "type": "message",
        "ts": "1645567607.296419",
        "client_msg_id": "afcafe2f-83d0-4d1b-a823-9679295d54fa",
        "text": "<@UC2A2ARPT> I absolutely agree, especially about the “statism” of the contemporary visual paradigm. I’m actually working out a way to overcome this (might write about it soon, but it’s still a very immature idea).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf13e3ce9df",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df13e3ce9dfc39e2f387bd3d6e87b952.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jan Ruzicka",
            "display_name": "Jan Ruzicka",
            "team": "T5TCAFTA9",
            "name": "jan.ruzicka01",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645456763.075959",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6c4U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " I absolutely agree, especially about the “statism” of the contemporary visual paradigm. I’m actually working out a way to overcome this (might write about it soon, but it’s still a very immature idea)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1645574891.724909",
        "client_msg_id": "fd0469a7-7030-42a4-aab3-ffc73109ea7a",
        "text": "I would add Lean4 to the counter-example-finding list.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qWnK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would add Lean4 to the counter-example-finding list."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]