[
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1540256832.000100",
        "client_msg_id": "d8b6beaa-a29c-4ee6-a5f6-a3a42d0f9734",
        "text": "Session types are an abstract theory",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540147440.000100",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W4R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Session types are an abstract theory"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1540258111.000100",
        "client_msg_id": "65387436-7abb-4ec4-b406-3c79c4eb3fd9",
        "text": "My feedback: there’s two thrusts in the proposal. One is declaring an API interface in a tool-enforceable way, the second is defining a distributed computation model. Declaring API interfaces in a machine-readable and tool-enforceable way is :100:. Such APIs schemas could yield big benefits for the web ecosystem (I started work on a version of this based around ADTs, but it’s tabled because I simply don’t write APIs these days). But note you don’t need to tie this interface schema to a particular language. As for the language itself, I’m a little confused. “Sort of” pure functions? Only per-client state? I’m not sure what the goal is: is it supposed to simplify full-stack dev? Or is it supposed to be a way of representing app pieces as microservices? Can you clarify what the aim is here?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540147440.000100",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cfNto",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My feedback: there’s two thrusts in the proposal. One is declaring an API interface in a tool-enforceable way, the second is defining a distributed computation model. Declaring API interfaces in a machine-readable and tool-enforceable way is "
                            },
                            {
                                "type": "emoji",
                                "name": "100",
                                "unicode": "1f4af"
                            },
                            {
                                "type": "text",
                                "text": ". Such APIs schemas could yield big benefits for the web ecosystem (I started work on a version of this based around ADTs, but it’s tabled because I simply don’t write APIs these days). But note you don’t need to tie this interface schema to a particular language. As for the language itself, I’m a little confused. “Sort of” pure functions? Only per-client state? I’m not sure what the goal is: is it supposed to simplify full-stack dev? Or is it supposed to be a way of representing app pieces as microservices? Can you clarify what the aim is here?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDCLT064X",
        "type": "message",
        "ts": "1540261942.000100",
        "client_msg_id": "25111595-6677-40e3-9f6d-c0b77ff691a1",
        "text": "Not sure I grasped everything you wrote, but here are some random thoughts after a quick read-through:\n\n- You should call it Service-Oriented-Language or SOL, because that’s what anyone who tries to use this language will be (just kidding)\n- Reading that made me think of WSDL and WSGI (neither of which I am at all familiar with)\n- I think a system which accepts http requests and can serve as an intermediary between any two web services on the internet could be very exciting. I can see some sort of service description language being a critical part of such a system.\n- Working with Go recently has led me to think strong typing is annoying and unnecessary.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3e20180f0c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/53e20180f0c292fcb589f77f738ed402.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Jesse Aldridge",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jessealdridge",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540147440.000100",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aeR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure I grasped everything you wrote, but here are some random thoughts after a quick read-through:\n\n- You should call it Service-Oriented-Language or SOL, because that’s what anyone who tries to use this language will be (just kidding)\n- Reading that made me think of WSDL and WSGI (neither of which I am at all familiar with)\n- I think a system which accepts http requests and can serve as an intermediary between any two web services on the internet could be very exciting. I can see some sort of service description language being a critical part of such a system.\n- Working with Go recently has led me to think strong typing is annoying and unnecessary."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]