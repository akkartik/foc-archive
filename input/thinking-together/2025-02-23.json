[
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1740316308.032019",
        "client_msg_id": "3b552a1b-109a-436c-baac-f3fa837458c3",
        "text": "Oh yeah, I have used staecharts for realtime microcontrollers, <https:\/\/www.state-machine.com\/|quantum leap>. It was that knowledge that made me think nginx had converged on the same solution. I get you. Yeah, no need for stacks for the scheduler in that world, extremely efficient. Also statecharts are somewhat close to being formally verifiable, I wrote a thing on that <https:\/\/github.com\/tomlarkworthy\/firesafe|once>, expressing a 2-phase commit a state chart verified with Computational Tree Logic (CTL). It was that blog that got me a job at Firebase. Concurrency like expressing a 2-phase commit is extremely hard to get right, and I totally agree functions are a useless abstraction in this context as the real meat is on the cross-product of two interacting processes statespaces, really you have to enumerate everything otherwise the weirdest bugs can creep in that defy imagination.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1739811561.420359",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K2qwd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh yeah, I have used staecharts for realtime microcontrollers, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.state-machine.com\/",
                                "text": "quantum leap"
                            },
                            {
                                "type": "text",
                                "text": ". It was that knowledge that made me think nginx had converged on the same solution. I get you. Yeah, no need for stacks for the scheduler in that world, extremely efficient. Also statecharts are somewhat close to being formally verifiable, I wrote a thing on that "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/tomlarkworthy\/firesafe",
                                "text": "once"
                            },
                            {
                                "type": "text",
                                "text": ", expressing a 2-phase commit a state chart verified with Computational Tree Logic (CTL). It was that blog that got me a job at Firebase. Concurrency like expressing a 2-phase commit is extremely hard to get right, and I totally agree functions are a useless abstraction in this context as the real meat is on the cross-product of two interacting processes statespaces, really you have to enumerate everything otherwise the weirdest bugs can creep in that defy imagination."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1740318155.933469",
        "client_msg_id": "1350ae0d-88b6-4221-ba51-35d44a4d6b3c",
        "text": "My feeling is that we no longer need to restrict ourselves to using only the function-based paradigm. Today's hardware enables us to break free of that mindset. From that perspective, all of our current programmings languages are \"the same\". A single paradigm (function-based) with little syntactic baubles to make that single paradigm less painful when used to solve problems that fall outside of that paradigm. Interestingly, I'm finding it much easier to think about once-hard problems, like building compilers, when I am not restricted to thinking about them in a single paradigm, i.e. only functional. The term \"general purpose programming language\" is just good marketing - our languages are not \"general purpose\" and \"C\" is not \"close to the hardware\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1739811561.420359",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LRiZe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My feeling is that we no longer need to restrict ourselves to using only the function-based paradigm. Today's hardware enables us to break free of that mindset. From that perspective, all of our current programmings languages are \"the same\". A single paradigm (function-based) with little syntactic baubles to make that single paradigm less painful when used to solve problems that fall outside of that paradigm. Interestingly, I'm finding it much easier to think about once-hard problems, like building compilers, when I am not restricted to thinking about them in a single paradigm, i.e. only functional. The term \"general purpose programming language\" is just good marketing - our languages are not \"general purpose\" and \"C\" is not \"close to the hardware\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U02E4DAQGSZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1740336335.187239",
        "client_msg_id": "0fd0c5b9-111e-4436-9be3-78cb2add254a",
        "text": "More remembering what's at the bottom of all this and wondering if we can make it simple again ... <https:\/\/programmingsimplicity.substack.com\/p\/subroutines-are-not-functions-71a?r=1egdky>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740336335.187239",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1740414777.033469",
        "reply_users": [
            "UCUSW7WVD",
            "U08DYF4SEAE",
            "U02E4DAQGSZ",
            "UGWUJUZHT",
            "U0112C10V4Y"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1740337740.045119"
            },
            {
                "user": "U08DYF4SEAE",
                "ts": "1740338248.505969"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1740346989.978429"
            },
            {
                "user": "U08DYF4SEAE",
                "ts": "1740349043.170349"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1740370797.389949"
            },
            {
                "user": "U08DYF4SEAE",
                "ts": "1740382108.711959"
            },
            {
                "user": "U0112C10V4Y",
                "ts": "1740414777.033469"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93df8fb5-3260-437a-a1ed-70a74815e450_320x369.heic",
                "image_width": 320,
                "image_height": 369,
                "image_bytes": 8707,
                "from_url": "https:\/\/programmingsimplicity.substack.com\/p\/subroutines-are-not-functions-71a?r=1egdky",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9bf28261-3dbc-4931-99f3-57bb47beeb02%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/programmingsimplicity.substack.com\/p\/subroutines-are-not-functions-71a?r=1egdky",
                "fallback": "Subroutines are not Functions",
                "text": "2025-02-23",
                "title": "Subroutines are not Functions",
                "title_link": "https:\/\/programmingsimplicity.substack.com\/p\/subroutines-are-not-functions-71a?r=1egdky",
                "service_name": "programmingsimplicity.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2NVxp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More remembering what's at the bottom of all this and wondering if we can make it simple again ... "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/programmingsimplicity.substack.com\/p\/subroutines-are-not-functions-71a?r=1egdky"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "U02E4DAQGSZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1740337740.045119",
        "client_msg_id": "54611cef-77c0-422f-8fdc-ab36c0aed128",
        "text": "I like this one more then most of yours.\n\nOne point, though: From a rhetorical perspective I feel like the picture you start out with compromises your argument.\n\n&gt; At the hardware level, a program is just a sequence of opcodes.\nThat seems like pretty strong case for sequentialism! Might be worth rewording to something like, \"when computers first came on the scene, their programs were just a sequence of opcodes.\"\n\nAnd then I'd quickly switch to a different picture that shows multiple sequences in parallel. And use _that_ picture as the framework for the rest of the argument.\n\nJust some thoughts for the next iteration.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740336335.187239",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A9kAg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like this one more then most of yours.\n\nOne point, though: From a rhetorical perspective I feel like the picture you start out with compromises your argument.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At the hardware level, a program is just a sequence of opcodes."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThat seems like pretty strong case for sequentialism! Might be worth rewording to something like, \"when computers first came on the scene, their programs were just a sequence of opcodes.\"\n\nAnd then I'd quickly switch to a different picture that shows multiple sequences in parallel. And use "
                            },
                            {
                                "type": "text",
                                "text": "that",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " picture as the framework for the rest of the argument.\n\nJust some thoughts for the next iteration."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08DYF4SEAE",
        "type": "message",
        "ts": "1740338248.505969",
        "client_msg_id": "44afec7e-61f6-4c11-b142-a26244a57a8b",
        "text": "I generally agree. I think a lot was lost as the world crystallized on C and C-like languages because they gave the best performance at the time. I'm a big fan of statecharts, especially in combination with reactive programming, but it still hasn't really gone mainstream. I think tools like Statemate and the kind of work the Margaret Hamilton was doing for a while is more along the lines of what you might imagine a real \"software engineering\" approach might really look like.\n\nI think until someone steps up and makes something with these tools that the wider industry can point to - as opposed to NASA - and is made available and usable on par with the open source tools now, it might stay that way. I'm working on my own tools that are somewhat in this ballpark, but I don't think Statecharts alone are the actual answer.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "af3f4f3c0604",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-18\/8487018839873_af3f4f3c0604a679e817_72.jpg",
            "first_name": "When",
            "real_name": "When Leggett",
            "display_name": "When Leggett",
            "team": "T5TCAFTA9",
            "name": "russ",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740336335.187239",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BtJmP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I generally agree. I think a lot was lost as the world crystallized on C and C-like languages because they gave the best performance at the time. I'm a big fan of statecharts, especially in combination with reactive programming, but it still hasn't really gone mainstream. I think tools like Statemate and the kind of work the Margaret Hamilton was doing for a while is more along the lines of what you might imagine a real \"software engineering\" approach might really look like.\n\nI think until someone steps up and makes something with these tools that the wider industry can point to - as opposed to NASA - and is made available and usable on par with the open source tools now, it might stay that way. I'm working on my own tools that are somewhat in this ballpark, but I don't think Statecharts alone are the actual answer."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1740346989.978429",
        "client_msg_id": "a672c2b7-e474-4bf0-8555-6c5135459e8d",
        "text": "yeah its funny we have techniques like trampolining to undo the damage of the function calling pattern, but its mechanism ends up brining in even more function call overheads for a thing that doesn't really suite the function calling paradigm in the first place.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740336335.187239",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h\/82V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah its funny we have techniques like trampolining to undo the damage of the function calling pattern, but its mechanism ends up brining in even more function call overheads for a thing that doesn't really suite the function calling paradigm in the first place."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08DYF4SEAE",
        "type": "message",
        "ts": "1740349043.170349",
        "edited": {
            "user": "U08DYF4SEAE",
            "ts": "1740349074.000000"
        },
        "client_msg_id": "67965d14-7958-48c8-a690-c73d78437c31",
        "text": "One of the reasons I mentions Margaret Hamilton is because the way they built systems and thought about it in a distributed way with failure modes and priorities is so radically different than the lineage of programming that survived into the mainstream. Its not just about function calling patterns, its like - the whole imaginative background of *what* programming is - what a digital system is and how we can build them robustly is trapped in a specific lineage when there really are vastly more options.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "af3f4f3c0604",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-18\/8487018839873_af3f4f3c0604a679e817_72.jpg",
            "first_name": "When",
            "real_name": "When Leggett",
            "display_name": "When Leggett",
            "team": "T5TCAFTA9",
            "name": "russ",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740336335.187239",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KbkJK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of the reasons I mentions Margaret Hamilton is because the way they built systems and thought about it in a distributed way with failure modes and priorities is so radically different than the lineage of programming that survived into the mainstream. Its not just about function calling patterns, its like - the whole imaginative background of "
                            },
                            {
                                "type": "text",
                                "text": "what",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programming is - what a digital system is and how we can build them robustly is trapped in a specific lineage when there really are vastly more options."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1740370797.389949",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1740370859.000000"
        },
        "client_msg_id": "3ff62f15-76cb-4992-ba65-e6215882afea",
        "text": "Interesting! Thanks. Can you tell me if your background knowledge about what I'm after is colouring your understanding of this article, or, if there's something insufficient with how I say this? The rest of this reply turned out to be more than one sentence... <https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/thinking-about-timing-issues?r=1egdky&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true|Thinking About Timing Issues>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740336335.187239",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/thinking-about-timing-issues?r=1egdky&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9bf28261-3dbc-4931-99f3-57bb47beeb02%2Fapple-touch-icon-57x57.png",
                "thumb_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d69eba9-d5d3-4387-a046-9b881b00bd45_131x131.png",
                "thumb_width": 131,
                "thumb_height": 131,
                "id": 1,
                "original_url": "https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/thinking-about-timing-issues?r=1egdky&amp;utm_campaign=post&amp;utm_medium=web&amp;showWelcomeOnShare=true",
                "fallback": "Thinking About Timing Issues",
                "text": "2025-02-23",
                "title": "Thinking About Timing Issues",
                "title_link": "https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/thinking-about-timing-issues?r=1egdky&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true",
                "service_name": "programmingsimplicity.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mtya7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting! Thanks. Can you tell me if your background knowledge about what I'm after is colouring your understanding of this article, or, if there's something insufficient with how I say this? The rest of this reply turned out to be more than one sentence... "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/thinking-about-timing-issues?r=1egdky&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true",
                                "text": "Thinking About Timing Issues"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08DYF4SEAE",
        "type": "message",
        "ts": "1740382108.711959",
        "client_msg_id": "5f9efa19-7b00-4117-bf16-3156f1aec8d7",
        "text": "Hmmm... I mean, I would venture to say that we probably agree about a lot of things. I wasn't really arguing. If it seemed like I misunderstood something you were saying, I would be happy to speak to it more directly. My responses were more of a \"yes, and\" in response to your article.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "af3f4f3c0604",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-18\/8487018839873_af3f4f3c0604a679e817_72.jpg",
            "first_name": "When",
            "real_name": "When Leggett",
            "display_name": "When Leggett",
            "team": "T5TCAFTA9",
            "name": "russ",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740336335.187239",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g19fg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmmm... I mean, I would venture to say that we probably agree about a lot of things. I wasn't really arguing. If it seemed like I misunderstood something you were saying, I would be happy to speak to it more directly. My responses were more of a \"yes, and\" in response to your article."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]