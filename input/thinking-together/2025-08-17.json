[
    {
        "user": "U098P4V8Y6R",
        "type": "message",
        "ts": "1755436797.026409",
        "client_msg_id": "04a6174b-78dd-4ab5-a6a0-1e4b1774bb8d",
        "text": "I have been reminded (more than once) of the compare-and-contrast possibilities of Dijkstra’s 1970s vision vs. general practice 50-ish years later. For example:\n• Both Dijklstra’s presentation of the wp-calculus and contemporary TDD rest on the idea of thinking first about verification and then letting those considerations guide the design. Property-based testing goes a large step further than simple unit testing. But we still haven’t gotten to the full-coverage rigor of EWD.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gc3ae6a1b8d7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c3ae6a1b8d708b79b6b85ecc365266a4.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Joel",
            "real_name": "Joel Neely",
            "display_name": "Joel Neely",
            "team": "T5TCAFTA9",
            "name": "joel.neely",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1754118705.092259",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DErnU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have been reminded (more than once) of the compare-and-contrast possibilities of Dijkstra’s 1970s vision vs. general practice 50-ish years later. For example:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Both Dijklstra’s presentation of the wp-calculus and contemporary TDD rest on the idea of thinking first about verification and then letting those considerations guide the design. Property-based testing goes a large step further than simple unit testing. But we still haven’t gotten to the full-coverage rigor of EWD."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U098P4V8Y6R",
        "thread_ts": "1754118705.092259",
        "root": {
            "user": "UCUSW7WVD",
            "type": "message",
            "ts": "1754118705.092259",
            "client_msg_id": "671ccd73-2157-4ed2-a8e1-8df9f5503a7f",
            "text": "This might be premature, but I think I _finally_ understand Dijkstra's approach to deriving programs from post-conditions in \"A Discipline of Programming\". I've had this book on my bookshelf for almost 20 years, never understood it but also never quite worked up the will to toss it out. (For context, I only own like a dozen books over the long term.)\n\nConcretely, I've made it to the end of Chapter 7. I feel like I understand every bit up until this point.\n\nParts of Chapter 6 and 7 feel very sloppily written! And this is Dijkstra! So either my leaps of interpretation are only leaps because I'm missing something, or my sense of understanding is an illusion :sweat_smile:\n\nHas anyone here made it this far and feel like they understood it? I'd love to talk to you.\n\nIncidentally: I wouldn't have made it in even this my probably 4th attempt, if it wasn't for LLMs. They're better than a rubber duck for talking things over with! It's amazing that they can all converse intelligently about the Dijkstra method, and all I need to do is mention `wp` or `wdec`. Or I know nothing and am incapable of judging anything about this book.",
            "team": "T5TCAFTA9",
            "thread_ts": "1754118705.092259",
            "reply_count": 14,
            "reply_users_count": 3,
            "latest_reply": "1755466818.330469",
            "reply_users": [
                "U098P4V8Y6R",
                "UCUSW7WVD",
                "U05UK5T7LPP"
            ],
            "replies": [
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1754259771.285849"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1754268721.461379"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1754269037.411419"
                },
                {
                    "user": "U05UK5T7LPP",
                    "ts": "1754326775.411869"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1754327682.610629"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1754752241.623379"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1754752415.308649"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1754753476.322389"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1754777681.018069"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1754780801.287359"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1755436797.026409"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1755436888.504089"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1755443502.811449"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1755466818.330469"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "vX\/r1",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "This might be premature, but I think I "
                                },
                                {
                                    "type": "text",
                                    "text": "finally",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " understand Dijkstra's approach to deriving programs from post-conditions in \"A Discipline of Programming\". I've had this book on my bookshelf for almost 20 years, never understood it but also never quite worked up the will to toss it out. (For context, I only own like a dozen books over the long term.)\n\nConcretely, I've made it to the end of Chapter 7. I feel like I understand every bit up until this point.\n\nParts of Chapter 6 and 7 feel very sloppily written! And this is Dijkstra! So either my leaps of interpretation are only leaps because I'm missing something, or my sense of understanding is an illusion "
                                },
                                {
                                    "type": "emoji",
                                    "name": "sweat_smile",
                                    "unicode": "1f605"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nHas anyone here made it this far and feel like they understood it? I'd love to talk to you.\n\nIncidentally: I wouldn't have made it in even this my probably 4th attempt, if it wasn't for LLMs. They're better than a rubber duck for talking things over with! It's amazing that they can all converse intelligently about the Dijkstra method, and all I need to do is mention "
                                },
                                {
                                    "type": "text",
                                    "text": "wp",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " or "
                                },
                                {
                                    "type": "text",
                                    "text": "wdec",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ". Or I know nothing and am incapable of judging anything about this book."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1755436888.504089",
        "client_msg_id": "d3279545-870d-4090-95db-4f5d166a2d91",
        "text": "• The clean way that the if\/fi and do\/od constructs embraced non-determinism still looks cleaner to me than the contemporary toolkits of various mainstream languages and frameworks.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OGkGg",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The clean way that the if\/fi and do\/od constructs embraced non-determinism still looks cleaner to me than the contemporary toolkits of various mainstream languages and frameworks."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1755443502.811449",
        "client_msg_id": "208efc21-e847-487c-8af9-869d978465ac",
        "text": "I'm still trying to figure out how to do it for larger examples. My go to example is a text wrapping function I've endlessly stared at in the last 2 years. Maybe I'll figure out its invariants and preconditions by the time I'm done with the book.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1754118705.092259",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sy2zs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm still trying to figure out how to do it for larger examples. My go to example is a text wrapping function I've endlessly stared at in the last 2 years. Maybe I'll figure out its invariants and preconditions by the time I'm done with the book."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "dart",
                "users": [
                    "U098P4V8Y6R"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U098P4V8Y6R",
        "type": "message",
        "ts": "1755466818.330469",
        "client_msg_id": "a4940e27-f3ce-4216-bd1d-c7a83cfd7d11",
        "text": "I have found that human-perception-based problems are the hardest for me to describe precisely. (For example, creating a “nice” layout of a binary tree…)\nAssuming that you think of “text wrapping” the same way I do--breaking text on runs of whitespace into a list of tokens (maximal runs of non-whitespace characters), then “flowing” them into multiple lines such that the tokens appear in the same order, tokens in each line are separated by whitespace, each input token is contained in the output, no output line is more than a specified length limit…\nThe basic properties seem feasible, but then the “what about”s start: What about forced breaks? What about justification? …",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gc3ae6a1b8d7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c3ae6a1b8d708b79b6b85ecc365266a4.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Joel",
            "real_name": "Joel Neely",
            "display_name": "Joel Neely",
            "team": "T5TCAFTA9",
            "name": "joel.neely",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1754118705.092259",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TFP\/R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have found that human-perception-based problems are the hardest for me to describe precisely. (For example, creating a “nice” layout of a binary tree…)\nAssuming that you think of “text wrapping” the same way I do--breaking text on runs of whitespace into a list of tokens (maximal runs of non-whitespace characters), then “flowing” them into multiple lines such that the tokens appear in the same order, tokens in each line are separated by whitespace, each input token is contained in the output, no output line is more than a specified length limit…\nThe basic properties seem feasible, but then the “what about”s start: What about forced breaks? What about justification? …"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "U05UK5T7LPP"
                ],
                "count": 2
            }
        ]
    }
]