[
    {
        "user": "ULADE0N0J",
        "type": "message",
        "ts": "1563958792.285800",
        "client_msg_id": "ef0eccdb-228d-4763-b85b-78df95d0d316",
        "text": "Yes, there are quite some systems still uses. One popular Java library is Drools. They also have a section in their docs dedicated for the history of expert system (or knowledge representation and reasoning): <https:\/\/docs.jboss.org\/drools\/release\/6.5.0.Final\/drools-docs\/html\/ch05.html#d0e4247>\n\nRule engines are even used in games. The HD remake of Age of Empires II for example used them. Here is my copy of the circa 30,000 lines of code rules file: <https:\/\/gist.github.com\/hastebrot\/ddac3624aaf7963f59a798f8ad5a0a16>\n\nUsing Java sometimes means that they neglect the frontend almost completely. I saw systems where they only offered a textarea widget to author the rules, with the assumption, the business analysts will keep the rules simple (less then 10 lines of code) and everything will be fine. I saw rules with 100 lines of code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7d86046c255c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-23\/692084499154_7d86046c255cf2735e1c_72.jpg",
            "first_name": "",
            "real_name": "Benjamin Gudehus",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "hastebrot",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563901864.273700",
        "parent_user_id": "ULADE0N0J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4kb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, there are quite some systems still uses. One popular Java library is Drools. They also have a section in their docs dedicated for the history of expert system (or knowledge representation and reasoning): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.jboss.org\/drools\/release\/6.5.0.Final\/drools-docs\/html\/ch05.html#d0e4247"
                            },
                            {
                                "type": "text",
                                "text": "\n\nRule engines are even used in games. The HD remake of Age of Empires II for example used them. Here is my copy of the circa 30,000 lines of code rules file: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/hastebrot\/ddac3624aaf7963f59a798f8ad5a0a16"
                            },
                            {
                                "type": "text",
                                "text": "\n\nUsing Java sometimes means that they neglect the frontend almost completely. I saw systems where they only offered a textarea widget to author the rules, with the assumption, the business analysts will keep the rules simple (less then 10 lines of code) and everything will be fine. I saw rules with 100 lines of code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1563967626.286000",
        "client_msg_id": "85c17627-d9fd-478c-aa76-773d3e465b1f",
        "text": "I’ve had a major paradigm shift in the last month or so. Before, I didn’t consider parameters as scope, nor closure as mutation. Now I’m starting to see that when a function rebinds its parameters, it’s modifying its environment - it’s mutating things. That’s why it’s possible to simulate mutable state with recursive functions. If you’re trying to avoid the complexity caused by mutable state, I think  any parameter bound more than once needs to be considered mutation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563814799.068500",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o6rI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve had a major paradigm shift in the last month or so. Before, I didn’t consider parameters as scope, nor closure as mutation. Now I’m starting to see that when a function rebinds its parameters, it’s modifying its environment - it’s mutating things. That’s why it’s possible to simulate mutable state with recursive functions. If you’re trying to avoid the complexity caused by mutable state, I think  any parameter bound more than once needs to be considered mutation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563982419.286200",
        "client_msg_id": "b4bba520-1df2-4c04-a560-544ba1320237",
        "text": "Haha, that's a hilarious article, hadn't seen that :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V8wY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Haha, that's a hilarious article, hadn't seen that "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563982532.286400",
        "client_msg_id": "aa94d267-7b0c-4383-a3cd-677a6d96bf56",
        "text": "I am very much against any forms of over engineering.. (I once wrote <https:\/\/qr.ae\/TWnEal> :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dnt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am very much against any forms of over engineering.. (I once wrote "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/qr.ae\/TWnEal"
                            },
                            {
                                "type": "text",
                                "text": " :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563982626.286600",
        "client_msg_id": "c450aec6-ffee-413f-b4b0-e4b469cfa293",
        "text": "But when I hear you talk about DCI, modularizing, high level components etc.. I don't get it, because those word trigger exactly my over-engineering alarm bells",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xtq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But when I hear you talk about DCI, modularizing, high level components etc.. I don't get it, because those word trigger exactly my over-engineering alarm bells"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563982679.286800",
        "client_msg_id": "1cbad471-6486-4333-b05b-f8dcca20036a",
        "text": "trying to componentize code that can't be easily componentized (which to me is most code) just leads to more complex code",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BHYp7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "trying to componentize code that can't be easily componentized (which to me is most code) just leads to more complex code"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1563983943.287000",
        "client_msg_id": "03610b49-65f5-4ed5-80df-3b27ec4ccfe6",
        "text": "Resurrecting this thread because I just remembered a paper my mentors wrote <http:\/\/www.cs.cmu.edu\/~aldrich\/papers\/onward2009-state.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562800782.193800",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X0rfg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Resurrecting this thread because I just remembered a paper my mentors wrote "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.cs.cmu.edu\/~aldrich\/papers\/onward2009-state.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1563983986.287200",
        "client_msg_id": "f37616da-7b42-459c-8db4-f483914dbdfe",
        "text": "essentially: \"what if objects could only justify their existence by a matching state?\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562800782.193800",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VmA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "essentially: \"what if objects could only justify their existence by a matching state?\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1563986023.288900",
        "client_msg_id": "41a61012-93b1-4e24-8917-1d923e28735f",
        "text": "The new stdlib build tool looks like something I've been wanting for a while now: Zapier recapitulated as a thin-layer of abstraction over code that basically just handles API authentication for me. <https:\/\/www.youtube.com\/watch?v=EXDTrObkZFQ&amp;feature=youtu.be>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Build on Standard Library: Stripe \/ Airtable \/ Slack CRM",
                "title_link": "https:\/\/www.youtube.com\/watch?v=EXDTrObkZFQ&amp;feature=youtu.be",
                "author_name": "Keith Horwood",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCWGwsnyTcnPghUTKP0OD5HQ",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/EXDTrObkZFQ\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Build on Standard Library: Stripe \/ Airtable \/ Slack CRM",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/EXDTrObkZFQ?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=EXDTrObkZFQ&amp;feature=youtu.be",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=EXDTrObkZFQ&amp;feature=youtu.be"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jxB74",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The new stdlib build tool looks like something I've been wanting for a while now: Zapier recapitulated as a thin-layer of abstraction over code that basically just handles API authentication for me. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=EXDTrObkZFQ&amp;feature=youtu.be",
                                "text": "https:\/\/www.youtube.com\/watch?v=EXDTrObkZFQ&feature=youtu.be"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBC0NLDN",
                    "ULADE0N0J",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563986380.289100",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1563986608.000000"
        },
        "client_msg_id": "4561136d-1823-4895-aead-0bfacc8e2dc9",
        "text": "I hear you about DCI, and that's why it took me months to really get what it was about. It sounds like a mechanistic thing, but doesn't give you any new abilities that you didn't already have before. But then I realized that it's really just about cleaning up badly factored program-flow in OOP code.\n\nIt's very common in OOP to take a use case \/ scenario \/ flow and have each data entity own a slice of it. But the data boundaries are very misaligned with the overall execution boundaries, so \"what the program does\" becomes very convoluted. DCI is about *still* slicing up an execution into pieces, but keeping the relevant pieces together. Specifically, instead each class having methods from multiple use cases, those methods are associated to \"roles\", with are placeholders for whatever objects will participate in that execution flow \/ use case.\n\nBut there is no need to have a flow be sliced up into methods that each most be \"owned\" by some object. But if that's what it means to do \"OOP\", then DCI is a way to put related functionality together in a way that's \"still OOP\". Well, I see no value in OOP if that's what OOP means; but the organization of flow AND the organization of data being two separate things that are meaningfully laid out in their own rite (rather than having one be in terms of the other) ... THAT makes a lot of sense, and doesn't need any mechanism like DCI to do it. And you'll find that such code very much matches the human mental model of what the software is and what it does.\n\nBut DCI is what introduced me to thinking that way, because much OOP is very primarily \"thing\" oriented, or otherwise relies on complex mechanisms to \"wire it up\" another way. So for me, DCI (if you throw out the mechanism but look at what it's trying to do) is about just making code sane to begin with.\n\nI've had a lot of success applying those principles in my career, especially among horrible OOP code.\n\nIt's my opinion that many \"OO programmers\" don't know (or have forgotten) how to think on simple terms.\n\nI'll post some more links, later",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GNH7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hear you about DCI, and that's why it took me months to really get what it was about. It sounds like a mechanistic thing, but doesn't give you any new abilities that you didn't already have before. But then I realized that it's really just about cleaning up badly factored program-flow in OOP code.\n\nIt's very common in OOP to take a use case \/ scenario \/ flow and have each data entity own a slice of it. But the data boundaries are very misaligned with the overall execution boundaries, so \"what the program does\" becomes very convoluted. DCI is about "
                            },
                            {
                                "type": "text",
                                "text": "still",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " slicing up an execution into pieces, but keeping the relevant pieces together. Specifically, instead each class having methods from multiple use cases, those methods are associated to \"roles\", with are placeholders for whatever objects will participate in that execution flow \/ use case.\n\nBut there is no need to have a flow be sliced up into methods that each most be \"owned\" by some object. But if that's what it means to do \"OOP\", then DCI is a way to put related functionality together in a way that's \"still OOP\". Well, I see no value in OOP if that's what OOP means; but the organization of flow AND the organization of data being two separate things that are meaningfully laid out in their own rite (rather than having one be in terms of the other) ... THAT makes a lot of sense, and doesn't need any mechanism like DCI to do it. And you'll find that such code very much matches the human mental model of what the software is and what it does.\n\nBut DCI is what introduced me to thinking that way, because much OOP is very primarily \"thing\" oriented, or otherwise relies on complex mechanisms to \"wire it up\" another way. So for me, DCI (if you throw out the mechanism but look at what it's trying to do) is about just making code sane to begin with.\n\nI've had a lot of success applying those principles in my career, especially among horrible OOP code.\n\nIt's my opinion that many \"OO programmers\" don't know (or have forgotten) how to think on simple terms.\n\nI'll post some more links, later"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1563986919.289700",
        "client_msg_id": "6551fb93-e6a0-473d-a636-070e123bec1a",
        "text": "One thing I've found is that applying a clean top-down breakdown of the data and (separately) of the program flow, not only results in a very close match with the human mental model, but is also much simpler in an objective sense (i.e. less incidental complexity). It fits right in with Rich Hickey's \"Simple Made Easy\" (if you ignore the language-specific parts, e.g. why Clojure is a better language):\n\n<https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "attachments": [
            {
                "service_name": "InfoQ",
                "title": "Simple Made Easy",
                "title_link": "https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/",
                "text": "Rich Hickey emphasizes simplicity’s virtues over easiness’, showing that while many choose easiness they may end up with complexity, and the better way is to choose easiness along the simplicity path.",
                "fallback": "InfoQ: Simple Made Easy",
                "thumb_url": "https:\/\/res.infoq.com\/presentations\/Simple-Made-Easy\/en\/mediumimage\/rich-hickey-big.jpg",
                "from_url": "https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/",
                "thumb_width": 270,
                "thumb_height": 200,
                "service_icon": "https:\/\/cdn.infoq.com\/statics_s2_20190723-0333\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jFP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thing I've found is that applying a clean top-down breakdown of the data and (separately) of the program flow, not only results in a very close match with the human mental model, but is also much simpler in an objective sense (i.e. less incidental complexity). It fits right in with Rich Hickey's \"Simple Made Easy\" (if you ignore the language-specific parts, e.g. why Clojure is a better language):\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563987850.290200",
        "client_msg_id": "3c459fee-0344-4a2d-bc3c-02e44de450d4",
        "text": "Agreed that breaking up a task into methods that get spread out over the code for the sake of OOP is a bad thing, but I don't see DCI as the solution. All examples I see of it want to add yet more structure that add to existing OOP structures. I want to get away from OOP in its entirety",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F\/ab",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed that breaking up a task into methods that get spread out over the code for the sake of OOP is a bad thing, but I don't see DCI as the solution. All examples I see of it want to add yet more structure that add to existing OOP structures. I want to get away from OOP in its entirety"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563987927.290400",
        "client_msg_id": "55316b70-a1da-4020-a5a9-ec9a83d07139",
        "text": "You can keep use case code together pretty easily in most languages, that allow methods or functions to be put anywhere in code so they can be grouped by use case rather than class",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4yuVo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can keep use case code together pretty easily in most languages, that allow methods or functions to be put anywhere in code so they can be grouped by use case rather than class"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563988052.290600",
        "client_msg_id": "ba4a197a-51de-447a-8d81-231f440bdb26",
        "text": "I personally like to keep code as linear as possible, so a particular task or algorithm can be followed locally rather than jumping all over the code base. that does not require special methodologies or language features, just a language that also allows procedural\/functional style code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gxQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I personally like to keep code as linear as possible, so a particular task or algorithm can be followed locally rather than jumping all over the code base. that does not require special methodologies or language features, just a language that also allows procedural\/functional style code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1564000647.291200",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1564000671.000000"
        },
        "client_msg_id": "a4b4897a-dfab-4540-9d86-c931881cfc37",
        "text": "Yeah, I think you said it very well. I think a lot of what's trying to be mechanized or fixed in OOP is just a poor replacement for plain old procedural flow\/logic, and my claim is that many OOP programmers don't know how it have forgotten.\n\nWhen it pains me the most is when I see thousands or tens of thousands of lines of mechanism, for what could be a few hundred lines of code. My opinion is that the same way to do that with OOP is that classes represent data entities, and class methods ONLY operate on what's encapsulated by the class. Behaviors of the system itself remain more or less procedural \/ functional.\n\nSome languages (Java, C#) require all functions to be methods of some class. You can either have one class representing the whole system, defined essentially procedurally as a bunch of static methods, or you can break the system into discrete high level components. But really this is just the same kind of organization that can be done without classes (it's just that that's the only kind of \"container\" that since language offer). But there's not necessarily a gain to having a \"thing\" called a parser, versus saying \"here's all the parsing code\" like a mini library.\n\nAnyway, the classes or other containers in this sense will tens to represent what a human would think about as components of the system. For example, an ATM user might think of things called Accounts and Transactions; but something like a configuration-wire-upper or a component-manager are not real parts of a software system in any meaningful sense (unless managing configurations and components *is* the service that the software provides to the end user).\n\nBut what amazes me is that either nobody can see it, or they don't believe it can be that simple, and so they rely on massive infrastructure to fix problems that could be handled through just fine through*basic* principles. And that's what makes me think that many software engineers don't really have a form grasp of the basics. Going to extremes to \"manage\" complexity that they take as a given, but which is largely artificial.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BxqJl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I think you said it very well. I think a lot of what's trying to be mechanized or fixed in OOP is just a poor replacement for plain old procedural flow\/logic, and my claim is that many OOP programmers don't know how it have forgotten.\n\nWhen it pains me the most is when I see thousands or tens of thousands of lines of mechanism, for what could be a few hundred lines of code. My opinion is that the same way to do that with OOP is that classes represent data entities, and class methods ONLY operate on what's encapsulated by the class. Behaviors of the system itself remain more or less procedural \/ functional.\n\nSome languages (Java, C#) require all functions to be methods of some class. You can either have one class representing the whole system, defined essentially procedurally as a bunch of static methods, or you can break the system into discrete high level components. But really this is just the same kind of organization that can be done without classes (it's just that that's the only kind of \"container\" that since language offer). But there's not necessarily a gain to having a \"thing\" called a parser, versus saying \"here's all the parsing code\" like a mini library.\n\nAnyway, the classes or other containers in this sense will tens to represent what a human would think about as components of the system. For example, an ATM user might think of things called Accounts and Transactions; but something like a configuration-wire-upper or a component-manager are not real parts of a software system in any meaningful sense (unless managing configurations and components "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the service that the software provides to the end user).\n\nBut what amazes me is that either nobody can see it, or they don't believe it can be that simple, and so they rely on massive infrastructure to fix problems that could be handled through just fine through*basic* principles. And that's what makes me think that many software engineers don't really have a form grasp of the basics. Going to extremes to \"manage\" complexity that they take as a given, but which is largely artificial."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1564000795.291500",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1564001683.000000"
        },
        "client_msg_id": "5b794e46-eda4-485f-822a-1a3134db4787",
        "text": "Sorry, this turned into a large rant \/ venting on my part.\n\nThanks for your insight though! It's nice to know that not all software development is stuck in that kind of mess. A lot of mainstream industry software is though, and it's just very frustrating.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZB=hm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry, this turned into a large rant \/ venting on my part.\n\nThanks for your insight though! It's nice to know that not all software development is stuck in that kind of mess. A lot of mainstream industry software is though, and it's just very frustrating."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1564003811.291900",
        "client_msg_id": "9652ff7d-ec94-4e48-8994-35121e280c87",
        "text": "Yes, good point.. the best use of a \"class\" is to bundle 2 or more values that are tied by an invariant, and methods and data hiding to enforce that invariant. Any additional values, code or methods that is not strictly necessary for that purpose should really live outside the class",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3wQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, good point.. the best use of a \"class\" is to bundle 2 or more values that are tied by an invariant, and methods and data hiding to enforce that invariant. Any additional values, code or methods that is not strictly necessary for that purpose should really live outside the class"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1564003847.292100",
        "client_msg_id": "26d271c1-2f7a-4166-adac-3a5f3917fa5a",
        "text": "And yes, Java pushes programmers to entirely the wrong defaults",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PrmWW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And yes, Java pushes programmers to entirely the wrong defaults"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1564004093.292300",
        "client_msg_id": "11fffde5-f4ad-4737-ba2d-cf17d229aa54",
        "text": "There are probably a lot of reasons why programmers create such unnecessary complexity. A lot of it is due to the incremental nature of software development: software can neither be written no understood all at once. It's a nice thought exercise how much simpler certain pieces of software could be if written by a theoretical god-like programmer that could conceive of all code all at once, and I think it be dramatic.. for some code like 10-100x smaller.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LO1sc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are probably a lot of reasons why programmers create such unnecessary complexity. A lot of it is due to the incremental nature of software development: software can neither be written no understood all at once. It's a nice thought exercise how much simpler certain pieces of software could be if written by a theoretical god-like programmer that could conceive of all code all at once, and I think it be dramatic.. for some code like 10-100x smaller."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1564004230.292500",
        "client_msg_id": "e02269b5-9b81-4f0c-99d5-14e4f2e0e090",
        "text": "The other big issue people don't seem to talk about is gap between how the original creator of some abstraction sees that code (its a mapping of their mental model) and how everyone else sees that same abstraction (its a new foreign language to learn that often clashes with your mental model). Programmers somehow think everyone thinks like them, and thus WAY underestimate the cost of these new abstractions",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P3mg0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The other big issue people don't seem to talk about is gap between how the original creator of some abstraction sees that code (its a mapping of their mental model) and how everyone else sees that same abstraction (its a new foreign language to learn that often clashes with your mental model). Programmers somehow think everyone thinks like them, and thus WAY underestimate the cost of these new abstractions"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1564005442.293600",
        "client_msg_id": "74ab6ab7-eb3d-4636-a9b5-9da2d2eec4dd",
        "text": "I somehow thought that last one deserved a tweet: <https:\/\/twitter.com\/wvo\/status\/1154148443268321280>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/wvo|@wvo>: Why programmers love to create abstractions: it's an anchoring for their mental model. Why other programmers hate your abstractions: it's a new foreign language to learn.",
                "ts": 1564005406,
                "author_name": "Wouter",
                "author_link": "https:\/\/twitter.com\/wvo\/status\/1154148443268321280",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/520593263305039872\/IO1OyQB9_normal.jpeg",
                "author_subname": "@wvo",
                "text": "Why programmers love to create abstractions: it's an anchoring for their mental model. Why other programmers hate your abstractions: it's a new foreign language to learn.",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/wvo\/status\/1154148443268321280",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/wvo\/status\/1154148443268321280",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mRYy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I somehow thought that last one deserved a tweet: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/wvo\/status\/1154148443268321280"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1564005462.293900",
        "client_msg_id": "02e02ee9-65fa-42dc-9516-ca96a1e1ff2f",
        "text": "It's a tweet-sized thought :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563898361.264700",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a7Z+R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's a tweet-sized thought "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Thought you all might appreciate this. From Programming Paradigms for Dummies:  What Every Programmer Should Know by Peter Van Roy",
        "files": [
            {
                "id": "FLT0YRL3Z",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UJTHWNH2T",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uMH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thought you all might appreciate this. From Programming Paradigms for Dummies:  What Every Programmer Should Know by Peter Van Roy"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1564006215.294100",
        "client_msg_id": "5ef05abd-d231-41b1-9cff-a20a3532c8b2",
        "thread_ts": "1564006215.294100",
        "reply_count": 20,
        "reply_users_count": 4,
        "latest_reply": "1564783409.188100",
        "reply_users": [
            "UE6EFEPTQ",
            "UJTHWNH2T",
            "UHWC9PXBL",
            "U8A5MS6R1"
        ],
        "replies": [
            {
                "user": "UE6EFEPTQ",
                "ts": "1564007571.294400"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1564009689.296900"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1564009906.297100"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564077265.304800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564077293.305800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564077312.306500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564077340.307500"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564079990.309800"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564128058.328800"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564128069.329000"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564128597.329200"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1564178937.346400"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564232293.357700"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1564239544.358100"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564241794.358300"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564245133.358700"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1564782963.187500"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564783340.187700"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564783370.187900"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564783409.188100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKEH0U5FH",
                    "UJVEPCVT6",
                    "UA14TGLTC",
                    "UJBAJNFLK",
                    "U79HM6726"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1564007571.294400",
        "client_msg_id": "3b5c5dd5-f426-421a-890b-efbad0523bf6",
        "text": "Where would Excel be on this?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564006215.294100",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7T=Z8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Where would Excel be on this?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF5PAGQQ4",
        "type": "message",
        "ts": "1564007822.295900",
        "client_msg_id": "DBDE9F8A-BD73-4687-825E-0CABD1ADCF55",
        "text": "I’m confused, is this <http:\/\/nodes.io|nodes.io> with a new name or a very similar separate project? <https:\/\/cables.gl\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g99a3fab7a1a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/299a3fab7a1a2d6644455dedae9fce0a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Stathis Sideris",
            "display_name": "Stathis",
            "team": "T5TCAFTA9",
            "name": "sideris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564007822.295900",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1564022323.297400",
        "reply_users": [
            "UBSMEUXAA",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UBSMEUXAA",
                "ts": "1564008109.296100"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1564008168.296300"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1564008322.296600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1564022323.297400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "cables",
                "title_link": "https:\/\/cables.gl\/",
                "text": "interactive visuals, made from cable salad",
                "fallback": "cables",
                "image_url": "https:\/\/cables.gl\/landing\/code.jpg",
                "from_url": "https:\/\/cables.gl\/",
                "image_width": 382,
                "image_height": 250,
                "image_bytes": 292121,
                "service_icon": "https:\/\/cables.gl\/favicon\/apple-touch-icon-57x57.png",
                "service_name": "cables.gl",
                "id": 1,
                "original_url": "https:\/\/cables.gl\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xzJ0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m confused, is this "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/nodes.io",
                                "text": "nodes.io"
                            },
                            {
                                "type": "text",
                                "text": " with a new name or a very similar separate project? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/cables.gl\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1564008109.296100",
        "client_msg_id": "c87f1621-b805-42ae-8515-403f58c4209b",
        "text": "afaik its a similar project that served as one of the sources of inspiration for <http:\/\/nodes.io|nodes.io>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564007822.295900",
        "parent_user_id": "UF5PAGQQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W1Y9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "afaik its a similar project that served as one of the sources of inspiration for "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/nodes.io",
                                "text": "nodes.io"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1564008168.296300",
        "client_msg_id": "e8a4ad0a-2e84-439d-9bb1-4627ef1d3f7e",
        "text": "From <http:\/\/nodes.io\/story\/>\n&gt; When we set off to create a tool of our own, there were already plenty of different node-based or visual scripting\/programming tools and environments – VVVV, Houdini, TouchDesigner, <http:\/\/Cables.gl|Cables.gl>, Vizor Patches, Lichen, MaxMSP, UE4 Blueprints and Origami among the more popular ones. In the years since we started Nodes, we encountered even more, some old, some brand new like the latest Unity Visual Effects Graph.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564007822.295900",
        "parent_user_id": "UF5PAGQQ4",
        "attachments": [
            {
                "title": "Nodes - Our Story",
                "title_link": "http:\/\/nodes.io\/story\/",
                "text": "Nodes is a new way to create with code",
                "fallback": "Nodes - Our Story",
                "image_url": "http:\/\/nodes.io\/story\/assets\/theme.jpg",
                "from_url": "http:\/\/nodes.io\/story\/",
                "image_width": 287,
                "image_height": 250,
                "image_bytes": 270766,
                "service_name": "nodes.io",
                "id": 1,
                "original_url": "http:\/\/nodes.io\/story\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9gyE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/nodes.io\/story\/"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When we set off to create a tool of our own, there were already plenty of different node-based or visual scripting\/programming tools and environments – VVVV, Houdini, TouchDesigner, "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/Cables.gl",
                                "text": "Cables.gl"
                            },
                            {
                                "type": "text",
                                "text": ", Vizor Patches, Lichen, MaxMSP, UE4 Blueprints and Origami among the more popular ones. In the years since we started Nodes, we encountered even more, some old, some brand new like the latest Unity Visual Effects Graph."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1564008322.296600",
        "client_msg_id": "e514aac1-7591-47d1-a599-3e7bb26c5472",
        "text": "They're very open with their inspirations and I think that's one of the reasons why the tool is interesting, its clearly made by people that have used a lot of node based editors for audiovisual\\visual effects\\game programming work and are focused on incorporating what they believe are the best features from different editors and domains",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564007822.295900",
        "parent_user_id": "UF5PAGQQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "veF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They're very open with their inspirations and I think that's one of the reasons why the tool is interesting, its clearly made by people that have used a lot of node based editors for audiovisual\\visual effects\\game programming work and are focused on incorporating what they believe are the best features from different editors and domains"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHDQ62M4P",
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1564009689.296900",
        "client_msg_id": "91ab411b-a68f-469b-b7ed-cafefc8239be",
        "text": "it's in there if you look. Nonmonotonic dataflow programming :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564006215.294100",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E\/7A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it's in there if you look. Nonmonotonic dataflow programming "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1564009906.297100",
        "client_msg_id": "250bdbde-cb85-4465-86c4-c26b3704e838",
        "text": "I wonder where APL, J, Joy are in here. (I don't know much about these languages)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564006215.294100",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ae\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder where APL, J, Joy are in here. (I don't know much about these languages)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564022323.297400",
        "client_msg_id": "86cfb6a0-ed16-4750-b0fa-6c79c9ccde2b",
        "text": "I haven't played with either (yet), but I think there's slightly more interesting stuff happening in Nodes than in Cables. Cables seems a little more typical nodes-and-lines, whereas Nodes seems to have a bit more fresh thought in its design.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564007822.295900",
        "parent_user_id": "UF5PAGQQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GFc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't played with either (yet), but I think there's slightly more interesting stuff happening in Nodes than in Cables. Cables seems a little more typical nodes-and-lines, whereas Nodes seems to have a bit more fresh thought in its design."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD31LGQKB",
                    "UA14TGLTC",
                    "UBSMEUXAA",
                    "UHWC9PXBL",
                    "UEG9ECNSU"
                ],
                "count": 5
            }
        ]
    }
]