[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1704442442.099289",
        "client_msg_id": "f8dc2e7d-6f24-40cc-940d-913d789464bb",
        "text": "That's indeed a very nice feature to have. I know, because I use it regularly.\n\n&gt; I think we should expand the definition of code in a language to include some of the tools and conventions that currently surround it.\nThat's pretty much the philosophy of Smalltalk-80 and its descendants, the quote by Dan Ingalls you cite is an illustration.\n\nSo, not suprisingly, the Smalltalk community has come up with a very similar mechanism: beacons (<https:\/\/github.com\/pharo-project\/pharo-beacon>). This is a logging framework designed to make sure that emitting log entries is very cheap if there is no listener. You can leave the emitting code in production software.\n\nBeacons are even more powerful because they can be combined with all the other interactive and reflective features of Smalltalk. My favorite example is logging the call stack. You can collect the call stack for each iteration of a loop, and then run the debugger on, say, the 5th iteration.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704389263.636049",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8PuUj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's indeed a very nice feature to have. I know, because I use it regularly.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think we should expand the definition of code in a language to include some of the tools and conventions that currently surround it."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's pretty much the philosophy of Smalltalk-80 and its descendants, the quote by Dan Ingalls you cite is an illustration.\n\nSo, not suprisingly, the Smalltalk community has come up with a very similar mechanism: beacons ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/pharo-project\/pharo-beacon"
                            },
                            {
                                "type": "text",
                                "text": "). This is a logging framework designed to make sure that emitting log entries is very cheap if there is no listener. You can leave the emitting code in production software.\n\nBeacons are even more powerful because they can be combined with all the other interactive and reflective features of Smalltalk. My favorite example is logging the call stack. You can collect the call stack for each iteration of a loop, and then run the debugger on, say, the 5th iteration."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]