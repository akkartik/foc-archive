[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1660553975.711859",
        "client_msg_id": "6c8dd9f8-8310-47ad-a2fb-b625c99a3436",
        "text": "There are certainly cases of designed systems that nobody understands, but I see them as fundamentally dysfunctional, and thus a different issue. A more interesting case is _evolved_ systems that aren't legible for anyone.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660317011.747929",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SJt+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are certainly cases of designed systems that nobody understands, but I see them as fundamentally dysfunctional, and thus a different issue. A more interesting case is "
                            },
                            {
                                "type": "text",
                                "text": "evolved",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " systems that aren't legible for anyone."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1660576106.850419",
        "client_msg_id": "44764d55-2ad7-4c12-a460-77a3473b648b",
        "text": "<@U013ZLJARC7> made a good point about convenient debugging.\n\nI indulged in riffing on this idea: too long to paste here, so I’ve written it in Obsidian instead <https:\/\/publish.obsidian.md\/programmingsimplicity\/2022-08-12-Convenient+Programming+IDEs>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659731101.023949",
        "parent_user_id": "UAJKEBGP8",
        "attachments": [
            {
                "from_url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2022-08-12-Convenient+Programming+IDEs",
                "service_icon": "https:\/\/publish.obsidian.md\/favicon.ico?4a3b2abd562b737041b1",
                "id": 1,
                "original_url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2022-08-12-Convenient+Programming+IDEs",
                "fallback": "2022-08-12-Convenient Programming IDEs - Obsidian Publish",
                "text": "2022-08-12-Convenient Programming IDEs - Powered by Obsidian Publish.",
                "title": "2022-08-12-Convenient Programming IDEs - Obsidian Publish",
                "title_link": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2022-08-12-Convenient+Programming+IDEs",
                "service_name": "publish.obsidian.md"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6MLg=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " made a good point about convenient debugging.\n\nI indulged in riffing on this idea: too long to paste here, so I’ve written it in Obsidian instead "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2022-08-12-Convenient+Programming+IDEs"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "<@U02E4DAQGSZ> <@UCUSW7WVD> <@UFPRPSA4S> <@UFBQNBYER> <@U03SYASNRFX>\n\nInternet friends, epiphanies were had. I present the goal of this whole goofy adventure: High performance, 3d, arbitrary text glyph rendering, animation, and editing.\n\nThis is the backend that is going to start powering my code analysis project, and with it, comes the unlocking of rendering _many tens of code *repositories* character-for-character in 3D space_, instead of just a handful of 30-50 files. All of this is running on an M1 Air, so it’s a graphics horse but nothing “professional”. Getting this performance at this level means pretty much anyone will be able to render larger amounts of text at once.\n\nThank you, many times over, for taking time to help last night. I have so far to go, but this is the biggest project advance in a long while.\n\nEnjoy: floating spinner letters at 60fps!",
        "files": [
            {
                "id": "F03TH6Q963G",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U03E4LY27FS",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+HN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UFPRPSA4S"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UFBQNBYER"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "U03SYASNRFX"
                            },
                            {
                                "type": "text",
                                "text": "\n\nInternet friends, epiphanies were had. I present the goal of this whole goofy adventure: High performance, 3d, arbitrary text glyph rendering, animation, and editing.\n\nThis is the backend that is going to start powering my code analysis project, and with it, comes the unlocking of rendering "
                            },
                            {
                                "type": "text",
                                "text": "many tens of code ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "repositories",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " character-for-character in 3D space",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", instead of just a handful of 30-50 files. All of this is running on an M1 Air, so it’s a graphics horse but nothing “professional”. Getting this performance at this level means pretty much anyone will be able to render larger amounts of text at once.\n\nThank you, many times over, for taking time to help last night. I have so far to go, but this is the biggest project advance in a long while.\n\nEnjoy: floating spinner letters at 60fps!"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1660580603.604969",
        "edited": {
            "user": "U03E4LY27FS",
            "ts": "1660580793.000000"
        },
        "client_msg_id": "2a3ddf25-f0fe-4bea-b78e-ca7c9b4c80df",
        "thread_ts": "1660513026.932579",
        "parent_user_id": "U03E4LY27FS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03SYASNRFX",
                    "U85HCL7JP",
                    "UFBQNBYER",
                    "U02E4DAQGSZ",
                    "UCUSW7WVD",
                    "UFPRPSA4S"
                ],
                "count": 6
            },
            {
                "name": "100",
                "users": [
                    "U03SYASNRFX"
                ],
                "count": 1
            },
            {
                "name": "tada",
                "users": [
                    "U03SYASNRFX",
                    "U02E4DAQGSZ",
                    "UJZS8UUJV"
                ],
                "count": 3
            },
            {
                "name": "racing_car",
                "users": [
                    "U03SYASNRFX"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1660586742.257249",
        "client_msg_id": "97e64d16-cfcf-4c0d-86a3-971ccdb78c4c",
        "text": "Post it to <#CCL5VVBAN|share-your-work> or <#C03RR0W5DGC|devlog-together> :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660513026.932579",
        "parent_user_id": "U03E4LY27FS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aWsCO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Post it to "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C03RR0W5DGC"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1660587368.334609",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1660587544.000000"
        },
        "client_msg_id": "baa897a9-d253-40b0-888d-8d8d136b757d",
        "text": "A few points:\n• Restarts are not hot-reloading, but you can change the runtime environment during the restart. (A \"doesn't change the environment\" example: unreachable network causes an error, but it's transient. You can \"retry\" the function call after the network comes back up, everything proceeds as usual. Your code doesn't need to know about this for it to work.)\n• \"Kill a process, replace it with another process with exactly the same FDs for stdin, stdout and stderr\" -&gt; one of the key points here is that _all the program state_ remains the same as you modify the data and functions within the running process. This is particularly useful, for example, you have a large data ingestion step at the beginning of your program, or there's some UI situation that it would take you a bunch of steps to get back to in order to test your change, or, or, or...\n• Glad you mention LispWorks :slightly_smiling_face: ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659731101.023949",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RIfHa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A few points:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Restarts are not hot-reloading, but you can change the runtime environment during the restart. (A \"doesn't change the environment\" example: unreachable network causes an error, but it's transient. You can \"retry\" the function call after the network comes back up, everything proceeds as usual. Your code doesn't need to know about this for it to work.)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"Kill a process, replace it with another process with exactly the same FDs for stdin, stdout and stderr\" -> one of the key points here is that "
                                    },
                                    {
                                        "type": "text",
                                        "text": "all the program state",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " remains the same as you modify the data and functions within the running process. This is particularly useful, for example, you have a large data ingestion step at the beginning of your program, or there's some UI situation that it would take you a bunch of steps to get back to in order to test your change, or, or, or..."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Glad you mention LispWorks "
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "slightly_smiling_face",
                                        "unicode": "1f642"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT",
                    "UA14TGLTC",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1660622143.650149",
        "client_msg_id": "9e99994f-1b26-40d4-83ed-ea24f997a3d1",
        "text": "For discussion: I am thinking that FoC should be done with “dynamic languages” (Lisp (pre-CL), JavaScript, REBOL, Self, technical diagrams, etc.).  PoC (Present of Coding) languages, e.g. “static languages” like Haskell, Rust, C++, etc., and, compiler-appeasement dynamic languages like Python, Racket, Scheme, Smalltalk, Common Lisp, etc., are used to optimize and to structure FoC ideas, but, they inhibit out-of-the-box-thinking.  Writing the program twice (or more times) is more efficient than writing the code once only in a PoC language.  What is “efficient”?  At one extreme: all Design and no optimization, at the other extreme: all Production Engineering (optimization) and no Design.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660622143.650149",
        "reply_count": 12,
        "reply_users_count": 6,
        "latest_reply": "1660734784.784359",
        "reply_users": [
            "U03CEGR3HSL",
            "UUQ2EQW21",
            "U013ZLJARC7",
            "U02E4DAQGSZ",
            "UJBAJNFLK",
            "U03LT7540HZ"
        ],
        "replies": [
            {
                "user": "U03CEGR3HSL",
                "ts": "1660622623.501149"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1660630995.060499"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1660632208.011949"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1660634899.008229"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1660636636.794179"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1660636709.836379"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1660639693.737089"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1660640256.059179"
            },
            {
                "user": "U03LT7540HZ",
                "ts": "1660655176.538259"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1660661847.663969"
            },
            {
                "user": "U03LT7540HZ",
                "ts": "1660661906.641459"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1660734784.784359"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4vc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For discussion: I am thinking that FoC should be done with “dynamic languages” (Lisp (pre-CL), JavaScript, REBOL, Self, technical diagrams, etc.).  PoC (Present of Coding) languages, e.g. “static languages” like Haskell, Rust, C++, etc., and, compiler-appeasement dynamic languages like Python, Racket, Scheme, Smalltalk, Common Lisp, etc., are used to optimize and to structure FoC ideas, but, they inhibit out-of-the-box-thinking.  Writing the program twice (or more times) is more efficient than writing the code once only in a PoC language.  What is “efficient”?  At one extreme: all Design and no optimization, at the other extreme: all Production Engineering (optimization) and no Design."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1660622623.501149",
        "client_msg_id": "6ffeef7f-b851-4734-a9f2-0cc11140784f",
        "text": "I'm not sure I fully understand how you classified each of those languages, especially Scheme and Smalltalk, but I love the phrase \"compiler-appeasement.\" It really captures the concept of limitations that arise from the accidental complexity of implementation, and not the effort to make a usable and useful design.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660622143.650149",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VQoQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure I fully understand how you classified each of those languages, especially Scheme and Smalltalk, but I love the phrase \"compiler-appeasement.\" It really captures the concept of limitations that arise from the accidental complexity of implementation, and not the effort to make a usable and useful design."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1660630995.060499",
        "client_msg_id": "AA94C0BE-3914-492F-AEC2-08DB4CE31B1E",
        "text": "For me the language is irrelevant; it is the idea that is important. Use the tool that will get the job done.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660622143.650149",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+YQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For me the language is irrelevant; it is the idea that is important. Use the tool that will get the job done."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1660632208.011949",
        "client_msg_id": "6f50a54e-b092-4c5b-8b63-556207005940",
        "text": "<@UGWUJUZHT> The two lists of languages don't make any sense to me. Can you expand on how you think Smalltalk is more of a compiler appeasement language relative to Self?\n\n<@UUQ2EQW21> I don't mean to be rude, so please try to take this in the collegial spirit with which I ask it: what do you think that comment adds to this conversation?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660622143.650149",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RCgQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " The two lists of languages don't make any sense to me. Can you expand on how you think Smalltalk is more of a compiler appeasement language relative to Self?\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UUQ2EQW21"
                            },
                            {
                                "type": "text",
                                "text": " I don't mean to be rude, so please try to take this in the collegial spirit with which I ask it: what do you think that comment adds to this conversation?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]