[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1646037383.780619",
        "client_msg_id": "45c1dc4d-8c0f-4557-a25e-8b07a46f34ea",
        "text": "Individually, I am oscillating between the two. I guess I am not the only one here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645781743.595899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "441Mk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Individually, I am oscillating between the two. I guess I am not the only one here."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U016VUZGUUQ",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1646074796.040879",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1646074849.000000"
        },
        "client_msg_id": "d38e8ab2-e942-4612-9f23-ab7d1667159b",
        "text": "I've noticed that most visual programming projects seem to be focused on new (and often unintentionally more difficult) ways to build traditional difficult to use end user apps, instead of making frameworks that help make end user apps themselves easier to use. Might it be more productive to work backwards from making life better for the end user as the path towards better developer tools? e.g. \"We want end users to be able to do X, Y, Z in all situations, so what tools do we make to get there?\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646074796.040879",
        "reply_count": 8,
        "reply_users_count": 5,
        "latest_reply": "1646138350.849909",
        "reply_users": [
            "UCUSW7WVD",
            "U016VUZGUUQ",
            "U0264CJ5W83",
            "ULM3U6275",
            "UEQ7QL15F"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1646081167.507009"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1646082638.004999"
            },
            {
                "user": "U0264CJ5W83",
                "ts": "1646092613.451809"
            },
            {
                "user": "U0264CJ5W83",
                "ts": "1646092650.801639"
            },
            {
                "user": "ULM3U6275",
                "ts": "1646096183.951259"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1646096363.436029"
            },
            {
                "user": "UEQ7QL15F",
                "ts": "1646138273.238479"
            },
            {
                "user": "UEQ7QL15F",
                "ts": "1646138350.849909"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kyN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've noticed that most visual programming projects seem to be focused on new (and often unintentionally more difficult) ways to build traditional difficult to use end user apps, instead of making frameworks that help make end user apps themselves easier to use. Might it be more productive to work backwards from making life better for the end user as the path towards better developer tools? e.g. \"We want end users to be able to do X, Y, Z in all situations, so what tools do we make to get there?\""
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UEBG0NPDK",
                    "U014WA16VNJ",
                    "UCUSW7WVD",
                    "U016VUZGUUQ",
                    "U02U0AS3J49",
                    "UEQ7QL15F",
                    "UA14TGLTC",
                    "UNCP67JSK"
                ],
                "count": 8
            },
            {
                "name": "star",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1646081167.507009",
        "client_msg_id": "49a89a8b-ab97-4d20-bd98-0759abe68bc7",
        "text": "\"in all situations\" = interop with every program the end user could possibly run? Or every possible task someone might want to perform?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646074796.040879",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hrG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"in all situations\" = interop with every program the end user could possibly run? Or every possible task someone might want to perform?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1646082638.004999",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1646082658.000000"
        },
        "client_msg_id": "cee3af8a-422f-4be2-85de-46c27cb610de",
        "text": "<@UCUSW7WVD> kinda yeah :). Reading \"The Humane Interface\" or whatever by Jef Raskin was influential to me in that regard, as a design at roughly that scope.\n\nAnother angle: it's beneficial to users if the \"programming\" interface of their system closely resembles how you do things \"by hand\". You can see this in effect today with some power-user oriented programs where there's a blurry boundary between programming and high-leverage manual interactions (I'm thinking kakoune, but Vim will do, I suspect Photoshop too). Leaning into that idea tightly ties your programming and UI models.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646074796.040879",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BcPQg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " kinda yeah :). Reading \"The Humane Interface\" or whatever by Jef Raskin was influential to me in that regard, as a design at roughly that scope.\n\nAnother angle: it's beneficial to users if the \"programming\" interface of their system closely resembles how you do things \"by hand\". You can see this in effect today with some power-user oriented programs where there's a blurry boundary between programming and high-leverage manual interactions (I'm thinking kakoune, but Vim will do, I suspect Photoshop too). Leaning into that idea tightly ties your programming and UI models."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1646082898.057189",
        "client_msg_id": "6ddc8441-2d33-4d12-afb5-0fc4cd07e199",
        "text": "Kartik: Imagine teaching math to someone using a calculator, and telling them I'm just using the calculator as a teaching tool, so you can do it in your head, or on paper later. That's the lack of vision I am talking about. If you have managed to make something more accessible for teaching it to children, you have also, necessarily, just made it more accessible, full stop. Why assume that the accessibility is ultimately going to need to be abandoned? Why not strive to make the accessible version scale better? Use it to teach people to eventually type code, for the time being, while the options are limited. But also search for options.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645811249.437739",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kb8oO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Kartik: Imagine teaching math to someone using a calculator, and telling them I'm just using the calculator as a teaching tool, so you can do it in your head, or on paper later. That's the lack of vision I am talking about. If you have managed to make something more accessible for teaching it to children, you have also, necessarily, just made it more accessible, full stop. Why assume that the accessibility is ultimately going to need to be abandoned? Why not strive to make the accessible version scale better? Use it to teach people to eventually type code, for the time being, while the options are limited. But also search for options."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1646085307.807739",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1646085373.000000"
        },
        "client_msg_id": "85b34dd8-3ee1-499a-a56e-d70f5533f447",
        "text": "I don't quite follow that. Perhaps we need a different example, because the question of whether kids should learn mental arithmetic kinda muddies this one. As another example, consider how we teach orbital mechanics to kids. Most of humanity never learns the fully detailed process that NASA uses to accurately compute a satellite's trajectory. Computing the precession of Mercury is still fairly specialized, from what I can gather. When people need to perform these operations \"for real\", they just learn how to do it. We don't ask why the procedure is complicated and hard to learn.\n\nBeyond the question of which side we each prefer, I'm still struggling with how you hold these two thoughts in your head at once:\n• Stage complexity so we don't overwhelm learners.\n• Why can't we just expand the simpler approach learners use so it always just works? Seems like lack of vision.\n(I suspect I'm just misunderstanding what you mean. Hopefully putting words in your mouth like I just did above will help catch the bug.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645811249.437739",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X9pZ3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't quite follow that. Perhaps we need a different example, because the question of whether kids should learn mental arithmetic kinda muddies this one. As another example, consider how we teach orbital mechanics to kids. Most of humanity never learns the fully detailed process that NASA uses to accurately compute a satellite's trajectory. Computing the precession of Mercury is still fairly specialized, from what I can gather. When people need to perform these operations \"for real\", they just learn how to do it. We don't ask why the procedure is complicated and hard to learn.\n\nBeyond the question of which side we each prefer, I'm still struggling with how you hold these two thoughts in your head at once:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Stage complexity so we don't overwhelm learners."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Why can't we just expand the simpler approach learners use so it always just works? Seems like lack of vision."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n(I suspect I'm just misunderstanding what you mean. Hopefully putting words in your mouth like I just did above will help catch the bug.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1646088463.818799",
        "client_msg_id": "cbd18c62-a531-4cda-927c-bda5bd9c38d9",
        "text": "I think orbital mechanics is a bad example, because almost no one needs or can benefit from having it as a skill. The same can't be said for code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645811249.437739",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BSs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think orbital mechanics is a bad example, because almost no one needs or can benefit from having it as a skill. The same can't be said for code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1646088604.427529",
        "client_msg_id": "5a8f6644-31f0-4eb4-869f-a5133c4113f8",
        "text": "I don't think \"staging complexity so we don't overwhelm learners\" is quite what I'm saying. Because that could be accomplished by teaching them increasing sub-sets of the existing tools. That's good pedagogy, not good design. I'm saying \"design programming languages with ease of learning as a design objective.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645811249.437739",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mZMEo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think \"staging complexity so we don't overwhelm learners\" is quite what I'm saying. Because that could be accomplished by teaching them increasing sub-sets of the existing tools. That's good pedagogy, not good design. I'm saying \"design programming languages with ease of learning as a design objective.\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1646088785.969259",
        "client_msg_id": "dc43df9f-b157-4ba8-ad6b-03d0faf42892",
        "text": "Right now, people who write Blockly are attempting to put a wrapper around a subset of JavaScript with the intention that the wrapper is eventually removed. But programming languages are wrappers all the way down. Everything gets compiled into something else. So the difference between \"a tool to help people learn JavaScript\" and \"a visual programming language that is easy to learn\" is vanishingly small.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645811249.437739",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MT9g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right now, people who write Blockly are attempting to put a wrapper around a subset of JavaScript with the intention that the wrapper is eventually removed. But programming languages are wrappers all the way down. Everything gets compiled into something else. So the difference between \"a tool to help people learn JavaScript\" and \"a visual programming language that is easy to learn\" is vanishingly small."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1646090897.423449",
        "client_msg_id": "f35b0dc2-d5fc-483c-9ec9-a59e34c7001a",
        "text": "I've tended to assume good pedagogy = good design, so this conversation is extremely relevant\/interesting for me. A little more detail on my belief system:\n\n&gt; Understanding a strange codebase is hard. I can't change that, but I think I can make it easier for people to persevere. I want to carve steps into the wall of the learning process. Most programs today yield insight only after days or weeks of unrewarded effort. I want an hour of reward for an hour (or three) of effort.\n(<http:\/\/akkartik.name\/about>)\n\nMy previous project actually involved helping people understand how their code was translated all the way down to machine code: <https:\/\/github.com\/akkartik\/mu>. It wasn't visual, however. The goal is to introduce increasing subsets on demand -- and minimize the amount of backtracking. Later stages shouldn't require unlearning previous stages.\n\nThe point of my orbital mechanics example was that we teach Physics to everyone today (aspirationally) but we still don't require everyone to know _all of Physics_. I've long advocated that everyone needs to learn to code (most recently <https:\/\/archive.org\/details\/akkartik-2022-01-16-fosdem>), but I haven't quite been so bold as to say everyone should know, say, how to write an OS. Instead, my definition of literacy is, \"everyone can read novels even if only a few people write novels.\"\n\nSo I think you can have everything you want while having diverse programming activities. As long as the process of learning to go from one kind to the other doesn't have abrupt transitions.\n\nAnother possibility. In a world where everyone knows to program, I think we'll also see a change in the distributions of different kinds of programs being created. If everyone's hacking on federated versions of services we don't need all the queries-per-second, uptime guarantees, fault tolerance of centralized services today. CRDTs give us ways to minimize what people have to learn about race conditions. So the spectrum of programming may shrink, making it easier for people to span it from end to end.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645811249.437739",
        "parent_user_id": "U02U0AS3J49",
        "attachments": [
            {
                "from_url": "https:\/\/archive.org\/details\/akkartik-2022-01-16-fosdem",
                "thumb_url": "https:\/\/archive.org\/download\/akkartik-2022-01-16-fosdem\/akkartik-2022-01-16-fosdem.thumbs\/lastmilesandboxing_000114.jpg",
                "thumb_width": 720,
                "thumb_height": 406,
                "service_icon": "https:\/\/archive.org\/favicon.ico",
                "id": 2,
                "original_url": "https:\/\/archive.org\/details\/akkartik-2022-01-16-fosdem",
                "fallback": "Internet Archive: Why everyone needs to know some coding: last-mile sandboxing : Kartik Agaram : Free Download, Borrow, and Streaming : Internet Archive",
                "text": "My talk at FOSDEM '22Main page for the talk, including video of Q&amp;A: <https:\/\/fosdem.org\/2022\/schedule\/event\/lastmilesandboxingMain> project page:...",
                "title": "Why everyone needs to know some coding: last-mile sandboxing : Kartik Agaram : Free Download, Borrow, and Streaming : Internet Archive",
                "title_link": "https:\/\/archive.org\/details\/akkartik-2022-01-16-fosdem",
                "service_name": "Internet Archive"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CF0M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've tended to assume good pedagogy = good design, so this conversation is extremely relevant\/interesting for me. A little more detail on my belief system:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Understanding a strange codebase is hard. I can't change that, but I think I can make it easier for people to persevere. I want to carve steps into the wall of the learning process. Most programs today yield insight only after days or weeks of unrewarded effort. I want an hour of reward for an hour (or three) of effort."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/about"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nMy previous project actually involved helping people understand how their code was translated all the way down to machine code: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu"
                            },
                            {
                                "type": "text",
                                "text": ". It wasn't visual, however. The goal is to introduce increasing subsets on demand -- and minimize the amount of backtracking. Later stages shouldn't require unlearning previous stages.\n\nThe point of my orbital mechanics example was that we teach Physics to everyone today (aspirationally) but we still don't require everyone to know "
                            },
                            {
                                "type": "text",
                                "text": "all of Physics",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I've long advocated that everyone needs to learn to code (most recently "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/archive.org\/details\/akkartik-2022-01-16-fosdem"
                            },
                            {
                                "type": "text",
                                "text": "), but I haven't quite been so bold as to say everyone should know, say, how to write an OS. Instead, my definition of literacy is, \"everyone can read novels even if only a few people write novels.\"\n\nSo I think you can have everything you want while having diverse programming activities. As long as the process of learning to go from one kind to the other doesn't have abrupt transitions.\n\nAnother possibility. In a world where everyone knows to program, I think we'll also see a change in the distributions of different kinds of programs being created. If everyone's hacking on federated versions of services we don't need all the queries-per-second, uptime guarantees, fault tolerance of centralized services today. CRDTs give us ways to minimize what people have to learn about race conditions. So the spectrum of programming may shrink, making it easier for people to span it from end to end."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0264CJ5W83",
        "type": "message",
        "ts": "1646092613.451809",
        "client_msg_id": "27e098c6-d8a6-4c15-8a5d-8d33e1de1dda",
        "text": "didn't frontpage and dreamweaver take this approach?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3142da7de3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-06-24\/2193499626679_e3142da7de3f64211bb6_72.jpg",
            "first_name": "",
            "real_name": "Tony O'Dell",
            "display_name": "Tony O'Dell",
            "team": "T5TCAFTA9",
            "name": "tony.odell",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646074796.040879",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LNCD9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "didn't frontpage and dreamweaver take this approach?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0264CJ5W83",
        "type": "message",
        "ts": "1646092650.801639",
        "client_msg_id": "4caa38cb-7271-4481-92f3-25860d8f9ca1",
        "text": "FP aimed to make website creation be more like templated document creation and dreamweaver went a step further.  wordpress is kind of a hybrid.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3142da7de3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-06-24\/2193499626679_e3142da7de3f64211bb6_72.jpg",
            "first_name": "",
            "real_name": "Tony O'Dell",
            "display_name": "Tony O'Dell",
            "team": "T5TCAFTA9",
            "name": "tony.odell",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646074796.040879",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KtX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FP aimed to make website creation be more like templated document creation and dreamweaver went a step further.  wordpress is kind of a hybrid."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1646096183.951259",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1646096205.000000"
        },
        "client_msg_id": "28b42d78-8f80-41d3-9673-5ff00a9f977d",
        "text": "I'm not familiar with Frontpage or Dreamweaver, but I see HyperCard as taking this approach. e.g. \"Every user should be able to extend this in certain ways, and we're going to accomplish that though some abstraction and uniformity.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646074796.040879",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PoUt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not familiar with Frontpage or Dreamweaver, but I see HyperCard as taking this approach. e.g. \"Every user should be able to extend this in certain ways, and we're going to accomplish that though some abstraction and uniformity.\""
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEQ7QL15F"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1646096363.436029",
        "client_msg_id": "8029236d-69e4-4770-a76a-d21dd4cfb7ce",
        "text": "That helps a lot. I wonder if you'll find my new project to fit the bill: <https:\/\/github.com\/akkartik\/teliva|https:\/\/github.com\/akkartik\/teliva>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646074796.040879",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qP4Lk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That helps a lot. I wonder if you'll find my new project to fit the bill: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/teliva",
                                "text": "https:\/\/github.com\/akkartik\/teliva"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1646100043.487279",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1646100130.000000"
        },
        "client_msg_id": "ad7a6b3b-1734-4481-9d26-443bd0226718",
        "text": "I can't agree with either of these, as they both champion simplicity, which is such a platitude at this point that I'm just refusing to frame analysis in those terms.\n\nThat said, I think I lean more NJ than MIT, just because I'd rather make something incomplete but cool than something complete but dull.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645781743.595899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fQ=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can't agree with either of these, as they both champion simplicity, which is such a platitude at this point that I'm just refusing to frame analysis in those terms.\n\nThat said, I think I lean more NJ than MIT, just because I'd rather make something incomplete but cool than something complete but dull."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]