[
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1601552062.111900",
        "client_msg_id": "48A14917-7A2A-43E4-ADB5-6BDEC2366C3B",
        "text": "I think the _biggest_ assumption in this thread is that the Future of Coding even involves the concept of a “function” :innocent:. I encourage people to explore possible alternatives to “callable units of code” — my planned (general purpose) language doesn’t have it! Thus it’s not even possible to talk about side effects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TiqjL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the "
                            },
                            {
                                "type": "text",
                                "text": "biggest",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " assumption in this thread is that the Future of Coding even involves the concept of a “function” "
                            },
                            {
                                "type": "emoji",
                                "name": "innocent",
                                "unicode": "1f607"
                            },
                            {
                                "type": "text",
                                "text": ". I encourage people to explore possible alternatives to “callable units of code” — my planned (general purpose) language doesn’t have it! Thus it’s not even possible to talk about side effects."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1601555025.112200",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1601560647.000000"
        },
        "client_msg_id": "ed47487b-bb08-4681-b7fc-4d2c6c42121d",
        "text": "<@UCGAK10LS> In my planned language, there are two kinds of \"callable units of code\": functions and procedures. Functions are pure mathematical functions with no side effects, and they compute a value. Procedures perform an effect, such as an I\/O effect.\n\nI don't do logic programming, so correct me if I'm wrong, but in Prolog, you don't have functions. You have facts, rules, predicates, and evaluation is logical deduction. I\/O is done using magic I\/O predicates that perform I\/O as a side effect of deduction. So Prolog models I\/O using side effects, even though it doesn't have functions. How does I\/O work in your language?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PA7E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " In my planned language, there are two kinds of \"callable units of code\": functions and procedures. Functions are pure mathematical functions with no side effects, and they compute a value. Procedures perform an effect, such as an I\/O effect.\n\nI don't do logic programming, so correct me if I'm wrong, but in Prolog, you don't have functions. You have facts, rules, predicates, and evaluation is logical deduction. I\/O is done using magic I\/O predicates that perform I\/O as a side effect of deduction. So Prolog models I\/O using side effects, even though it doesn't have functions. How does I\/O work in your language?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1601557156.112400",
        "client_msg_id": "3ccccec2-2038-4b6d-92dd-b0aecf94e3e5",
        "text": "<@U01AD80KMLK> your project sounds like a form of knowledge representation, but one people can actually execute. is that right?\n\nThat would mean that one could write a wiki page referencing these functions and that page could potentially be executed to yield a result.\n\nI’m curious if you’ve envisioned a potential user flow in which this product is involved. how would it look like?\n\nalso, the job posting doesn’t mention the project at all. what role would the developer play in this project?\n\nI’m asking, because I’ve been thinking about something similar. I’ve been thinking of basing my knowledge representation system on lambda calculus. I don’t know if you’ve considered the same",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kn1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01AD80KMLK"
                            },
                            {
                                "type": "text",
                                "text": " your project sounds like a form of knowledge representation, but one people can actually execute. is that right?\n\nThat would mean that one could write a wiki page referencing these functions and that page could potentially be executed to yield a result.\n\nI’m curious if you’ve envisioned a potential user flow in which this product is involved. how would it look like?\n\nalso, the job posting doesn’t mention the project at all. what role would the developer play in this project?\n\nI’m asking, because I’ve been thinking about something similar. I’ve been thinking of basing my knowledge representation system on lambda calculus. I don’t know if you’ve considered the same"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601564039.112700",
        "client_msg_id": "61a9c778-b735-43ea-b598-367ca40b232d",
        "text": "<@UDQKHNP51> I am having trouble with the term knowledge representation for this case, but this is really a terminological issue. To make it short, yes, it will be able to execute.\n\nSo one possible user flow could be: hey, what's the reverse of my text? I go to the page for reverting a string, there's a box where I can enter my text, I copy and paste into it, click on \"go\", and it shows me the result.\n\nThe job posting will be a full stack developer on the MediaWiki extension we are building to support the wiki of functions, and on the evaluation engine to run the functions for the users. We are a small team, and we plan to grow, but for now we only have one engineer, and we need more. We will specialize later with more engineers, but for now we need someone who can help with everything, if that makes sense :slightly_smiling_face:\n\nRegarding the lambda calculus, yes, take a look at this walkthrough through an earlier prototype, where in fact everything was built on lambda calculus: <https:\/\/github.com\/google\/abstracttext\/blob\/master\/eneyj\/docs\/walkthrough.md>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "google\/abstracttext",
                "title_link": "https:\/\/github.com\/google\/abstracttext\/blob\/master\/eneyj\/docs\/walkthrough.md",
                "text": "MediaWiki extension to handle multilingual abstract content - google\/abstracttext",
                "fallback": "GitHub: google\/abstracttext",
                "thumb_url": "https:\/\/avatars0.githubusercontent.com\/u\/1342004?s=400&v=4",
                "from_url": "https:\/\/github.com\/google\/abstracttext\/blob\/master\/eneyj\/docs\/walkthrough.md",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/google\/abstracttext\/blob\/master\/eneyj\/docs\/walkthrough.md"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yF99",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQKHNP51"
                            },
                            {
                                "type": "text",
                                "text": " I am having trouble with the term knowledge representation for this case, but this is really a terminological issue. To make it short, yes, it will be able to execute.\n\nSo one possible user flow could be: hey, what's the reverse of my text? I go to the page for reverting a string, there's a box where I can enter my text, I copy and paste into it, click on \"go\", and it shows me the result.\n\nThe job posting will be a full stack developer on the MediaWiki extension we are building to support the wiki of functions, and on the evaluation engine to run the functions for the users. We are a small team, and we plan to grow, but for now we only have one engineer, and we need more. We will specialize later with more engineers, but for now we need someone who can help with everything, if that makes sense "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nRegarding the lambda calculus, yes, take a look at this walkthrough through an earlier prototype, where in fact everything was built on lambda calculus: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/google\/abstracttext\/blob\/master\/eneyj\/docs\/walkthrough.md"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1601567010.120000",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1601567072.000000"
        },
        "client_msg_id": "76076114-878C-47B4-8AD9-12CA2859F067",
        "text": "This is a very real issue already right now. I have tapes with scientific data written on a Cray X\/MP in the 1990s. There are no tape readers for that format any more. For my DDS backup tapes, readers probably still exist somewhere, but I don”t have access to them. And my Apple Keynote files from 2006 are unreadable with today’s Keynote. It tells me to convert them using Keynote ‘09 - which is no longer available.\nI have moved all my important data to non-proprietary formats over the last years. That’s no guarantee for preservation, but chances are much better.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601503724.095900",
        "parent_user_id": "U019CPED6T1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AKlW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a very real issue already right now. I have tapes with scientific data written on a Cray X\/MP in the 1990s. There are no tape readers for that format any more. For my DDS backup tapes, readers probably still exist somewhere, but I don”t have access to them. And my Apple Keynote files from 2006 are unreadable with today’s Keynote. It tells me to convert them using Keynote ‘09 - which is no longer available.\nI have moved all my important data to non-proprietary formats over the last years. That’s no guarantee for preservation, but chances are much better."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "disappointed",
                "users": [
                    "U019CPED6T1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1601578120.120600",
        "client_msg_id": "d448861a-c4b6-4986-a5d5-7e1b031161c3",
        "text": "<@UJN1TAYEQ> in the paper I linked, Algebraic Effects are applied in a functional language (and can express a purity much stronger than Haskell's). They can be arbitrarily fine-grained, and the calling context has full control over how the effects are expressed (so yes, you can tell what state is modified ;) ). It's semantically very close to returning actions, but with friendlier control flow.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u4E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " in the paper I linked, Algebraic Effects are applied in a functional language (and can express a purity much stronger than Haskell's). They can be arbitrarily fine-grained, and the calling context has full control over how the effects are expressed (so yes, you can tell what state is modified ;) ). It's semantically very close to returning actions, but with friendlier control flow."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1601593895.135000",
        "client_msg_id": "1E116E7D-A708-4CF2-98BD-6EC29B1E2B95",
        "text": "<@UJN1TAYEQ> I’ll first mention (as I do often) that I consider Prolog to be a horrible exemplar for logic programming because whilst it features deduction, it is also steeped in imperative concepts (side effects) and functional concepts (some relations have “input” and “output” parameters). It’s a big mix of several paradigms.\n\nMy own plan for I\/O: the state of the program is just a set of deductions. Rules can only make deductions: they have no additional effects. Relations do not have “inputs” and “outputs”: they are just a set of deductions. How does a program interact with the external world? External agents just look at the program state and execute actions accordingly. If the program wants to flip on a light switch, then it just puts a tuple into its state (“light switch”, “on”) and an external “switch-flipper agent”  (pre-configured with permission to view a portion of the program state) does the flipping. These agents are managed by the operating system: they aren’t part of the programming language or its libraries.\n\nExternal agents can also *write* tuples to the program’s state, of course.\n\nI plan to use a model of time that accommodates such interactions and allows a distinction to be made between “events” (momentary tuples) and “state” (persistent tuples). All I\/O must be asynchronous in order to have a clean way to define state transitions (observe event -&gt; deduce new state).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "134Rc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " I’ll first mention (as I do often) that I consider Prolog to be a horrible exemplar for logic programming because whilst it features deduction, it is also steeped in imperative concepts (side effects) and functional concepts (some relations have “input” and “output” parameters). It’s a big mix of several paradigms.\n\nMy own plan for I\/O: the state of the program is just a set of deductions. Rules can only make deductions: they have no additional effects. Relations do not have “inputs” and “outputs”: they are just a set of deductions. How does a program interact with the external world? External agents just look at the program state and execute actions accordingly. If the program wants to flip on a light switch, then it just puts a tuple into its state (“light switch”, “on”) and an external “switch-flipper agent”  (pre-configured with permission to view a portion of the program state) does the flipping. These agents are managed by the operating system: they aren’t part of the programming language or its libraries.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "External agents can also "
                            },
                            {
                                "type": "text",
                                "text": "write",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " tuples to the program’s state, of course.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nI plan to use a model of time that accommodates such interactions and allows a distinction to be made between “events” (momentary tuples) and “state” (persistent tuples). All I\/O must be asynchronous in order to have a clean way to define state transitions (observe event -> deduce new state)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "grinning",
                "users": [
                    "UNCP67JSK"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "U016VUZGUUQ"
                ],
                "count": 1
            }
        ]
    }
]