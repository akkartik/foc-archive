[
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1605124537.384800",
        "edited": {
            "user": "U01DUNFS2N4",
            "ts": "1605124603.000000"
        },
        "client_msg_id": "83ae43aa-63db-429e-b46d-1b1b80b14af0",
        "text": "Sort of along the lines above, is it possible that what people are looking for with static types is an additional alternative view of a function? I've found very little reason for types in my work from a compiler perspective, but it does often occur that I see a function name and argument list without knowing what to do with it. e.g. the following:\n\n```(map (fn [price-bracket]\n       (let [groups (group-by :contract-type price-bracket)]\n         (mc\/map-vals (fn [contracts]\n                        (dt\/aggregate-table contracts\n                          {:selected-keys      [:returns\n                                                :revenue \n                                                :cost\n                                                :market-price]}))\n           groups)))\n  individual)```\nThis could alternatively be shown as\n```[[{whatever keys} ...] ...]\n=&gt; [{contract {:returns ... :revenue ... :cost ... :market-price ...} ...} ...]```\nWhich, along with a name is *far* faster to grok and read past",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "reply_count": 12,
        "reply_users_count": 8,
        "latest_reply": "1605230026.415300",
        "reply_users": [
            "USH01JEDQ",
            "UPX3PH28N",
            "UCUSW7WVD",
            "UA14TGLTC",
            "U015902ESJC",
            "U016VUZGUUQ",
            "UG0EL18H3",
            "U01DUNFS2N4"
        ],
        "replies": [
            {
                "user": "USH01JEDQ",
                "ts": "1605125200.385200"
            },
            {
                "user": "UPX3PH28N",
                "ts": "1605126719.385400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1605136087.385800"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1605152712.386100"
            },
            {
                "user": "U015902ESJC",
                "ts": "1605161690.386300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1605167685.386500"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1605172819.398700"
            },
            {
                "user": "UG0EL18H3",
                "ts": "1605191179.413500"
            },
            {
                "user": "U01DUNFS2N4",
                "ts": "1605217151.414500"
            },
            {
                "user": "U01DUNFS2N4",
                "ts": "1605220210.414900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1605229741.415100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1605230026.415300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ukJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sort of along the lines above, is it possible that what people are looking for with static types is an additional alternative view of a function? I've found very little reason for types in my work from a compiler perspective, but it does often occur that I see a function name and argument list without knowing what to do with it. e.g. the following:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(map (fn [price-bracket]\n       (let [groups (group-by :contract-type price-bracket)]\n         (mc\/map-vals (fn [contracts]\n                        (dt\/aggregate-table contracts\n                          {:selected-keys      [:returns\n                                                :revenue \n                                                :cost\n                                                :market-price]}))\n           groups)))\n  individual)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This could alternatively be shown as\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[[{whatever keys} ...] ...]\n=> [{contract {:returns ... :revenue ... :cost ... :market-price ...} ...} ...]"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Which, along with a name is "
                            },
                            {
                                "type": "text",
                                "text": "far",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " faster to grok and read past"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1605125200.385200",
        "edited": {
            "user": "USH01JEDQ",
            "ts": "1605127079.000000"
        },
        "client_msg_id": "9e7d98a9-5b47-4c40-b4e7-50de6c7355ac",
        "text": "I'd say that functions also usually entail a transformation of some kind - a type is useful to understand the pre-transformation state (and often a separate type for the post-transformation state - why it's helpful to spell these out as explicit function signatures)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PJD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd say that functions also usually entail a transformation of some kind - a type is useful to understand the pre-transformation state (and often a separate type for the post-transformation state - why it's helpful to spell these out as explicit function signatures)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1605126719.385400",
        "client_msg_id": "6441dd03-c10b-4371-b6c0-b1eba4077f04",
        "text": "Static types also help during refactor. Add a parameter to a function — compile errors show you all the places that you need to pass it. Convert parameter from string to aggregate structure — same thing, you have a list of places that you need to fix. This makes me quite comfortable doing large-scale refactorings. With dynamically-typed languages I'm much more cautious",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o6p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Static types also help during refactor. Add a parameter to a function — compile errors show you all the places that you need to pass it. Convert parameter from string to aggregate structure — same thing, you have a list of places that you need to fix. This makes me quite comfortable doing large-scale refactorings. With dynamically-typed languages I'm much more cautious"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UUB7RA7PF",
                    "UA14TGLTC",
                    "U01EKU0UM24"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1605136087.385800",
        "client_msg_id": "bb6d5ae1-d677-4c7f-9c84-27f8c901b504",
        "text": "The growing prevalence of pattern matching in modern languages seems to bear this out.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QLwOz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The growing prevalence of pattern matching in modern languages seems to bear this out."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1605152712.386100",
        "client_msg_id": "80d687a3-5d31-4155-8bbf-8edc9efb95b2",
        "text": "<@UPX3PH28N> the refactor concern is a good one.  I've long asked myself how to better manage refactoring from a dynamic perspective — as opposed to adding static features to a dynamic language.  Since a refactor wants to be behaviorally invariant (to some degree), why not keep track of the behavior?\n\nConsider the case of changing a parameter type.  If the normal brain dynamic way is to make the change and see what tests break, then the galaxy brain dynamic way would be to show all the places where code needs to change from having remembered (traced) all the times the function is called in practice.  Using traces in this way feels a lot like static analysis and loops around when you switch from concrete traces to more symbolic\/partial kind of evaluation.  You find yourself back in familiar static typing territory when the symbolic evaluation is more limited.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Rh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UPX3PH28N"
                            },
                            {
                                "type": "text",
                                "text": " the refactor concern is a good one.  I've long asked myself how to better manage refactoring from a dynamic perspective — as opposed to adding static features to a dynamic language.  Since a refactor wants to be behaviorally invariant (to some degree), why not keep track of the behavior?\n\nConsider the case of changing a parameter type.  If the normal brain dynamic way is to make the change and see what tests break, then the galaxy brain dynamic way would be to show all the places where code needs to change from having remembered (traced) all the times the function is called in practice.  Using traces in this way feels a lot like static analysis and loops around when you switch from concrete traces to more symbolic\/partial kind of evaluation.  You find yourself back in familiar static typing territory when the symbolic evaluation is more limited."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1605161690.386300",
        "client_msg_id": "ae1db0ba-59ef-4b68-96f8-c4f2cb5b181d",
        "text": "<@UCUSW7WVD> What do you mean by \"The growing prevalence of pattern matching in modern languages seems to bear this out.\"? I'm trying to reach for examples of pattern matching in modern languages and am drawing a blank.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2f+MC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " What do you mean by \"The growing prevalence of pattern matching in modern languages seems to bear this out.\"? I'm trying to reach for examples of pattern matching in modern languages and am drawing a blank."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1605167685.386500",
        "client_msg_id": "839551c6-eb20-4886-9cdd-1fe2feea180d",
        "text": "Approximately in chronological order:\n\nSML: <https:\/\/courses.cs.washington.edu\/courses\/cse341\/04wi\/lectures\/03-ml-functions.html|https:\/\/courses.cs.washington.edu\/courses\/cse341\/04wi\/lectures\/03-ml-functions.html>\n\nHaskell: <http:\/\/learnyouahaskell.com\/syntax-in-functions|http:\/\/learnyouahaskell.com\/syntax-in-functions>\n\nScheme: <https:\/\/www.gnu.org\/software\/guile\/manual\/html_node\/Syntax-Rules.html|https:\/\/www.gnu.org\/software\/guile\/manual\/html_node\/Syntax-Rules.html>\n\nScala: <https:\/\/docs.scala-lang.org\/tour\/pattern-matching.html|https:\/\/docs.scala-lang.org\/tour\/pattern-matching.html>\n\nRust: <https:\/\/doc.rust-lang.org\/book\/ch18-03-pattern-syntax.html|https:\/\/doc.rust-lang.org\/book\/ch18-03-pattern-syntax.html>\n\nSwift: <https:\/\/docs.swift.org\/swift-book\/ReferenceManual\/Patterns.html|https:\/\/docs.swift.org\/swift-book\/ReferenceManual\/Patterns.html>\n\nEtc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=2Ng",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Approximately in chronological order:\n\nSML: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/courses.cs.washington.edu\/courses\/cse341\/04wi\/lectures\/03-ml-functions.html",
                                "text": "https:\/\/courses.cs.washington.edu\/courses\/cse341\/04wi\/lectures\/03-ml-functions.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nHaskell: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/learnyouahaskell.com\/syntax-in-functions",
                                "text": "http:\/\/learnyouahaskell.com\/syntax-in-functions"
                            },
                            {
                                "type": "text",
                                "text": "\n\nScheme: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.gnu.org\/software\/guile\/manual\/html_node\/Syntax-Rules.html",
                                "text": "https:\/\/www.gnu.org\/software\/guile\/manual\/html_node\/Syntax-Rules.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nScala: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.scala-lang.org\/tour\/pattern-matching.html",
                                "text": "https:\/\/docs.scala-lang.org\/tour\/pattern-matching.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nRust: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/doc.rust-lang.org\/book\/ch18-03-pattern-syntax.html",
                                "text": "https:\/\/doc.rust-lang.org\/book\/ch18-03-pattern-syntax.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSwift: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.swift.org\/swift-book\/ReferenceManual\/Patterns.html",
                                "text": "https:\/\/docs.swift.org\/swift-book\/ReferenceManual\/Patterns.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nEtc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U015902ESJC"
                ],
                "count": 1
            }
        ]
    }
]