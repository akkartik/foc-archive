[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1572506344.385200",
        "client_msg_id": "4b6f21cb-c547-4cd2-b321-42a9c42bc4e2",
        "text": "Some of you guys give me a hard time about how long my responses are. Sorry i don't have the time to make them shorter. The reason i dumped a bucket of icewater on Leandro's lecture, is that he hasn't done his homework. Unlike 99% of the people on this forum, i was programming when the InMos Transputer came out, and i downloaded the user manual for Occam and tried to learn it (impossible). And remember the Connection Machine that was going to revolutionize the world? Only a genius like Danny Hillis could get that thing to say \"hello world\". Or how about the recent disaster, the Adapteva Parallela machine? The hardware was great; you have thousands of independent processors, with an orders of magnitude improvement in CPU power vs. energy consumption. It failed miserably even though the hardware worked, because nobody could debug their programs!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XF5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some of you guys give me a hard time about how long my responses are. Sorry i don't have the time to make them shorter. The reason i dumped a bucket of icewater on Leandro's lecture, is that he hasn't done his homework. Unlike 99% of the people on this forum, i was programming when the InMos Transputer came out, and i downloaded the user manual for Occam and tried to learn it (impossible). And remember the Connection Machine that was going to revolutionize the world? Only a genius like Danny Hillis could get that thing to say \"hello world\". Or how about the recent disaster, the Adapteva Parallela machine? The hardware was great; you have thousands of independent processors, with an orders of magnitude improvement in CPU power vs. energy consumption. It failed miserably even though the hardware worked, because nobody could debug their programs!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1572511945.385500",
        "client_msg_id": "bfe46b27-d186-4f17-881e-b4d10ff0749e",
        "text": "It was not mainly technical, it was a strategic decision, Jane was at Ericsson and helped open source it, I think she explain it a little more in some   other talks you can find in youtube, I've spoken with Joe and Robert about it and they tell similar things",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1yOA0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It was not mainly technical, it was a strategic decision, Jane was at Ericsson and helped open source it, I think she explain it a little more in some   other talks you can find in youtube, I've spoken with Joe and Robert about it and they tell similar things"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572512990.385700",
        "client_msg_id": "ee004825-3085-4822-bfc3-4d7ea9488aa4",
        "text": "<https:\/\/arstechnica.com\/gaming\/2019\/10\/explaining-how-fighting-games-use-delay-based-and-rollback-netcode\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "service_name": "Ars Technica",
                "title": "Explaining how fighting games use delay-based and rollback netcode",
                "title_link": "https:\/\/arstechnica.com\/gaming\/2019\/10\/explaining-how-fighting-games-use-delay-based-and-rollback-netcode\/",
                "text": "How to design your game for optimal play over a network.",
                "fallback": "Ars Technica: Explaining how fighting games use delay-based and rollback netcode",
                "image_url": "https:\/\/cdn.arstechnica.net\/wp-content\/uploads\/2019\/10\/netcode-galaxy-brain-760x380.jpg",
                "image_width": 500,
                "image_height": 250,
                "from_url": "https:\/\/arstechnica.com\/gaming\/2019\/10\/explaining-how-fighting-games-use-delay-based-and-rollback-netcode\/",
                "image_bytes": 109352,
                "service_icon": "https:\/\/cdn.arstechnica.net\/wp-content\/themes\/ars\/assets\/img\/ars-ios-icon-d9a45f558c.png",
                "id": 1,
                "original_url": "https:\/\/arstechnica.com\/gaming\/2019\/10\/explaining-how-fighting-games-use-delay-based-and-rollback-netcode\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yabo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/arstechnica.com\/gaming\/2019\/10\/explaining-how-fighting-games-use-delay-based-and-rollback-netcode\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572513051.386000",
        "client_msg_id": "866f331d-2fd6-4ece-91bb-3f873f71037c",
        "text": "↑ the only article you'll need to read on that subject :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aEwIo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "↑ the only article you'll need to read on that subject "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572513126.386200",
        "client_msg_id": "809b357d-dcde-4c1c-a898-5f7969468708",
        "text": "TL;DR: delay local client, guess remote client, if you were wrong, roll back and replay all the input events",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OJbs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "TL;DR: delay local client, guess remote client, if you were wrong, roll back and replay all the input events"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572514225.386400",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572514292.000000"
        },
        "client_msg_id": "853d6e56-0ed6-4a7e-88d6-9118d3bb7126",
        "text": "<http:\/\/croquet.io|croquet.io> uses \"Reflectors\", which doesn't look like the Teatime 2-phase commit approach to me: <https:\/\/en.wikipedia.org\/wiki\/Croquet_Project#Synchronization_architecture>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QVmh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/croquet.io",
                                "text": "croquet.io"
                            },
                            {
                                "type": "text",
                                "text": " uses \"Reflectors\", which doesn't look like the Teatime 2-phase commit approach to me: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Croquet_Project#Synchronization_architecture"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572514499.387300",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572515237.000000"
        },
        "client_msg_id": "24f0c87f-2c27-4b4a-a2ff-4d32b570186b",
        "text": "The new <http:\/\/croquet.io|croquet.io> (\"Croquet V\") is by David Smith, Alan Kay's original collaborator on Croquet",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2z4PA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The new "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/croquet.io",
                                "text": "croquet.io"
                            },
                            {
                                "type": "text",
                                "text": " (\"Croquet V\") is by David Smith, Alan Kay's original collaborator on Croquet"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572515148.387600",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572515158.000000"
        },
        "client_msg_id": "7deb64e0-dbcd-40f3-a311-8cd539c1fa32",
        "text": "<https:\/\/croquet.io\/sdk\/docs\/tutorial-2_1_model_view_reflector.html>\n↑ how reflectors work",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7XHyp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/croquet.io\/sdk\/docs\/tutorial-2_1_model_view_reflector.html"
                            },
                            {
                                "type": "text",
                                "text": "\n↑ how reflectors work"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572515340.388100",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572516626.000000"
        },
        "client_msg_id": "26548262-52e0-4647-9a80-007fc26c798d",
        "text": "<http:\/\/www.croquet.zone\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9RyJy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/www.croquet.zone\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1572537422.388700",
        "client_msg_id": "de778ef8-67bf-4371-ac0e-9bcc7a9adc8e",
        "text": "<http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/> neat post!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572537422.388700",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1572614275.442800",
        "reply_users": [
            "UHWC9PXBL",
            "UD3AK9JRF",
            "UBM0S2AN4",
            "UJ6LDMMN0"
        ],
        "replies": [
            {
                "user": "UHWC9PXBL",
                "ts": "1572541226.389200"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1572544055.394400"
            },
            {
                "user": "UBM0S2AN4",
                "ts": "1572573983.435800"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1572614275.442800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Archagon Was Here",
                "title": "Data Laced with History: Causal Trees &amp; Operational CRDTs",
                "title_link": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/",
                "text": "An in-depth exploration of a new class of expressive, performant, and intuitive CRDTs, together with macOS and iOS sample code.",
                "fallback": "Archagon Was Here: Data Laced with History: Causal Trees &amp; Operational CRDTs",
                "thumb_url": "http:\/\/archagon.net\/images\/blog\/causal-trees\/header.jpg",
                "from_url": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/",
                "thumb_width": 1800,
                "thumb_height": 772,
                "service_icon": "http:\/\/archagon.net\/images\/favicon\/favicon-96x96.png",
                "id": 1,
                "original_url": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A4L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/"
                            },
                            {
                                "type": "text",
                                "text": " neat post!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UPX3PH28N"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1572541226.389200",
        "client_msg_id": "FFEE0995-33A1-44DB-B6DF-34102327B76C",
        "text": "this post rules",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572537422.388700",
        "parent_user_id": "UGLSY9X3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DL8\/8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this post rules"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1572543087.389400",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1572543106.000000"
        },
        "client_msg_id": "58105f7a-9aa0-4a11-b8be-7dd4f9dc2b49",
        "text": "Ah interesting thanks <@UE6EFEPTQ>. Maybe I read too much into the name. I like the ideas in David Reed's original psuedo time thesis (<https:\/\/dspace.mit.edu\/handle\/1721.1\/16279>) and related ideas of virtual time (David Jefferson). The new croquet seems to share some ideas at least because models live entirely in 'simulation time': <https:\/\/croquet.io\/sdk\/docs\/tutorial-2_5_sim_time_and_future.html>. So models live in simulated time and advance only as they receive messages. I assume all messages must have a simulated time timestamp. So messages can be auto-ordered but I wonder how they handle lost messages. Wish they had more info on the internals.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "title": "Tutorial: :bulb: Simulation Time and Future Sends - Croquet SDK 0.2.5",
                "title_link": "https:\/\/croquet.io\/sdk\/docs\/tutorial-2_5_sim_time_and_future.html",
                "text": "Documentation for the Croquet SDK",
                "fallback": "Tutorial: 💡 Simulation Time and Future Sends - Croquet SDK 0.2.5",
                "from_url": "https:\/\/croquet.io\/sdk\/docs\/tutorial-2_5_sim_time_and_future.html",
                "service_name": "croquet.io",
                "id": 1,
                "original_url": "https:\/\/croquet.io\/sdk\/docs\/tutorial-2_5_sim_time_and_future.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xVOun",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah interesting thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": ". Maybe I read too much into the name. I like the ideas in David Reed's original psuedo time thesis ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dspace.mit.edu\/handle\/1721.1\/16279"
                            },
                            {
                                "type": "text",
                                "text": ") and related ideas of virtual time (David Jefferson). The new croquet seems to share some ideas at least because models live entirely in 'simulation time': "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/croquet.io\/sdk\/docs\/tutorial-2_5_sim_time_and_future.html"
                            },
                            {
                                "type": "text",
                                "text": ". So models live in simulated time and advance only as they receive messages. I assume all messages must have a simulated time timestamp. So messages can be auto-ordered but I wonder how they handle lost messages. Wish they had more info on the internals."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UMWF81HTP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1572544055.394400",
        "client_msg_id": "4DD9CEC8-D5C6-45A8-9E2A-C80D03F37551",
        "text": "This post was hugely helpful for me in understanding CRDTs practically. The sample code was too disorganized, undocumented, and broken to be of much use. But it was proof to me that you could build interesting things out of *RDTs. Most things I read on them feel like monad explainers. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572537422.388700",
        "parent_user_id": "UGLSY9X3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CMc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This post was hugely helpful for me in understanding CRDTs practically. The sample code was too disorganized, undocumented, and broken to be of much use. But it was proof to me that you could build interesting things out of *RDTs. Most things I read on them feel like monad explainers."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1572544321.396900",
        "client_msg_id": "C96C727D-8D12-457A-9066-09AA4A9DA660",
        "text": "For people building systems based on term rewriting, how important has knowledge of the literature been to you? Are you just motivated by the idea of TW, or have you gotten deeper into it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AkE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For people building systems based on term rewriting, how important has knowledge of the literature been to you? Are you just motivated by the idea of TW, or have you gotten deeper into it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572546039.405800",
        "client_msg_id": "6b146f83-9b78-48a1-a857-c6230ebe8adf",
        "text": "Maybe link that post to <#C5T9GPWFL|thinking-together> ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DqTKO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe link that post to "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1572546653.412700",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1572547733.000000"
        },
        "client_msg_id": "6CD54EC4-093C-4B5E-88EF-F7515BF2AA8D",
        "text": "<@UEQ6M68H0> I agree programmability is important, but historically it seems to get trumped by economic concerns. For example, I programmed a CM2 and Fortran90 was actually easier than Fortan to use. The problem was you had to wait in a queue with other users to run your program, which was often slower than using your workstation (if your program could fit on your workstation). What killed traditional supercomputers were compute clusters, which were actually harder to program but cheaper and therefore more accessible. Likewise, GPUs are harder to program but are far cheaper for the compute power.\n\nI suspect Smalltalk would be ubiquitous today had they made the core free and sold libraries and consulting services. Instead they chose to price it well outside of what typical users could afford, thinking that programmability justified the high cost.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B81d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " I agree programmability is important, but historically it seems to get trumped by economic concerns. For example, I programmed a CM2 and Fortran90 was actually easier than Fortan to use. The problem was you had to wait in a queue with other users to run your program, which was often slower than using your workstation (if your program could fit on your workstation). What killed traditional supercomputers were compute clusters, which were actually harder to program but cheaper and therefore more accessible. Likewise, GPUs are harder to program but are far cheaper for the compute power.\n\nI suspect Smalltalk would be ubiquitous today had they made the core free and sold libraries and consulting services. Instead they chose to price it well outside of what typical users could afford, thinking that programmability justified the high cost."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1572548856.414300",
        "client_msg_id": "e70e6d0d-31da-4b54-bb5f-a7abc75ba142",
        "text": "<@ULM3U6275> The traditional supercomputers were effectively a DOD sponsored product, and succeeded\/failed based on the funding of that group. The average firm can't even use a supercomputer. But the Inmos transputer was cheap, and so was the Adapteva Parallela. So it wasn't about cost, but tooling. One thing often overlooked is that our entire mathematics tradition starting from Greek proof, is based on a single line of reasoning, applied sequentially, and we humans do not yet possess the mathematical knowledge that permits easy parallel thinking. The minute you have more than 100 processes operating at once, you can't even fit the threads on the screen, so visualizing and tracking it becomes extremely cumbersome and confusing. I suspect that once we have screens that are 100 million pixels - and we are getting there, it should be easier to handle. For comparison purposes the upcoming Apple 6K monitor has 20 million pixels. There are some types of projects that just demand a lot of pixels to do properly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/p3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " The traditional supercomputers were effectively a DOD sponsored product, and succeeded\/failed based on the funding of that group. The average firm can't even use a supercomputer. But the Inmos transputer was cheap, and so was the Adapteva Parallela. So it wasn't about cost, but tooling. One thing often overlooked is that our entire mathematics tradition starting from Greek proof, is based on a single line of reasoning, applied sequentially, and we humans do not yet possess the mathematical knowledge that permits easy parallel thinking. The minute you have more than 100 processes operating at once, you can't even fit the threads on the screen, so visualizing and tracking it becomes extremely cumbersome and confusing. I suspect that once we have screens that are 100 million pixels - and we are getting there, it should be easier to handle. For comparison purposes the upcoming Apple 6K monitor has 20 million pixels. There are some types of projects that just demand a lot of pixels to do properly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1572549001.418300",
        "client_msg_id": "110C2AB5-284E-47D3-9029-857B6D5F0BE5",
        "text": "<@UD3AK9JRF> I started by looking at specification languages, and found several that are based on term rewriting, in particular the OBJ family. Then I remembered that rewriting is also heavily used in computer algebra, a technology related to my intended application domains in computational science. ai ended up reading quite a bit of the literature, and found it useful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "27Pc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD3AK9JRF"
                            },
                            {
                                "type": "text",
                                "text": " I started by looking at specification languages, and found several that are based on term rewriting, in particular the OBJ family. Then I remembered that rewriting is also heavily used in computer algebra, a technology related to my intended application domains in computational science. ai ended up reading quite a bit of the literature, and found it useful."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD3AK9JRF"
                ],
                "count": 1
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UE6EFEPTQ",
        "thread_ts": "1572217129.305100",
        "root": {
            "user": "UHWC9PXBL",
            "type": "message",
            "ts": "1572217129.305100",
            "client_msg_id": "468B09D9-9447-48F2-B94F-A18397CF57A9",
            "text": "<https:\/\/youtu.be\/9fhnJpCgtUw> really thought provoking talk on using pattern matching for better data transforms, and then for better debugging, and then for better core generation ",
            "team": "T5TCAFTA9",
            "thread_ts": "1572217129.305100",
            "reply_count": 33,
            "reply_users_count": 8,
            "latest_reply": "1572713549.488300",
            "reply_users": [
                "UEBG0NPDK",
                "UHWC9PXBL",
                "UE6EFEPTQ",
                "UEP7RL0HX",
                "UN7K3UT4G",
                "UJBAJNFLK",
                "UD3AK9JRF",
                "UCUSW7WVD"
            ],
            "replies": [
                {
                    "user": "UEBG0NPDK",
                    "ts": "1572219002.306000"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1572232714.306400"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1572232746.307100"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572254653.307600"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572254664.307800"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572256671.308500"
                },
                {
                    "user": "UEP7RL0HX",
                    "ts": "1572264964.308900"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572266070.309500"
                },
                {
                    "user": "UEP7RL0HX",
                    "ts": "1572268914.309700"
                },
                {
                    "user": "UN7K3UT4G",
                    "ts": "1572273307.313200"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572277101.317300"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1572292936.332900"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572296695.334000"
                },
                {
                    "user": "UD3AK9JRF",
                    "ts": "1572544321.396900"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572546039.405800"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1572549001.418300"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572551532.429200"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572551745.430200"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572551933.430400"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1572562515.431600"
                },
                {
                    "user": "UD3AK9JRF",
                    "ts": "1572566732.431900"
                },
                {
                    "user": "UD3AK9JRF",
                    "ts": "1572566812.432100"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1572568280.435400"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572601196.440100"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572601297.440700"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572602122.441600"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572602154.441800"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572602292.442000"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1572686319.462800"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1572687045.466800"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1572712723.482000"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572713524.488100"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1572713549.488300"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "service_name": "YouTube",
                    "service_url": "https:\/\/www.youtube.com\/",
                    "title": "\"Meander: Declarative Explorations at the Limits of FP\" by Jimmy Miller",
                    "title_link": "https:\/\/youtu.be\/9fhnJpCgtUw",
                    "author_name": "Strange Loop",
                    "author_link": "https:\/\/www.youtube.com\/channel\/UC_QIfHvN9auy2CoOdSfMWDw",
                    "thumb_url": "https:\/\/i.ytimg.com\/vi\/9fhnJpCgtUw\/hqdefault.jpg",
                    "thumb_width": 480,
                    "thumb_height": 360,
                    "fallback": "YouTube Video: \"Meander: Declarative Explorations at the Limits of FP\" by Jimmy Miller",
                    "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/9fhnJpCgtUw?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                    "video_html_width": 400,
                    "video_html_height": 225,
                    "from_url": "https:\/\/youtu.be\/9fhnJpCgtUw",
                    "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                    "id": 1,
                    "original_url": "https:\/\/youtu.be\/9fhnJpCgtUw"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "Fnc",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "link",
                                    "url": "https:\/\/youtu.be\/9fhnJpCgtUw"
                                },
                                {
                                    "type": "text",
                                    "text": " really thought provoking talk on using pattern matching for better data transforms, and then for better debugging, and then for better core generation"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1572551532.429200",
        "client_msg_id": "2eb8322d-1bf6-4b93-9e47-a1c3fe5867c0",
        "text": "Still hoping to hear what these folk think about this thread:\n- Kayia\/Kaya <@UJCHWTMH6> <@U8A87T2NQ>\n- Infusion <@UEH6T3RJB>\n- Maraca <@UJDQKSSJ0>\n- Mech <@UCGR73CAY>",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vajsd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Still hoping to hear what these folk think about this thread:\n- Kayia\/Kaya "
                            },
                            {
                                "type": "user",
                                "user_id": "UJCHWTMH6"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A87T2NQ"
                            },
                            {
                                "type": "text",
                                "text": "\n- Infusion "
                            },
                            {
                                "type": "user",
                                "user_id": "UEH6T3RJB"
                            },
                            {
                                "type": "text",
                                "text": "\n- Maraca "
                            },
                            {
                                "type": "user",
                                "user_id": "UJDQKSSJ0"
                            },
                            {
                                "type": "text",
                                "text": "\n- Mech "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGR73CAY"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572551587.429900",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572551609.000000"
        },
        "client_msg_id": "0ace3aa4-54bc-4887-a3bc-8440b0b06619",
        "text": "That's a Slack thread link, even though it may look like a YouTube link! ↑",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bkui",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's a Slack thread link, even though it may look like a YouTube link! ↑"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572551745.430200",
        "client_msg_id": "6fea49bb-6b18-4454-b94b-ec6779002a87",
        "text": "<@UD3AK9JRF> What I'm doing probably doesn't fit the academic definition of term rewriting. Could you post some links to top pages on the subject?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QcRz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD3AK9JRF"
                            },
                            {
                                "type": "text",
                                "text": " What I'm doing probably doesn't fit the academic definition of term rewriting. Could you post some links to top pages on the subject?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1572551933.430400",
        "client_msg_id": "61a102da-a030-4a4e-9041-28c082216de9",
        "text": "I settled on a .. let's say \"structure rewriting\" programming model very early on - in the 80s. I had a brief detour to using unification instead of one-sided matching in the 90s, but went back to simpler rewrites since.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NIy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I settled on a .. let's say \"structure rewriting\" programming model very early on - in the 80s. I had a brief detour to using unification instead of one-sided matching in the 90s, but went back to simpler rewrites since."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1572552878.430600",
        "client_msg_id": "fda98dc8-a3ec-4d3e-b7ce-0745dcd65e2f",
        "text": "<@UEQ6M68H0> “The traditional supercomputers were effectively a DOD sponsored product,” Yes, and the lab I worked at was DOD funded too but it was still moving everything to workstation compute clusters by the mid 1990s because they wanted to make the best use of their funding.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YHzu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " “The traditional supercomputers were effectively a DOD sponsored product,” Yes, and the lab I worked at was DOD funded too but it was still moving everything to workstation compute clusters by the mid 1990s because they wanted to make the best use of their funding."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1572553145.430800",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1572559810.000000"
        },
        "client_msg_id": "ce7a2e36-f97c-42df-8651-9264146d87de",
        "text": "<@UEQ6M68H0> “The minute you have more than 100 processes operating at once, you can’t even fit the threads on the screen” That’s true, though IME the problem is more the model used. I think the Lua authors put it well:\n\n“…we did not (and still do not) believe in the standard multithreading model, which is preemptive concurrency with shared memory: we still think that no one can write correct programs in a language where ‘a=a+1’ is not deterministic.” (from The Evolution of Lua)\n\nEliminating either shared memory (with actors) or preemptive concurrency (with coroutines) goes a long way towards solving these problems, yet these solutions are strongly resisted in the mainstream programming culture.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c7X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " “The minute you have more than 100 processes operating at once, you can’t even fit the threads on the screen” That’s true, though IME the problem is more the model used. I think the Lua authors put it well:\n\n“…we did not (and still do not) believe in the standard multithreading model, which is preemptive concurrency with shared memory: we still think that no one can write correct programs in a language where ‘a=a+1’ is not deterministic.” (from The Evolution of Lua)\n\nEliminating either shared memory (with actors) or preemptive concurrency (with coroutines) goes a long way towards solving these problems, yet these solutions are strongly resisted in the mainstream programming culture."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1572560656.431300",
        "client_msg_id": "7620ff7f-66f0-4f6d-ad5b-0e6c12e9cf23",
        "text": "BTW the interesting idea (to me) here isn't just a distributed library for games, but the idea that you have replicated objects with some consistency guarantees. All software needs this most of the time we're just implementing consistency and replication via custom RPCs and APIs (even though we don't call it that) and thinking of our data as half here, half there. Pushing replication and synchrony to the lower layer, solves some of these issues. As-is corquet is not a full solution, but the core idea of having timestamps in messages and multi-versions of objects on each host represents the distributed out-of-sync reality pretty well.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vAuO=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "BTW the interesting idea (to me) here isn't just a distributed library for games, but the idea that you have replicated objects with some consistency guarantees. All software needs this most of the time we're just implementing consistency and replication via custom RPCs and APIs (even though we don't call it that) and thinking of our data as half here, half there. Pushing replication and synchrony to the lower layer, solves some of these issues. As-is corquet is not a full solution, but the core idea of having timestamps in messages and multi-versions of objects on each host represents the distributed out-of-sync reality pretty well."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UE6EFEPTQ",
                    "UMWF81HTP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1572562515.431600",
        "client_msg_id": "8652b197-7cd6-4ebf-a3aa-12b8ab0f16df",
        "text": "I just watched OP. I kept waiting for the speaker to mention SQL, but he never did. He mentioned joins several times, but not SQL. Lots of people know SQL, and while I often complain about it it does show the input and output pretty well. Why not start from SQL syntax? Original:\n\n```\n(m\/search game-info\n  {:player (m\/scan  {name ?name class ?class})\n   :weapons (m\/scan {:name ?weapon :allowed-classes #{?class} :standard-upgrade !upgrades})\n   :stats (?weapon {:attack-power ?attack-power :upgrades [!upgrades ...]})\n   :third-party (m\/not #{?weapon})}\n  {:name ?name\n   :weapon ?weapon\n   :class ?class\n   :attack-power ?attack-power\n   :upgrades !upgrades})\n```\n\nSQL on steroids:\n\n```\nselect {:name         player.name\n        :weapon       weapons.name\n        :class        player.class\n        :attack-power stats.attack-power \n        :upgrades     weapons.standard-upgrade ++ stats.upgrades}\n  from player, weapons, stats\n  where weapons.class = player.class\n    and weapon not in third-party\n```\n\nNot homoiconic, tho :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KWs8F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just watched OP. I kept waiting for the speaker to mention SQL, but he never did. He mentioned joins several times, but not SQL. Lots of people know SQL, and while I often complain about it it does show the input and output pretty well. Why not start from SQL syntax? Original:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(m\/search game-info\n  {:player (m\/scan  {name ?name class ?class})\n   :weapons (m\/scan {:name ?weapon :allowed-classes #{?class} :standard-upgrade !upgrades})\n   :stats (?weapon {:attack-power ?attack-power :upgrades [!upgrades ...]})\n   :third-party (m\/not #{?weapon})}\n  {:name ?name\n   :weapon ?weapon\n   :class ?class\n   :attack-power ?attack-power\n   :upgrades !upgrades})\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nSQL on steroids:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "select {:name         player.name\n        :weapon       weapons.name\n        :class        player.class\n        :attack-power stats.attack-power \n        :upgrades     weapons.standard-upgrade ++ stats.upgrades}\n  from player, weapons, stats\n  where weapons.class = player.class\n    and weapon not in third-party\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nNot homoiconic, tho "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1572566732.431900",
        "client_msg_id": "425c8e1f-66c9-47ea-ad36-aad2dc0eacf4",
        "text": "<@UE6EFEPTQ> Yeah, should have posted to <#C5T9GPWFL|thinking-together> but whatevs. I checked out Term Rewriting And All That from my library today. So far it’s concerned with (equational, i.e. first order) term rewriting as computation: normal forms, confluence, termination. Concepts that seemed important if I wanted to write optimizations for a compiler, say, or to prove things about programs written in a term rewriting system. It wasn’t clear to me that I needed to know much while I prototype and build simple applications.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2ke",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " Yeah, should have posted to "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " but whatevs. I checked out Term Rewriting And All That from my library today. So far it’s concerned with (equational, i.e. first order) term rewriting as computation: normal forms, confluence, termination. Concepts that seemed important if I wanted to write optimizations for a compiler, say, or to prove things about programs written in a term rewriting system. It wasn’t clear to me that I needed to know much while I prototype and build simple applications."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1572566812.432100",
        "client_msg_id": "b802748e-ad8f-4618-bfc2-c91c74ef01a3",
        "text": "<@UCUSW7WVD> yeah, it would make SQL much, much more pleasant to use. Also reminds me of Datomic’s pull api",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HCO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " yeah, it would make SQL much, much more pleasant to use. Also reminds me of Datomic’s pull api"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1572568175.434300",
        "client_msg_id": "0E660FC9-2565-4D14-BA35-B9918961BC6E",
        "text": "<https:\/\/youtu.be\/if72CFsF_SY> surprised that dan ingalls’ work gets very little play here—some interesting stuff in this talk, including structural editing via drag and drop (with text, so a possible evolution of the block paradigm)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572568175.434300",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1572658847.446700",
        "reply_users": [
            "UJBAJNFLK",
            "UHWC9PXBL",
            "ULM3U6275"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1572599223.439800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1572618994.443400"
            },
            {
                "user": "ULM3U6275",
                "ts": "1572658847.446700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "YOW! 2016 Dan Ingalls - Pronto: Toward a Live Designer's Notebook #YOW",
                "title_link": "https:\/\/youtu.be\/if72CFsF_SY",
                "author_name": "YOW! Conferences",
                "author_link": "https:\/\/www.youtube.com\/user\/YOWAustralia",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/if72CFsF_SY\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: YOW! 2016 Dan Ingalls - Pronto: Toward a Live Designer's Notebook #YOW",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/if72CFsF_SY?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/if72CFsF_SY",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/if72CFsF_SY"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vzlyb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/if72CFsF_SY"
                            },
                            {
                                "type": "text",
                                "text": " surprised that dan ingalls’ work gets very little play here—some interesting stuff in this talk, including structural editing via drag and drop (with text, so a possible evolution of the block paradigm)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1572568280.435400",
        "client_msg_id": "E51E6DD1-BBB2-45A8-B79E-898067C10EE0",
        "text": "it’s definitely super similar to datomic pull—which, given the rise of graphql, seems to be an emerging meme",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WgASX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it’s definitely super similar to datomic pull—which, given the rise of graphql, seems to be an emerging meme"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBM0S2AN4",
        "type": "message",
        "ts": "1572573983.435800",
        "client_msg_id": "b97b5c24-8cb4-4684-a294-303492c71ac3",
        "text": "Thanks for sharing, this is super useful!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "51fa9d9a15c7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-04\/783621221861_51fa9d9a15c7c36a4a28_72.png",
            "first_name": "",
            "real_name": "Brian Zindler",
            "display_name": "zindlurb",
            "team": "T5TCAFTA9",
            "name": "zindlerb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572537422.388700",
        "parent_user_id": "UGLSY9X3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P\/E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for sharing, this is super useful!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1572585612.437300",
        "client_msg_id": "B7C9CEE5-A583-4D29-B965-FB1E7E43F108",
        "text": "dunno if anyone’s been following mark nadal\/gun js but his work is a tour de force for decentralized computing, clever algorithms, and low code size: <https:\/\/youtu.be\/5fCPRY-9hkc>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Nordic.js 2017 • Mark Nadal - The Design and Evolution of Event-Driven Databases",
                "title_link": "https:\/\/youtu.be\/5fCPRY-9hkc",
                "author_name": "Nordic.js",
                "author_link": "https:\/\/www.youtube.com\/user\/nordicjs",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/5fCPRY-9hkc\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Nordic.js 2017 • Mark Nadal - The Design and Evolution of Event-Driven Databases",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/5fCPRY-9hkc?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/5fCPRY-9hkc",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/5fCPRY-9hkc"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8rO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "dunno if anyone’s been following mark nadal\/gun js but his work is a tour de force for decentralized computing, clever algorithms, and low code size: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/5fCPRY-9hkc"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]