[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1725782454.239199",
        "client_msg_id": "0e446a4d-fe49-4e6c-9597-630147bb4265",
        "text": "Thanks <@UGWUJUZHT>, that detailed discussion was very helpful! I now realize that what you call \"hidden dependency\" is something I have seen many times, but I tend to classify as \"interface definition\" rather than \"dependency\". For me, dependency relations are between two units of code, e.g. \"unitA depends on unitB\". What you describe is \"unitA can only interface with units that have property X\", with X in this case being \"has name f\". I have encountered name-based interface issues in OO (method names) but also in statically typed languages with nomainal types (type names).\n\nYour solution is interesting but not the only one. The idiomatic Smalltalk solution would be (1) unitA uses a namespaced method name for the method name it expects from its partners, and (2) the glue code making the interface adds a same-named method as an extension method to unitB and unitC. Like your approach, it involves a distinct integration layer, but its techniques are very different. Yet another solution is to replace the fixed name by a parameter, e.g. via callbacks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hf4Zm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": ", that detailed discussion was very helpful! I now realize that what you call \"hidden dependency\" is something I have seen many times, but I tend to classify as \"interface definition\" rather than \"dependency\". For me, dependency relations are between two units of code, e.g. \"unitA depends on unitB\". What you describe is \"unitA can only interface with units that have property X\", with X in this case being \"has name f\". I have encountered name-based interface issues in OO (method names) but also in statically typed languages with nomainal types (type names).\n\nYour solution is interesting but not the only one. The idiomatic Smalltalk solution would be (1) unitA uses a namespaced method name for the method name it expects from its partners, and (2) the glue code making the interface adds a same-named method as an extension method to unitB and unitC. Like your approach, it involves a distinct integration layer, but its techniques are very different. Yet another solution is to replace the fixed name by a parameter, e.g. via callbacks."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1725787765.272889",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1725788753.000000"
        },
        "client_msg_id": "e26a9fa7-4fc6-41c9-9ba5-0f10e55601ba",
        "text": "Another aspect that impinges on my thinking, that I fail to mention, is that I think in terms of distributed machines. Something like 2 Arduinos that can only communicate via a thin, low-bandwidth wire. As I understand callbacks, they would not be practical in that situation (nor is RPC). In general, any solution that relies on shared memory tends to be impractical. Most existing programming languages wire shared memory into every app by default (due to 1950s biases towards \"efficiency\" for 1950s hardware). Most programming languages also need a 50,000,000 LOC substrate (i.e. \"operating system\"). [I first developed these ideas on bare hardware]. I suspect that I don't quite understand the idiomatic Smalltalk solution yet and am thinking on it... Is there an easy-to-find basic\/early ref to this ($0.00)? I used to understand Smalltalk (in fact the first version of this stuff was done in Smalltalk-V), but I am more comfortable with Common Lisp these days. Further, I tend to want to break free of the 1-in 1-out discipline of function-based thinking (adding warts if you want to use exceptions). I think that electronics schematics-like thinking should map to software CAD. (<@UJBAJNFLK>).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m2q2S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another aspect that impinges on my thinking, that I fail to mention, is that I think in terms of distributed machines. Something like 2 Arduinos that can only communicate via a thin, low-bandwidth wire. As I understand callbacks, they would not be practical in that situation (nor is RPC). In general, any solution that relies on shared memory tends to be impractical. Most existing programming languages wire shared memory into every app by default (due to 1950s biases towards \"efficiency\" for 1950s hardware). Most programming languages also need a 50,000,000 LOC substrate (i.e. \"operating system\"). [I first developed these ideas on bare hardware]. I suspect that I don't quite understand the idiomatic Smalltalk solution yet and am thinking on it... Is there an easy-to-find basic\/early ref to this ($0.00)? I used to understand Smalltalk (in fact the first version of this stuff was done in Smalltalk-V), but I am more comfortable with Common Lisp these days. Further, I tend to want to break free of the 1-in 1-out discipline of function-based thinking (adding warts if you want to use exceptions). I think that electronics schematics-like thinking should map to software CAD. ("
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1725804737.801289",
        "client_msg_id": "c7ac6e60-6b14-4c37-9425-a107800c42ce",
        "text": "&gt; Tightly packed areas of memory fighting for space and squishing and morphing together as they shrink and grow\n• B-trees are a bit squishy\/sticky in how nodes get joined\/split.  So are all structures with _amortization_?  But that's a well-encapsulated property, hardly observable.\n• Cuckoo hashes get harder to insert into (more pushing stuff around) as they fill up.  That's observable as a slow-down (like regular hash tables) but still correct.  Well, unlike regular hash tables at some point the guarantee that you only need to check N places really breaks down, but I suppose then you resize and re-hash the whole thing, so the effect is \"slow down with amortized resize\" similar to regular hashes.\n• Bloom filters get _less precise_ as they fill up.  Now that's really observable to the user.  So do other \"sketch\" structures.  But frequently they're used behind some other fallback (e.g. cache miss=&gt;do the network request) that reduce the observable imprecision to observable slowdown.\nSo in all those, squishiness might come handy to visualize algorithm _internals_, but doesn't map to anything desirable in the final product of computation?\n\nSpeaking of visualizations, spring-model layouts are handy for evolving graphs (e.g. <https:\/\/gource.io\/>) and are also promising for real-time \"collaboration\" between automated + human-moved layout, because mechanics are intuitive and predictable to our brain.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1725332746.830489",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ATCrU",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tightly packed areas of memory fighting for space and squishing and morphing together as they shrink and grow"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "B-trees are a bit squishy\/sticky in how nodes get joined\/split.  So are all structures with "
                                    },
                                    {
                                        "type": "text",
                                        "text": "amortization",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "?  But that's a well-encapsulated property, hardly observable."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Cuckoo hashes get harder to insert into (more pushing stuff around) as they fill up.  That's observable as a slow-down (like regular hash tables) but still correct.  Well, unlike regular hash tables at some point the guarantee that you only need to check N places really breaks down, but I suppose then you resize and re-hash the whole thing, so the effect is \"slow down with amortized resize\" similar to regular hashes."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Bloom filters get "
                                    },
                                    {
                                        "type": "text",
                                        "text": "less precise",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " as they fill up.  Now that's really observable to the user.  So do other \"sketch\" structures.  But frequently they're used behind some other fallback (e.g. cache miss=>do the network request) that reduce the observable imprecision to observable slowdown."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSo in all those, squishiness might come handy to visualize algorithm "
                            },
                            {
                                "type": "text",
                                "text": "internals",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but doesn't map to anything desirable in the final product of computation?\n\nSpeaking of visualizations, spring-model layouts are handy for evolving graphs (e.g. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gource.io\/"
                            },
                            {
                                "type": "text",
                                "text": ") and are also promising for real-time \"collaboration\" between automated + human-moved layout, because mechanics are intuitive and predictable to our brain."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1725861460.748769",
        "client_msg_id": "8b2fbca7-88d5-4d1e-a52f-b968d39a1d81",
        "text": "<@UGWUJUZHT> I didn't read much Smalltalk theory, I just know the actual practice. The Common Lisp equivalent of the technique I described is unitA defining a generic function f and expecting unitB and unitC to provide methods for their respective objects. That's also a pattern I see in real life. In Smalltalk, it's a bit more complicated because there is a single globalnamespace for methods. If multiple units use the same method name privately, that's not much of an issue (except for making the system as a whole harder to understand), but for method names that are neither unit-local nor really global, the convention is to use a two-letter prefix to method names that identifies the package that owns it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i+qC9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " I didn't read much Smalltalk theory, I just know the actual practice. The Common Lisp equivalent of the technique I described is unitA defining a generic function f and expecting unitB and unitC to provide methods for their respective objects. That's also a pattern I see in real life. In Smalltalk, it's a bit more complicated because there is a single globalnamespace for methods. If multiple units use the same method name privately, that's not much of an issue (except for making the system as a whole harder to understand), but for method names that are neither unit-local nor really global, the convention is to use a two-letter prefix to method names that identifies the package that owns it."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]