[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594110059.440000",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1594110552.000000"
        },
        "client_msg_id": "2BB386EF-01A4-4FD8-989B-DF54752A7F3E",
        "text": "Here’s my cognitive-science-hobbyist theory of what’s the problem with node-link languages:\n\nNode-link makes effective use of the link image schema (<https:\/\/en.m.wikipedia.org\/wiki\/Image_schema|https:\/\/en.m.wikipedia.org\/wiki\/Image_schema>). Such schemas are universal patterns that structure our thinking on the lowest levels. These patterns also provide the infrastructure for spoken and written language as well, so they sit both under visual and text-based languages. (If “sitting under” makes sense to you in that previous sentence, that’s because it’s an example for a spatial metaphor build on top of image schemas.)\n\nNode-link languages work well, because they hook into that particular link pattern which we all intuitively understand. That’s where their power comes from. Unfortunately, one pattern isn’t enough to model everything. However, it’s great when it’s almost all you need in the domain you are modeling for.\n\nSome node-link languages add a second image schema by allowing containment. The container schema is also why files and folders and directory structures are so pervasive. That’s a little more expressive, but two patterns are still not enough to model all the complex things general programming languages can.\n\nWhere node-link languages break down is: they usually offer no solution to the problem of anchoring things to locations. It usually doesn’t matter where you put nodes on an often infinite canvas. Location has no meaning, like it does in a map, or a scatter plot, where each dot is precisely tied to a location. \n\nWhile placing things arbitrarily on a canvas sounds positive like flexibility and freedom, it creates cognitive effort because we will quickly feel overwhelmed placing large number of objects in a space without any supporting structure. So we invent that structure on the fly, trying something like ordering nodes by data flow, which works well enough for when you’re just modeling how data flows through a number of filters and transformers. But often we end up with conflicting structures. That’s when we start talking about how it all looks like spaghettis.\n\nFor some reason media apps are good at taking advantage of image schemas and metaphorical structuring, which I believe is all happy accidents simply because these patterns are how we think and when designing UI we gravitate towards them even if we don’t know why. \n\nThink waveform visualizations in audio recording software or MIDI notes. X-axis is often bound to time giving position meaning — the same reason why charts and diagrams are often easier to grasp: image schemas giving rise to powerful spatial metaphors.\n\nThat media apps seem to discover these schemas is less of a coincidence and connected to how we understand media as events spread across time (yep, guess what’s the basis for that…). In general programming we think much more abstract and have many completely incompatible orderings at the same time, e.g. data flow with concurrency, static type hierarchies, hierarchical stack frames, sequential memory — it’s easy to visualize each one of them at a time, but it’s essentially just different views on the same system.\n\nI firmly believe that we can deliberately take advantage of this particular knowledge in cognitive science in UI design and ultimately for designing better “visual” languages. If you see any research that’s combining these fields, please send it my way. And if you want to learn more about the cognitive science parts feel free to contact me. I’m happy to provide plenty of pointers to resources I can recommend.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/en\/2\/2d\/ContainmentSchema.png",
                "image_width": 400,
                "image_height": 360,
                "image_bytes": 9675,
                "title": "Image schema",
                "title_link": "https:\/\/en.m.wikipedia.org\/wiki\/Image_schema",
                "from_url": "https:\/\/en.m.wikipedia.org\/wiki\/Image_schema",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "An image schema is a recurring structure within our cognitive processes which establishes patterns of understanding and reasoning. Image schemas are formed from our bodily interactions, from linguistic experience, and from historical context. The term is explained in Mark Johnson's book The Body in the Mind; in case study 2 of George Lakoff's Women, Fire and Dangerous Things; by Rudolf Arnheim in Visual Thinking; and more recently, by Tim Rohrer's 2006 book chapter \"Image Schemata in the Brain\".\nIn contemporary cognitive linguistics, an image schema is considered an embodied prelinguistic structure of experience that motivates conceptual metaphor mappings. Evidence for image schemas (also called image schemata) is drawn from a number of related disciplines, including work on cross-modal cognition in psychology, from spatial cognition in both linguistics and psychology, cognitive linguistics, and from neuroscience.",
                "fallback": "wikipedia: Image schema",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.m.wikipedia.org\/wiki\/Image_schema"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Itdy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here’s my cognitive-science-hobbyist theory of what’s the problem with node-link languages:\n\nNode-link makes effective use of the link image schema ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Image_schema",
                                "text": "https:\/\/en.m.wikipedia.org\/wiki\/Image_schema"
                            },
                            {
                                "type": "text",
                                "text": "). Such schemas are universal patterns that structure our thinking on the lowest levels. These patterns also provide the infrastructure for spoken and written language as well, so they sit both under visual and text-based languages. (If “sitting under” makes sense to you in that previous sentence, that’s because it’s an example for a spatial metaphor build on top of image schemas.)\n\nNode-link languages work well, because they hook into that particular link pattern which we all intuitively understand. That’s where their power comes from. Unfortunately, one pattern isn’t enough to model everything. However, it’s great when it’s almost all you need in the domain you are modeling for.\n\nSome node-link languages add a second image schema by allowing containment. The container schema is also why files and folders and directory structures are so pervasive. That’s a little more expressive, but two patterns are still not enough to model all the complex things general programming languages can.\n\nWhere node-link languages break down is: they usually offer no solution to the problem of anchoring things to locations. It usually doesn’t matter where you put nodes on an often infinite canvas. Location has no meaning, like it does in a map, or a scatter plot, where each dot is precisely tied to a location. \n\nWhile placing things arbitrarily on a canvas sounds positive like flexibility and freedom, it creates cognitive effort because we will quickly feel overwhelmed placing large number of objects in a space without any supporting structure. So we invent that structure on the fly, trying something like ordering nodes by data flow, which works well enough for when you’re just modeling how data flows through a number of filters and transformers. But often we end up with conflicting structures. That’s when we start talking about how it all looks like spaghettis.\n\nFor some reason media apps are good at taking advantage of image schemas and metaphorical structuring, which I believe is all happy accidents simply because these patterns are how we think and when designing UI we gravitate towards them even if we don’t know why. \n\nThink waveform visualizations in audio recording software or MIDI notes. X-axis is often bound to time giving position meaning — the same reason why charts and diagrams are often easier to grasp: image schemas giving rise to powerful spatial metaphors.\n\nThat media apps seem to discover these schemas is less of a coincidence and connected to how we understand media as events spread across time (yep, guess what’s the basis for that…). In general programming we think much more abstract and have many completely incompatible orderings at the same time, e.g. data flow with concurrency, static type hierarchies, hierarchical stack frames, sequential memory — it’s easy to visualize each one of them at a time, but it’s essentially just different views on the same system.\n\nI firmly believe that we can deliberately take advantage of this particular knowledge in cognitive science in UI design and ultimately for designing better “visual” languages. If you see any research that’s combining these fields, please send it my way. And if you want to learn more about the cognitive science parts feel free to contact me. I’m happy to provide plenty of pointers to resources I can recommend."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "US370TRJA",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "UMWF81HTP",
                    "UFQQ3P867",
                    "UJFN50C00"
                ],
                "count": 7
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "US370TRJA",
                    "UA14TGLTC",
                    "UMWF81HTP",
                    "UFQQ3P867",
                    "UJFN50C00"
                ],
                "count": 6
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UMWF81HTP",
                    "UJFN50C00",
                    "UJN1TAYEQ",
                    "U9C92716C"
                ],
                "count": 5
            },
            {
                "name": "clap",
                "users": [
                    "UMWF81HTP",
                    "UJFN50C00"
                ],
                "count": 2
            },
            {
                "name": "point_up_2",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594125940.441100",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1594128109.000000"
        },
        "client_msg_id": "ed47892b-2757-4498-894f-ed3afecd22a0",
        "text": "```Interface matters to me more than anything else, and it always has. I just never realized that. I've spent a lot of time over the years desperately trying to think of a \"thing\" to change the world. I now know why the search was fruitless -- things don't change the world. People change the world by using things. The focus must be on the \"using\", not the \"thing\". Now that I'm looking through the right end of the binoculars, I can see a lot more clearly, and there are projects and possibilities that genuinely interest me deeply.```\n-- <http:\/\/worrydream.com\/quotes\/#bret-victor-email|worrydream.com\/quotes\/#bret-victor-email>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594125940.441100",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1594134508.486300",
        "reply_users": [
            "U5STGTB3J",
            "UJKKBAMLL",
            "UKP3B2J5D"
        ],
        "replies": [
            {
                "user": "U5STGTB3J",
                "ts": "1594127356.442000"
            },
            {
                "user": "UJKKBAMLL",
                "ts": "1594128550.443900"
            },
            {
                "user": "UKP3B2J5D",
                "ts": "1594134508.486300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ywx",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interface matters to me more than anything else, and it always has. I just never realized that. I've spent a lot of time over the years desperately trying to think of a \"thing\" to change the world. I now know why the search was fruitless -- things don't change the world. People change the world by using things. The focus must be on the \"using\", not the \"thing\". Now that I'm looking through the right end of the binoculars, I can see a lot more clearly, and there are projects and possibilities that genuinely interest me deeply."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n-- "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/worrydream.com\/quotes\/#bret-victor-email",
                                "text": "worrydream.com\/quotes\/#bret-victor-email"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J",
                    "U013ZLJARC7",
                    "UHWC9PXBL",
                    "UKP3B2J5D",
                    "UA14TGLTC",
                    "UMWF81HTP",
                    "UGLSY9X3J",
                    "UJ6LDMMN0",
                    "UUK6Y29R8",
                    "UUMQH3TA5",
                    "UAVCC2X70"
                ],
                "count": 11
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "UUQ2EQW21",
                    "UKP3B2J5D",
                    "UGLSY9X3J",
                    "U8A5MS6R1"
                ],
                "count": 5
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594127356.442000",
        "client_msg_id": "300F503A-6FCE-45A4-B010-67DFFC32EDCF",
        "text": "As the link is not clickable and the whole collection of quotes is worthwhile reading: <http:\/\/worrydream.com\/quotes\/|http:\/\/worrydream.com\/quotes\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594125940.441100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cRJ\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As the link is not clickable and the whole collection of quotes is worthwhile reading: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/worrydream.com\/quotes\/",
                                "text": "http:\/\/worrydream.com\/quotes\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJKKBAMLL",
        "type": "message",
        "ts": "1594128550.443900",
        "client_msg_id": "e1532bba-88d1-479a-bde9-b2a35bf954e2",
        "text": "Interface is everything — the foundation of a product where all other decisions are made upon.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9db1f76eed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-12\/662675221668_6b9db1f76eed746965ca_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Peak",
            "display_name": "Steve",
            "team": "T5TCAFTA9",
            "name": "steve727",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594125940.441100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JG\/9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interface is everything — the foundation of a product where all other decisions are made upon."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594129616.447900",
        "client_msg_id": "F2716ECF-5099-4E48-BE8C-CB28E3BE30F7",
        "text": "When you are beyond the prototyping stage and start to put together an early version of something you intend to use yourself extensively and probably also give to a small number of people to try out, what are the measures you take and practices you follow to make that a great experience? For instance, what do you do to make sure data isn‘t reset or lost between updates or can be migrated easily?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "reply_count": 24,
        "reply_users_count": 4,
        "latest_reply": "1594169124.066200",
        "reply_users": [
            "UBN9AFS0N",
            "UJKKBAMLL",
            "U5STGTB3J",
            "U8A5MS6R1"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1594129972.448300"
            },
            {
                "user": "UJKKBAMLL",
                "ts": "1594130179.448500"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1594131459.454300"
            },
            {
                "user": "UJKKBAMLL",
                "ts": "1594131653.454500"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1594133113.479200"
            },
            {
                "user": "UJKKBAMLL",
                "ts": "1594133324.482100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594134162.485300"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594134327.485800"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1594136028.493400"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594136306.493600"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594136431.493900"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594136455.494100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594136520.494600"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594136554.494800"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594136623.495000"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594136726.495200"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594136772.495600"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594136784.495800"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1594137545.005800"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594137845.006000"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1594137898.006200"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1594139131.023600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1594167761.065100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1594169124.066200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bd\/WV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When you are beyond the prototyping stage and start to put together an early version of something you intend to use yourself extensively and probably also give to a small number of people to try out, what are the measures you take and practices you follow to make that a great experience? For instance, what do you do to make sure data isn‘t reset or lost between updates or can be migrated easily?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594129972.448300",
        "client_msg_id": "c261f52d-0cbf-44a6-8882-963b7e8419b8",
        "text": "I usually pick 3 use cases that are close to real problems, add some helpers to make them easier to try, implement export\/import, with export\/import I implement templeate loading with a few clicks, later persistence and an easy way to \"continue where you left off\". Regarding migrations, in the early stage I assume and communicate that I will break backwards compatibility periodically, at some point I decide that the serialization format should be stable and start taking backward compatibility seriously.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XM8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I usually pick 3 use cases that are close to real problems, add some helpers to make them easier to try, implement export\/import, with export\/import I implement templeate loading with a few clicks, later persistence and an easy way to \"continue where you left off\". Regarding migrations, in the early stage I assume and communicate that I will break backwards compatibility periodically, at some point I decide that the serialization format should be stable and start taking backward compatibility seriously."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJKKBAMLL",
        "type": "message",
        "ts": "1594130179.448500",
        "client_msg_id": "9144b489-3246-4e94-8a89-3d04bacbf09b",
        "text": "These questions, IMO, are different stages of a product. I’ve personally had and seen (even very recently) examples of not focusing on the root issues in the product. Knowing your customer, what behaviors they have, and what behaviors you want to bring to them is instrumental. You should prototype to get learnings, not data. Data will skew your insights because it’s easy to misinterpret it or have a bias looking at the data you want to see and not the data you should be seeing. Forget the data — focus on UX.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9db1f76eed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-12\/662675221668_6b9db1f76eed746965ca_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Peak",
            "display_name": "Steve",
            "team": "T5TCAFTA9",
            "name": "steve727",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rhcJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These questions, IMO, are different stages of a product. I’ve personally had and seen (even very recently) examples of not focusing on the root issues in the product. Knowing your customer, what behaviors they have, and what behaviors you want to bring to them is instrumental. You should prototype to get learnings, not data. Data will skew your insights because it’s easy to misinterpret it or have a bias looking at the data you want to see and not the data you should be seeing. Forget the data — focus on UX."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1594131291.451200",
        "client_msg_id": "489f162c-12ac-413c-8571-b5923e235a86",
        "text": "I was wondering was this discussed here before? ( I couldn't find it via search?)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uIL1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was wondering was this discussed here before? ( I couldn't find it via search?)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1594131292.451400",
        "client_msg_id": "bf9a184a-d2de-4c5c-b213-465bfe8debc7",
        "text": "<https:\/\/twitter.com\/jasonyuandesign\/status\/1133429180362821632?s=20>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "reply_count": 15,
        "reply_users_count": 8,
        "latest_reply": "1595104103.467200",
        "reply_users": [
            "UAL7940NM",
            "UJKKBAMLL",
            "UPVBV34EL",
            "UMWF81HTP",
            "UFQQ3P867",
            "U8A5MS6R1",
            "UHWC9PXBL",
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "UAL7940NM",
                "ts": "1594132078.458600"
            },
            {
                "user": "UJKKBAMLL",
                "ts": "1594132387.462000"
            },
            {
                "user": "UJKKBAMLL",
                "ts": "1594132449.463200"
            },
            {
                "user": "UPVBV34EL",
                "ts": "1594133077.478600"
            },
            {
                "user": "UPVBV34EL",
                "ts": "1594133204.479500"
            },
            {
                "user": "UMWF81HTP",
                "ts": "1594139281.026200"
            },
            {
                "user": "UJKKBAMLL",
                "ts": "1594139372.029100"
            },
            {
                "user": "UMWF81HTP",
                "ts": "1594139600.035500"
            },
            {
                "user": "UFQQ3P867",
                "ts": "1594144280.050100"
            },
            {
                "user": "UFQQ3P867",
                "ts": "1594144499.050300"
            },
            {
                "user": "UFQQ3P867",
                "ts": "1594144666.050500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1594168693.065400"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1594224989.078800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1594224997.079200"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1595104103.467200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/jasonyuandesign|@jasonyuandesign>: Introducing Mercury OS: A speculative vision of the operating system, driven by humane design principles. \n<https:\/\/medium.com\/@jasonyuan\/introducing-mercury-os-f4de45a04289>",
                "ts": 1559065549,
                "author_name": "Jason Yuan",
                "author_link": "https:\/\/twitter.com\/jasonyuandesign\/status\/1133429180362821632",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1251690094232129536\/a1U-XH2T_normal.jpg",
                "author_subname": "@jasonyuandesign",
                "text": "Introducing Mercury OS: A speculative vision of the operating system, driven by humane design principles. \n<https:\/\/medium.com\/@jasonyuan\/introducing-mercury-os-f4de45a04289>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/jasonyuandesign\/status\/1133429180362821632?s=20",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/jasonyuandesign\/status\/1133429180362821632?s=20",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9PSG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/jasonyuandesign\/status\/1133429180362821632?s=20"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFQQ3P867",
                    "UD3AK9JRF",
                    "U8A5MS6R1",
                    "UAVCC2X70"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594131459.454300",
        "client_msg_id": "4C4940EC-740B-45D6-8A01-11810DF4F34F",
        "text": "<@UJKKBAMLL> Not sure if I explained that well enough: by „data“ I mean the data users put in to use the software. Think of a note taking app where you put in your notes. You won‘t get any value out of it, if you don‘t trust that you‘ll be able to get your data back out or it‘ll be corrupted by the next update and you have to start over. So I‘m mostly concerned about the user experience. It seems you interpreted this differently?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GMOlM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJKKBAMLL"
                            },
                            {
                                "type": "text",
                                "text": " Not sure if I explained that well enough: by „data“ I mean the data users put in to use the software. Think of a note taking app where you put in your notes. You won‘t get any value out of it, if you don‘t trust that you‘ll be able to get your data back out or it‘ll be corrupted by the next update and you have to start over. So I‘m mostly concerned about the user experience. It seems you interpreted this differently?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJKKBAMLL",
        "type": "message",
        "ts": "1594131653.454500",
        "client_msg_id": "f8a799c0-6161-42d1-b658-f98ede18e960",
        "text": "What are you optimizing for? It sounds like scaling, uptime, and trust. If I were to create a novel approach to taking notes I would not advertise to my initial test users anything suggesting the information they enter will be saved; in fact I would explicitly tell them that anything they enter could be lost at any point during these initial prototypes as we are optimizing for learning user behaviors.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9db1f76eed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-12\/662675221668_6b9db1f76eed746965ca_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Peak",
            "display_name": "Steve",
            "team": "T5TCAFTA9",
            "name": "steve727",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Oay",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are you optimizing for? It sounds like scaling, uptime, and trust. If I were to create a novel approach to taking notes I would not advertise to my initial test users anything suggesting the information they enter will be saved; in fact I would explicitly tell them that anything they enter could be lost at any point during these initial prototypes as we are optimizing for learning user behaviors."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1594132078.458600",
        "client_msg_id": "92d00273-507e-4fe8-97a4-62b3e685233d",
        "text": "I'm pretty sure this was discussed here when it first appeared, but I can't find it in the archives either.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8ZPcs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm pretty sure this was discussed here when it first appeared, but I can't find it in the archives either."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "U013ZLJARC7",
                    "UFLN9JFRT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJKKBAMLL",
        "type": "message",
        "ts": "1594132387.462000",
        "client_msg_id": "1ebfabbe-e7fc-4ecd-8dd8-9406510a6c7e",
        "text": "Thanks for sharing! My initial impression, if I may share unfiltered, is that it feels very iOS to me — in good ways. If I were a gambler, I would bet that Apple’s MacOS will start to aim more into this direction over time. The success of iPadOS and iOS has shifted the landscape; it would not shock me at all to see MacOS look more like iPadOS.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9db1f76eed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-12\/662675221668_6b9db1f76eed746965ca_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Peak",
            "display_name": "Steve",
            "team": "T5TCAFTA9",
            "name": "steve727",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MJnZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for sharing! My initial impression, if I may share unfiltered, is that it feels very iOS to me — in good ways. If I were a gambler, I would bet that Apple’s MacOS will start to aim more into this direction over time. The success of iPadOS and iOS has shifted the landscape; it would not shock me at all to see MacOS look more like iPadOS."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJKKBAMLL",
        "type": "message",
        "ts": "1594132449.463200",
        "client_msg_id": "47bc953b-ef3f-4c85-958f-7f9046536a5c",
        "text": "Ha! Jason worked at Apple… shocker :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9db1f76eed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-12\/662675221668_6b9db1f76eed746965ca_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Peak",
            "display_name": "Steve",
            "team": "T5TCAFTA9",
            "name": "steve727",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fX7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ha! Jason worked at Apple… shocker "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1594133077.478600",
        "client_msg_id": "5a157c10-f882-495b-8345-4ee87d6d8bbc",
        "text": "Totally agree <@UJKKBAMLL>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Dh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Totally agree "
                            },
                            {
                                "type": "user",
                                "user_id": "UJKKBAMLL"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594133080.478900",
        "client_msg_id": "239EB444-954F-4854-B3DF-B2A07CE0DC68",
        "text": "my sketchy thoughts:\n• node and wire diagrams tend to prioritize a bunch of things but very rarely have clear points of view on visual hierarchy (in the graphic design sense). so it’s hard to see which 1-4 things are of primary interest when looking at an expansive diagram\n• they don’t tend to have super-robust notions of focusing in on a particular eg function or object. i think there’s a lot of available blue ocean space for tools that let you filter down to a compact representation of what you’re working on and its immediate dependencies\n• visual display of data structures: node and wire diagrams tend to do a lot for visualizing where data comes from but not a lot for what your data is shaped like or what operations are available for that data shape. this is particularly weird to me because data formats, whether json or haskell, tend to be pretty visual in ascii-land—containers for stricter or maps represented by {}, or strings with quotes, or even the idea of ordering fluent OOP interfaces where something.operation.secondOperation(arg1, arg2) usually means “take a thing AND THEN do operation AND THEN do second operation and stick these arguments INSIDE second operation”\n• finally you should check out self if you haven’t <https:\/\/youtu.be\/Ox5P7QyL774|https:\/\/youtu.be\/Ox5P7QyL774> and <https:\/\/youtu.be\/3ka4KY7TMTU|https:\/\/youtu.be\/3ka4KY7TMTU>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Self: The Movie;",
                "title_link": "https:\/\/youtu.be\/Ox5P7QyL774",
                "author_name": "Jecel Assumpção Jr",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCrGUwjwhuvI_xpRMkR1zw8Q",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/Ox5P7QyL774\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Self: The Movie;",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/Ox5P7QyL774?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/youtu.be\/Ox5P7QyL774",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/Ox5P7QyL774"
            },
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Self and Self: Whys and Wherefores",
                "title_link": "https:\/\/youtu.be\/3ka4KY7TMTU",
                "author_name": "Stanford",
                "author_link": "https:\/\/www.youtube.com\/user\/StanfordUniversity",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/3ka4KY7TMTU\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Self and Self: Whys and Wherefores",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/3ka4KY7TMTU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/youtu.be\/3ka4KY7TMTU",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 2,
                "original_url": "https:\/\/youtu.be\/3ka4KY7TMTU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pej",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my sketchy thoughts:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "node and wire diagrams tend to prioritize a bunch of things but very rarely have clear points of view on visual hierarchy (in the graphic design sense). so it’s hard to see which 1-4 things are of primary interest when looking at an expansive diagram"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "they don’t tend to have super-robust notions of focusing in on a particular eg function or object. i think there’s a lot of available blue ocean space for tools that let you filter down to a compact representation of what you’re working on and its immediate dependencies"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "visual display of data structures: node and wire diagrams tend to do a lot for visualizing where data comes from but not a lot for what your data is shaped like or what operations are available for that data shape. this is particularly weird to me because data formats, whether json or haskell, tend to be pretty visual in ascii-land—containers for stricter or maps represented by {}, or strings with quotes, or even the idea of ordering fluent OOP interfaces where something.operation.secondOperation(arg1, arg2) usually means “take a thing AND THEN do operation AND THEN do second operation and stick these arguments INSIDE second operation”"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "finally you should check out self if you haven’t "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/youtu.be\/Ox5P7QyL774",
                                        "text": "https:\/\/youtu.be\/Ox5P7QyL774"
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/youtu.be\/3ka4KY7TMTU",
                                        "text": "https:\/\/youtu.be\/3ka4KY7TMTU"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFQQ3P867"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594133113.479200",
        "client_msg_id": "4317A030-E992-40D0-8569-B65ABFAC46F6",
        "text": "<@UJKKBAMLL> Oh, I see where you‘re coming from. I‘m not looking for product \/ startup advice. It‘s not an MVP, and I’m not trying to attract investors. What I‘m doing is still much more research than business.\n\nI was more looking for technical advice and best practices on how to migrate data across changing schemas, or alternative techniques to be able to change significant parts of a system while simultaneously having a small number of people actually using — not just testing — it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rmNv=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJKKBAMLL"
                            },
                            {
                                "type": "text",
                                "text": " Oh, I see where you‘re coming from. I‘m not looking for product \/ startup advice. It‘s not an MVP, and I’m not trying to attract investors. What I‘m doing is still much more research than business.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I was more looking for technical advice and best practices on how to migrate data across changing schemas, or alternative techniques to be able to change significant parts of a system while simultaneously having a small number of people actually using — not just testing — it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1594133204.479500",
        "client_msg_id": "3d756318-885a-4183-a801-61ef8a15235c",
        "text": "It does feel so much like iOS. the design, the color scheme and all. And I am not really sure exactly what it offers which I can't get in my Debian.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OuX6E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It does feel so much like iOS. the design, the color scheme and all. And I am not really sure exactly what it offers which I can't get in my Debian."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJKKBAMLL",
        "type": "message",
        "ts": "1594133324.482100",
        "client_msg_id": "94a8b11f-5f73-48ed-9a4c-2e2e1d026a37",
        "text": "<@U5STGTB3J> gotcha! I’m happy to chat about how to attract investors, it’s something I’ve done before: both attracting and helping others.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9db1f76eed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-12\/662675221668_6b9db1f76eed746965ca_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Peak",
            "display_name": "Steve",
            "team": "T5TCAFTA9",
            "name": "steve727",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i=Qfj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " gotcha! I’m happy to chat about how to attract investors, it’s something I’ve done before: both attracting and helping others."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594133382.483900",
        "client_msg_id": "B0AD28AC-ACEA-4D11-93BD-41ED565A4D01",
        "text": "oh i also forgot one more piece on the visual data structures front: object destructuring and pattern matching suggest to me a super visual way to do a lot of data transformation: if you represent, say, a hash map\/dictionary as a spreadsheet, on one side you have empty cells and on the other you have the object. let users select an empty cell and then click on the field in the object they want to copy over to the empty cell. idk why no ones doing that",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "orlP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh i also forgot one more piece on the visual data structures front: object destructuring and pattern matching suggest to me a super visual way to do a lot of data transformation: if you represent, say, a hash map\/dictionary as a spreadsheet, on one side you have empty cells and on the other you have the object. let users select an empty cell and then click on the field in the object they want to copy over to the empty cell. idk why no ones doing that"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594133462.485000",
        "client_msg_id": "D984ACD7-5472-4755-8E3D-E0275E621536",
        "text": "apparently slipped my thumb on “also send to #general” when i was editing that message sorry everyone",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H0kTz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "apparently slipped my thumb on “also send to #general” when i was editing that message sorry everyone"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594134162.485300",
        "client_msg_id": "0c09c9c6-b684-46b6-9ee3-a746e8d29e24",
        "text": "<@U5STGTB3J> my response wasn't right then :slightly_smiling_face: related to migration, I implemented a serialization library that has versioning, so I can register functions that will migrate fron version N to N+1, when I encounter an old version while deserializing I run the migration functions until the last one, tl;dr: migration on read, keep all versions info, this means I can be carrying versions forever if I'm conservative, I will report the experience (hopefully) in a few years :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sVM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " my response wasn't right then "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " related to migration, I implemented a serialization library that has versioning, so I can register functions that will migrate fron version N to N+1, when I encounter an old version while deserializing I run the migration functions until the last one, tl;dr: migration on read, keep all versions info, this means I can be carrying versions forever if I'm conservative, I will report the experience (hopefully) in a few years "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1594134295.485500",
        "edited": {
            "user": "UN57U8V53",
            "ts": "1594134353.000000"
        },
        "client_msg_id": "6d7d0cc6-f46a-4b2e-af7c-8edce9198c13",
        "text": "jq has a pretty big surface, so I'm glad you're shedding light there. At my current job we actually use a homegrown language for JS transformation instead of jq. I normally frown upon that kind of thing, but the implementation is so clean I was ok with it (given the decision was already made): <https:\/\/github.com\/schibsted\/jslt|https:\/\/github.com\/schibsted\/jslt>. It'll never be popular due to the unfortunate naming, hah",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593638175.102900",
        "parent_user_id": "UL5AX4G2H",
        "attachments": [
            {
                "fallback": "schibsted\/jslt",
                "text": "JSON query and transformation language",
                "title": "schibsted\/jslt",
                "footer": "<https:\/\/github.com\/schibsted\/jslt|schibsted\/jslt>",
                "id": 1,
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1528722697,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "289",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "Java",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/schibsted\/jslt",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tbR4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "jq has a pretty big surface, so I'm glad you're shedding light there. At my current job we actually use a homegrown language for JS transformation instead of jq. I normally frown upon that kind of thing, but the implementation is so clean I was ok with it (given the decision was already made): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/schibsted\/jslt",
                                "text": "https:\/\/github.com\/schibsted\/jslt"
                            },
                            {
                                "type": "text",
                                "text": ". It'll never be popular due to the unfortunate naming, hah"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594134327.485800",
        "client_msg_id": "f9166dfe-ddd7-4543-8ad4-a6f4e1d4070e",
        "text": "are you using a statically or dynamically typed language?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NUlDX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "are you using a statically or dynamically typed language?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1594134508.486300",
        "client_msg_id": "D2B0783D-1C22-4FC2-BBE5-6F083E1349B4",
        "text": "Thanks for this!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594125940.441100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6KaiD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for this!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1594134800.486800",
        "client_msg_id": "0e031c7b-52be-4dab-b6a7-0f9d07f8bd07",
        "text": "This list feel more like language\/tooling smells rather than coding requirements. What's stopping you from moving faster, adding more features, using some dependency, or handling problems later? These are super valuable questions for a language designer...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593722002.162200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BgJxY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This list feel more like language\/tooling smells rather than coding requirements. What's stopping you from moving faster, adding more features, using some dependency, or handling problems later? These are super valuable questions for a language designer..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594136028.493400",
        "client_msg_id": "DBCAD28B-3A02-49D1-9AF1-0D98998AE585",
        "text": "<@UBN9AFS0N> Your thoughts on import\/export and serialization were on point. I‘m also looking for a broad set of approaches for the more abstract challenge of minimizing friction for users. Migrating data was just a more specific example for one area where I know it‘s going to be a challenge.\n\nI‘m using a statically typed language, but I‘d still be happy to look at how other languages approach this. And now I‘m even more intrigued to find out how that distinction is connected to the problem?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nvek",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " Your thoughts on import\/export and serialization were on point. I‘m also looking for a broad set of approaches for the more abstract challenge of minimizing friction for users. Migrating data was just a more specific example for one area where I know it‘s going to be a challenge.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I‘m using a statically typed language, but I‘d still be happy to look at how other languages approach this. And now I‘m even more intrigued to find out how that distinction is connected to the problem?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594136306.493600",
        "client_msg_id": "4cb74a5e-83bc-40b4-88c3-c2879ed0b105",
        "text": "in statically typed languages to avoid the versioning being a pain I guess you could use avro\/protocol buffers which support versioning and migration, in dynamically typed languages it's easier to \"patch it as you go\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7yGZl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in statically typed languages to avoid the versioning being a pain I guess you could use avro\/protocol buffers which support versioning and migration, in dynamically typed languages it's easier to \"patch it as you go\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594136431.493900",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1594136489.000000"
        },
        "client_msg_id": "e5ce8ad6-09dc-42ce-989b-848e2522a59d",
        "text": "more generally I try to get to \"zero steps to start using\", for example I can share a url that get's you directly to a trial session: <https:\/\/app.instadeq.com\/?try>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sLyLv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "more generally I try to get to \"zero steps to start using\", for example I can share a url that get's you directly to a trial session: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/app.instadeq.com\/?try"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594136455.494100",
        "client_msg_id": "284b20c7-ae02-450a-b605-b2ab66739446",
        "text": "the second tab in that cell has a list of templates for use cases, I still have to create them since just recently I stabilized the serialization",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n4Yk=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the second tab in that cell has a list of templates for use cases, I still have to create them since just recently I stabilized the serialization"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594136520.494600",
        "client_msg_id": "c2550714-377a-4fa3-bf7b-6f915488a710",
        "text": "later I will add the feature to get a url to start a trial session with a specific template loaded",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8aD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "later I will add the feature to get a url to start a trial session with a specific template loaded"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594136554.494800",
        "client_msg_id": "00c29cb5-d1bf-4c25-8957-2e78bab2b823",
        "text": "I also added a \"Notes\" cell specifically to add explanations in the templates and not somewhere else, I will also embed gifs and videos there",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "maUM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also added a \"Notes\" cell specifically to add explanations in the templates and not somewhere else, I will also embed gifs and videos there"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594136623.495000",
        "client_msg_id": "1eb19629-805f-4d08-af4d-ce0a009e8aa0",
        "text": "last week I even implemented \"sharing\" on a trial session, which has no persistence, so it's all done on the frontend, the idea is that anyone can try the whole experience without extra steps",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LsB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "last week I even implemented \"sharing\" on a trial session, which has no persistence, so it's all done on the frontend, the idea is that anyone can try the whole experience without extra steps"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "today I added version and browser information on the \"about\" cell to make it easier to troubleshoot",
        "files": [
            {
                "id": "F016MPH190V",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UBN9AFS0N",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7au",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "today I added version and browser information on the \"about\" cell to make it easier to troubleshoot"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1594136726.495200",
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594136772.495600",
        "client_msg_id": "3a0095ff-2482-4d0f-9834-eccaf5337cf5",
        "text": "like blink 182 would say \"all the small things (that we almost never talk about in FoC but will make the difference)\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ozZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like blink 182 would say \"all the small things (that we almost never talk about in FoC but will make the difference)\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594136784.495800",
        "client_msg_id": "7824b2ce-4c3b-4ef9-a4d3-a602f8f2c45d",
        "text": "ok, the stuff between parenthesis may not be from blink 182 :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7iubC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok, the stuff between parenthesis may not be from blink 182 "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1594136793.496000",
        "client_msg_id": "fdea3895-0687-4d86-9e51-3fd238dca509",
        "text": "I'll second <@U5STGTB3J>, \"Where node-link languages break down is: they usually offer no solution to the problem of anchoring things to locations.\"  The difference between a delight and a tangle.  For this reason, I favor near-automatic layout.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1J5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll second "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": ", \"Where node-link languages break down is: they usually offer no solution to the problem of anchoring things to locations.\"  The difference between a delight and a tangle.  For this reason, I favor near-automatic layout."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1594136903.496800",
        "client_msg_id": "ea7a5a08-f310-4ffa-8149-f0f67ae19b36",
        "text": "hah, I was writing about just that yesterday:\n&gt; In both blocks and nodes editors, the interaction loop boils down to summoning a node and then connecting, or placing, it into context. This ends up being a very verb-centric model where you get the `+` node\/block and then wire it up. This is like painting off to the side, moving it to the correct location, and then blending it into the rest of the painting. While there are times where that flow is useful, it’s much less direct than just painting in place and requires tedious actions inserted in the middle. Going from two steps to three for every action in a system adds up quickly and makes even the most basic operations feel heavy in these editors. Rather than operating in context, you’re always working off to the side and then rewiring things to make them work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VmI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hah, I was writing about just that yesterday:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In both blocks and nodes editors, the interaction loop boils down to summoning a node and then connecting, or placing, it into context. This ends up being a very verb-centric model where you get the "
                            },
                            {
                                "type": "text",
                                "text": "+",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " node\/block and then wire it up. This is like painting off to the side, moving it to the correct location, and then blending it into the rest of the painting. While there are times where that flow is useful, it’s much less direct than just painting in place and requires tedious actions inserted in the middle. Going from two steps to three for every action in a system adds up quickly and makes even the most basic operations feel heavy in these editors. Rather than operating in context, you’re always working off to the side and then rewiring things to make them work."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U9C92716C",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1594137265.001300",
        "client_msg_id": "a0bb8e82-db62-41ad-9d9c-84f55a4d877e",
        "text": "One fresh take from Loglo <https:\/\/loglo.app\/> is sticking to a grid favoring arguments coming from the left and maybe above but with the freedom to reference whatever cell.  I say this as one who gets on a concatenative language kick every few years.  Where they represent one extreme (single line of nodes), a regular node-link system represents the other: anything goes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jaYes",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One fresh take from Loglo "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/loglo.app\/"
                            },
                            {
                                "type": "text",
                                "text": " is sticking to a grid favoring arguments coming from the left and maybe above but with the freedom to reference whatever cell.  I say this as one who gets on a concatenative language kick every few years.  Where they represent one extreme (single line of nodes), a regular node-link system represents the other: anything goes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594137545.005800",
        "client_msg_id": "FEA76C9A-76BC-4D60-8C7B-584B9D2B4FEC",
        "text": "Thanks, <@UBN9AFS0N>, lots of great ideas here! Using URLs to short-circuit onboarding is something I hadn’t thought about and would be extremely simple to do. And I can already see so many uses for this, not just to get people to a specific part quickly, but also to trigger certain debug\/support actions, because I can totally schedule a call with a user, send them a link, and ask them, “Hey, can you click that link while we’re on the call?” Which could also trigger some sort of data model migration, ha!\n\nRe migrations: I’m probably using JSON and dedicated model structs just for import\/export. Then I can add properties whenever I want and handle larger structural changes in the actual data structures one level higher, with a lightweight migration transformation that only has to work in one direction.\n\nA lot of the other things you mention are also good for onboarding in general. In hindsight kind of obvious that what I was asking for is somewhat related to onboarding.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "15qO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, "
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": ", lots of great ideas here! Using URLs to short-circuit onboarding is something I hadn’t thought about and would be extremely simple to do. And I can already see so many uses for this, not just to get people to a specific part quickly, but also to trigger certain debug\/support actions, because I can totally schedule a call with a user, send them a link, and ask them, “Hey, can you click that link while we’re on the call?” Which could also trigger some sort of data model migration, ha!\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Re migrations: I’m probably using JSON and dedicated model structs just for import\/export. Then I can add properties whenever I want and handle larger structural changes in the actual data structures one level higher, with a lightweight migration transformation that only has to work in one direction.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "A lot of the other things you mention are also good for onboarding in general. In hindsight kind of obvious that what I was asking for is somewhat related to onboarding."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594137845.006000",
        "client_msg_id": "e5ed7a66-2323-49b8-b119-37bac761f634",
        "text": "the other way around a notebook can be downloaded, so if someone gets stuck they can share the notebook via a file with me and I can check it out",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jQB4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the other way around a notebook can be downloaded, so if someone gets stuck they can share the notebook via a file with me and I can check it out"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1594137898.006200",
        "client_msg_id": "22b66c3f-de16-4124-a069-30df97200645",
        "text": "this book may jhelp you too <http:\/\/momtestbook.com\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "title": "The Mom Test - a book by Rob Fitzpatrick",
                "title_link": "http:\/\/momtestbook.com\/",
                "text": "How to talk to customers and learn if your business is a good idea when everyone is lying to you.",
                "fallback": "The Mom Test - a book by Rob Fitzpatrick",
                "from_url": "http:\/\/momtestbook.com\/",
                "service_icon": "http:\/\/momtestbook.com\/apple-touch-icon.png",
                "service_name": "momtestbook.com",
                "id": 1,
                "original_url": "http:\/\/momtestbook.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DMY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this book may jhelp you too "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/momtestbook.com\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594138840.015700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1594138895.000000"
        },
        "client_msg_id": "F5A0FCDA-B3EE-4124-9877-56D901840422",
        "text": "Re: William\n\n&gt; For this reason, I favor near-automatic layout.\n&gt; \nOne of my weed-dweller ideas is that automatic layout is useful, but not in the arrangement of nodes and wires themselves, which (I argue) must be laid out by hand with great care – and tooling needs to be excellent, in order to make this process a joy (like gardening) rather than a chore (like cleaning up).\n\n(The cases where automatic layout is useful... that's much deeper in the weeds. At some point, I'll dredge that patch and plop whatever trinkets and bike tires and fish guts come out on my blog)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+5eM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re: William\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For this reason, I favor near-automatic layout.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nOne of my weed-dweller ideas is that automatic layout is useful, but not in the arrangement of nodes and wires themselves, which (I argue) must be laid out by hand with great care – and tooling needs to be excellent, in order to make this process a joy (like gardening) rather than a chore (like cleaning up).\n\n(The cases where automatic layout is useful... that's much deeper in the weeds. At some point, I'll dredge that patch and plop whatever trinkets and bike tires and fish guts come out on my blog)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMWF81HTP",
                    "UHWC9PXBL",
                    "U9C92716C"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594139131.023600",
        "client_msg_id": "AEC19272-AB2D-4C7A-A288-CD11C67FB6DE",
        "text": "<@UBN9AFS0N> It just occurred to me that it was totally unclear that I’m thinking about a packaged app, not a web service. Which is probably why that URL idea caught me in a very different sense than you probably intended or expected, as I understand you provide a web-based service\/app. :-)\n\nI’ll check out the book. They had quite a copy writer for that landing page…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BY\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " It just occurred to me that it was totally unclear that I’m thinking about a packaged app, not a web service. Which is probably why that URL idea caught me in a very different sense than you probably intended or expected, as I understand you provide a web-based service\/app. :-)\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I’ll check out the book. They had quite a copy writer for that landing page…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMWF81HTP",
        "type": "message",
        "ts": "1594139281.026200",
        "client_msg_id": "E6460C75-5188-4702-8D3E-8FC62AB60A06",
        "text": "Makespace is the sequel, and it’s looking beautiful:\n\n<https:\/\/makespace.fun\/|https:\/\/makespace.fun\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4022671f3400",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-03\/775814402657_4022671f340032b9eb75_72.jpg",
            "first_name": "yoshiki",
            "real_name": "yoshiki",
            "display_name": "yoshiki",
            "team": "T5TCAFTA9",
            "name": "yoshikischmitz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "attachments": [
            {
                "title": "MakeSpace",
                "title_link": "https:\/\/makespace.fun\/",
                "text": "A whole new way to be together, apart.",
                "fallback": "MakeSpace",
                "image_url": "https:\/\/d1wvvbcd2recf8.cloudfront.net\/images\/opengraph.jpg",
                "image_width": 476,
                "image_height": 250,
                "from_url": "https:\/\/makespace.fun\/",
                "image_bytes": 32474,
                "service_name": "makespace.fun",
                "id": 1,
                "original_url": "https:\/\/makespace.fun\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zcrZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Makespace is the sequel, and it’s looking beautiful:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/makespace.fun\/",
                                "text": "https:\/\/makespace.fun\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFQQ3P867",
                    "UD3AK9JRF",
                    "UHWC9PXBL"
                ],
                "count": 3
            },
            {
                "name": "heart_eyes",
                "users": [
                    "U8A5MS6R1",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJKKBAMLL",
        "type": "message",
        "ts": "1594139372.029100",
        "client_msg_id": "45dd2e96-733e-4847-8bc8-3a15db476088",
        "text": "<@UA8HY8R7B> ^^ This is your jam :wink: :notes:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9db1f76eed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-12\/662675221668_6b9db1f76eed746965ca_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Peak",
            "display_name": "Steve",
            "team": "T5TCAFTA9",
            "name": "steve727",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QjL6I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA8HY8R7B"
                            },
                            {
                                "type": "text",
                                "text": " ^^ This is your jam "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "notes",
                                "unicode": "1f3b6"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMWF81HTP",
        "type": "message",
        "ts": "1594139600.035500",
        "client_msg_id": "3D876375-ECB8-4251-B972-8BC16EDE67D1",
        "text": "As for Mercury, the emphasis on neurodiversity really shook my assumptions about operating system design, and interface design in general, and has stuck with me since.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4022671f3400",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-03\/775814402657_4022671f340032b9eb75_72.jpg",
            "first_name": "yoshiki",
            "real_name": "yoshiki",
            "display_name": "yoshiki",
            "team": "T5TCAFTA9",
            "name": "yoshikischmitz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ggz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As for Mercury, the emphasis on neurodiversity really shook my assumptions about operating system design, and interface design in general, and has stuck with me since."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFQQ3P867",
                    "UML4ZEKDK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594139885.038400",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1594139914.000000"
        },
        "client_msg_id": "F58F84BC-DA71-4360-A005-7010A705FFB8",
        "text": "If your visual representation is interactive and bi-directional, moving things around could change their meaning\/properties based on where you place them. Think interactive scatter plot where moving a data point changes its values. How useful that particular use case is, is a separate debate. But in general I like to think much more about interactions than about visualizations. You might have caught me before putting the “visual” in “visual language” in quotes. For reasons. \n\nAren’t all the good examples for visual representations we admire getting most of their usefulness out of their interactions? Wires that snap into place on a connector. MIDI notes that change their pitch when moving them up and down. Scrubbing through an audio or video file. \nI’d have lots more to say about how that also hooks into image schemas and metaphors and embodied cognition, and it’ll tell you why I’m all about leaving mice and keyboards behind (just as optional accessories, not killing them entirely) and fully embracing both touch and freehand gestures. But I’ll save that for another thread.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5B7F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If your visual representation is interactive and bi-directional, moving things around could change their meaning\/properties based on where you place them. Think interactive scatter plot where moving a data point changes its values. How useful that particular use case is, is a separate debate. But in general I like to think much more about interactions than about visualizations. You might have caught me before putting the “visual” in “visual language” in quotes. For reasons. \n\nAren’t all the good examples for visual representations we admire getting most of their usefulness out of their interactions? Wires that snap into place on a connector. MIDI notes that change their pitch when moving them up and down. Scrubbing through an audio or video file. \nI’d have lots more to say about how that also hooks into image schemas and metaphors and embodied cognition, and it’ll tell you why I’m all about leaving mice and keyboards behind (just as optional accessories, not killing them entirely) and fully embracing both touch and freehand gestures. But I’ll save that for another thread."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UEBG0NPDK",
                    "UJN1TAYEQ",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "UBSMEUXAA"
                ],
                "count": 5
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UKP3B2J5D",
                    "UJ6LDMMN0"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1594140397.038800",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1594142522.000000"
        },
        "client_msg_id": "f147441d-1c88-422a-a5d5-65832fa72d7d",
        "text": "&gt; &gt; ..\"need to move slow now\"\n&gt; \n&gt; What's stopping you from moving faster?\nThe scenario I was thinking of: I often want to do some big fuzzy thing, and I realize just how big it is after some false starts, and start to think harder about decomposing into smaller pieces. So what I initially thought was going to be a single commit eventually turns into a series of commits. And in the process my understanding of the problem becomes much more precise. \"What tooling can get rid of the process of clarifying one's understanding?\" feels as hard a problem as \"world peace\".\n\n&gt; &gt; ..\"this feature adds too much complexity\"\n&gt; \n&gt; What's stopping you from adding more features? ... feels more like a language\/tooling smell\nI'm thinking here about the principle of parsimony in design. There are two ways to add a feature. One yields a state space of size `M+N`, another of size `M*N`. The extra complexity in the latter isn't needed for its purpose. Again, no tool is going to help you with this sort of problem until tools become sentient and turn us out of jobs.\n\nMore strongly, I make the case in my recent paper (<http:\/\/akkartik.name\/akkartik-convivial-20200607.pdf>) that _all features have costs_, and end-user computing requires making end users aware of these costs, so they can better decide if they need them. \"Zoom's going to start a webserver on your computer which adds a little convenience but a lot of risk. Yes\/no?\"\n\nTools for handling problems later.. just, no. Say you're building a prototype, and you don't care about a bunch of things. There are still things you need to get right _that will otherwise pollute the signal you're hoping to get_. No tool is going to substitute for the imagination needed to anticipate how your A\/B test might get messed up. With all the attendant slow-down and context-switching overhead that each such bug causes.\n\nIt's pretty clear now that my original prompt was abysmally unclear. Hopefully this helps clarify things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593722002.162200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kch",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> ..\"need to move slow now\"\n\nWhat's stopping you from moving faster?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The scenario I was thinking of: I often want to do some big fuzzy thing, and I realize just how big it is after some false starts, and start to think harder about decomposing into smaller pieces. So what I initially thought was going to be a single commit eventually turns into a series of commits. And in the process my understanding of the problem becomes much more precise. \"What tooling can get rid of the process of clarifying one's understanding?\" feels as hard a problem as \"world peace\".\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> ..\"this feature adds too much complexity\"\n\nWhat's stopping you from adding more features? ... feels more like a language\/tooling smell"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm thinking here about the principle of parsimony in design. There are two ways to add a feature. One yields a state space of size "
                            },
                            {
                                "type": "text",
                                "text": "M+N",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", another of size "
                            },
                            {
                                "type": "text",
                                "text": "M*N",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The extra complexity in the latter isn't needed for its purpose. Again, no tool is going to help you with this sort of problem until tools become sentient and turn us out of jobs.\n\nMore strongly, I make the case in my recent paper ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/akkartik-convivial-20200607.pdf"
                            },
                            {
                                "type": "text",
                                "text": ") that "
                            },
                            {
                                "type": "text",
                                "text": "all features have costs",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and end-user computing requires making end users aware of these costs, so they can better decide if they need them. \"Zoom's going to start a webserver on your computer which adds a little convenience but a lot of risk. Yes\/no?\"\n\nTools for handling problems later.. just, no. Say you're building a prototype, and you don't care about a bunch of things. There are still things you need to get right "
                            },
                            {
                                "type": "text",
                                "text": "that will otherwise pollute the signal you're hoping to get",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". No tool is going to substitute for the imagination needed to anticipate how your A\/B test might get messed up. With all the attendant slow-down and context-switching overhead that each such bug causes.\n\nIt's pretty clear now that my original prompt was abysmally unclear. Hopefully this helps clarify things."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN57U8V53"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1594141174.039100",
        "client_msg_id": "6c6cd943-7a05-483b-9605-bf5f8daaad37",
        "text": "I like Stefan's comment about making interaction the focus. As for layout, I don't want a visualization that \"must be laid out by hand with great care\" [Ivan], because that's a big waste of my time. In the Go language community, they have this culture where you don't format your code by personal preference, there is only one true layout, enforced by the gofmt program. I want to use code visualizations where there is automatic layout, and there is only one way to lay out any given program. Different layout means different meaning. I don't want to \"burn\" interaction gestures on manual layout. There's only so much convenient interaction syntax available, and it must be used wisely. If I move a graphical object from one position to another, it shouldn't be because the object looks prettier in the new position, the gesture must change the meaning of the program (like moving a MIDI note up and down in Stefan's example).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l\/1cr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like Stefan's comment about making interaction the focus. As for layout, I don't want a visualization that \"must be laid out by hand with great care\" [Ivan], because that's a big waste of my time. In the Go language community, they have this culture where you don't format your code by personal preference, there is only one true layout, enforced by the gofmt program. I want to use code visualizations where there is automatic layout, and there is only one way to lay out any given program. Different layout means different meaning. I don't want to \"burn\" interaction gestures on manual layout. There's only so much convenient interaction syntax available, and it must be used wisely. If I move a graphical object from one position to another, it shouldn't be because the object looks prettier in the new position, the gesture must change the meaning of the program (like moving a MIDI note up and down in Stefan's example)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1594141991.039900",
        "client_msg_id": "4fa290f1-f9ac-4b61-9e4c-0e4899fd7027",
        "text": "Extremely obligatory: <https:\/\/en.m.wikipedia.org\/wiki\/Deutsch_limit|https:\/\/en.m.wikipedia.org\/wiki\/Deutsch_limit>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/0f\/Dutch_cryo_Moscow.png\/1200px-Dutch_cryo_Moscow.png",
                "image_width": 1200,
                "image_height": 1068,
                "image_bytes": 228265,
                "title": "Deutsch limit",
                "title_link": "https:\/\/en.m.wikipedia.org\/wiki\/Deutsch_limit",
                "from_url": "https:\/\/en.m.wikipedia.org\/wiki\/Deutsch_limit",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "The Deutsch limit is an aphorism about the information density of visual programming languages originated by L. Peter Deutsch that states:\n\nThe problem with visual programming is that you can’t have more than 50 visual primitives on the screen at the same time.The term was made up by Fred Lakin, after Deutsch made the following comment at a talk on visual programming by Scott Kim and Warren Robinett: \"Well, this is all fine and well, but the problem with visual programming languages is that you can’t have more than 50 visual primitives on the screen at the same time. How are you going to write an operating system?\"The primitives in a visual language are the separate graphical elements used to build a program, and having more of them available at the same time allows the programmer to read more information. This limit is sometimes cited as an example of the advantage of textual over visual languages, pointing out the greater information density of text, and posing a difficulty in scaling the language.However, criticisms of the limit include that it is not clear whether a similar limit also exists in textual programming languages; and that the limit could be overcome by applying modularity to visual programming as is commonly done in textual programming.",
                "fallback": "wikipedia: Deutsch limit",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.m.wikipedia.org\/wiki\/Deutsch_limit"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I\/SE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Extremely obligatory: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Deutsch_limit",
                                "text": "https:\/\/en.m.wikipedia.org\/wiki\/Deutsch_limit"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "An important point that unifies <@U5STGTB3J> \/ <@UHWC9PXBL>'s cognitive insights: any visual depiction only shows a certain category of logical relations between entities. From Kosslyn's \"Case for Mental Imagery\": a comparison of \"descriptive and depictive relations\" (attached)\nThis is touched on empirically in Larkin & Simon's \"why a diagram is sometimes worth ten thousand words\" in how students solve physics problems with free body diagrams. Simon actually turns the visual relations into LISP statements in a giant table (not pictured)",
        "files": [
            {
                "id": "F016VHQCM2Q",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UFQQ3P867",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cMc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An important point that unifies "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " \/ "
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": "'s cognitive insights: any visual depiction only shows a certain category of logical relations between entities. From Kosslyn's \"Case for Mental Imagery\": a comparison of \"descriptive and depictive relations\" (attached)\nThis is touched on empirically in Larkin & Simon's \"why a diagram is sometimes worth ten thousand words\" in how students solve physics problems with free body diagrams. Simon actually turns the visual relations into LISP statements in a giant table (not pictured)"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1594142185.041200",
        "client_msg_id": "e0e9f963-aed0-41c1-ba7f-243f82e16e67",
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594142404.045200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1594142664.000000"
        },
        "client_msg_id": "FAB6E72E-F1F4-4C79-A199-831E7102AAFB",
        "text": "Who said anything about looking prettier?\n\nOverlooked in all this talk about whether and how positioning has meaning: manual layout is meaningful to the author, for the sake of their own thought process, that the environment doesn't need to care about. Go formats your code, but it doesn't force you to use automatically generated variable\/function names. You choose the names, and it's worth spending the effort to choose great names, because that's how you structure your thinking about the problem.\n\nIn other words, the formatting of text code and the layout of visual code are not directly comparable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=EwQn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Who said anything about looking prettier?\n\nOverlooked in all this talk about whether and how positioning has meaning: manual layout is meaningful to the author, for the sake of their own thought process, that the environment doesn't need to care about. Go formats your code, but it doesn't force you to use automatically generated variable\/function names. You choose the names, and it's worth spending the effort to choose great names, because that's how you structure your thinking about the problem.\n\nIn other words, the formatting of text code and the layout of visual code are not directly comparable."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594143501.049700",
        "client_msg_id": "1b36b031-164a-4c83-a69a-e72eabb1e8b5",
        "text": "(except insofar as a lot of formatting of text code is an impoverished attempt to garner some of the benefits of visual layout)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9U9tj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(except insofar as a lot of formatting of text code is an impoverished attempt to garner some of the benefits of visual layout)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1594144280.050100",
        "client_msg_id": "58ac4254-b74d-4d52-9839-8dfc6a835455",
        "text": "was actually talking to Jason about that last night <@UMWF81HTP>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Xba",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "was actually talking to Jason about that last night "
                            },
                            {
                                "type": "user",
                                "user_id": "UMWF81HTP"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1594144499.050300",
        "edited": {
            "user": "UFQQ3P867",
            "ts": "1594144734.000000"
        },
        "client_msg_id": "8d5f377e-8965-41ca-845b-bdb9391f2c39",
        "text": "In particular I noticed that ADHD is seen as a north star for design of complex systems. It's slowly becoming a \"design persona\" in itself, and am wondering what the implications are especially since the disorder itself has been in flux since its formalization",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1mFD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In particular I noticed that ADHD is seen as a north star for design of complex systems. It's slowly becoming a \"design persona\" in itself, and am wondering what the implications are especially since the disorder itself has been in flux since its formalization"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1594144666.050500",
        "client_msg_id": "81d0e2a0-2b1a-4155-8a2f-c29c321c1c36",
        "text": "They're tough and contentious topics but as cognition gets more attention with system designers wanting to get closer \"to the metal\" of how we work, they're going to be examined one way or another",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MIr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They're tough and contentious topics but as cognition gets more attention with system designers wanting to get closer \"to the metal\" of how we work, they're going to be examined one way or another"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1594149257.051400",
        "client_msg_id": "6d483e8f-8818-4423-92fe-118d7d964a39",
        "text": "&gt; Go doesn't force you to use automatically generated variable\/function names. . You choose the names, and it's worth spending the effort to choose great names...\nInventing names for trivial things is a pain. One of the killer features of node+wire programming is that you aren't forced to choose names for local variables. Choosing names for important high level concepts, or using 2D layout as a way to organize important high level, is beneficial. But don't make me manually lay out the nodes for 'x + y + z'.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9F\/",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Go doesn't force you to use automatically generated variable\/function names. . You choose the names, and it's worth spending the effort to choose great names..."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Inventing names for trivial things is a pain. One of the killer features of node+wire programming is that you aren't forced to choose names for local variables. Choosing names for important high level concepts, or using 2D layout as a way to organize important high level, is beneficial. But don't make me manually lay out the nodes for 'x + y + z'."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U01448TH3PG",
        "type": "message",
        "ts": "1594151070.052300",
        "client_msg_id": "33a96f1c-737d-41a1-b25a-9f20f03e29be",
        "text": "<@UJN1TAYEQ> this brings up something I'm curious about, which is how to talk about node and wire code. Text is cool because it can always be verbal or written. Code isn't quite natural langauge, so something like `function add(a, b)` doesn't necessarily have a canonical spoken representation, but it feels more obvious than if it were three unlabeled boxes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d9087b7dc5a6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-13\/1262329708080_d9087b7dc5a6a8e2dc86_72.jpg",
            "first_name": "Aleks",
            "real_name": "Aleks Litynski",
            "display_name": "Aleks",
            "team": "T5TCAFTA9",
            "name": "tavern.joe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gyYl+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " this brings up something I'm curious about, which is how to talk about node and wire code. Text is cool because it can always be verbal or written. Code isn't quite natural langauge, so something like "
                            },
                            {
                                "type": "text",
                                "text": "function add(a, b)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " doesn't necessarily have a canonical spoken representation, but it feels more obvious than if it were three unlabeled boxes."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D",
                    "U9C92716C"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1594152332.052500",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1594157311.000000"
        },
        "client_msg_id": "8b25bb6c-e28e-4a53-980d-600e65ece84b",
        "text": "Nodes and wires programming doesn't *necessarily* imply that you have to position and link things with tedious mouse manipulations. The merit of nodes and wires is mainly their expressivity for some programming artifacts. But one can imagine some HCI that make it easier to manipulate than clicking somewhere, dragging in the canvas, dropping, etc.\n\nIn fact, like most people coming from text languages I was frustrated to have to always use the mouse with Max\/MSP, and as someone that once tasted the power of vim, I was *really* frustrated.\n\nSo I experimented that in my \"zed\" editor where (nearly) every action can be done \"easily\" with the keyboard: in my <#C0120A3L30R|two-minute-week> video of last week I only use the mouse to move in the canvas, all (the few) editing\/navigating actions are done with the keyboard. For example hitting \"a\" then \"s\" adds a script node just below the current node, then hitting \"i\" connects the node input to the output of the previous, etc.\n\nI agree this kind of manipulations is reserved to power users, but as Ivan previously said it is important to make things work fine for power users and it shows that if the mouse is seen as a complicated way to edit\/navigate one can also imagine some easier way to do things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ChK\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nodes and wires programming doesn't "
                            },
                            {
                                "type": "text",
                                "text": "necessarily",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " imply that you have to position and link things with tedious mouse manipulations. The merit of nodes and wires is mainly their expressivity for some programming artifacts. But one can imagine some HCI that make it easier to manipulate than clicking somewhere, dragging in the canvas, dropping, etc.\n\nIn fact, like most people coming from text languages I was frustrated to have to always use the mouse with Max\/MSP, and as someone that once tasted the power of vim, I was "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " frustrated.\n\nSo I experimented that in my \"zed\" editor where (nearly) every action can be done \"easily\" with the keyboard: in my "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C0120A3L30R"
                            },
                            {
                                "type": "text",
                                "text": " video of last week I only use the mouse to move in the canvas, all (the few) editing\/navigating actions are done with the keyboard. For example hitting \"a\" then \"s\" adds a script node just below the current node, then hitting \"i\" connects the node input to the output of the previous, etc.\n\nI agree this kind of manipulations is reserved to power users, but as Ivan previously said it is important to make things work fine for power users and it shows that if the mouse is seen as a complicated way to edit\/navigate one can also imagine some easier way to do things."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594152844.053100",
        "client_msg_id": "c37715f8-1928-493c-9550-c6e307709bab",
        "text": "on the mouse\/keyboard sub-subject: I wish more apps took the desktop-video-game approach of prioritizing inputs for simultaneous keyboard-and-mouse use—eg wasd to move and mouse to select",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d2Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "on the mouse\/keyboard sub-subject: I wish more apps took the desktop-video-game approach of prioritizing inputs for simultaneous keyboard-and-mouse use—eg wasd to move and mouse to select"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UML4ZEKDK",
                    "ULK0Z4MPV",
                    "U013ZLJARC7"
                ],
                "count": 4
            },
            {
                "name": "heavy_check_mark",
                "users": [
                    "UJ6LDMMN0",
                    "U01448TH3PG"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "ULK0Z4MPV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1594157554.054100",
        "client_msg_id": "b6e6a2b1-b203-4404-8fd7-0c1096e8d111",
        "text": "I like the idea and yet never thought to try it. I definitely will! Thanks <@UHWC9PXBL> :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "05Ea",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like the idea and yet never thought to try it. I definitely will! Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1594159483.055100",
        "client_msg_id": "65aecd2f-373e-4f69-a04a-42d96ad479b8",
        "text": "<@ULM3U6275> sorry I dropped your (rhetorical?) question. What I was getting at is the distinction between using synchronization primitives and _having to reason about synchronization_. Every time I create a shell pipeline I use synchronization. But I don't need to think about it. Do programmers need to think about or appreciate synchronization more than they do today? I'm not yet convinced. And similarly for many of your other axes. They're the stuff of CS degrees, sure, and I have a CS degree so I'm closer to them than most. But they feel like accidental complexity in most situations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593722002.162200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mzn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " sorry I dropped your (rhetorical?) question. What I was getting at is the distinction between using synchronization primitives and "
                            },
                            {
                                "type": "text",
                                "text": "having to reason about synchronization",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Every time I create a shell pipeline I use synchronization. But I don't need to think about it. Do programmers need to think about or appreciate synchronization more than they do today? I'm not yet convinced. And similarly for many of your other axes. They're the stuff of CS degrees, sure, and I have a CS degree so I'm closer to them than most. But they feel like accidental complexity in most situations."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594159640.055300",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1594161177.000000"
        },
        "client_msg_id": "4f3b2d05-df36-4a49-b037-0189bb0b34d5",
        "text": "Re: Doug\n&gt; [very good comment that I enjoyed and agreed with, ending with...] But don't make me manually lay out the nodes for 'x + y + z'.\nAgreed! No _good_ node editor would make you do that. (There is a paucity of good node editors.)\n\nThat said, `Vec3.add(x, Vec3.add(y, z))` is bad too — and it's common in languages that don't have operator overloading. But operator overloading isn't a total win either, given precedence is typically fixed (good luck using `^` for the geometric wedge product). So in the end, you still often have to manually lay out your equations, just using extra verbosity instead of extra cabling.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X+UU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re: Doug\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[very good comment that I enjoyed and agreed with, ending with...] But don't make me manually lay out the nodes for 'x + y + z'."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAgreed! No "
                            },
                            {
                                "type": "text",
                                "text": "good",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " node editor would make you do that. (There is a paucity of good node editors.)\n\nThat said, "
                            },
                            {
                                "type": "text",
                                "text": "Vec3.add(x, Vec3.add(y, z))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is bad too — and it's common in languages that don't have operator overloading. But operator overloading isn't a total win either, given precedence is typically fixed (good luck using "
                            },
                            {
                                "type": "text",
                                "text": "^",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for the geometric wedge product). So in the end, you still often have to manually lay out your equations, just using extra verbosity instead of extra cabling."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594162816.060200",
        "client_msg_id": "81C54324-E7BB-40FF-9372-E24442E48D7C",
        "text": "The ideal is probably something like a rich symbolic algebra editor, and it'd be easier to build that within a powerful visual environment than within a powerful text-grid environment.\n\n(Considering that things like Atom and Code are built within a web rendering engine, the distinction becomes less and less meaningful)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QBk1+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The ideal is probably something like a rich symbolic algebra editor, and it'd be easier to build that within a powerful visual environment than within a powerful text-grid environment.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "(Considering that things like Atom and Code are built within a web rendering engine, the distinction becomes less and less meaningful)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1594162823.060400",
        "client_msg_id": "d6f7c161-7eb3-43c6-b51b-cb6f49c6ef62",
        "text": "&gt; But don't make me manually lay out the nodes for 'x + y + z'.\n&gt; &gt; Agreed! No _good_ node editor would make you do that.\nShow me an example of one that doesn't make me do that. The problem with node+wire is that once you add a node to the canvas, it is stuck in that position until you move it. So what happens after you have written a substantial amount of code, and need to revise it? Suppose I want to insert 'x + y + z' into the middle of a computation, but it won't fit, there is no room on the canvas to put those nodes where I want. So either I manually rearrange all the nodes to make room for the new code, or I put the new code off to one side where there is space, and drag input and output wires from the place where the computation needs to be, off to where I put the nodes, and now the code looks like a plate of spaghetti.\n\nSo that's why I want automatic layout. If I insert nodes, the code automatically reflows to make room. If I delete nodes, the code automatically reflows to fill in the gap.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s73cY",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But don't make me manually lay out the nodes for 'x + y + z'.\n> Agreed! No "
                            },
                            {
                                "type": "text",
                                "text": "good",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " node editor would make you do that."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Show me an example of one that doesn't make me do that. The problem with node+wire is that once you add a node to the canvas, it is stuck in that position until you move it. So what happens after you have written a substantial amount of code, and need to revise it? Suppose I want to insert 'x + y + z' into the middle of a computation, but it won't fit, there is no room on the canvas to put those nodes where I want. So either I manually rearrange all the nodes to make room for the new code, or I put the new code off to one side where there is space, and drag input and output wires from the place where the computation needs to be, off to where I put the nodes, and now the code looks like a plate of spaghetti.\n\nSo that's why I want automatic layout. If I insert nodes, the code automatically reflows to make room. If I delete nodes, the code automatically reflows to fill in the gap."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1594162946.062500",
        "client_msg_id": "5aca00f2-1f37-4851-96aa-fd2391e07bb0",
        "text": "<@UC2A2ARPT> \"The ideal is probably something like a rich symbolic algebra editor\" -- Are we agreeing that the ideal is not node+wire?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1RMe8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " \"The ideal is probably something like a rich symbolic algebra editor\" -- Are we agreeing that the ideal is not node+wire?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1594163242.063900",
        "client_msg_id": "b7a029c8-f489-4b8e-a78d-c5f5ad1149a0",
        "text": "<@UJN1TAYEQ> Though few editors do this, \"moving stuff out of the way to make room for new construction\" is the kind of \"auto-tidying\" that a good editor should do. I don't think that's in conflict with allowing the user to spatially organize, as long as it doesn't outright prevent the user from moving stuff around on their own.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OVnK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Though few editors do this, \"moving stuff out of the way to make room for new construction\" is the kind of \"auto-tidying\" that a good editor should do. I don't think that's in conflict with allowing the user to spatially organize, as long as it doesn't outright prevent the user from moving stuff around on their own."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594164030.064100",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1594164544.000000"
        },
        "client_msg_id": "61a24a41-30e8-463f-ade4-8ae15ed375d3",
        "text": "&gt; moving stuff out of the way\n3d modelling tools have solved this problem without automatic layout. They give you rich tools to manipulate objects in space, and the space itself, by leveraging the properties of the structure of objects and space.\n\nWant to insert something in the middle of a dense mesh? Grab a vertex and spread out new vertices along every inbound edge, turning the original vertex into a face — in 1 keypress + click. Or, slice a plane through the mesh, and push both halves of the mesh apart. Or, band-select all the faces pointing toward the camera, and pull them away from all the faces looking away from the camera. At all times, you have full control over exactly where every vertex is, and when editing in bulk, exactly how each vertex is moving — you would absolutely not want to tell the program \"just move my vertices out of the way _somehow_\".\n\nThere are, also, automatic tools you can use. But the manual modelling tools are so good, you rarely want to use the automatic tools. (This gets more weedsy when talking about animation, UV mapping, mesh sculpting, etc. — those areas have manual+automatic hybrids. But they're also less about putting things in places and more about setting relationships, which is relevant to us, but not relevant to this question.)\n\n&gt; Are we agreeing that the ideal is not node+wire?\nA rich symbolic algebra editor could (and should) just be another node. (And, ideally, you should be able to crack it open and play with the nodes inside it.)\n\nThis thread is broadly about node-and-wire programming, implicitly vs text editing, so that's where I've been focusing my thoughts. But do count me in with team \"node-and-wire isn't the best that visual programming has to offer\".\n\n&gt; Show me an example of one that doesn't make me do that.\n\"There is a paucity of good node editors.\" So, you'll have to use your imagination :(\n\n(There are a bunch of node-and-wire tools that let you put JavaScript or C++ or whatever inside a node. I view that as cheating. There are some node editors, though their names escape me, that do have dedicated equation nodes. None of them are especially rich.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VKo",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "moving stuff out of the way"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n3d modelling tools have solved this problem without automatic layout. They give you rich tools to manipulate objects in space, and the space itself, by leveraging the properties of the structure of objects and space.\n\nWant to insert something in the middle of a dense mesh? Grab a vertex and spread out new vertices along every inbound edge, turning the original vertex into a face — in 1 keypress + click. Or, slice a plane through the mesh, and push both halves of the mesh apart. Or, band-select all the faces pointing toward the camera, and pull them away from all the faces looking away from the camera. At all times, you have full control over exactly where every vertex is, and when editing in bulk, exactly how each vertex is moving — you would absolutely not want to tell the program \"just move my vertices out of the way "
                            },
                            {
                                "type": "text",
                                "text": "somehow",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\".\n\nThere are, also, automatic tools you can use. But the manual modelling tools are so good, you rarely want to use the automatic tools. (This gets more weedsy when talking about animation, UV mapping, mesh sculpting, etc. — those areas have manual+automatic hybrids. But they're also less about putting things in places and more about setting relationships, which is relevant to us, but not relevant to this question.)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are we agreeing that the ideal is not node+wire?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nA rich symbolic algebra editor could (and should) just be another node. (And, ideally, you should be able to crack it open and play with the nodes inside it.)\n\nThis thread is broadly about node-and-wire programming, implicitly vs text editing, so that's where I've been focusing my thoughts. But do count me in with team \"node-and-wire isn't the best that visual programming has to offer\".\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Show me an example of one that doesn't make me do that."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\"There is a paucity of good node editors.\" So, you'll have to use your imagination :(\n\n(There are a bunch of node-and-wire tools that let you put JavaScript or C++ or whatever inside a node. I view that as cheating. There are some node editors, though their names escape me, that do have dedicated equation nodes. None of them are especially rich.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1594165381.064700",
        "edited": {
            "user": "USH01JEDQ",
            "ts": "1594165388.000000"
        },
        "client_msg_id": "62e934de-9b10-4ba0-b1bc-987f88b24c1a",
        "text": "Notebooks feel like the first avenue where node-and-wire will go beyond PoC applications — the scripts to replace are small \/ the number of pieces to display and enable are limited (and are already on screen, to understand) — and notebooks are already a half-visual \/ hybrid context, going full-visual is a win for the audience (vs a _meh_ for developers anywhere else)\n\nSomething like <https:\/\/github.com\/IBM\/node-red-dsx-workflow> but cell-by-cell within a notebook",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AW4XH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Notebooks feel like the first avenue where node-and-wire will go beyond PoC applications — the scripts to replace are small \/ the number of pieces to display and enable are limited (and are already on screen, to understand) — and notebooks are already a half-visual \/ hybrid context, going full-visual is a win for the audience (vs a "
                            },
                            {
                                "type": "text",
                                "text": "meh",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for developers anywhere else)\n\nSomething like "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/IBM\/node-red-dsx-workflow"
                            },
                            {
                                "type": "text",
                                "text": " but cell-by-cell within a notebook"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1594167761.065100",
        "client_msg_id": "383bf9e0-228b-45f2-955e-7b980e9b133f",
        "text": "Specifically wrt data schemas, <@U5STGTB3J> have you seen Cambria from Ink &amp; Switch? Its early research but could be interesting reading <https:\/\/inkandswitch.github.io\/cambria\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "title": "Cambria",
                "title_link": "https:\/\/inkandswitch.github.io\/cambria\/",
                "text": "On-Demand Migrations for Decentralized Data",
                "fallback": "Cambria",
                "from_url": "https:\/\/inkandswitch.github.io\/cambria\/",
                "service_name": "inkandswitch.github.io",
                "id": 1,
                "original_url": "https:\/\/inkandswitch.github.io\/cambria\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ro3S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Specifically wrt data schemas, "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " have you seen Cambria from Ink & Switch? Its early research but could be interesting reading "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/inkandswitch.github.io\/cambria\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1594168693.065400",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1594168900.000000"
        },
        "client_msg_id": "bd849e39-96f1-486d-b9f8-95b86011f6c7",
        "text": "I loved Mercury when I saw it originally. I didn't know about makespace but that looks great too.\n\nThe main thing that struck me about Mercury isn't just the clean UI but that the software is organized around 'app-free intentions aka flows'. All operating systems (iOS, Linux, Windows) are very app oriented. Mercury provides your 'intention' or 'workflow' as a concrete organizational model. Typically you jump from app to app to app to acomplish a given intention - the thread of intention just lives in your head, but nothing connects the corresponding windows on your screen. Mercury solves this.\n\nCheck out this 'flow' of a single intention (getting coffee with a friend) that spans multiple apps - nothing like this exists in any mainstream OS: <https:\/\/miro.medium.com\/max\/1000\/1*0hAZt7GMWzgSjSDK5VBwCA.gif>\n\nI would *love* to create threads that connect snippets of information across multiple 'apps' - all are related to one intention. Unfortunately what I do is just reframe a calendar view or mail view I already have open (for one purpose) to another purpose. I end up with a cluster of app windows with different purposes all mixed together. Not at all ideal, but something we're just used to I guess.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "attachments": [
            {
                "fallback": "1200x675px image",
                "image_url": "https:\/\/miro.medium.com\/max\/1000\/1*0hAZt7GMWzgSjSDK5VBwCA.gif",
                "image_width": 1200,
                "image_height": 675,
                "image_bytes": 9148183,
                "is_animated": true,
                "from_url": "https:\/\/miro.medium.com\/max\/1000\/1*0hAZt7GMWzgSjSDK5VBwCA.gif",
                "id": 1,
                "original_url": "https:\/\/miro.medium.com\/max\/1000\/1*0hAZt7GMWzgSjSDK5VBwCA.gif"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "utq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I loved Mercury when I saw it originally. I didn't know about makespace but that looks great too.\n\nThe main thing that struck me about Mercury isn't just the clean UI but that the software is organized around 'app-free intentions aka flows'. All operating systems (iOS, Linux, Windows) are very app oriented. Mercury provides your 'intention' or 'workflow' as a concrete organizational model. Typically you jump from app to app to app to acomplish a given intention - the thread of intention just lives in your head, but nothing connects the corresponding windows on your screen. Mercury solves this.\n\nCheck out this 'flow' of a single intention (getting coffee with a friend) that spans multiple apps - nothing like this exists in any mainstream OS: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/miro.medium.com\/max\/1000\/1*0hAZt7GMWzgSjSDK5VBwCA.gif"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI would "
                            },
                            {
                                "type": "text",
                                "text": "love",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to create threads that connect snippets of information across multiple 'apps' - all are related to one intention. Unfortunately what I do is just reframe a calendar view or mail view I already have open (for one purpose) to another purpose. I end up with a cluster of app windows with different purposes all mixed together. Not at all ideal, but something we're just used to I guess."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFQQ3P867",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1594169124.066200",
        "client_msg_id": "f733730e-b34f-4289-8202-eec6ff06e32a",
        "text": "Wat Peter just posted this to <#CCL5VVBAN|share-your-work> today and I only now saw it heh: <https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1594164273362200>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1594164273362200",
                "fallback": "[July 7th, 2020 4:24 PM] pvh: Distributed systems struggle with the evolution of their data types over time. The classical solution is carefully orchestrated database migrations, API deprecations, and the like. In decentralised software many of these techniques do not apply. How then, should we manage change over time in evolving systems? We're exploring this question at Ink &amp; Switch with the Cambria project. You might enjoy following along with our weekly updates posted here: <https:\/\/inkandswitch.github.io\/cambria\/>",
                "ts": "1594164273.362200",
                "author_id": "UFXFB1RK8",
                "author_subname": "Peter van Hardenberg",
                "channel_id": "CCL5VVBAN",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Distributed systems struggle with the evolution of their data types over time. The classical solution is carefully orchestrated database migrations, API deprecations, and the like. In decentralised software many of these techniques do not apply. How then, should we manage change over time in evolving systems? We're exploring this question at Ink &amp; Switch with the Cambria project. You might enjoy following along with our weekly updates posted here: <https:\/\/inkandswitch.github.io\/cambria\/>",
                "author_name": "Peter van Hardenberg",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UFXFB1RK8",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/53ffd374deb821ab07cdef9f7e321364.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1594164273362200",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xuf2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wat Peter just posted this to "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": " today and I only now saw it heh: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1594164273362200"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]