[
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1604601312.339900",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1604601327.000000"
        },
        "client_msg_id": "103e5d18-3755-4100-b97f-2e90ca0a6fba",
        "text": "Ryan Singer made a youtube video: \"Christopher Alexander: A Primer\" <https:\/\/www.youtube.com\/watch?v=XLsTZXT0FlM>\n\nI've watched it twice so far, and the ideas are finally clicking. If anybody in this thread hasn't seen it yet, I recommend it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1603601936.277700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ypy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ryan Singer made a youtube video: \"Christopher Alexander: A Primer\" "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=XLsTZXT0FlM"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI've watched it twice so far, and the ideas are finally clicking. If anybody in this thread hasn't seen it yet, I recommend it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1604601799.340300",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1604601877.000000"
        },
        "client_msg_id": "b5ab183c-1b5c-4d5b-be92-a117615fcbbe",
        "text": "Here are my initial thoughts on the relevance of Alexander's method to programming language design. More questions than answers.\n\nEvery large software project can benefit from having a pattern language to direct and coordinate the development. \"Large\" means: multiple contributors, with the need for coordination between contributors, or, a single person project with enough code, written over a long enough period of time, that you can't keep all the details in your head.\n\nMy Curv project has a pattern language, but much of it is implicit knowledge. It will be beneficial to make that knowledge explicit, to write it down. It will speed up development by making it easier for me to make design decisionsand engineer past roadblocks. And it will make it easier for other people to contribute to the project.\n\nCurv, as a programming language, has an ASCII text syntax. Part of the pattern language will deal with centres, activities and patterns relating to that syntax. What gives \"life\" to a language syntax?\n\nCurv is also a development environment. The project's pattern language will deal with the developer's experience of using Curv and its associated associated development environment to create, run and debug software. What are the related centres, activities and patterns?\n\nAnd there is a meta level. Curv is used for software development. Part of large scale software development is creating a pattern language for your project. How does Curv help developers create and use a pattern language? What are the patterns for that?\n\nIn formal language theory, a language is a vocabulary and a set of grammar rules which recursively unfold to generate all the valid sentences or utterances in that language. We use these same ideas of generative grammar to design and think about programming languages. Alexander's method seems to be inspired by generative grammar, because he talks about recursively unfolding patterns to generate architecture.\n\nSo what does this mean for the links between Alexander's method and programming languages? Can do you design a programming language's vocabulary and grammar rules so that they recursively unfold to generate living structure?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1603601936.277700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xLrX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here are my initial thoughts on the relevance of Alexander's method to programming language design. More questions than answers.\n\nEvery large software project can benefit from having a pattern language to direct and coordinate the development. \"Large\" means: multiple contributors, with the need for coordination between contributors, or, a single person project with enough code, written over a long enough period of time, that you can't keep all the details in your head.\n\nMy Curv project has a pattern language, but much of it is implicit knowledge. It will be beneficial to make that knowledge explicit, to write it down. It will speed up development by making it easier for me to make design decisionsand engineer past roadblocks. And it will make it easier for other people to contribute to the project.\n\nCurv, as a programming language, has an ASCII text syntax. Part of the pattern language will deal with centres, activities and patterns relating to that syntax. What gives \"life\" to a language syntax?\n\nCurv is also a development environment. The project's pattern language will deal with the developer's experience of using Curv and its associated associated development environment to create, run and debug software. What are the related centres, activities and patterns?\n\nAnd there is a meta level. Curv is used for software development. Part of large scale software development is creating a pattern language for your project. How does Curv help developers create and use a pattern language? What are the patterns for that?\n\nIn formal language theory, a language is a vocabulary and a set of grammar rules which recursively unfold to generate all the valid sentences or utterances in that language. We use these same ideas of generative grammar to design and think about programming languages. Alexander's method seems to be inspired by generative grammar, because he talks about recursively unfolding patterns to generate architecture.\n\nSo what does this mean for the links between Alexander's method and programming languages? Can do you design a programming language's vocabulary and grammar rules so that they recursively unfold to generate living structure?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]