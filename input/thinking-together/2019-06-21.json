[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1561102335.089000",
        "client_msg_id": "1bce4281-2faa-4fd8-a9c0-b8985ebf7cfc",
        "text": "Type declarations have a twofold purpose; one is to let the compiler know how big a box to create to store the value, and the other purpose is to reduce programmer error. Nowadays with gigantic memory stores, worrying about how big a box to store is of minor importance for 99% of programs, and so the real benefit is about reducing programmer error. Most of the time spent programming is fixing errors, and anything that helps reduce programmer error should be encouraged. What does it mean to multiply PI by \"hello\"? if you can catch an error at compile time, it eliminates the potentially crazy result that the computer might generate from an operation like PI * \"hello\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ocUe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Type declarations have a twofold purpose; one is to let the compiler know how big a box to create to store the value, and the other purpose is to reduce programmer error. Nowadays with gigantic memory stores, worrying about how big a box to store is of minor importance for 99% of programs, and so the real benefit is about reducing programmer error. Most of the time spent programming is fixing errors, and anything that helps reduce programmer error should be encouraged. What does it mean to multiply PI by \"hello\"? if you can catch an error at compile time, it eliminates the potentially crazy result that the computer might generate from an operation like PI * \"hello\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726",
                    "UJWEF5QTX",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1561102453.090300",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1561102496.000000"
        },
        "client_msg_id": "1a47880b-8662-49ee-9320-cd2b728f34be",
        "text": "It is one of the most insidious flaws of JS that you can add together pi and \"hello\" it will become the string \"3.14159265358979hello\"; i would have preferred a crash to such a nutty result.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561102453.090300",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1561220054.226100",
        "reply_users": [
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "UAVCC2X70",
                "ts": "1561220054.226100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jOdJ2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is one of the most insidious flaws of JS that you can add together pi and \"hello\" it will become the string \"3.14159265358979hello\"; i would have preferred a crash to such a nutty result."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561103245.101800",
        "client_msg_id": "7a8e02c2-b96f-401c-b455-422359d5df1c",
        "text": "And if you add the wrong number to pie, your types match and your system breaks down else where.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xswa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And if you add the wrong number to pie, your types match and your system breaks down else where."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561104751.128700",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1561104783.000000"
        },
        "client_msg_id": "98fdd580-8ce9-4a5b-9928-d68bf290e500",
        "text": "I'll see myself out of this conversation, i need to time to work around the topic on my own. I hope to learn some category theory then dabble in a language that employee s it. My frustration comes from  lacking a deeper understand of how it might help and a sense that only having that deeper understanding would make the tool useful. I'm not going to get that tackling the question head on.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t\/p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll see myself out of this conversation, i need to time to work around the topic on my own. I hope to learn some category theory then dabble in a language that employee s it. My frustration comes from  lacking a deeper understand of how it might help and a sense that only having that deeper understanding would make the tool useful. I'm not going to get that tackling the question head on."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1561110874.148300",
        "client_msg_id": "287e7ecb-f901-435d-a4d4-6882a20356c2",
        "text": "&gt; <https:\/\/gist.github.com\/halgari\/f431b2d1094e4ec1e933969969489854>\n\nMany known static languages like Java, C++, Haskell have nominal type system which require a lot of ceremony to declare types, and functions specify exactly what types they get or you do a lot of work to define interfaces for has-x, has-y. But looks like languages with structural type systems, like PureScript, would fit well the needs he describes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C+wt\/",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/halgari\/f431b2d1094e4ec1e933969969489854"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nMany known static languages like Java, C++, Haskell have nominal type system which require a lot of ceremony to declare types, and functions specify exactly what types they get or you do a lot of work to define interfaces for has-x, has-y. But looks like languages with structural type systems, like PureScript, would fit well the needs he describes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1561111532.157300",
        "client_msg_id": "04491E9F-B7C5-4B41-9D03-A870AF187AF7",
        "text": "Back before Swift, the top reason why apps submitted to the App Store got rejected was crashes on launch and during the short period the app would be looked at during review. Most of these crashes were caused by simple programming errors that are easy to make in (Objective-)C: forgotten nil-checks and type mismatch. Turns out many developers never test their apps at all, and never run them on a device (only in the simulator).\n\nNot the most obvious way to solve this problem, and certainly not the easiest way, was to introduce a language with a stronger type system that would flag these problems at compile time.\n\nIf you can choose between (a) trust developers that they learn what they need to learn, write their tests, and ship quality software, or (b) build an infrastructure that categorically makes such errors impossible, a rather large company chose to go with (b). And the top reason for rejections now is App Completeness, basically an app doesn’t do everything the marketing description says it does.\n\nA lot of Objective-C developers complain about how they lose flexibility with Swift in hacking something together quickly because they have to satisfy the type system, that the compiler diagnostics aren’t always helpful, and compile times are much longer. These are all valid criticisms and part of the trade-off, but also things that are being addressed and will likely only get better in the future.\n\nIf you’re interested in a less academic and very practical and business-oriented environment where a transition from dynamic to static typing is taking place right at this moment, Swift and iOS development are an interesting case study to look at.\n\nAlso interesting: the effects this has on API design for libraries and frameworks — after five years Apple just released the first Swift-only frameworks designed to take advantage of Swift’s unique features. The new Swift APIs are fundamentally different from the old Objective-C ones: favoring composition, value types over reference types, static over dynamic, protocols over inheritance hierarchies, etc. — it’s super interesting to see the design, and the feedback. Of course, not everybody is happy with such change. And it’s a big bet on a (more type-safe) future and nobody knows how it’ll work out…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561111532.157300",
        "reply_count": 12,
        "reply_users_count": 5,
        "latest_reply": "1561475832.361100",
        "reply_users": [
            "UC6997THT",
            "U79HM6726",
            "UJNJQD2AC",
            "UA14TGLTC",
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "UC6997THT",
                "ts": "1561119212.158700"
            },
            {
                "user": "U79HM6726",
                "ts": "1561120548.158900"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561124766.159300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1561125250.159800"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1561125360.160000"
            },
            {
                "user": "UC6997THT",
                "ts": "1561126618.160200"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1561127244.160900"
            },
            {
                "user": "UC6997THT",
                "ts": "1561139150.178200"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1561456637.336000"
            },
            {
                "user": "UC6997THT",
                "ts": "1561456766.336500"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1561458006.337300"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1561475832.361100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8xW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Back before Swift, the top reason why apps submitted to the App Store got rejected was crashes on launch and during the short period the app would be looked at during review. Most of these crashes were caused by simple programming errors that are easy to make in (Objective-)C: forgotten nil-checks and type mismatch. Turns out many developers never test their apps at all, and never run them on a device (only in the simulator).\n\nNot the most obvious way to solve this problem, and certainly not the easiest way, was to introduce a language with a stronger type system that would flag these problems at compile time.\n\nIf you can choose between (a) trust developers that they learn what they need to learn, write their tests, and ship quality software, or (b) build an infrastructure that categorically makes such errors impossible, a rather large company chose to go with (b). And the top reason for rejections now is App Completeness, basically an app doesn’t do everything the marketing description says it does.\n\nA lot of Objective-C developers complain about how they lose flexibility with Swift in hacking something together quickly because they have to satisfy the type system, that the compiler diagnostics aren’t always helpful, and compile times are much longer. These are all valid criticisms and part of the trade-off, but also things that are being addressed and will likely only get better in the future.\n\nIf you’re interested in a less academic and very practical and business-oriented environment where a transition from dynamic to static typing is taking place right at this moment, Swift and iOS development are an interesting case study to look at.\n\nAlso interesting: the effects this has on API design for libraries and frameworks — after five years Apple just released the first Swift-only frameworks designed to take advantage of Swift’s unique features. The new Swift APIs are fundamentally different from the old Objective-C ones: favoring composition, value types over reference types, static over dynamic, protocols over inheritance hierarchies, etc. — it’s super interesting to see the design, and the feedback. Of course, not everybody is happy with such change. And it’s a big bet on a (more type-safe) future and nobody knows how it’ll work out…"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U79HM6726",
                    "UA14TGLTC",
                    "UFEQUBNNT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1561117858.157800",
        "edited": {
            "user": "U79HM6726",
            "ts": "1561117871.000000"
        },
        "client_msg_id": "ba19e46b-b189-423e-a4b9-932ea503bbf8",
        "text": "<@UJK8MKYAZ>\n“No syntax” is never quite accurate. But if you’re still looking for “no syntax” see also <https:\/\/www.reddit.com\/r\/nosyntax\/> :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561074078.055500",
        "parent_user_id": "UHWC9PXBL",
        "attachments": [
            {
                "service_name": "reddit",
                "title": "r\/nosyntax",
                "title_link": "https:\/\/www.reddit.com\/r\/nosyntax\/",
                "text": "r\/nosyntax: Most of computer programming in the history of mankind has been done by editing text files. Does it have to be this way? Will it always …",
                "fallback": "reddit: r\/nosyntax",
                "from_url": "https:\/\/www.reddit.com\/r\/nosyntax\/",
                "service_icon": "https:\/\/www.redditstatic.com\/desktop2x\/img\/favicon\/apple-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/www.reddit.com\/r\/nosyntax\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QyY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJK8MKYAZ"
                            },
                            {
                                "type": "text",
                                "text": "\n“No syntax” is never quite accurate. But if you’re still looking for “no syntax” see also "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.reddit.com\/r\/nosyntax\/"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561118359.158200",
        "client_msg_id": "f129312d-a4f5-4fec-82df-605b9602f5ed",
        "text": "Lamdu looks super interesting. But is it a language or an editor or both?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561074078.055500",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ccxa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lamdu looks super interesting. But is it a language or an editor or both?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1561118629.158400",
        "client_msg_id": "0678f2be-0027-4e9b-a941-3f5730295297",
        "text": "It’s both. The language we envision (haven’t yet implemented all the features) is pretty similar to Haskell, as we believe that the distinction between computations and effects is important for live programming. However Haskell is not a total fit for what we want, on which we expand more here: <https:\/\/medium.com\/lamdu-blog\/designing-programming-languages-with-ides-in-mind-de890989dfa>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561074078.055500",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=owi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s both. The language we envision (haven’t yet implemented all the features) is pretty similar to Haskell, as we believe that the distinction between computations and effects is important for live programming. However Haskell is not a total fit for what we want, on which we expand more here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/medium.com\/lamdu-blog\/designing-programming-languages-with-ides-in-mind-de890989dfa"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1561119212.158700",
        "client_msg_id": "106c826b-39c0-4c58-98c6-834ca2d301c4",
        "text": "I still have a hard time buying into the Swift hype train. At a glance it looks 0.3% different than C# or maybe Kotlin or Dart. What am I missing that makes it such a \"revolution in languauge design\". The one language to rule them all. Etc.. I feel like I asked this before but I guess the answer didn't stick in my brain. It's hard to glance at it, see the hype from Apple devs, and not feel like they were stuck in ObjC land for 15 years and never used anything else. Their hype about Swift seem so out of touch the last 15+ years of non-apple dev.\n\nAre there any blog posts with like \"I use to love C# but then I touched Swift and it's 1000% better. I can't believe I ever used anything else!\" type of posts with some concrete \"this is what used to have to do and look now! 75% less code and all these bugs avoided!\"\n\nI'm sure the new tools make an amazng system but those tools are not impossible for many other languages so what's so special about the language itself?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561111532.157300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZX86v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I still have a hard time buying into the Swift hype train. At a glance it looks 0.3% different than C# or maybe Kotlin or Dart. What am I missing that makes it such a \"revolution in languauge design\". The one language to rule them all. Etc.. I feel like I asked this before but I guess the answer didn't stick in my brain. It's hard to glance at it, see the hype from Apple devs, and not feel like they were stuck in ObjC land for 15 years and never used anything else. Their hype about Swift seem so out of touch the last 15+ years of non-apple dev.\n\nAre there any blog posts with like \"I use to love C# but then I touched Swift and it's 1000% better. I can't believe I ever used anything else!\" type of posts with some concrete \"this is what used to have to do and look now! 75% less code and all these bugs avoided!\"\n\nI'm sure the new tools make an amazng system but those tools are not impossible for many other languages so what's so special about the language itself?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1561120548.158900",
        "client_msg_id": "4b8f4d00-6c64-47fc-bd86-07231c10b75d",
        "text": "<@UC6997THT> True, but this doesn’t at all matter for the point that Stefan is making.\n\nHis anecdote happens to compare Swift to ObjC, and is not necessarily meant as Swift hype but rather as a very interesting anecdote for the static\/dynamic discussion in general.\n\nAs for what differentiates Swift from Kotlin (which again isn’t related to his point) you are right they seem very similar. However IIUC Swift uses ARC while Kotlin uses tracing garbage collection.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561111532.157300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8qi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": " True, but this doesn’t at all matter for the point that Stefan is making.\n\nHis anecdote happens to compare Swift to ObjC, and is not necessarily meant as Swift hype but rather as a very interesting anecdote for the static\/dynamic discussion in general.\n\nAs for what differentiates Swift from Kotlin (which again isn’t related to his point) you are right they seem very similar. However IIUC Swift uses ARC while Kotlin uses tracing garbage collection."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1561124183.159100",
        "client_msg_id": "4784aaf8-d1d1-4ecf-a44c-9eee0a4b4a46",
        "text": "another piece of serious research around gradual typing: <http:\/\/www.ccis.northeastern.edu\/home\/types\/publications\/gradual-dead\/pre-treatment.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561079389.066100",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JPA3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "another piece of serious research around gradual typing: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.ccis.northeastern.edu\/home\/types\/publications\/gradual-dead\/pre-treatment.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561124766.159300",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1561124816.000000"
        },
        "client_msg_id": "2e22291e-caa2-4a04-a388-75fdfe16fb78",
        "text": "Thanks Stefan, I have a sense of the what your saying. But being blunt, studies don't find less bugs programs written in static languages.\n\nIf haskell was hands down safer then clojure, purely based on types, then shouldn't it have shown? Instead the opposite is found. \n\nMany other factors seem to be at play. I think it's perfect possibly to build a language that has the checks you just mentioned and keep it dynamic  in that devs aren't responsible for specifying types.\n\nIf academics and type theory pureist are going to stand on a hill and discard other approaches isn't it responsible and reasonable to demand some form of proof beyond anecdotal stories.\n\nI think I would have more patience for these things if the tone of the conversation was more academic in nature. Again, that's my fault, I need to take the time to learn the principles and terminology so I can have a more meaningful conversation.\n\nFinally, I'm not interested in what works at the lowest common denominator (people unwilling to test) that's not the future of programming for me. That race to the bottom type argument, more then anything, is what drives me away.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561111532.157300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i5Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Stefan, I have a sense of the what your saying. But being blunt, studies don't find less bugs programs written in static languages.\n\nIf haskell was hands down safer then clojure, purely based on types, then shouldn't it have shown? Instead the opposite is found. \n\nMany other factors seem to be at play. I think it's perfect possibly to build a language that has the checks you just mentioned and keep it dynamic  in that devs aren't responsible for specifying types.\n\nIf academics and type theory pureist are going to stand on a hill and discard other approaches isn't it responsible and reasonable to demand some form of proof beyond anecdotal stories.\n\nI think I would have more patience for these things if the tone of the conversation was more academic in nature. Again, that's my fault, I need to take the time to learn the principles and terminology so I can have a more meaningful conversation.\n\nFinally, I'm not interested in what works at the lowest common denominator (people unwilling to test) that's not the future of programming for me. That race to the bottom type argument, more then anything, is what drives me away."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1561125250.159800",
        "client_msg_id": "c49c3b3a-8715-4b79-8d26-5de58fb6d74c",
        "text": "Objective-C: The flexibility of Smalltalk combined with the runtime safety of C!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561111532.157300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NDZT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Objective-C: The flexibility of Smalltalk combined with the runtime safety of C!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1561125360.160000",
        "client_msg_id": "20c9b5f1-288c-4d69-ba21-36ac56dbb79a",
        "text": "And about nil-checks, Objective-C nil is like a monadic Nothing :: Maybe.  You can call any method on nil, and you always get back nil.  (Could have changed later on in Objective-C's life, was a \"feature\" for a good long while.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561111532.157300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dIm30",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And about nil-checks, Objective-C nil is like a monadic Nothing :: Maybe.  You can call any method on nil, and you always get back nil.  (Could have changed later on in Objective-C's life, was a \"feature\" for a good long while.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1561126618.160200",
        "client_msg_id": "4625b758-99bc-49ac-a839-2978cc537af8",
        "text": "<@U79HM6726>, you're right. My bad. Sorry. I'm sure it's pearls before swine, me being the swine :sweat_smile:\n\nPlenty of languages have features that stick out and have very clear advantages and use cases. So far I haven't seen what that is with Swift. Everything brought up seems old (but presented as new hence my bad reaction). But maybe Swift is the perfect recipe so like a fine chef makes something special out of the same ingredients others have only made bland meals. I just wish it was easier to see by reading about it.\n\nAgree 100% with the general premise that a language can make certain problems less likely and possibly just disappear. Several of the F# articles from <https:\/\/fsharpforfunandprofit.com\/> made me wish I was using a language that helped prevent more issues.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561111532.157300",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "title": "Home",
                "title_link": "https:\/\/fsharpforfunandprofit.com\/",
                "text": "This site shows you ways that F# can help in day-to-day development of mainstream commercial business software",
                "fallback": "Home",
                "image_url": "http:\/\/fsharpforfunandprofit.com\/assets\/img\/twitter-home.jpg",
                "from_url": "https:\/\/fsharpforfunandprofit.com\/",
                "image_width": 480,
                "image_height": 250,
                "image_bytes": 23951,
                "service_name": "fsharpforfunandprofit.com",
                "id": 1,
                "original_url": "https:\/\/fsharpforfunandprofit.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vn0eW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U79HM6726"
                            },
                            {
                                "type": "text",
                                "text": ", you're right. My bad. Sorry. I'm sure it's pearls before swine, me being the swine "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": "\n\nPlenty of languages have features that stick out and have very clear advantages and use cases. So far I haven't seen what that is with Swift. Everything brought up seems old (but presented as new hence my bad reaction). But maybe Swift is the perfect recipe so like a fine chef makes something special out of the same ingredients others have only made bland meals. I just wish it was easier to see by reading about it.\n\nAgree 100% with the general premise that a language can make certain problems less likely and possibly just disappear. Several of the F# articles from "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/fsharpforfunandprofit.com\/"
                            },
                            {
                                "type": "text",
                                "text": " made me wish I was using a language that helped prevent more issues."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726",
                    "U7C7B75R6"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1561127244.160900",
        "client_msg_id": "93ea43a0-fc6d-4c1d-8a11-1bbe6adcba4f",
        "text": "<@UC6997THT> I can't speak to Swift 5 – or whatever it is, haven't been writing for iOS, so haven't kept up – but Swift 1 stuck me as language designed by compiler writers: so the clear advantage was opportunities to optimize.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561111532.157300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S6I4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": " I can't speak to Swift 5 – or whatever it is, haven't been writing for iOS, so haven't kept up – but Swift 1 stuck me as language designed by compiler writers: so the clear advantage was opportunities to optimize."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1561128150.161100",
        "edited": {
            "user": "UC21F8Q48",
            "ts": "1561128556.000000"
        },
        "client_msg_id": "aedaddd2-b14f-4494-84d7-8861640563e3",
        "text": "The way you get “a seat at the table” in type theory is to present a type system that offers _some_ formal guarantees. I don’t know if Typescript itself qualifies, but there is quite a line of work on gradual typing that does offer formal guarantees (cf. the papers posted above), for example if, even though the types are currently unknown, it’s not impossible that they could be correct when realized in practice. Gradual typing was the subject of the keynote at the 2018 ICFP (Int’l Conference on Functional Programming), so it has enough respect amongst some influential members of the academic community (but see the cute aside at 26:30 in the video)! <https:\/\/www.youtube.com\/watch?v=fQRRxaWsuxI>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561079389.066100",
        "parent_user_id": "UJK8MKYAZ",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "ICFP 2018 Keynote Address: Gradual Typing",
                "title_link": "https:\/\/www.youtube.com\/watch?v=fQRRxaWsuxI",
                "author_name": "ICFP Video",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCwRL68qZFfub1Ep1EScfmBw",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/fQRRxaWsuxI\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: ICFP 2018 Keynote Address: Gradual Typing",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/fQRRxaWsuxI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=fQRRxaWsuxI",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=fQRRxaWsuxI"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FJd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The way you get “a seat at the table” in type theory is to present a type system that offers "
                            },
                            {
                                "type": "text",
                                "text": "some",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " formal guarantees. I don’t know if Typescript itself qualifies, but there is quite a line of work on gradual typing that does offer formal guarantees (cf. the papers posted above), for example if, even though the types are currently unknown, it’s not impossible that they could be correct when realized in practice. Gradual typing was the subject of the keynote at the 2018 ICFP (Int’l Conference on Functional Programming), so it has enough respect amongst some influential members of the academic community (but see the cute aside at 26:30 in the video)! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=fQRRxaWsuxI"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK69SS8LB",
        "type": "message",
        "ts": "1561129412.161500",
        "client_msg_id": "e0ba367a-88b8-4f4d-88e2-9e89be242b9a",
        "text": "By \"pixel-level\" you mean something like raster graphics manipulation?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb61a4a4200",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3db61a4a42000b4ff62648c0979e8920.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Ken Kan",
            "display_name": "Ken Kan",
            "team": "T5TCAFTA9",
            "name": "kenhkan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cPE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By \"pixel-level\" you mean something like raster graphics manipulation?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK69SS8LB",
        "type": "message",
        "ts": "1561129453.161700",
        "client_msg_id": "d02514b1-77d1-4838-8b72-c4d292ef4f2c",
        "text": "And how would the visual programming tool put semantics on these new custom primitives?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb61a4a4200",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3db61a4a42000b4ff62648c0979e8920.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Ken Kan",
            "display_name": "Ken Kan",
            "team": "T5TCAFTA9",
            "name": "kenhkan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZFtTD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And how would the visual programming tool put semantics on these new custom primitives?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1561130152.162000",
        "client_msg_id": "0e22c8fa-1996-4792-b5d7-45fe0bcece8e",
        "text": "I was thinking vector rather than raster graphics. But we eventually see assemblages of pixels, and we want precise control over them.\n\nThere are no semantics in this domain as I imagine it. Just pictures.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pp4\/3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was thinking vector rather than raster graphics. But we eventually see assemblages of pixels, and we want precise control over them.\n\nThere are no semantics in this domain as I imagine it. Just pictures."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK69SS8LB",
        "type": "message",
        "ts": "1561130746.162200",
        "client_msg_id": "396c7b7e-3ffd-4536-96ad-bb99d4755f63",
        "text": "Ah ok. You were referring to drawing tools specifically.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb61a4a4200",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3db61a4a42000b4ff62648c0979e8920.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Ken Kan",
            "display_name": "Ken Kan",
            "team": "T5TCAFTA9",
            "name": "kenhkan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0WP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah ok. You were referring to drawing tools specifically."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1561130774.162400",
        "client_msg_id": "803d6069-ad17-4b44-8ff8-47f598fdc10a",
        "text": "Yeah, exactly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6=VZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, exactly."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UK69SS8LB"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFS53UWE5",
        "type": "message",
        "ts": "1561131039.162600",
        "edited": {
            "user": "UFS53UWE5",
            "ts": "1561131155.000000"
        },
        "client_msg_id": "50d5f230-a458-40bb-be3a-50f7a1ff825a",
        "text": "Thanks for the link! Mixing the history with the garbage collector is an interesting technique, I've been working on sorting out memory reachability in my own language (it doesn't have a GC), and getting something optimal has been tricky.\n\nThe thing I'm building sits somewhere between a language and a runtime. Build systems like CMake and Bazel run 'programs' as directed acyclic graphs of pure, deterministic functions. There are a certain limited set of programs that can be created with this structure. The concept of this new language is to extend this framework to non-finite programs, such that a 'program' is a Directed Acyclic Infinite Graph (DAIG?).\n\nMy theory is that this infinite graph representation of programs is general enough to represent a large number of different types of applications (currently the language targets game development).\n\nThe key benefit of this approach is that even though the graph is infinite, all operations are pure, deterministic, and singular (they only need to compute once and the value is permanent). Debugging becomes the process of sifting through this infinite graph of operations, and inspecting the outputs of various operations. Running the 'program' is just the choice to evaluate different nodes in the infinite graph at a certain schedule (ie. show me the frame 1 output, then frame 2, etc).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a88832bbbfe7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-12\/1359700849458_a88832bbbfe7c26df530_72.jpg",
            "first_name": "John",
            "real_name": "John Austin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kleptine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bNSt+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the link! Mixing the history with the garbage collector is an interesting technique, I've been working on sorting out memory reachability in my own language (it doesn't have a GC), and getting something optimal has been tricky.\n\nThe thing I'm building sits somewhere between a language and a runtime. Build systems like CMake and Bazel run 'programs' as directed acyclic graphs of pure, deterministic functions. There are a certain limited set of programs that can be created with this structure. The concept of this new language is to extend this framework to non-finite programs, such that a 'program' is a Directed Acyclic Infinite Graph (DAIG?).\n\nMy theory is that this infinite graph representation of programs is general enough to represent a large number of different types of applications (currently the language targets game development).\n\nThe key benefit of this approach is that even though the graph is infinite, all operations are pure, deterministic, and singular (they only need to compute once and the value is permanent). Debugging becomes the process of sifting through this infinite graph of operations, and inspecting the outputs of various operations. Running the 'program' is just the choice to evaluate different nodes in the infinite graph at a certain schedule (ie. show me the frame 1 output, then frame 2, etc)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFS53UWE5",
        "type": "message",
        "ts": "1561131257.162900",
        "client_msg_id": "56e5544b-1d5d-4835-b909-4cc642253807",
        "text": "This explanation is probably a bit rough without the visuals associated, haha, but that's the gist of it.\n\nTo edit a program, you actually edit the infinite graph itself. I've built a couple of tools and structures to make that easier and more sane. A key factor is that the infinite graph is actually self-similar, which helps make this editing possible.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a88832bbbfe7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-12\/1359700849458_a88832bbbfe7c26df530_72.jpg",
            "first_name": "John",
            "real_name": "John Austin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kleptine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J9ds",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This explanation is probably a bit rough without the visuals associated, haha, but that's the gist of it.\n\nTo edit a program, you actually edit the infinite graph itself. I've built a couple of tools and structures to make that easier and more sane. A key factor is that the infinite graph is actually self-similar, which helps make this editing possible."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561133507.167500",
        "client_msg_id": "7b15d821-2203-4479-a800-72d719568405",
        "text": "<@UEQ6M68H0> \"Nowadays with gigantic memory stores, worrying about how big a box to store is of minor importance for 99% of programs\" I've heard some variant of this statement for 25+ years now (\"computers are \/ will be faster so maximum efficiency is less important\"), and it always turns out to be wrong. For one, as computers grow in ability, we simply want to do more complex things with them. Give programmers space, and they will fill it up until things get slow. A more efficient language gives more room to grow. More deeply, a faster language can be said to be more \"high level\" than a slower language since the programmer doesn't need to worry about performance consequences so much. My simple, brute force C++ algorithm may be smaller, simpler and faster than your complex Python algorithm :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "reply_count": 12,
        "reply_users_count": 4,
        "latest_reply": "1561967427.088800",
        "reply_users": [
            "UC6997THT",
            "UHDQ62M4P",
            "UBSMEUXAA",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UC6997THT",
                "ts": "1561139912.187300"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561140650.196600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561140768.196800"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1561142718.201300"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1561142748.201500"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1561142860.201900"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1561143073.205000"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561143135.206300"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1561143645.208500"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1561143719.209100"
            },
            {
                "user": "UC6997THT",
                "ts": "1561182924.221700"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1561967427.088800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8W4U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " \"Nowadays with gigantic memory stores, worrying about how big a box to store is of minor importance for 99% of programs\" I've heard some variant of this statement for 25+ years now (\"computers are \/ will be faster so maximum efficiency is less important\"), and it always turns out to be wrong. For one, as computers grow in ability, we simply want to do more complex things with them. Give programmers space, and they will fill it up until things get slow. A more efficient language gives more room to grow. More deeply, a faster language can be said to be more \"high level\" than a slower language since the programmer doesn't need to worry about performance consequences so much. My simple, brute force C++ algorithm may be smaller, simpler and faster than your complex Python algorithm "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1561135260.167900",
        "client_msg_id": "6bd0cfd9-1bb9-47c8-8519-595ae55f3aeb",
        "text": "Not to mention power consumption.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XQz1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not to mention power consumption."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHDQ62M4P",
                    "UJ6LDMMN0"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1561135560.170000",
        "client_msg_id": "21e94bff-273a-470c-ad8d-be3cb74f1947",
        "text": "an interesting counterpoint is that low-level languages don't necessarily map to the underlying details of the machine in reality. in some cases, they may give the programmer the illusion of control and optimization, where a more managed language can sometimes make better decisions in the compiler and\/or run-time",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LyaF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "an interesting counterpoint is that low-level languages don't necessarily map to the underlying details of the machine in reality. in some cases, they may give the programmer the illusion of control and optimization, where a more managed language can sometimes make better decisions in the compiler and\/or run-time"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1561136462.175400",
        "client_msg_id": "f40ab085-f4b8-4732-9dcb-5a420ef360c3",
        "text": "IMO I think what’s missing a bit here in this conversation is starting with software and working backwards to hardware. There are some great stories in the earlier days of computing where people were creating hardware implementations of VM’s to be able to efficiently run high level languages (like smalltalk, etc). This removes some of the false dichotomy around high level and low level languages. Ultimately, you just want good speed and decent control and if you can get that with a HLL and a good hardware VM … well!\n\nThis also meant when the floodgates to commercialization opened, microcomputers with cheaper hardware dominated and didn’t support these higher level languages (since the custom hardware was often quite pricey to make languages like smalltalk work quickly).\n\n*disclaimer: this is all my understanding from stories \/ hearsay from talks. Would def love more references to this kinda stuff*",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "28w0Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "IMO I think what’s missing a bit here in this conversation is starting with software and working backwards to hardware. There are some great stories in the earlier days of computing where people were creating hardware implementations of VM’s to be able to efficiently run high level languages (like smalltalk, etc). This removes some of the false dichotomy around high level and low level languages. Ultimately, you just want good speed and decent control and if you can get that with a HLL and a good hardware VM … well!\n\nThis also meant when the floodgates to commercialization opened, microcomputers with cheaper hardware dominated and didn’t support these higher level languages (since the custom hardware was often quite pricey to make languages like smalltalk work quickly).\n\n"
                            },
                            {
                                "type": "text",
                                "text": "disclaimer: this is all my understanding from stories \/ hearsay from talks. Would def love more references to this kinda stuff",
                                "style": {
                                    "bold": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJFN50C00",
                    "UC2A2ARPT"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561136547.176300",
        "client_msg_id": "fb600c76-0682-4551-aecc-55455ba8ffdd",
        "text": "<@UKQT95T1V> that intuitively makes sense but in practice this doesn't seem to happen. While managed languages don't have to worry about issues like aliasing in C++, so in theory they could be faster, in practice they never go that far. The levels to which a compiler like LLVM can collapse both code and data in C++ to almost nothing is crazy, nothing in the managed world compares. Languages like Java have their own optimisation challenges, e.g. as soon as escape analysis fails it gets very inefficient.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "reply_count": 33,
        "reply_users_count": 7,
        "latest_reply": "1561492205.367400",
        "reply_users": [
            "UC2A2ARPT",
            "UHDQ62M4P",
            "U8A5MS6R1",
            "UJUGB1XGD",
            "UJN1TAYEQ",
            "UA14TGLTC",
            "UK69SS8LB"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1561139756.185400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1561139820.186000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1561139859.186400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561140948.197100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1561140954.197300"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561141036.197900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1561141038.198100"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561141146.198300"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561141293.198500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1561141384.198900"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561141444.199100"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561141541.199400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1561141557.199600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561141678.199800"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561141864.200000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1561141979.200200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561142087.200400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561142139.200600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561142223.200800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1561143244.207900"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1561143326.208100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1561144783.211900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1561146298.212800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1561147405.213800"
            },
            {
                "user": "UJUGB1XGD",
                "ts": "1561152390.215300"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1561171780.220000"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1561172647.220200"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1561178209.220500"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1561203753.225100"
            },
            {
                "user": "UK69SS8LB",
                "ts": "1561426536.326900"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1561466692.337700"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1561472834.354100"
            },
            {
                "user": "UK69SS8LB",
                "ts": "1561492205.367400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u1C3H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKQT95T1V"
                            },
                            {
                                "type": "text",
                                "text": " that intuitively makes sense but in practice this doesn't seem to happen. While managed languages don't have to worry about issues like aliasing in C++, so in theory they could be faster, in practice they never go that far. The levels to which a compiler like LLVM can collapse both code and data in C++ to almost nothing is crazy, nothing in the managed world compares. Languages like Java have their own optimisation challenges, e.g. as soon as escape analysis fails it gets very inefficient."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1561139150.178200",
        "client_msg_id": "f5747631-72dd-4799-8225-edb4f5a78699",
        "text": "Wow, I had the opposite impression and in fact AFAIK my impression was confirmed in the FoC podcast interview. Basically you can't get around ARC and so there's a big overhead. In the podcast they mentioned being able to mark code as something like \"no allocations happen here so turn off ARC checks\" but I don't think any of that has made it in yet?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561111532.157300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0NO2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow, I had the opposite impression and in fact AFAIK my impression was confirmed in the FoC podcast interview. Basically you can't get around ARC and so there's a big overhead. In the podcast they mentioned being able to mark code as something like \"no allocations happen here so turn off ARC checks\" but I don't think any of that has made it in yet?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1561139756.185400",
        "client_msg_id": "9e6b60a7-9f7c-4e2c-94b0-6fd643bc54c3",
        "text": "I'd be interested to see whether this balance changed if there was an LLVM or JVM-sized investment put behind a language where the programming model was a better fit for modern CPU design — where the programming model mapped more cleanly to the different classes of speculative execution (branch prediction, etc) than C-like languages that expect execution to be strictly in order.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NNAJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd be interested to see whether this balance changed if there was an LLVM or JVM-sized investment put behind a language where the programming model was a better fit for modern CPU design — where the programming model mapped more cleanly to the different classes of speculative execution (branch prediction, etc) than C-like languages that expect execution to be strictly in order."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1561139820.186000",
        "client_msg_id": "2aef6bb2-fc66-48c7-ba72-12144a008fb8",
        "text": "Not sure that this is practical currently, but it's surely theoretically possible if one of the titans of industry decided it was a good idea. Or if, say, Intel decided they wanted to create the next hit systems programming language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TLj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure that this is practical currently, but it's surely theoretically possible if one of the titans of industry decided it was a good idea. Or if, say, Intel decided they wanted to create the next hit systems programming language."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1561139859.186400",
        "client_msg_id": "e467771f-5c28-48de-939e-23f6dfae2fff",
        "text": "See also <https:\/\/queue.acm.org\/detail.cfm?id=3212479> of course.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "attachments": [
            {
                "title": "C Is Not a Low-level Language - ACM Queue",
                "title_link": "https:\/\/queue.acm.org\/detail.cfm?id=3212479",
                "text": "In the wake of the recent Meltdown and Spectre vulnerabilities, it",
                "fallback": "C Is Not a Low-level Language - ACM Queue",
                "from_url": "https:\/\/queue.acm.org\/detail.cfm?id=3212479",
                "service_icon": "https:\/\/queue.acm.org\/favicon.ico",
                "service_name": "queue.acm.org",
                "id": 1,
                "original_url": "https:\/\/queue.acm.org\/detail.cfm?id=3212479"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GfxC+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "See also "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/queue.acm.org\/detail.cfm?id=3212479"
                            },
                            {
                                "type": "text",
                                "text": " of course."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1561139912.187300",
        "client_msg_id": "fe8b8cfb-1d9c-4f53-83d0-8e6bdb889ebc",
        "text": "&gt; \"Nowadays with gigantic memory stores, worrying about how big a box to store is of minor importance for 99% of programs\" I've heard some variant of this statement for 25+ years now (\"computers are \/ will be faster so maximum efficiency is less important\"),\n\nIs it wrong? The majority of apps in the world run in JavaScript in browsers or webviews which fits the description of \"99% of programs\". Maybe quibble with 99% to just \"the majority of programs\"\n\nI'm a game programmer so I generally hate inefficiency and am super sensitive to how inefficient things are but here I am in this app called slack that is written in JavaScript (the client side at least) running in a browser on my desktop or a webview on my phone. I use gmail, google docs, google sheets, all the time. I use VSCode also written in a browser in JavaScript. The majority of games today are written in managed C# (Unity) so while it's true we could get 5x to 25x more efficiency if we used the right techniques it still seems true that for \"most software\" those things don't matter.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cup\/w",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Nowadays with gigantic memory stores, worrying about how big a box to store is of minor importance for 99% of programs\" I've heard some variant of this statement for 25+ years now (\"computers are \/ will be faster so maximum efficiency is less important\"),"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nIs it wrong? The majority of apps in the world run in JavaScript in browsers or webviews which fits the description of \"99% of programs\". Maybe quibble with 99% to just \"the majority of programs\"\n\nI'm a game programmer so I generally hate inefficiency and am super sensitive to how inefficient things are but here I am in this app called slack that is written in JavaScript (the client side at least) running in a browser on my desktop or a webview on my phone. I use gmail, google docs, google sheets, all the time. I use VSCode also written in a browser in JavaScript. The majority of games today are written in managed C# (Unity) so while it's true we could get 5x to 25x more efficiency if we used the right techniques it still seems true that for \"most software\" those things don't matter."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561140306.192900",
        "client_msg_id": "1b9a65c2-d710-4ae8-b58d-63a2cba4d1a1",
        "text": "<@U79HM6726> Both Hackett and Lamdu are really awesome. Thanks for pushing the bounderies here! Lambdu looks like it addresses many of my complaints about the static type family.\n\nI'm curious, in this digits function. How do you read the recursive call to digits? To me, it looks like it should be\n\ndigits num \/\/ base num",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561074078.055500",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kRP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U79HM6726"
                            },
                            {
                                "type": "text",
                                "text": " Both Hackett and Lamdu are really awesome. Thanks for pushing the bounderies here! Lambdu looks like it addresses many of my complaints about the static type family.\n\nI'm curious, in this digits function. How do you read the recursive call to digits? To me, it looks like it should be\n\ndigits num \/\/ base num"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1561140387.194200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1561140501.000000"
        },
        "client_msg_id": "59b2e93e-f44c-447b-89ad-8c3510847d9f",
        "text": "<@UEQ6M68H0>\n&gt; Most of the time spent programming is fixing errors, and anything that helps reduce programmer error should be encouraged. What does it mean to multiply PI by \"hello\"?\n\nThat doesn't fit my experience _in the slightest_. Most of my time spent programming is figuring out the design of my system. The most time-costly class of \"error\" would be uncertainty about what exactly I want to build, which manifests as building something experimentally, playing with it, realizing it's not quite what I want, repeat. For instance, types can't help me decide if I want to implement my graphics library using SVG or WebGL.\n\nSure I make errors — we all do — but I discover almost all of them almost immediately, and they're trivial to fix. Something like PI multiplied by \"hello\" isn't nearly as nefarious as \"I misunderstood the linear algebra and now I'm getting weird looking results when I convert a rotation into a skew+scale\", which I don't believe a typical type system can help with.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "reply_count": 11,
        "reply_users_count": 6,
        "latest_reply": "1561149608.214300",
        "reply_users": [
            "UKJGU23KP",
            "UC2A2ARPT",
            "UC6997THT",
            "UJNJQD2AC",
            "UKQT95T1V",
            "U6FKVSVCK"
        ],
        "replies": [
            {
                "user": "UKJGU23KP",
                "ts": "1561140516.195300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1561140603.196300"
            },
            {
                "user": "UC6997THT",
                "ts": "1561141010.197700"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561141381.198700"
            },
            {
                "user": "UKQT95T1V",
                "ts": "1561142563.201100"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1561142956.203400"
            },
            {
                "user": "UKQT95T1V",
                "ts": "1561144346.210700"
            },
            {
                "user": "UKQT95T1V",
                "ts": "1561144395.211200"
            },
            {
                "user": "UKQT95T1V",
                "ts": "1561144438.211400"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1561146939.213500"
            },
            {
                "user": "UKQT95T1V",
                "ts": "1561149608.214300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fmAVB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Most of the time spent programming is fixing errors, and anything that helps reduce programmer error should be encouraged. What does it mean to multiply PI by \"hello\"?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThat doesn't fit my experience "
                            },
                            {
                                "type": "text",
                                "text": "in the slightest",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Most of my time spent programming is figuring out the design of my system. The most time-costly class of \"error\" would be uncertainty about what exactly I want to build, which manifests as building something experimentally, playing with it, realizing it's not quite what I want, repeat. For instance, types can't help me decide if I want to implement my graphics library using SVG or WebGL.\n\nSure I make errors — we all do — but I discover almost all of them almost immediately, and they're trivial to fix. Something like PI multiplied by \"hello\" isn't nearly as nefarious as \"I misunderstood the linear algebra and now I'm getting weird looking results when I convert a rotation into a skew+scale\", which I don't believe a typical type system can help with."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1561140516.195300",
        "client_msg_id": "734a7c0d-b3cb-47d7-ba7f-154491093834",
        "text": "I think it’s fascinating that programmers have such different subjective experiences of what the task of programming is like. I suspect that at least some of them might correspond to objective differences in what their process is like, but I’m not sure.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vxJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it’s fascinating that programmers have such different subjective experiences of what the task of programming is like. I suspect that at least some of them might correspond to objective differences in what their process is like, but I’m not sure."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UFV8P4472",
                    "UAVCC2X70"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1561140603.196300",
        "client_msg_id": "f882bd05-00f5-48d8-abdb-bae47e61b55f",
        "text": "I only use dynamic languages, I'm the only programmer on my team, and I largely get to pick my own projects. So... surely not typical, but when it comes to the things I build and the languages I use (mostly Rails and JavaScript these days), totally typical.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fZLfS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I only use dynamic languages, I'm the only programmer on my team, and I largely get to pick my own projects. So... surely not typical, but when it comes to the things I build and the languages I use (mostly Rails and JavaScript these days), totally typical."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561140650.196600",
        "client_msg_id": "5fca2aa6-e31e-4443-abd6-6f11c8798d84",
        "text": "we're now getting into definition territory, but I would argue that the amount of apps that could benefit from more speed \/ a faster language is waaaay more than that 1%, and that includes many web apps.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oO2cq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we're now getting into definition territory, but I would argue that the amount of apps that could benefit from more speed \/ a faster language is waaaay more than that 1%, and that includes many web apps."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561140768.196800",
        "client_msg_id": "bfd309d1-4123-44a9-a6ba-4ba6f943b362",
        "text": "And the majority of games are not written in C#, only the gameplay code part is. Let's rewrite all the C++ in the Unity engine into C# also and see what games are still playable afterwards.. I predict it will be a very sad situation :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "liLH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And the majority of games are not written in C#, only the gameplay code part is. Let's rewrite all the C++ in the Unity engine into C# also and see what games are still playable afterwards.. I predict it will be a very sad situation "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561140948.197100",
        "client_msg_id": "2495e6fd-ceca-4d15-9e1f-06062d083fa9",
        "text": "Yup, very much agree that the amount of effort put into making a language faster makes all the difference",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hKd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yup, very much agree that the amount of effort put into making a language faster makes all the difference"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1561140954.197300",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1561140961.000000"
        },
        "client_msg_id": "169755d0-5d37-43ba-9e7e-61c1dbbbd864",
        "text": "Or if there was an equivalent investment in hardware that was more suitable for so called 'higher level' languages. E.g. <https:\/\/en.wikipedia.org\/wiki\/Tagged_architecture> which is emulated in software by almost every high level language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p=Avq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or if there was an equivalent investment in hardware that was more suitable for so called 'higher level' languages. E.g. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Tagged_architecture"
                            },
                            {
                                "type": "text",
                                "text": " which is emulated in software by almost every high level language."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1561141010.197700",
        "client_msg_id": "79c9cb12-cd08-423a-8625-76f3355d39c1",
        "text": "I curse when I spend several minutes tracking down a typo in JavaScript but I agree that I don't run into a PI + \"hello\" issue.\n\nJonathan Blow mentioned that when he started his JAI language that memory safety was explicitly not a goal because it's not an issue he runs into often in his personal workflow. He believes he's pretty experienced and disciplined about that kind of stuff and doesn't want to have to jump through the hoops or give up the perf that most languages that try to make memory safety a priority end up adding to the experience.\n\nI can see both sides. I wish I didn't have to pick one.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v=gc5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I curse when I spend several minutes tracking down a typo in JavaScript but I agree that I don't run into a PI + \"hello\" issue.\n\nJonathan Blow mentioned that when he started his JAI language that memory safety was explicitly not a goal because it's not an issue he runs into often in his personal workflow. He believes he's pretty experienced and disciplined about that kind of stuff and doesn't want to have to jump through the hoops or give up the perf that most languages that try to make memory safety a priority end up adding to the experience.\n\nI can see both sides. I wish I didn't have to pick one."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561141036.197900",
        "client_msg_id": "6692f427-0483-4938-8600-2708845b7031",
        "text": "Rust is a good candidate: it lacks C++ aliasing issues (which are a huge impediment to optimisation) but is otherwise equivalent. So given endless effort put into optimizing it, it should eventually be faster than C++",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gHcP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Rust is a good candidate: it lacks C++ aliasing issues (which are a huge impediment to optimisation) but is otherwise equivalent. So given endless effort put into optimizing it, it should eventually be faster than C++"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1561141038.198100",
        "client_msg_id": "d9945d62-057e-4249-9ce4-215846ba2e45",
        "text": "The fact that LLVM is the best we have is evidence to me that we're running on brute force rather than good ideas. All that complexity of millions of LOC to get good performance of even the simple programs.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zVie",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The fact that LLVM is the best we have is evidence to me that we're running on brute force rather than good ideas. All that complexity of millions of LOC to get good performance of even the simple programs."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561141146.198300",
        "client_msg_id": "722d5dd9-e6f4-4ba3-980b-ebb36ebf12e9",
        "text": "And of course crazy efforts have gone into making JS fast, whereas similarly dynamic languages like Python have received relatively little optimisation",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gHCE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And of course crazy efforts have gone into making JS fast, whereas similarly dynamic languages like Python have received relatively little optimisation"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561141293.198500",
        "client_msg_id": "43b870ad-22ef-40a6-b8f6-0795b602995b",
        "text": "<@UC2A2ARPT> that's a nice article.. yes the machine that C targets its far from reality :slightly_smiling_face: But we can't actually target the real hardware anymore, as even the CPU ISA pretends its still 1990 or so",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VpS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " that's a nice article.. yes the machine that C targets its far from reality "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " But we can't actually target the real hardware anymore, as even the CPU ISA pretends its still 1990 or so"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561141381.198700",
        "client_msg_id": "cefa9481-f383-48c2-b051-0291e74ec91d",
        "text": "No one is contradicting each other, we all want the system to help point out fundamentally wrong computations.\n\n Rails narrow the scope. You achieve safety through context and abstraction boundaries that are well understood and you can focus on the business problems were most of the challenge arises.\n\nAbstraction, composition and opt-in need to be as fluid with types as code or else there not worth the cost. Efforts like Lamdu, hackett and Hazel are exactly what we need to keep exploring. Describing them  just as static type system is like referring to me and Brian Shaw as weight lifters, technically true, but not very helpful if you want to know how to pick in tug of war. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y0X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No one is contradicting each other, we all want the system to help point out fundamentally wrong computations.\n\n Rails narrow the scope. You achieve safety through context and abstraction boundaries that are well understood and you can focus on the business problems were most of the challenge arises.\n\nAbstraction, composition and opt-in need to be as fluid with types as code or else there not worth the cost. Efforts like Lamdu, hackett and Hazel are exactly what we need to keep exploring. Describing them  just as static type system is like referring to me and Brian Shaw as weight lifters, technically true, but not very helpful if you want to know how to pick in tug of war. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1561141384.198900",
        "client_msg_id": "13c5a17a-cd57-4b6a-aaae-34671ee5dae0",
        "text": "The other angle important to me, where this whole model fails is that in a large scale system, one-process\/binary is just one piece of the puzzle. Large scale architecture and topology design will dominate any single process optimization. Basically LLVM is then just a peephole optimizer for the whole system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mux",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The other angle important to me, where this whole model fails is that in a large scale system, one-process\/binary is just one piece of the puzzle. Large scale architecture and topology design will dominate any single process optimization. Basically LLVM is then just a peephole optimizer for the whole system."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561141444.199100",
        "client_msg_id": "8fd82e1b-983c-4be5-bfb0-e13c18130b52",
        "text": "<@U8A5MS6R1> well yes, but that's a chicken and egg problem. certainly if we changed hardware, we'd favor different kind of languages.. but we are not. So as a language designer currently considering should I design this feature as having X or Y semantics, where Y is 2x slower on current hardware, that is still a real concern in terms of the practicality of your language",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dLH2J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " well yes, but that's a chicken and egg problem. certainly if we changed hardware, we'd favor different kind of languages.. but we are not. So as a language designer currently considering should I design this feature as having X or Y semantics, where Y is 2x slower on current hardware, that is still a real concern in terms of the practicality of your language"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561141541.199400",
        "client_msg_id": "6cfa00d1-92a2-4b65-83b1-192a8b1cc9e7",
        "text": "of all the things we can try to improve about this world, changing the hardware is about the furthest from our abilities :slightly_smiling_face: It may suck, but there's little point in complaining about it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OWV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "of all the things we can try to improve about this world, changing the hardware is about the furthest from our abilities "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " It may suck, but there's little point in complaining about it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1561141557.199600",
        "client_msg_id": "7335da7f-6019-49db-b2ee-b3e9788e79b6",
        "text": "..so we need a whole system optimization model - so a language\/environment to express and execute the larger (whole system) processes rather than local RAM bit fiddling optimizers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "saTg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "..so we need a whole system optimization model - so a language\/environment to express and execute the larger (whole system) processes rather than local RAM bit fiddling optimizers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561141678.199800",
        "client_msg_id": "77163527-7e0e-4be0-a743-bbd9ccf2e947",
        "text": "you will always need the latter",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3fJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you will always need the latter"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561141864.200000",
        "client_msg_id": "e29fcbe3-157a-465d-9636-ac5b9a469aa8",
        "text": "the largest \"whole systems\" that I am somewhat familiar with are the ones at Google, and we're very far off any kind of optimizing at that level (in a compiler optimisation sense), it's all done by humans. This LLVM level optimization you so dislike controls 99% of data center costs",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YWt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the largest \"whole systems\" that I am somewhat familiar with are the ones at Google, and we're very far off any kind of optimizing at that level (in a compiler optimisation sense), it's all done by humans. This LLVM level optimization you so dislike controls 99% of data center costs"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1561141979.200200",
        "client_msg_id": "85e45045-aca4-4a5a-8f24-7ae1f74b0353",
        "text": "&gt; if all the things we can try to improve about this world, changing the hardware is about the furthest from our abilities :slightly_smiling_face: It may suck, but there's little point in complaining about it\n\n<@UHDQ62M4P> - yeah I think this is the situated vs radical perspectives that came up earlier. How much we want to work with existing tech, how much we want to reinvent and rethink etc. If we're looking at this as research and imagining ~50+ years out, ideas today may end up being actualized. So it's still worth and interesting to explore and develop the ideas. Depends on the end goals and motivations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rbU",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if all the things we can try to improve about this world, changing the hardware is about the furthest from our abilities "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " It may suck, but there's little point in complaining about it"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UHDQ62M4P"
                            },
                            {
                                "type": "text",
                                "text": " - yeah I think this is the situated vs radical perspectives that came up earlier. How much we want to work with existing tech, how much we want to reinvent and rethink etc. If we're looking at this as research and imagining ~50+ years out, ideas today may end up being actualized. So it's still worth and interesting to explore and develop the ideas. Depends on the end goals and motivations."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561142087.200400",
        "client_msg_id": "7d8538a2-4fe4-4210-b730-1d2c5bbc093f",
        "text": "I guess I personally prefer to work on designs I can implement myself, today :slightly_smiling_face: Maybe I'm conservative? :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jNlz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess I personally prefer to work on designs I can implement myself, today "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " Maybe I'm conservative? "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561142139.200600",
        "client_msg_id": "b6e2d8d8-a050-41ff-a3f0-acef894c7e60",
        "text": "Also, even 50 years may not be enough to turn the tide in whatever way you think",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vu+C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, even 50 years may not be enough to turn the tide in whatever way you think"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561142223.200800",
        "client_msg_id": "1cf289a3-0881-406a-aa38-7197ed42b4e5",
        "text": "remember, in the previous 50 years, we've seen little to no fundamental change in basic technologies like CPUs, memory, and OSes etc.. it is not impossible we're going to spend another 50 with them :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lF1cc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "remember, in the previous 50 years, we've seen little to no fundamental change in basic technologies like CPUs, memory, and OSes etc.. it is not impossible we're going to spend another 50 with them "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1561142563.201100",
        "client_msg_id": "99df4314-c445-4a3c-ac9c-e3179f24ec2d",
        "text": "people who write in dynamic languages all the time develop muscle memory for the things that keep them safe. and there are also tools like linters that provide some degree of static safety. folks that program in static languages develop muscle memory for how to navigate the restrictions of the type system and how to extract meaningful info from type errors. i'm still biased towards static typing, especially as type systems continue to gain expressivity and ergonomics, but it's obviously true that dynamic language coders can produce reliable systems at scale",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nqnAg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "people who write in dynamic languages all the time develop muscle memory for the things that keep them safe. and there are also tools like linters that provide some degree of static safety. folks that program in static languages develop muscle memory for how to navigate the restrictions of the type system and how to extract meaningful info from type errors. i'm still biased towards static typing, especially as type systems continue to gain expressivity and ergonomics, but it's obviously true that dynamic language coders can produce reliable systems at scale"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UGRG57D8C",
                    "UC2A2ARPT",
                    "U7C7B75R6"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1561142718.201300",
        "client_msg_id": "99feba8f-50c4-4f2c-b883-7d6c503b25fc",
        "text": "These environments\\platforms\\engines (Unity, browser, electron) are now focusing on making it possible (if not easy) to get the extra 5x-25x more efficiency by adding new low level constructs that are more efficient",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bSVk9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These environments\\platforms\\engines (Unity, browser, electron) are now focusing on making it possible (if not easy) to get the extra 5x-25x more efficiency by adding new low level constructs that are more efficient"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1561142748.201500",
        "client_msg_id": "f46bc2bd-dfab-4b9b-9d57-72ef1c4ffa63",
        "text": "DOTS\\Burst Compiler, Webassembly, Web Workers, Web GPU, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "beE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "DOTS\\Burst Compiler, Webassembly, Web Workers, Web GPU, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1561142860.201900",
        "client_msg_id": "5bffc614-1e20-4bf6-83e1-d00baa162233",
        "text": "so it might be true that 90% the time 99% of programs don't need that efficiency, sometimes you either unlock new use cases if you get it, or just make the user experience better",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C9+D0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so it might be true that 90% the time 99% of programs don't need that efficiency, sometimes you either unlock new use cases if you get it, or just make the user experience better"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1561142956.203400",
        "client_msg_id": "58bdcf2c-f2a4-4d01-ac9b-2faa5adbd70a",
        "text": "Yes, but there are also divides. I got my start with dynamic languages, but make a lot of errors that could be caught by a type system in them. Either I make more of them than other programmers, or I’m more annoyed by them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T6n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, but there are also divides. I got my start with dynamic languages, but make a lot of errors that could be caught by a type system in them. Either I make more of them than other programmers, or I’m more annoyed by them."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1561143073.205000",
        "client_msg_id": "bd0c43d5-7a07-4531-a2bf-3915ab061d1d",
        "text": "all the web applications you mentioned are document editors btw, and although there are benefits to less resource hungry and lower latency document editors, they mostly need to display text.  Yes it'd be great if I could scroll to the beginning of a channel's history instantly on Slack, but its not a deal breaker.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f7H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "all the web applications you mentioned are document editors btw, and although there are benefits to less resource hungry and lower latency document editors, they mostly need to display text.  Yes it'd be great if I could scroll to the beginning of a channel's history instantly on Slack, but its not a deal breaker."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561143135.206300",
        "client_msg_id": "b14d6fdf-b526-44d9-bb4c-05249a997d9f",
        "text": "Most of those technologies you mention are actually arguments FOR needing faster languages :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e+gu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Most of those technologies you mention are actually arguments FOR needing faster languages "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1561143228.207700",
        "client_msg_id": "7f7e5d02-9d9e-4e2b-9049-7f9e9e74ec0a",
        "text": "One morass I repeatedly see conversations fall into is trying to make generalizations about \"programming\". The discussion about \"most time spent programming\" is like this. And also the discussion of static vs dynamic types above. Programming is a huge field! Indeed, as it eats everything it's better seen as an aspect of all fields of endeavor. Like reading. Or history. Try to make a valid statement about \"most time spent performing arithmetic\", and hopefully it's clear how silly such statements are about programming.\n\nWhat we should be focusing on is _domains_. Games require very different languages and libraries and processors from scientific simulations, compilers have their own requirements. Even the category of \"web app\" is huge, because web apps can do many things. I work on deployment tools in my day job, and the domain has certain properties whether you create commandline tools or GUIs or web apps. (We've done them all.)\n\nThe challenge of end-user programming isn't to figure out the smallest set of things people need. I promise you programming will overflow any box you put it into. No, we have to meet people half-way in each domain separately.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561143228.207700",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1561179556.221300",
        "reply_users": [
            "UC2A2ARPT",
            "UC6997THT",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1561146266.212600"
            },
            {
                "user": "UC6997THT",
                "ts": "1561178385.220700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1561179556.221300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ibxnb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One morass I repeatedly see conversations fall into is trying to make generalizations about \"programming\". The discussion about \"most time spent programming\" is like this. And also the discussion of static vs dynamic types above. Programming is a huge field! Indeed, as it eats everything it's better seen as an aspect of all fields of endeavor. Like reading. Or history. Try to make a valid statement about \"most time spent performing arithmetic\", and hopefully it's clear how silly such statements are about programming.\n\nWhat we should be focusing on is "
                            },
                            {
                                "type": "text",
                                "text": "domains",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Games require very different languages and libraries and processors from scientific simulations, compilers have their own requirements. Even the category of \"web app\" is huge, because web apps can do many things. I work on deployment tools in my day job, and the domain has certain properties whether you create commandline tools or GUIs or web apps. (We've done them all.)\n\nThe challenge of end-user programming isn't to figure out the smallest set of things people need. I promise you programming will overflow any box you put it into. No, we have to meet people half-way in each domain separately."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UFPH678P4",
                    "UBSMEUXAA"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1561143244.207900",
        "client_msg_id": "3c6b7e19-6024-4278-9d71-29bb060937b6",
        "text": "&gt; rather than local RAM bit fiddling optimizers\n\n&gt; you will always need the latter\n\nAgree, but I'm saying that it could be much simpler than millions of LOC and the C++ language spec without cost.\n\n&gt; This LLVM level optimization you so dislike controls 99% of data center costs\n\nYes, I'm well aware. But also looking at how much proxying, redundant encoding\/decoding, RPC fan-out and model duplication happens across all the services, it seems we're losing a lot as well.\n\nI don't dislike LLVM, I think it's pretty solid. I'm arguing for exploring a different model starting top-down. Not just LLVM but all language runtimes\/compilers come from a world where 'process' meant OS\/Unix process (maybe your whole world was a single OS instance). But processes in large scale systems are very different and we're kind of hacking them on top as a separate layer.\n\n&gt; I guess I personally prefer to work on designs I can implement myself, today :slightly_smiling_face: Maybe I'm conservative?\n\nWhy not do both? :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0tl",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "rather than local RAM bit fiddling optimizers"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you will always need the latter"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nAgree, but I'm saying that it could be much simpler than millions of LOC and the C++ language spec without cost.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This LLVM level optimization you so dislike controls 99% of data center costs"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYes, I'm well aware. But also looking at how much proxying, redundant encoding\/decoding, RPC fan-out and model duplication happens across all the services, it seems we're losing a lot as well.\n\nI don't dislike LLVM, I think it's pretty solid. I'm arguing for exploring a different model starting top-down. Not just LLVM but all language runtimes\/compilers come from a world where 'process' meant OS\/Unix process (maybe your whole world was a single OS instance). But processes in large scale systems are very different and we're kind of hacking them on top as a separate layer.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess I personally prefer to work on designs I can implement myself, today "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " Maybe I'm conservative?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nWhy not do both? "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1561143326.208100",
        "client_msg_id": "2337d728-8e6a-4d16-a57b-ae605debb09f",
        "text": "I have limited time :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NIXr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have limited time "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1561143645.208500",
        "client_msg_id": "da0c761b-3bb5-4a96-9e7f-ede3d7240684",
        "text": "oh yeah that was my point :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yK72H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh yeah that was my point "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHDQ62M4P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1561143687.209000",
        "client_msg_id": "ed4f631c-1b3c-4033-808e-4c9e87c151f7",
        "text": "are there any good definitions of end-user programming out there?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561143687.209000",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1561259168.276300",
        "reply_users": [
            "UC2A2ARPT",
            "UGLSY9X3J",
            "UJK8MKYAZ",
            "UBKNXPBAB"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1561146499.213300"
            },
            {
                "user": "UGLSY9X3J",
                "ts": "1561167480.218600"
            },
            {
                "user": "UGLSY9X3J",
                "ts": "1561167506.218800"
            },
            {
                "user": "UGLSY9X3J",
                "ts": "1561167594.219100"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561216555.225600"
            },
            {
                "user": "UGLSY9X3J",
                "ts": "1561234911.232500"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1561259168.276300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "57K7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "are there any good definitions of end-user programming out there?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1561143719.209100",
        "client_msg_id": "282c9705-2748-49e4-b30c-fe7b59e210f2",
        "text": "even though I went on an unrelated tangent about not needed it for a lot of popular web applications, there are applications that people aren't making because they need better performance and existing tools don't enable it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rflc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "even though I went on an unrelated tangent about not needed it for a lot of popular web applications, there are applications that people aren't making because they need better performance and existing tools don't enable it"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1561144218.210600",
        "client_msg_id": "A14DD354-9768-43CA-AC05-7D0B15E4D323",
        "text": "unrelatedly: are there any beginner-friendly introductions to call-by-push-value out there?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sfS9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "unrelatedly: are there any beginner-friendly introductions to call-by-push-value out there?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "UJUGB1XGD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1561144346.210700",
        "client_msg_id": "2268dd39-1227-46e8-b2dd-2d28bb6fa873",
        "text": "that happens to me too, but i also have gotten very accustomed to the guarantees i get \"for free\" in static languages, so i dont have that muscle memory. scare quotes because there is a cost. it's very worth it to me, but clearly everyone doesn't feel that way. but maybe it's also i'm cognitively not as good as some people at enforcing dynamic typing discipline.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qn3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that happens to me too, but i also have gotten very accustomed to the guarantees i get \"for free\" in static languages, so i dont have that muscle memory. scare quotes because there is a cost. it's very worth it to me, but clearly everyone doesn't feel that way. but maybe it's also i'm cognitively not as good as some people at enforcing dynamic typing discipline."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1561144395.211200",
        "client_msg_id": "b415c085-6201-4da4-b9af-8f413aaae2cb",
        "text": "like, growing up, i was always getting points off for doing poor bookkeeping of my minus signs and such details in my math work. i was very good with the concepts, but try as i might, i couldn't get the bookkeeping right",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KL39J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like, growing up, i was always getting points off for doing poor bookkeeping of my minus signs and such details in my math work. i was very good with the concepts, but try as i might, i couldn't get the bookkeeping right"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1561144438.211400",
        "client_msg_id": "107cd724-15c6-47e8-8f35-193f9e1843dd",
        "text": "but maybe my conceptual strengths are better suited to internalizing typing models?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AY2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but maybe my conceptual strengths are better suited to internalizing typing models?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1561144783.211900",
        "client_msg_id": "ad88c00b-ee44-41cd-9945-e9526206adf8",
        "text": "I would be very surprised if Apple didn't end up making changes to some of their hardware to accommodate some Swift feature or framework. They're already knocking at the door with features like BitCode, and they'll be making their own ARM chips for Macs soon. I expect they eventually stop licensing ARM and develop their own instruction set and architecture, maybe even within the decade. That's why I suggested Intel could also end up doing something similar. It's not within the realm of possibility for any of us, but there are people that have the entire stack from wafer to monad within their purview.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rfPZh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would be very surprised if Apple didn't end up making changes to some of their hardware to accommodate some Swift feature or framework. They're already knocking at the door with features like BitCode, and they'll be making their own ARM chips for Macs soon. I expect they eventually stop licensing ARM and develop their own instruction set and architecture, maybe even within the decade. That's why I suggested Intel could also end up doing something similar. It's not within the realm of possibility for any of us, but there are people that have the entire stack from wafer to monad within their purview."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561145086.212200",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1561145112.000000"
        },
        "client_msg_id": "994ab6b4-54c2-4347-afc4-bb2150a99600",
        "text": "I've been watching Rich Hickey videos, to see his take on static vs dynamic typing. I like this video: <https:\/\/www.youtube.com\/watch?v=2V1FtfBDsLU>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ssRM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been watching Rich Hickey videos, to see his take on static vs dynamic typing. I like this video: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=2V1FtfBDsLU"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1561146266.212600",
        "client_msg_id": "522dc47a-97c0-47d7-9eed-83ca88ba2bc0",
        "text": "&gt; Try to make a valid statement about \"most time spent performing arithmetic\"\n\nHere are a handful:\n\n• A typical person equipped with a calculator or adding machine or (etc) has an edge over a typical person with a pencil and paper when it comes to doing repeat arithmetic.\n\n• Some people can do arithmetic with very quickly in their head, even with large numbers.\n\n• If you need to produce results that have more than a dozen-ish digits of precision, most calculators won't help you — pencil and paper and knowing how to do math \"manually\" can be essential in this case.\n\n• The notation we use to represent numbers is very broadly useful, but sometimes other notations are faster or richer for manipulating.\n\n• Arithmetic won't help you console someone who is dying.\n\nWe're programmers — we can come up with abstractions that throw away the right amount of detail needed to put damn anything in a box. We can choose to retain as much detail as we need to still state things meaningfully.\n\n• The amount of time people spend on various kinds of programming tasks is measurable, and has been measured, both broadly (across languages, skill levels, domains) and narrowly (within a language, skill level, domain).\n\n• Our gut intuitions about such matters are, more often than not, worth listening to. Especially when discussing things in a group, sharing and challenging our collective intuitions.\n\n• Totally agree about needing to focus on domains. That's a great way to carve up the space, to decrease the abstractness of our discussions. But we can also achieve similar carvings-up other ways — and one such way is saying, \"Let's look at the spectrum\/space of static to dynamic and see what clusterings of ideas we can place in that space\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561143228.207700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y8UcO",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Try to make a valid statement about \"most time spent performing arithmetic\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nHere are a handful:\n\n• A typical person equipped with a calculator or adding machine or (etc) has an edge over a typical person with a pencil and paper when it comes to doing repeat arithmetic.\n\n• Some people can do arithmetic with very quickly in their head, even with large numbers.\n\n• If you need to produce results that have more than a dozen-ish digits of precision, most calculators won't help you — pencil and paper and knowing how to do math \"manually\" can be essential in this case.\n\n• The notation we use to represent numbers is very broadly useful, but sometimes other notations are faster or richer for manipulating.\n\n• Arithmetic won't help you console someone who is dying.\n\nWe're programmers — we can come up with abstractions that throw away the right amount of detail needed to put damn anything in a box. We can choose to retain as much detail as we need to still state things meaningfully.\n\n• The amount of time people spend on various kinds of programming tasks is measurable, and has been measured, both broadly (across languages, skill levels, domains) and narrowly (within a language, skill level, domain).\n\n• Our gut intuitions about such matters are, more often than not, worth listening to. Especially when discussing things in a group, sharing and challenging our collective intuitions.\n\n• Totally agree about needing to focus on domains. That's a great way to carve up the space, to decrease the abstractness of our discussions. But we can also achieve similar carvings-up other ways — and one such way is saying, \"Let's look at the spectrum\/space of static to dynamic and see what clusterings of ideas we can place in that space\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1561146298.212800",
        "client_msg_id": "6ac77234-f488-4371-9419-74d12ac0ab4e",
        "text": "FPGAs are another architecture that's growing again and folks are using it in data centers.\n\n&gt; I have limited time\n\nFair. I guess I'm not arguing for other folks to take this position but just that these positions focused on managed\/higher level systems with longer term horizons are valuable and can become net wins.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bpV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FPGAs are another architecture that's growing again and folks are using it in data centers.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have limited time"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nFair. I guess I'm not arguing for other folks to take this position but just that these positions focused on managed\/higher level systems with longer term horizons are valuable and can become net wins."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561146426.213000",
        "client_msg_id": "f0f614fa-b95e-4bf0-b7aa-c5e6b36a4799",
        "text": "Hickey's concerns about static type systems are not fully addressed by structural type systems alone. There is a lot more to his position than just \"nominal types are bad\".\n\nI hypothesize that Hickey's criticisms of static typing might be addressed by a soft type system. For example, see \"A Practical Soft Type System for Scheme\": <https:\/\/www.researchgate.net\/publication\/2484820_A_Practical_Soft_Type_System_for_Scheme>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "attachments": [
            {
                "service_name": "ResearchGate",
                "title": "(PDF) A Practical Soft Type System for Scheme",
                "title_link": "https:\/\/www.researchgate.net\/publication\/2484820_A_Practical_Soft_Type_System_for_Scheme",
                "text": "PDF | Soft type systems provide the benefits of static type checking for dynamically typed languages without rejecting untypable programs. A soft type checker infers types for variables and expressions and inserts explicit run-time checks to transform untypable programs to typable...",
                "fallback": "ResearchGate: (PDF) A Practical Soft Type System for Scheme",
                "thumb_url": "https:\/\/i1.rgstatic.net\/publication\/2484820_A_Practical_Soft_Type_System_for_Scheme\/links\/02e7e52be461526861000000\/largepreview.png",
                "from_url": "https:\/\/www.researchgate.net\/publication\/2484820_A_Practical_Soft_Type_System_for_Scheme",
                "thumb_width": 850,
                "thumb_height": 1100,
                "service_icon": "https:\/\/www.researchgate.net\/apple-touch-icon-120x120.png",
                "id": 1,
                "original_url": "https:\/\/www.researchgate.net\/publication\/2484820_A_Practical_Soft_Type_System_for_Scheme"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4+VL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hickey's concerns about static type systems are not fully addressed by structural type systems alone. There is a lot more to his position than just \"nominal types are bad\".\n\nI hypothesize that Hickey's criticisms of static typing might be addressed by a soft type system. For example, see \"A Practical Soft Type System for Scheme\": "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.researchgate.net\/publication\/2484820_A_Practical_Soft_Type_System_for_Scheme"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1561146499.213300",
        "client_msg_id": "6bf19d34-3333-40e9-a2bb-4793a9b1f619",
        "text": "A good explanation that crossed my path recently is...\n\nAn \"end-user programmer\" is someone programming behaviour that only they themselves will make use of.\n\nSo then, \"end-user programming\" the programming that someone does to make something for themselves.\n\nI don't believe that's a perfect fit with how industry uses the term, mind. In that case, the meaning might be more along the lines of, \"Programming done by someone who doesn't consider themselves a programmer.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561143687.209000",
        "parent_user_id": "UGLSY9X3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "67H1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A good explanation that crossed my path recently is...\n\nAn \"end-user programmer\" is someone programming behaviour that only they themselves will make use of.\n\nSo then, \"end-user programming\" the programming that someone does to make something for themselves.\n\nI don't believe that's a perfect fit with how industry uses the term, mind. In that case, the meaning might be more along the lines of, \"Programming done by someone who doesn't consider themselves a programmer.\""
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ",
                    "UHWC9PXBL",
                    "UBSMEUXAA",
                    "UGLSY9X3J",
                    "U5TCAFTD3",
                    "UA14TGLTC",
                    "U9C92716C"
                ],
                "count": 7
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1561146939.213500",
        "client_msg_id": "07e554f3-90c0-4a78-966f-d3cf0bf7b089",
        "text": "I think <@UC2A2ARPT>’s original statements ring true for \"designing a system from scratch as a solo developer\" (which does seem to be his experience). I think it flips once you have to interact with code that isn't in your own short-term memory; or change a previously-made decision. Strong types tell you immediately which pieces don't fit, which is a hard (sometimes intractable) problem if you don't have the entirety of the software in your head.\n\nI'll reiterate what I've said in another thread, which is that \"labelling types\" is a task that I think the machine should do, not the programmer. It's currently a burden on the programmer, because the compiler has basically no control over what text is appearing in the programmer's editor. A language (i.e. a visual one) where the editor and the compiler are the same software could plausibly take over this task and relieve the burden on the programmer.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0xEel",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "’s original statements ring true for \"designing a system from scratch as a solo developer\" (which does seem to be his experience). I think it flips once you have to interact with code that isn't in your own short-term memory; or change a previously-made decision. Strong types tell you immediately which pieces don't fit, which is a hard (sometimes intractable) problem if you don't have the entirety of the software in your head.\n\nI'll reiterate what I've said in another thread, which is that \"labelling types\" is a task that I think the machine should do, not the programmer. It's currently a burden on the programmer, because the compiler has basically no control over what text is appearing in the programmer's editor. A language (i.e. a visual one) where the editor and the compiler are the same software could plausibly take over this task and relieve the burden on the programmer."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJNJQD2AC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1561147405.213800",
        "client_msg_id": "f97f6b50-2013-4b00-bc37-0df5b894338a",
        "text": "&gt; Also, even 50 years may not be enough to turn the tide in whatever way you think\n\nYes, yes. It may not turn at all or likely even turn a completely different way. But these ideas are still very interesting to me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X6O",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, even 50 years may not be enough to turn the tide in whatever way you think"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYes, yes. It may not turn at all or likely even turn a completely different way. But these ideas are still very interesting to me."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561148111.214100",
        "client_msg_id": "c901d359-c00f-4526-965c-3209af705f16",
        "text": "The soft typing paper looked promising. It seems to fix the \"intellisense\" problem, and to allow you to flip a switch to show or hide type errors, but if you hide type errors, then it's exactly the same thing as dynamic typing.\n\nA more recent paper, \"Practical Optional Types for Clojure\", claims that soft typing \"has proved too complicated in practice\". <http:\/\/homes.sice.indiana.edu\/samth\/typed-clojure-draft.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jX+e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The soft typing paper looked promising. It seems to fix the \"intellisense\" problem, and to allow you to flip a switch to show or hide type errors, but if you hide type errors, then it's exactly the same thing as dynamic typing.\n\nA more recent paper, \"Practical Optional Types for Clojure\", claims that soft typing \"has proved too complicated in practice\". "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/homes.sice.indiana.edu\/samth\/typed-clojure-draft.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1561149608.214300",
        "client_msg_id": "25ed309e-86bd-4a52-bda0-ce51d4264d24",
        "text": "while i agree, it's not always so simple. i've seen plenty of inscrutable statically typed codebases. the types can and do help, but they can also add a lot of noise and indirection, too.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561140387.194200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s8J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "while i agree, it's not always so simple. i've seen plenty of inscrutable statically typed codebases. the types can and do help, but they can also add a lot of noise and indirection, too."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UJUGB1XGD",
        "thread_ts": "1561136547.176300",
        "root": {
            "user": "UHDQ62M4P",
            "type": "message",
            "ts": "1561136547.176300",
            "client_msg_id": "fb600c76-0682-4551-aecc-55455ba8ffdd",
            "text": "<@UKQT95T1V> that intuitively makes sense but in practice this doesn't seem to happen. While managed languages don't have to worry about issues like aliasing in C++, so in theory they could be faster, in practice they never go that far. The levels to which a compiler like LLVM can collapse both code and data in C++ to almost nothing is crazy, nothing in the managed world compares. Languages like Java have their own optimisation challenges, e.g. as soon as escape analysis fails it gets very inefficient.",
            "team": "T5TCAFTA9",
            "thread_ts": "1561136547.176300",
            "reply_count": 33,
            "reply_users_count": 7,
            "latest_reply": "1561492205.367400",
            "reply_users": [
                "UC2A2ARPT",
                "UHDQ62M4P",
                "U8A5MS6R1",
                "UJUGB1XGD",
                "UJN1TAYEQ",
                "UA14TGLTC",
                "UK69SS8LB"
            ],
            "replies": [
                {
                    "user": "UC2A2ARPT",
                    "ts": "1561139756.185400"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1561139820.186000"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1561139859.186400"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561140948.197100"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1561140954.197300"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561141036.197900"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1561141038.198100"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561141146.198300"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561141293.198500"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1561141384.198900"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561141444.199100"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561141541.199400"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1561141557.199600"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561141678.199800"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561141864.200000"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1561141979.200200"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561142087.200400"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561142139.200600"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561142223.200800"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1561143244.207900"
                },
                {
                    "user": "UHDQ62M4P",
                    "ts": "1561143326.208100"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1561144783.211900"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1561146298.212800"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1561147405.213800"
                },
                {
                    "user": "UJUGB1XGD",
                    "ts": "1561152390.215300"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1561171780.220000"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1561172647.220200"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1561178209.220500"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1561203753.225100"
                },
                {
                    "user": "UK69SS8LB",
                    "ts": "1561426536.326900"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1561466692.337700"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1561472834.354100"
                },
                {
                    "user": "UK69SS8LB",
                    "ts": "1561492205.367400"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "otgOh",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "user",
                                    "user_id": "UKQT95T1V"
                                },
                                {
                                    "type": "text",
                                    "text": " that intuitively makes sense but in practice this doesn't seem to happen. While managed languages don't have to worry about issues like aliasing in C++, so in theory they could be faster, in practice they never go that far. The levels to which a compiler like LLVM can collapse both code and data in C++ to almost nothing is crazy, nothing in the managed world compares. Languages like Java have their own optimisation challenges, e.g. as soon as escape analysis fails it gets very inefficient."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1561152390.215300",
        "client_msg_id": "81330e45-87fa-478d-9ba9-37c71547d690",
        "text": "Check out <https:\/\/millcomputing.com\/> for some ISA differences from \"50 years ago\" - still heavily in(slow) development alas",
        "attachments": [
            {
                "service_name": "Mill Computing, Inc",
                "title": "Mill Computing, Inc.",
                "title_link": "https:\/\/millcomputing.com\/",
                "text": "Developers of the Mill, a clean-sheet rethink of general-purpose CPU architectures Faster, Cooler, Safer Computing. For the existing, portable code in the world, a re-compiled program will run faster, cooler and safer. Faster Most existing code is single thread, so the Mill is designed to speed up the",
                "fallback": "Mill Computing, Inc: Mill Computing, Inc.",
                "image_url": "https:\/\/millcomputing.com\/blog\/wp-content\/uploads\/2016\/12\/MillComputing-1.png",
                "from_url": "https:\/\/millcomputing.com\/",
                "image_width": 234,
                "image_height": 23,
                "image_bytes": 2554,
                "service_icon": "https:\/\/millcomputing.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/millcomputing.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T8g\/M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Check out "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/millcomputing.com\/"
                            },
                            {
                                "type": "text",
                                "text": " for some ISA differences from \"50 years ago\" - still heavily in(slow) development alas"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561166204.218300",
        "client_msg_id": "d92a7908-1d19-4463-bb71-2dbf1468ef62",
        "text": "That blog post was interesting. I think I get it but it's still a little fuzzy. I'm def considering joining cat theory group. I watched some of those videos awhile back and found it helpful. I actually started learning category theory again from a more formal place. I think I'll recommend that resource over on the cat theory channel now.\n\nUnfortunately, the Turbine repo seems stalled. I wonder if they intend to keep up with it.\n\nWill check out the distributed FRP notes.\n\nWrt IO monad, I've read Conal say that but I didn't really understand what an alternative could be. Now I've started learning about free monads and those seem like a possible answer. There's a new Haskell library called polysemy which (ostensibly) finally makes free monads workable in Haskell (boilerplate wise and performance wise). Does Conal address free monads?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558283187.462200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qdUq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That blog post was interesting. I think I get it but it's still a little fuzzy. I'm def considering joining cat theory group. I watched some of those videos awhile back and found it helpful. I actually started learning category theory again from a more formal place. I think I'll recommend that resource over on the cat theory channel now.\n\nUnfortunately, the Turbine repo seems stalled. I wonder if they intend to keep up with it.\n\nWill check out the distributed FRP notes.\n\nWrt IO monad, I've read Conal say that but I didn't really understand what an alternative could be. Now I've started learning about free monads and those seem like a possible answer. There's a new Haskell library called polysemy which (ostensibly) finally makes free monads workable in Haskell (boilerplate wise and performance wise). Does Conal address free monads?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1561167480.218600",
        "client_msg_id": "48a22ab4-fae0-4174-b92e-a926c525cb54",
        "text": "oo I love that term",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561143687.209000",
        "parent_user_id": "UGLSY9X3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eL0sl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oo I love that term"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1561167506.218800",
        "edited": {
            "user": "UGLSY9X3J",
            "ts": "1561167513.000000"
        },
        "client_msg_id": "61559c4a-976c-4843-8943-5bed3553b786",
        "text": "probably similar to being a “home cook” vs being a professional chef at a restaurant",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561143687.209000",
        "parent_user_id": "UGLSY9X3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jme7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "probably similar to being a “home cook” vs being a professional chef at a restaurant"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1561167594.219100",
        "client_msg_id": "18f83e79-dcab-48d8-b0fb-0dc067fad8a1",
        "text": "home cook:\n- focus on ease of access\n- investment in tools \/ processes scaled to their level of expertise. in general tools are more accessible and simpler to use\n\nprofessional cook:\n- has to work at “scale” by default to make a profit\n- more complex, larger equipment.\n- more ops management \/ standardization, less experimentation (still happens, but not daily probably)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561143687.209000",
        "parent_user_id": "UGLSY9X3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Zlo9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "home cook:\n- focus on ease of access\n- investment in tools \/ processes scaled to their level of expertise. in general tools are more accessible and simpler to use\n\nprofessional cook:\n- has to work at “scale” by default to make a profit\n- more complex, larger equipment.\n- more ops management \/ standardization, less experimentation (still happens, but not daily probably)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1561167938.219300",
        "client_msg_id": "cafdf3a5-1690-461d-b5e5-302d836709f1",
        "text": "Conal sketches the alternative here <http:\/\/conal.net\/blog\/posts\/can-functional-programming-be-liberated-from-the-von-neumann-paradigm>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558283187.462200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LZMxZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Conal sketches the alternative here "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/conal.net\/blog\/posts\/can-functional-programming-be-liberated-from-the-von-neumann-paradigm"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1561167966.219500",
        "client_msg_id": "fa60f7b7-c61b-46be-bbac-310382b117a8",
        "text": "The idea is that we totally avoid antiquated imperitive APIs",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558283187.462200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KfP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The idea is that we totally avoid antiquated imperitive APIs"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561171780.220000",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1561172768.000000"
        },
        "client_msg_id": "4f031934-daa6-4d08-86ee-3afbe42e56a7",
        "text": "&gt; in the previous 50 years, we've seen little to no fundamental change in basic technologies like CPUs, memory\n\nWe have GPUs, which have a radically different architecture from CPUs optimized for running C programs, and which are capable of a wider range of general purpose computing than is admitted by conventional wisdom. And we now have non-volatile RAM. Current software doesn't fully exploit this hardware: we need new languages and operating systems for that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hEDb",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in the previous 50 years, we've seen little to no fundamental change in basic technologies like CPUs, memory"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nWe have GPUs, which have a radically different architecture from CPUs optimized for running C programs, and which are capable of a wider range of general purpose computing than is admitted by conventional wisdom. And we now have non-volatile RAM. Current software doesn't fully exploit this hardware: we need new languages and operating systems for that."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561172647.220200",
        "client_msg_id": "059a1079-b9b4-4fa1-970b-53f6dada7391",
        "text": "&gt; The levels to which a compiler like LLVM can collapse both code and data in C++ to almost nothing is crazy, nothing in the managed world compares.\n\n\"Managed\" means uses a garbage collector, or compiles to VM code, or both. There's no necessary conflict between \"managed\" and using LLVM as a backend code generator, it's just a matter of designing the language or compiler to support this. My Curv language is an interpreted, dynamically typed language, with a subset that compiles into highly optimized machine code for the CPU and GPU.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "umhfU",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The levels to which a compiler like LLVM can collapse both code and data in C++ to almost nothing is crazy, nothing in the managed world compares."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n\"Managed\" means uses a garbage collector, or compiles to VM code, or both. There's no necessary conflict between \"managed\" and using LLVM as a backend code generator, it's just a matter of designing the language or compiler to support this. My Curv language is an interpreted, dynamically typed language, with a subset that compiles into highly optimized machine code for the CPU and GPU."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1561178209.220500",
        "client_msg_id": "f9e58a30-9353-4367-a037-8f32211fec22",
        "text": "And don't forget RAM caches.  A recall a funny Ruby performance improvement that was accomplished by *increasing* the base size of objects from five words to eight.  No other change than just padding out the struct.  <https:\/\/github.com\/ruby\/ruby\/pull\/495>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561136547.176300",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "urp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And don't forget RAM caches.  A recall a funny Ruby performance improvement that was accomplished by "
                            },
                            {
                                "type": "text",
                                "text": "increasing",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the base size of objects from five words to eight.  No other change than just padding out the struct.  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/ruby\/ruby\/pull\/495"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1561178385.220700",
        "edited": {
            "user": "UC6997THT",
            "ts": "1561181500.000000"
        },
        "client_msg_id": "4f162c2f-2391-466e-addd-8ef05ecd5d75",
        "text": "<https:\/\/www.joelonsoftware.com\/2002\/05\/06\/five-worlds\/>\n\nAs an example AFAIK git has not made much inroads into AAA game dev as it's horrible for large files and horrible for helping to deal with non mergeable binary assets. Not really a programming thing but I suspect the majority of programmers take git as a given now-a-days. It's not and the problems it doesn't solve seem mostly ignored outside of game dev.\n\nAnother example of a difference for many AAA game devs, they fill up ram. I've shipped games where I often needed to change jumps (3 bytes) into unconditional branches (2 bytes) so I could squeeze in a bug fix. Maybe not a good example. I've shipped games that used all but 2k of all available ram and for example had to put all data in one file to prevent the OS from allocating more memory opening multiple files. Many languages are lax at memory management and so either are not appropriate or else my app will get xx% less features\/level size\/texture detail since I need to keep xx% of ram free for the language to play with.\n\nAnother example might be loading binary files. AFAIK most executable loaders load the executable straight into memory, fix up some pointers and then execute it where as most language level serialization libraries load some intermediate representation into memory, then parse that building language native objects from the representation. Plenty of games though use the executable style. Load the data, fix up pointers, use the data in place. They don't have space to have things in memory twice, once in an intermediate format and again in a language native format. But most languages don't support that at all (one arguable advantage of C\/C++) for certain domains.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561143228.207700",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "service_name": "Joel on Software",
                "title": "Five Worlds",
                "title_link": "https:\/\/www.joelonsoftware.com\/2002\/05\/06\/five-worlds\/",
                "text": "Something important is almost never mentioned in all the literature about programming and software development, and as a result we sometimes misunderstand each other. You’re a software develo…",
                "fallback": "Joel on Software: Five Worlds",
                "thumb_url": "https:\/\/i2.wp.com\/www.joelonsoftware.com\/wp-content\/uploads\/2016\/12\/11969842.jpg?fit=400%2C400&ssl=1",
                "ts": 1020644098,
                "from_url": "https:\/\/www.joelonsoftware.com\/2002\/05\/06\/five-worlds\/",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/i2.wp.com\/www.joelonsoftware.com\/wp-content\/uploads\/2016\/12\/11969842.jpg?fit=180%2C180&#038;ssl=1",
                "id": 1,
                "original_url": "https:\/\/www.joelonsoftware.com\/2002\/05\/06\/five-worlds\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dGp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.joelonsoftware.com\/2002\/05\/06\/five-worlds\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAs an example AFAIK git has not made much inroads into AAA game dev as it's horrible for large files and horrible for helping to deal with non mergeable binary assets. Not really a programming thing but I suspect the majority of programmers take git as a given now-a-days. It's not and the problems it doesn't solve seem mostly ignored outside of game dev.\n\nAnother example of a difference for many AAA game devs, they fill up ram. I've shipped games where I often needed to change jumps (3 bytes) into unconditional branches (2 bytes) so I could squeeze in a bug fix. Maybe not a good example. I've shipped games that used all but 2k of all available ram and for example had to put all data in one file to prevent the OS from allocating more memory opening multiple files. Many languages are lax at memory management and so either are not appropriate or else my app will get xx% less features\/level size\/texture detail since I need to keep xx% of ram free for the language to play with.\n\nAnother example might be loading binary files. AFAIK most executable loaders load the executable straight into memory, fix up some pointers and then execute it where as most language level serialization libraries load some intermediate representation into memory, then parse that building language native objects from the representation. Plenty of games though use the executable style. Load the data, fix up pointers, use the data in place. They don't have space to have things in memory twice, once in an intermediate format and again in a language native format. But most languages don't support that at all (one arguable advantage of C\/C++) for certain domains."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UBSMEUXAA"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1561179556.221300",
        "client_msg_id": "599259cb-2400-41ec-b089-c63bbe48cb65",
        "text": "I'd forgotten that article. Thank you for bumping it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561143228.207700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "axO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd forgotten that article. Thank you for bumping it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1561182924.221700",
        "client_msg_id": "059caebc-d2af-49f4-b0a3-7335ca203b07",
        "text": "I don't feel like claiming a game engine written in C# would suck is an example of anything really. There was a game engine written in C# though, XNA, and plenty of games shipped with it.\n\nIn any case we optimize the parts that are too slow. Tons of scientists use python and numpy to do science. Does the fact that their python code would use less memory and run faster mean they should be programming in assembly language instead? No, they get stuff done by using what they consider to be a productive language, python, and having it call out to custom more optimized solutions when they need to (numpy). This is arguably the same for most apps. They don't need ultimate efficiency. In fact I'd argue if they prioritized efficiency of CPU execution and efficiency of memory they'd lose on efficiency of developer time which would effectively make software less useful. Lowering developer efficiency means less features, less bug fixes, etc...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561133507.167500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1FYE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't feel like claiming a game engine written in C# would suck is an example of anything really. There was a game engine written in C# though, XNA, and plenty of games shipped with it.\n\nIn any case we optimize the parts that are too slow. Tons of scientists use python and numpy to do science. Does the fact that their python code would use less memory and run faster mean they should be programming in assembly language instead? No, they get stuff done by using what they consider to be a productive language, python, and having it call out to custom more optimized solutions when they need to (numpy). This is arguably the same for most apps. They don't need ultimate efficiency. In fact I'd argue if they prioritized efficiency of CPU execution and efficiency of memory they'd lose on efficiency of developer time which would effectively make software less useful. Lowering developer efficiency means less features, less bug fixes, etc..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    }
]