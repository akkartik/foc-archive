[
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1612865794.136600",
        "client_msg_id": "e53a311f-0e0d-45b9-b41f-858c3e58f1be",
        "text": "what about Idris? I don’t know much about it, but it seems you can treat exceptions as values\n\n<http:\/\/docs.idris-lang.org\/en\/latest\/effects\/simpleeff.html#exceptions>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612656314.123000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZOujW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what about Idris? I don’t know much about it, but it seems you can treat exceptions as values\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/docs.idris-lang.org\/en\/latest\/effects\/simpleeff.html#exceptions"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1612889095.142000",
        "client_msg_id": "92c3f546-f627-460e-bcd9-95d942927447",
        "text": "I was reading an old rfc for <https:\/\/tools.ietf.org\/html\/draft-pam-html-fine-trans-00|Transclusion in HTML>, and I noticed this line:\n&gt; If the source document is HTML and the optional PLAIN attribute is specified, all HTML tags are removed and all SGML entities converted to the characters they represent.\nThis just strikes me as bizarre, that the desired behaviour would ever be to strip out the structure of the source to include it. And I'm thinking that maybe this made sense at the time, and that HTML really was used as a markup language, in the sense that you had a valid plain text document and then you marked it up to add additional information.\nThis just has me thinking about how much the web is held back by attempting to continually adapt this notion of markup, rather than accept that the data is meaningless without the structure. I feel like a lot of semantic web stuff is held back by this.\n\nI'm curious what other people think of markup as a concept. Does it apply still?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612889095.142000",
        "reply_count": 6,
        "reply_users_count": 4,
        "latest_reply": "1612948276.146500",
        "reply_users": [
            "UC2A2ARPT",
            "U01M3Q6JEG7",
            "U013ZLJARC7",
            "UKDM3GLAJ"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1612892419.142100"
            },
            {
                "user": "U01M3Q6JEG7",
                "ts": "1612896933.142700"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1612902162.143200"
            },
            {
                "user": "UKDM3GLAJ",
                "ts": "1612902913.143600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1612923037.144200"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1612948276.146500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TbDWh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was reading an old rfc for "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tools.ietf.org\/html\/draft-pam-html-fine-trans-00",
                                "text": "Transclusion in HTML"
                            },
                            {
                                "type": "text",
                                "text": ", and I noticed this line:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If the source document is HTML and the optional PLAIN attribute is specified, all HTML tags are removed and all SGML entities converted to the characters they represent."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This just strikes me as bizarre, that the desired behaviour would ever be to strip out the structure of the source to include it. And I'm thinking that maybe this made sense at the time, and that HTML really was used as a markup language, in the sense that you had a valid plain text document and then you marked it up to add additional information.\nThis just has me thinking about how much the web is held back by attempting to continually adapt this notion of markup, rather than accept that the data is meaningless without the structure. I feel like a lot of semantic web stuff is held back by this.\n\nI'm curious what other people think of markup as a concept. Does it apply still?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1612892419.142100",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1612892576.000000"
        },
        "client_msg_id": "022c7971-4e4a-4f1b-ba25-35144f025e95",
        "text": "As someone who does a bit of prose-y writing in Markdown, I'm very fond of plain text as a substrate, with minimal markup added for a touch of structure. And in the same way that I like being able to take a small step up toward more structure, I like being able to take a small step down back to less structure. There are times where I've taken an HTML document and stripped all the tags out to recover the plain text. Not often, but it has come up.\n\nI do build web apps, sure, but I also still enjoy that the web is a network of linked text documents, for which it's nice to have tools to add and remove structure.\n\n&gt; the data is meaningless without the structure\nThat depends on what the data is. If the data is prose, then the only structure you need, at a minimum, is spacing and punctuation. The web was designed for writing and linking prose-y documents, and just because we've incremented it into an app platform doesn't mean the original prose-y purpose is any less valid, no?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612889095.142000",
        "parent_user_id": "UKDM3GLAJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C1bvb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As someone who does a bit of prose-y writing in Markdown, I'm very fond of plain text as a substrate, with minimal markup added for a touch of structure. And in the same way that I like being able to take a small step up toward more structure, I like being able to take a small step down back to less structure. There are times where I've taken an HTML document and stripped all the tags out to recover the plain text. Not often, but it has come up.\n\nI do build web apps, sure, but I also still enjoy that the web is a network of linked text documents, for which it's nice to have tools to add and remove structure.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the data is meaningless without the structure"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThat depends on what the data is. If the data is prose, then the only structure you need, at a minimum, is spacing and punctuation. The web was designed for writing and linking prose-y documents, and just because we've incremented it into an app platform doesn't mean the original prose-y purpose is any less valid, no?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U01M3Q6JEG7",
        "type": "message",
        "ts": "1612896933.142700",
        "client_msg_id": "ede0ecad-10e1-43e6-b255-f728a069030b",
        "text": "Hello! This is my first message here. This thread makes me think of bidirectional transformations (see e.g. <http:\/\/bx-community.wikidot.com\/> ). You'd like to strip out some structure, but not by throwing it away, but by putting it on the shelf. You'd then like to do some modification on the less structured representation (editing the plain text file). And the dream would be to magically add the structure back in, with help of the structure you put on the shelf. It's obviously an ill-posed problem in general, but as I understand it, the research in bidirectional transformations is to characterize when the problem has a solution.\n\nMy opinion is that it is generally not possible to find one all-encompassing structure for your data that does everything you'd ever possibly hope for. Not to mention that there are countless existing structures that you might want to interoperate with.\n\nFor example, I could see myself arguing \"well, if you had to remove structure to make the plain text more convenient to edit in your text editor, that's just a tooling issue. A better text editing tool would allow you to more conveniently edit HTML files\". Not only would I be requiring your text editor to be a lot more sophisticated (probably to the extent of solving ill-posed problems), I would also be failing to leverage the workflow and tooling developed over decades upon decades for editing plain text.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3a5fb4c37c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3a5fb4c37c49ddfa37942f81e3e2b17c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Gustavo Goretkin",
            "display_name": "Gustavo Goretkin",
            "team": "T5TCAFTA9",
            "name": "gustavo.goretkin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612889095.142000",
        "parent_user_id": "UKDM3GLAJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OW6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello! This is my first message here. This thread makes me think of bidirectional transformations (see e.g. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/bx-community.wikidot.com\/"
                            },
                            {
                                "type": "text",
                                "text": " ). You'd like to strip out some structure, but not by throwing it away, but by putting it on the shelf. You'd then like to do some modification on the less structured representation (editing the plain text file). And the dream would be to magically add the structure back in, with help of the structure you put on the shelf. It's obviously an ill-posed problem in general, but as I understand it, the research in bidirectional transformations is to characterize when the problem has a solution.\n\nMy opinion is that it is generally not possible to find one all-encompassing structure for your data that does everything you'd ever possibly hope for. Not to mention that there are countless existing structures that you might want to interoperate with.\n\nFor example, I could see myself arguing \"well, if you had to remove structure to make the plain text more convenient to edit in your text editor, that's just a tooling issue. A better text editing tool would allow you to more conveniently edit HTML files\". Not only would I be requiring your text editor to be a lot more sophisticated (probably to the extent of solving ill-posed problems), I would also be failing to leverage the workflow and tooling developed over decades upon decades for editing plain text."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1612902162.143200",
        "client_msg_id": "38e0c85e-9de4-4f2c-a801-f41fa495cbae",
        "text": "<@UKDM3GLAJ> It really was a linked network of documents with no pretense of becoming an app platform back in the day. The first version of JS was created in '93, Microsoft didn't add their own scripting thing  (which was incompatible!) to IE until '95, and the first ECMA JS standard wasn't released until June '97 -- months after this RFC was published.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612889095.142000",
        "parent_user_id": "UKDM3GLAJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FQ2Ep",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKDM3GLAJ"
                            },
                            {
                                "type": "text",
                                "text": " It really was a linked network of documents with no pretense of becoming an app platform back in the day. The first version of JS was created in '93, Microsoft didn't add their own scripting thing  (which was incompatible!) to IE until '95, and the first ECMA JS standard wasn't released until June '97 -- months after this RFC was published."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1612902913.143600",
        "client_msg_id": "58fc5669-946b-4e5b-9338-622aaf6ba750",
        "text": "<@UC2A2ARPT> That is a good perspective. I think I'm frustrated by the conflict of the modern web building so much into individual documents rather than relying on pushing the structure into the links themselves. You're totally right that the web can be used in a way that makes it perfectly valid to strip out the presentational markup to quote something. But I think most of the web (or at least most of what people experience on the web) would be made unusable by this sort of transclusion.\n\n<@U01M3Q6JEG7> Thanks for the link! I hadn't heard of that as an area of study. It's interesting that you comment on the possibility of an all-encompassing structure because the main project I'm interested in is making a generic graph data structure usable as an application datastore. Which as soon as you have multiple overlapping schemas will immediately bring in concerns about maintaining different (potentially mutually inconsistent) ideas of consistency. I'll do some reading.\n\n<@U013ZLJARC7> That's good context. I have this sense that if we would have made browsers more powerful we could have avoided a lot of the js that gets written. An example I've been thinking about lately is authentication. Every website has its own login form, but browsers are (well, could be if digest auth were fully supported) totally capable of doing a login handshake with a server. Do you (or anybody) have thoughts on that?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612889095.142000",
        "parent_user_id": "UKDM3GLAJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mpc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " That is a good perspective. I think I'm frustrated by the conflict of the modern web building so much into individual documents rather than relying on pushing the structure into the links themselves. You're totally right that the web can be used in a way that makes it perfectly valid to strip out the presentational markup to quote something. But I think most of the web (or at least most of what people experience on the web) would be made unusable by this sort of transclusion.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U01M3Q6JEG7"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the link! I hadn't heard of that as an area of study. It's interesting that you comment on the possibility of an all-encompassing structure because the main project I'm interested in is making a generic graph data structure usable as an application datastore. Which as soon as you have multiple overlapping schemas will immediately bring in concerns about maintaining different (potentially mutually inconsistent) ideas of consistency. I'll do some reading.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " That's good context. I have this sense that if we would have made browsers more powerful we could have avoided a lot of the js that gets written. An example I've been thinking about lately is authentication. Every website has its own login form, but browsers are (well, could be if digest auth were fully supported) totally capable of doing a login handshake with a server. Do you (or anybody) have thoughts on that?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC",
                    "U013ZLJARC7"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1612923037.144200",
        "client_msg_id": "eed10511-8b29-4adf-a84e-9379d059ecd6",
        "text": "&gt; browsers more powerful we could have avoided a lot of the js that gets written. An example I've been thinking about lately is authentication.\nPour one out for <https:\/\/en.wikipedia.org\/wiki\/Mozilla_Persona|Mozilla Persona>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612889095.142000",
        "parent_user_id": "UKDM3GLAJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "90l",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "browsers more powerful we could have avoided a lot of the js that gets written. An example I've been thinking about lately is authentication."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nPour one out for "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Mozilla_Persona",
                                "text": "Mozilla Persona"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1612939912.145200",
        "client_msg_id": "15ee10e9-3f93-4006-a07e-7061e79db34d",
        "text": "<@UCGAK10LS> I wasn't just be silly for the sake of being silly, I was also making a point.\n\nWhat I'm saying (humor aside) is: What really is a program? What's structure? I can achieve that with exact 1:1 perfection but accomplish nothing meaningful (the print example), or have a Turing complete solution that seems like a joke on the surface, but is actually a quite practical solution (Leetcode).\n\nOf course, the first can be replaced with just print statements, and the second with just digits which is basically just a reinvention of machine code. Sounds pointless, but they fixed what's been identified as a real problem at hand.\n\nBut is the problem really in the programming language, i.e. the thing with well defined and unambiguous kinds of pieces and rules for fitting them together? Or is it the medium?\n\nHow about an editor where all the different parts of a program are composable like building blocks? Only things that \"fit together\" can go together. I think Steve Kraus did something about \"Types are shapes\", and I think someone else here did something about \"typed holes\"?\n\nAnyway, I realize I'm taking about solving the problem from there other end (and I understand the merits of textual code in \"the real world\" as it sits today), but I'm just offering a perspective that what if this was treated from the source rather than the sink?\n\nI guess that's the same question (and similar topic in a way) as to why people feel strongly one way or the other (or in different contexts) about static vs dynamic typing. Seriously also explore that thought-space and see what maps back to this one (i.e. only allowing valid syntax vs dealing with any syntax).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612656314.123000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NDp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " I wasn't just be silly for the sake of being silly, I was also making a point.\n\nWhat I'm saying (humor aside) is: What really is a program? What's structure? I can achieve that with exact 1:1 perfection but accomplish nothing meaningful (the print example), or have a Turing complete solution that seems like a joke on the surface, but is actually a quite practical solution (Leetcode).\n\nOf course, the first can be replaced with just print statements, and the second with just digits which is basically just a reinvention of machine code. Sounds pointless, but they fixed what's been identified as a real problem at hand.\n\nBut is the problem really in the programming language, i.e. the thing with well defined and unambiguous kinds of pieces and rules for fitting them together? Or is it the medium?\n\nHow about an editor where all the different parts of a program are composable like building blocks? Only things that \"fit together\" can go together. I think Steve Kraus did something about \"Types are shapes\", and I think someone else here did something about \"typed holes\"?\n\nAnyway, I realize I'm taking about solving the problem from there other end (and I understand the merits of textual code in \"the real world\" as it sits today), but I'm just offering a perspective that what if this was treated from the source rather than the sink?\n\nI guess that's the same question (and similar topic in a way) as to why people feel strongly one way or the other (or in different contexts) about static vs dynamic typing. Seriously also explore that thought-space and see what maps back to this one (i.e. only allowing valid syntax vs dealing with any syntax)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1612941084.145400",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1612993715.000000"
        },
        "client_msg_id": "dadf8827-5df1-41a0-a8a1-e4220e3ce8bd",
        "text": "Or how about a combination of both?\n\nMaybe one thing that could mean is code in predefined structural format like Json, Xml, Yaml, S-expressions, etc.\n\nNow, those things can have syntax errors; But the goal isn't really to have exactly no syntax errors; the goal is whatever the goal of having no syntax errors is. Maybe you can get much more from reducing 90% of the syntax problem down to an extremely regular pattern, that many relatively basic editors or validators can already help deal with.\n\nConsider the trade-offs: The range of possible syntax errors becomes a very few things, and many basic tools\/editors can make that very simple to deal with (and the errors are trivially obvious when pointed out); You get well defined structure that can be made very meaningful, versus perhaps sacrificing that to some parsing strategy, etc; the format lends itself well to data transfer and various other tools that need know nothing of the \"language\". Etc.\n\nStill I understand that this might not be the direction the discussion is aimed to go in (and thus I won't continue it further here), but in all seriousness I think it's worthwhile food for thought on the topic, at least worth a mention.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612656314.123000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K8Zn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or how about a combination of both?\n\nMaybe one thing that could mean is code in predefined structural format like Json, Xml, Yaml, S-expressions, etc.\n\nNow, those things can have syntax errors; But the goal isn't really to have exactly no syntax errors; the goal is whatever the goal of having no syntax errors is. Maybe you can get much more from reducing 90% of the syntax problem down to an extremely regular pattern, that many relatively basic editors or validators can already help deal with.\n\nConsider the trade-offs: The range of possible syntax errors becomes a very few things, and many basic tools\/editors can make that very simple to deal with (and the errors are trivially obvious when pointed out); You get well defined structure that can be made very meaningful, versus perhaps sacrificing that to some parsing strategy, etc; the format lends itself well to data transfer and various other tools that need know nothing of the \"language\". Etc.\n\nStill I understand that this might not be the direction the discussion is aimed to go in (and thus I won't continue it further here), but in all seriousness I think it's worthwhile food for thought on the topic, at least worth a mention."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]