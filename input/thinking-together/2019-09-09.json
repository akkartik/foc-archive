[
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1568021323.209400",
        "client_msg_id": "ecdb1785-988e-47c2-ac81-8af8b43beb7d",
        "text": "Thanks for sharing, Her interview with Ted nelson seems also interesting!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568002720.206900",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I7Lf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for sharing, Her interview with Ted nelson seems also interesting!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1568037210.209600",
        "client_msg_id": "7bcfeea7-21f6-4653-a080-4018d069ba6c",
        "text": "You can't fully decouple syntax from semantics in a programming language. It wouldn't actually be possible to start with a program written in idiomatic Haskell, flip a switch, and view it in idiomatic Common Lisp.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568012264.208900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CWI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can't fully decouple syntax from semantics in a programming language. It wouldn't actually be possible to start with a program written in idiomatic Haskell, flip a switch, and view it in idiomatic Common Lisp."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1568037653.209800",
        "client_msg_id": "c85fc60d-d8be-473f-9b9e-79c9bb0d7886",
        "text": "Even the apparently trivial example of flipping from a Haskell-style case statement to a Javascript style switch statement wouldn't work unless you designed the syntax of the language in advance to support both of these options. For one thing, both 'case' and 'switch' would need to be reserved words, otherwise a developer who uses Haskell mode could introduce a local variable named 'switch' which would cause a compile error in Javascript mode. So my point is that you still need to design a syntax for your language. You can plan to support multiple \"presentations\" of that syntax, within certain limits, but it probably makes syntax design more challenging.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568012264.208900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xslId",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Even the apparently trivial example of flipping from a Haskell-style case statement to a Javascript style switch statement wouldn't work unless you designed the syntax of the language in advance to support both of these options. For one thing, both 'case' and 'switch' would need to be reserved words, otherwise a developer who uses Haskell mode could introduce a local variable named 'switch' which would cause a compile error in Javascript mode. So my point is that you still need to design a syntax for your language. You can plan to support multiple \"presentations\" of that syntax, within certain limits, but it probably makes syntax design more challenging."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1568038202.210000",
        "client_msg_id": "a661163a-3f1b-4cf7-9854-d05dc9424a9e",
        "text": "In Python and Lisp, function calls have a variable number of arguments, and can be a mixture of positional and keyword arguments. In Haskell, functions are curried. You can't have \"a variable number of positional arguments\", but you can pass a list as a single argument. You can't have keyword arguments, but you can pass a record as an argument. You have to design functions around either vararg function call syntax or curried function call syntax. I don't see how it is feasible to flip a switch and view the same code in either Haskell mode or Python mode, given this fundamental difference in function call syntax. If someone has solved this problem, please post links.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568012264.208900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f=H7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In Python and Lisp, function calls have a variable number of arguments, and can be a mixture of positional and keyword arguments. In Haskell, functions are curried. You can't have \"a variable number of positional arguments\", but you can pass a list as a single argument. You can't have keyword arguments, but you can pass a record as an argument. You have to design functions around either vararg function call syntax or curried function call syntax. I don't see how it is feasible to flip a switch and view the same code in either Haskell mode or Python mode, given this fundamental difference in function call syntax. If someone has solved this problem, please post links."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1568038693.212000",
        "client_msg_id": "511aa92c-eba0-4584-bb69-56f22fae4667",
        "text": "I recently came across an interesting, clojure-like dialect of JS called WISP. it is very similar to clojurescript, and it seems that development was abandoned once clojurescript became a thing, but as a toy language for noodling around it, I think it has some benefits to clojurescript (namely that it works very well with existing JS tooling, and getting up and running with it is just the matter of placing a script tag, rather than needing to fuss around with setting up a clojure dev environment). <https:\/\/github.com\/Gozala\/wisp\/blob\/master\/doc\/language-essentials.md>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568038693.212000",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1568050764.237200",
        "reply_users": [
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UHWC9PXBL",
                "ts": "1568050764.237200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uh6U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I recently came across an interesting, clojure-like dialect of JS called WISP. it is very similar to clojurescript, and it seems that development was abandoned once clojurescript became a thing, but as a toy language for noodling around it, I think it has some benefits to clojurescript (namely that it works very well with existing JS tooling, and getting up and running with it is just the matter of placing a script tag, rather than needing to fuss around with setting up a clojure dev environment). "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/Gozala\/wisp\/blob\/master\/doc\/language-essentials.md"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "eyes",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568040192.212800",
        "edited": {
            "user": "UM1HH60GN",
            "ts": "1568040257.000000"
        },
        "client_msg_id": "dc5f4c6c-eb18-4895-8fcf-37bb5b80846b",
        "text": "Clojurescript is nice in principle but it's a long way away from being something a JS dev might pick up cold. The tooling is extremely complex and heavyweight IMO.  I think the next step is doubling down on self-hosted CLJS, but now we have a few fragmented implementations for various cases.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568040192.212800",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1568225904.285100",
        "reply_users": [
            "UC2A2ARPT",
            "UMVFWPZ36",
            "UM1HH60GN"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1568068607.241000"
            },
            {
                "user": "UMVFWPZ36",
                "ts": "1568225660.284900"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568225904.285100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l7=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Clojurescript is nice in principle but it's a long way away from being something a JS dev might pick up cold. The tooling is extremely complex and heavyweight IMO.  I think the next step is doubling down on self-hosted CLJS, but now we have a few fragmented implementations for various cases."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1568042334.213300",
        "client_msg_id": "fcd7a9d9-1fc0-47ce-9aa9-c60793dee7da",
        "text": "<@UJN1TAYEQ> Forest's goal is to allow multiple different syntaxes for the same PL and not to allow programs to be displayed as they were written in an entirely different PL. It's \"Haskell-like syntax\", not \"Haskell syntax and semantics\" (even though that'd be cool too). \n\nI agree that certain parts of the syntax (e.g. reserved keywords) need to be taken care for, but this shouldn't be too hard using some form of escaping. Escaping is ubiquitous in string literals. Another example would be Rust's raw identifiers that allow using any name as an identifier.\n\nIf syntaxes support this kind of escaping, you already get better backwards-compatibility for free. Introducing a new keyword in your syntax would cause programs using the keyword as an identifier to be displayed differently, but it wouldn't break any code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568012264.208900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jf0v1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Forest's goal is to allow multiple different syntaxes for the same PL and not to allow programs to be displayed as they were written in an entirely different PL. It's \"Haskell-like syntax\", not \"Haskell syntax and semantics\" (even though that'd be cool too). \n\nI agree that certain parts of the syntax (e.g. reserved keywords) need to be taken care for, but this shouldn't be too hard using some form of escaping. Escaping is ubiquitous in string literals. Another example would be Rust's raw identifiers that allow using any name as an identifier.\n\nIf syntaxes support this kind of escaping, you already get better backwards-compatibility for free. Introducing a new keyword in your syntax would cause programs using the keyword as an identifier to be displayed differently, but it wouldn't break any code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEF95M2RH",
        "type": "message",
        "ts": "1568042548.213500",
        "client_msg_id": "72d5e931-571a-4863-a2ed-c453d67ac5ab",
        "text": "<@UJBAJNFLK> That's an interesting point. How (or if you're not sure how, why) do you think understanding the historical evolution of computing technology &amp; its impact might help tackle the problems Kell is interested in?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4e6637707ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c4e6637707ff62601f3dd21ec7626095.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Michael Arntzenius",
            "display_name": "rntz",
            "team": "T5TCAFTA9",
            "name": "daekharel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567478444.062000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B9sr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " That's an interesting point. How (or if you're not sure how, why) do you think understanding the historical evolution of computing technology & its impact might help tackle the problems Kell is interested in?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568042644.214000",
        "client_msg_id": "3480d196-7180-4799-b8c8-828cda812dba",
        "text": "it looks like wisp is a self-bootstrapping compiler, am I reading that right?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xfpk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it looks like wisp is a self-bootstrapping compiler, am I reading that right?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568042683.214500",
        "client_msg_id": "93c1b119-2f66-440d-829a-daa298b877dc",
        "text": "the makefile bottoms out to assuming wisp has been compiled already",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yLTv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the makefile bottoms out to assuming wisp has been compiled already"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568042863.214800",
        "client_msg_id": "a8ed51f8-9148-45c7-9809-1f43939f2285",
        "text": "```  \"devDependencies\": {\n    \"browserify\": \"2.35.2\",\n    \"wisp\": \"0.11.0\"\n  },```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CnTu",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "  \"devDependencies\": {\n    \"browserify\": \"2.35.2\",\n    \"wisp\": \"0.11.0\"\n  },"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568042891.215000",
        "client_msg_id": "202bf69f-ce5c-4afc-a5f4-a8e4070ee88c",
        "text": "that's fun..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Eg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that's fun.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1568043098.215400",
        "client_msg_id": "33ab4585-6563-4a65-87c7-a0236a0d2d9b",
        "text": "That is correct! it is very compact",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lBnsy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That is correct! it is very compact"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568043127.215600",
        "client_msg_id": "3d248c10-5724-4953-910d-3ae032c3494f",
        "text": "I don't think that's usual for lisps",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R\/YJ8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think that's usual for lisps"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1568043193.216000",
        "client_msg_id": "3755dfa3-a575-4ad2-a440-7293d22fdc75",
        "text": "well, wisp itself is just js, so what is being required is the compiler, not wisp code itself",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/1Hm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "well, wisp itself is just js, so what is being required is the compiler, not wisp code itself"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1568043197.216200",
        "client_msg_id": "4ca2b43b-a78b-410b-9f3b-81e1e20d10e9",
        "text": "if that makes sense",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bi7JQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if that makes sense"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568043213.216500",
        "client_msg_id": "0f6dcc9f-6ccd-4bf3-a565-6973aa4ed2d6",
        "text": "right, but the compiler is written in wisp :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sok",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "right, but the compiler is written in wisp "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568043220.216700",
        "client_msg_id": "7be065b8-b430-456e-92e3-18e86efb6d6f",
        "text": "the first one wasn't I guess",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HrA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the first one wasn't I guess"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568043255.217200",
        "client_msg_id": "a72e202c-2546-4ae3-975e-6a447a1ab4cc",
        "text": "the clojure compiler is java, the clojurescript compiler is JVM-clojure",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ABqS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the clojure compiler is java, the clojurescript compiler is JVM-clojure"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1568046843.233900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1568047343.000000"
        },
        "client_msg_id": "4e3bc831-3e3e-4aff-8235-e2e475caf64a",
        "text": "I may be misunderstanding you, <@UM1HH60GN>. Building languages in themselves is (sadly) very common. Gcc is in C. The ~Hotspot~ JikesRVM compiler for Java is built in Java. Lisp is particularly prone to this sort of misguided fascination with recursion since McCarthy's original paper showed a one-page Lisp interpreter written in itself.\n\nThe security risks of building languages in themselves have been known since Ken Thompson's Turing Award lecture in 1977. And such implementations are also hard to understand. The answer to \"what is the spec\/semantics?\" is often \"whatever the code says\". But what does the code do? You end up with a circular dependency.\n\nBoth these issues are also present with mutual rather than self recursion, like if you built Python in Ruby, or _vice versa_. Modern software, obsessed with interfaces and convenience, fails to attend to implementation properties and long-term externalities.\n\nMy Mu project builds each layer of abstraction strictly out of lower layers. It's a slow, inconvenient process, but not as slow or inconvenient as I'd feared going into it.\n\nPrototyping languages is a great thing to do, but we should all be concerned with the depth of the dependency tree and the presence of cycles in it before we deploy something to production. It's a very implicit and pervasive form of technical debt.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "reply_count": 21,
        "reply_users_count": 5,
        "latest_reply": "1568120526.245700",
        "reply_users": [
            "UKJGU23KP",
            "UCUSW7WVD",
            "UM1HH60GN",
            "U6FKVSVCK",
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "UKJGU23KP",
                "ts": "1568047108.234000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1568047165.234300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1568047246.234500"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568047321.234800"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568047415.235100"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568047448.235300"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568047700.235500"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568047853.235700"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568048464.236000"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568049018.236400"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1568050430.236700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1568052166.237400"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1568052384.237700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1568053748.238100"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568054285.238500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1568054638.239300"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568054731.239500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1568055100.239800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1568076724.242200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1568076962.242500"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568120526.245700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yfIg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I may be misunderstanding you, "
                            },
                            {
                                "type": "user",
                                "user_id": "UM1HH60GN"
                            },
                            {
                                "type": "text",
                                "text": ". Building languages in themselves is (sadly) very common. Gcc is in C. The "
                            },
                            {
                                "type": "text",
                                "text": "Hotspot",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " JikesRVM compiler for Java is built in Java. Lisp is particularly prone to this sort of misguided fascination with recursion since McCarthy's original paper showed a one-page Lisp interpreter written in itself.\n\nThe security risks of building languages in themselves have been known since Ken Thompson's Turing Award lecture in 1977. And such implementations are also hard to understand. The answer to \"what is the spec\/semantics?\" is often \"whatever the code says\". But what does the code do? You end up with a circular dependency.\n\nBoth these issues are also present with mutual rather than self recursion, like if you built Python in Ruby, or "
                            },
                            {
                                "type": "text",
                                "text": "vice versa",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Modern software, obsessed with interfaces and convenience, fails to attend to implementation properties and long-term externalities.\n\nMy Mu project builds each layer of abstraction strictly out of lower layers. It's a slow, inconvenient process, but not as slow or inconvenient as I'd feared going into it.\n\nPrototyping languages is a great thing to do, but we should all be concerned with the depth of the dependency tree and the presence of cycles in it before we deploy something to production. It's a very implicit and pervasive form of technical debt."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1568047108.234000",
        "client_msg_id": "1ab9822f-3bbf-4e01-8220-da1ced0ede79",
        "text": "Nit: hotspot is not built in Java: <https:\/\/en.wikipedia.org\/wiki\/HotSpot>\n\nThe bytecode compiler, `javac` is",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "title": "HotSpot",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/HotSpot",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/HotSpot",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "HotSpot, released as Java HotSpot Performance Engine, is a Java virtual machine for desktop and server computers, maintained and distributed by Oracle Corporation. It features improved performance via methods such as just-in-time compilation and adaptive optimization.",
                "fallback": "wikipedia: HotSpot",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/HotSpot"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wz7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nit: hotspot is not built in Java: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/HotSpot"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe bytecode compiler, "
                            },
                            {
                                "type": "text",
                                "text": "javac",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1568047165.234300",
        "client_msg_id": "9b29d9ae-5480-446e-813d-e7899d12366d",
        "text": "Sorry, I got the name wrong. Let me try to dig up what I mean.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g+A61",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry, I got the name wrong. Let me try to dig up what I mean."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1568047246.234500",
        "client_msg_id": "71a5274d-7adc-46f4-a0a9-1506184ed048",
        "text": "<https:\/\/www.jikesrvm.org>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8f9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.jikesrvm.org"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKJGU23KP",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568047321.234800",
        "client_msg_id": "d7c5f064-66a0-4731-8f09-6a5a9b201841",
        "text": "It's an interesting point, but I think there some wins from only learning one language to hack on the language.  I do think lisps are particularly bad at this, you sort of just have to go really slowly at the beginning until you find all the problems and learn the discipline to avoid them.  I think proper types can specify an interface that prevents people from having to dig as deep as often for basic tasks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4dv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's an interesting point, but I think there some wins from only learning one language to hack on the language.  I do think lisps are particularly bad at this, you sort of just have to go really slowly at the beginning until you find all the problems and learn the discipline to avoid them.  I think proper types can specify an interface that prevents people from having to dig as deep as often for basic tasks."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568047415.235100",
        "client_msg_id": "b2640e97-41d4-4225-9779-7503c5170833",
        "text": "Is SQL too confusing? You don't exactly know everything it'll do, but you don't also stare at query plans for every query.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "42Lo5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is SQL too confusing? You don't exactly know everything it'll do, but you don't also stare at query plans for every query."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568047448.235300",
        "client_msg_id": "15b70439-6de6-4131-9643-edc77bb9564b",
        "text": "Declarativeness and recursion go hand in hand.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "whYL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Declarativeness and recursion go hand in hand."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568047700.235500",
        "client_msg_id": "d87e8cbc-cf1d-46a3-bc72-7ef7d0eeed94",
        "text": "I'm not sure if I understand some missing subtlety, but would you say a runtime library implemented in the same language as user code is too implicit?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MJ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure if I understand some missing subtlety, but would you say a runtime library implemented in the same language as user code is too implicit?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568047853.235700",
        "client_msg_id": "b70f9a68-0a3d-43b6-b486-f1815a58653a",
        "text": "I was looking at mu github and this conversation, and reminded me of terra: <http:\/\/terralang.org\/>\n\nwhich is really the opposite of what is good according to these assumptions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qhI+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was looking at mu github and this conversation, and reminded me of terra: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/terralang.org\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nwhich is really the opposite of what is good according to these assumptions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568048464.236000",
        "client_msg_id": "f1e77790-fc6e-4a13-9cb9-5beae968e3f1",
        "text": "Another thought I've had around this, lisps and macros etc. get really terse, but you have to expand them in your head. It's some kind of time\/space tradeoff. Is that worth it sometimes? When isn't it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Vf3q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another thought I've had around this, lisps and macros etc. get really terse, but you have to expand them in your head. It's some kind of time\/space tradeoff. Is that worth it sometimes? When isn't it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1568048862.236200",
        "client_msg_id": "81e8b0f8-8d48-410f-b7b5-7790ddb10a9d",
        "text": "<@UAL7940NM> I see that Forest has this goal, but currently they only support one syntax (Haskell), and there's nothing in the github repo that shows how they will support an automatic two-way mapping between Haskell curried functions and Javascript or Ruby function call syntax. We are contemplating a multi-syntax projectional editor for Curv, so this is a topic that interests me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568012264.208900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8t2hY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAL7940NM"
                            },
                            {
                                "type": "text",
                                "text": " I see that Forest has this goal, but currently they only support one syntax (Haskell), and there's nothing in the github repo that shows how they will support an automatic two-way mapping between Haskell curried functions and Javascript or Ruby function call syntax. We are contemplating a multi-syntax projectional editor for Curv, so this is a topic that interests me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568049018.236400",
        "client_msg_id": "6e573912-5695-4762-8ed9-2e40da463a10",
        "text": "Is it so different from a function call? I have to run through a mental model of the data structures and what they'll do.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "79z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it so different from a function call? I have to run through a mental model of the data structures and what they'll do."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1568050430.236700",
        "client_msg_id": "bb3c43ba-8a3c-4cbe-977d-cb4cc7eb9d8e",
        "text": "<@UCUSW7WVD> Can you elaborate on the security issues you mention?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7oCP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Can you elaborate on the security issues you mention?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1568050764.237200",
        "client_msg_id": "13B59A92-C521-4DF8-9978-CFB8D4979E80",
        "text": "it’s also frustrating because the introductory documentation is extremely clear and well-written",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568038693.212000",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y8f7T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it’s also frustrating because the introductory documentation is extremely clear and well-written"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1568052166.237400",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1568052437.000000"
        },
        "client_msg_id": "b5ac0cd9-9402-4ead-8e2e-4a621d460579",
        "text": "<@U6FKVSVCK> The full story is at <https:\/\/www.win.tue.nl\/~aeb\/linux\/hh\/thompson\/trust.html>, but in brief: the whole world runs on C, so a malicious backdoor in a C compiler would be very bad. Perhaps we can just audit C compilers for back doors? Just check their sources, monitor PRs as they come through. But that doesn't provide a guarantee because C compilers are written in C. What C compiler do they use? Does _it_ have any backdoors? Oh, it's the same C compiler, just a binary generated by a previous version. Where was _that_ version built? Oh, by the version before it. And on, and on, back to some version written in Assembly that ran on a PDP-11 or something whose sources are not available to us. The whole world runs on software that we have no audit trail for. Anybody who inserted a binary without a record of its sources somewhere along the way could have done _anything_. And compilers are so large that auditing their disassembly is intractable. Nobody's done it.\n\nThere's a scifi story that explores this idea in a more visceral manner: <https:\/\/www.teamten.com\/lawrence\/writings\/coding-machines>. Perhaps the association with a scifi story makes it seem less serious. Perhaps it seems like I'm wearing a tinfoil hat. You'll have to make up your mind on that one :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9q28B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " The full story is at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.win.tue.nl\/~aeb\/linux\/hh\/thompson\/trust.html"
                            },
                            {
                                "type": "text",
                                "text": ", but in brief: the whole world runs on C, so a malicious backdoor in a C compiler would be very bad. Perhaps we can just audit C compilers for back doors? Just check their sources, monitor PRs as they come through. But that doesn't provide a guarantee because C compilers are written in C. What C compiler do they use? Does "
                            },
                            {
                                "type": "text",
                                "text": "it",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " have any backdoors? Oh, it's the same C compiler, just a binary generated by a previous version. Where was "
                            },
                            {
                                "type": "text",
                                "text": "that",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " version built? Oh, by the version before it. And on, and on, back to some version written in Assembly that ran on a PDP-11 or something whose sources are not available to us. The whole world runs on software that we have no audit trail for. Anybody who inserted a binary without a record of its sources somewhere along the way could have done "
                            },
                            {
                                "type": "text",
                                "text": "anything",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". And compilers are so large that auditing their disassembly is intractable. Nobody's done it.\n\nThere's a scifi story that explores this idea in a more visceral manner: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.teamten.com\/lawrence\/writings\/coding-machines"
                            },
                            {
                                "type": "text",
                                "text": ". Perhaps the association with a scifi story makes it seem less serious. Perhaps it seems like I'm wearing a tinfoil hat. You'll have to make up your mind on that one "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U6FKVSVCK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1568052384.237700",
        "client_msg_id": "e27d0624-2991-4ee8-b3b2-9997d8e230e4",
        "text": "Thanks, makes sense. and not tinfoil hat!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f1RZO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, makes sense. and not tinfoil hat!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1568053748.238100",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1568053790.000000"
        },
        "client_msg_id": "30209994-a6ee-4952-93a8-7e4d9f2003ca",
        "text": "<@UM1HH60GN> My belief system is definitely out on a limb so you are more likely to be right. Let me try to bridge the gap in case you're able to pull me back in to the mainstream.\n\n&gt; there some wins from only learning one language to hack on the language\n\nThat is narrowly true. But if you zoom out a bit, your computer relies on many languages. To hack on your computer you need to know many  languages. So the narrow win turns into a loss in the long term.\n\n&gt; Is SQL too confusing? You don't exactly know everything it'll do, but you don't also stare at query plans for every query.\n\nMost people don't need to stare at their compilers' internals, yes. But there's a very long, very steep funnel here that the world relies on: users of software become programmers, programmers learn more about the internals of their dependencies, down and down until a tiny fraction of people have some sort of global picture of what the computer is doing. (Not what the computer _should be_ doing. I'm not a reductionist, and I don't claim that system software is the most important or anything like that.)\n\nBetter interfaces definitely reduce the need to inspect implementations (and SQL's interfaces like `explain` are among the best). But humans don't know how to eliminate the need entirely. And Jonathan Blow would claim we shouldn't. In the big picture and the long term implementation quality matters.\n\n&gt; Declarativeness and recursion go hand in hand.\n\nI like both! The reason I called recursion misguided here is that it's not actually recursion. Recursion in a single function or spanning a few functions has a clear base case. Here the base case spans codebases and unbounded spans of time. Most of the time our computers don't have it.\n\n&gt; Is it so different from a function call? I have to run through a mental model of the data structures and what they'll do.\n\nTo me the essential dissatisfaction in this group seems to be that we should rely less on working things out in our heads and offload as much of that load to our computers as possible. When you're tracking down a bug in a fundamental compiler that affects your whole computer, that burden can be quite large. So yes, there are similarities to function calls but they're sirens. Focus on the differences.\n\n&gt; would you say a runtime library implemented in the same language as user code is too implicit?\n\nI actually don't have a problem with using a subset of a language to build the whole language. All my projects for the last 6 years (since <http:\/\/akkartik.name\/post\/wart-layers> or so) do this. There are no cycles and it's perfectly reasonable.\n\nIn the end my goal is for the software that makes up a computer to reward curiosity. That's my North Star, and I think many of the problems we discuss in this group would be resolved if we hew to this North Star. <https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/cybbd5\/september_2019_monthly_what_are_you_working_on\/eyubr43>\n\nHopefully this kinda pointillistic set of responses helps convey where I'm coming from.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "service_name": "reddit",
                "title": "September 2019 monthly \"What are you working on?\" thread",
                "title_link": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/cybbd5\/september_2019_monthly_what_are_you_working_on\/eyubr43",
                "text": "[My project](<https:\/\/github.com\/akkartik\/mu#readme>) is not exactly about a programming language, but it's starting to get to the point where it...",
                "fallback": "reddit: September 2019 monthly \"What are you working on?\" thread",
                "thumb_url": "https:\/\/www.redditstatic.com\/new-icon.png",
                "from_url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/cybbd5\/september_2019_monthly_what_are_you_working_on\/eyubr43",
                "thumb_width": 256,
                "thumb_height": 256,
                "service_icon": "http:\/\/www.redditstatic.com\/desktop2x\/img\/favicon\/apple-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/cybbd5\/september_2019_monthly_what_are_you_working_on\/eyubr43"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "43JFm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UM1HH60GN"
                            },
                            {
                                "type": "text",
                                "text": " My belief system is definitely out on a limb so you are more likely to be right. Let me try to bridge the gap in case you're able to pull me back in to the mainstream.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there some wins from only learning one language to hack on the language"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThat is narrowly true. But if you zoom out a bit, your computer relies on many languages. To hack on your computer you need to know many  languages. So the narrow win turns into a loss in the long term.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is SQL too confusing? You don't exactly know everything it'll do, but you don't also stare at query plans for every query."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nMost people don't need to stare at their compilers' internals, yes. But there's a very long, very steep funnel here that the world relies on: users of software become programmers, programmers learn more about the internals of their dependencies, down and down until a tiny fraction of people have some sort of global picture of what the computer is doing. (Not what the computer "
                            },
                            {
                                "type": "text",
                                "text": "should be",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " doing. I'm not a reductionist, and I don't claim that system software is the most important or anything like that.)\n\nBetter interfaces definitely reduce the need to inspect implementations (and SQL's interfaces like "
                            },
                            {
                                "type": "text",
                                "text": "explain",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are among the best). But humans don't know how to eliminate the need entirely. And Jonathan Blow would claim we shouldn't. In the big picture and the long term implementation quality matters.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Declarativeness and recursion go hand in hand."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI like both! The reason I called recursion misguided here is that it's not actually recursion. Recursion in a single function or spanning a few functions has a clear base case. Here the base case spans codebases and unbounded spans of time. Most of the time our computers don't have it.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it so different from a function call? I have to run through a mental model of the data structures and what they'll do."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nTo me the essential dissatisfaction in this group seems to be that we should rely less on working things out in our heads and offload as much of that load to our computers as possible. When you're tracking down a bug in a fundamental compiler that affects your whole computer, that burden can be quite large. So yes, there are similarities to function calls but they're sirens. Focus on the differences.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "would you say a runtime library implemented in the same language as user code is too implicit?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI actually don't have a problem with using a subset of a language to build the whole language. All my projects for the last 6 years (since "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/wart-layers"
                            },
                            {
                                "type": "text",
                                "text": " or so) do this. There are no cycles and it's perfectly reasonable.\n\nIn the end my goal is for the software that makes up a computer to reward curiosity. That's my North Star, and I think many of the problems we discuss in this group would be resolved if we hew to this North Star. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/cybbd5\/september_2019_monthly_what_are_you_working_on\/eyubr43"
                            },
                            {
                                "type": "text",
                                "text": "\n\nHopefully this kinda pointillistic set of responses helps convey where I'm coming from."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568054285.238500",
        "edited": {
            "user": "UM1HH60GN",
            "ts": "1568054517.000000"
        },
        "client_msg_id": "60e8f9f7-b8c6-4eb7-a78c-aaa72686d108",
        "text": "It sounds a little extreme to totally avoid this, but it might be interesting to categorize these abstraction violations by distance, time, artifacts involved, into an overall measure of brittleness.  For example, I think clojure macros depending on functions that might depend on other macros is kind of bad? Each function is a 'compilation unit', and in order to run a macro at compile-time, the functions it calls has to be already available in the compile pass's run-time. It's a little clearer to have the macro language run in a totally separate context, though maybe less convenient for the implementation of an individual macro.  But it's all still just a program running, not creating artifacts outside of its memory space.  That might be worse.  It is worse, when you consider the practical problems of clojure AOT compiled artifacts (classfiles, jars containing both compiled code and source code).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0C8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It sounds a little extreme to totally avoid this, but it might be interesting to categorize these abstraction violations by distance, time, artifacts involved, into an overall measure of brittleness.  For example, I think clojure macros depending on functions that might depend on other macros is kind of bad? Each function is a 'compilation unit', and in order to run a macro at compile-time, the functions it calls has to be already available in the compile pass's run-time. It's a little clearer to have the macro language run in a totally separate context, though maybe less convenient for the implementation of an individual macro.  But it's all still just a program running, not creating artifacts outside of its memory space.  That might be worse.  It is worse, when you consider the practical problems of clojure AOT compiled artifacts (classfiles, jars containing both compiled code and source code)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1568054410.238900",
        "client_msg_id": "c76ab1e6-7bc4-4fd1-82b9-d97a0347fbdc",
        "text": "<@UEF95M2RH> Given that we can't realistically do experiments (\"let's find some civilization that doesn't have computing yet and introduce it in a particular way...\"), history is all we have as a basis for shaping the future. If you look at the visions people had in the past for computing, the problems that Kell describes are not part of them. Nor did many technopessimists predict them. So how did they arise? Which specific aspects of technology or its cultural contexts lead to developments that nobody seems to have wanted or feared? For transportation, Illich claims that speed is the essential problem. What is its equivalent in computing, if anything?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567478444.062000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xNRqU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEF95M2RH"
                            },
                            {
                                "type": "text",
                                "text": " Given that we can't realistically do experiments (\"let's find some civilization that doesn't have computing yet and introduce it in a particular way...\"), history is all we have as a basis for shaping the future. If you look at the visions people had in the past for computing, the problems that Kell describes are not part of them. Nor did many technopessimists predict them. So how did they arise? Which specific aspects of technology or its cultural contexts lead to developments that nobody seems to have wanted or feared? For transportation, Illich claims that speed is the essential problem. What is its equivalent in computing, if anything?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1568054638.239300",
        "client_msg_id": "59b66659-c96b-43b4-89b2-e1b96d707ea6",
        "text": "Interestingly, Racket macros enforce a deep notion of linearity: macros can call functions but not functions that call them. The compiler constructs a topological sort for you and gives pretty decent error messages if it encounters cycles.\n\n...and I don't like it :smile: I think macros should be pretty unconstrained.\n\nI'm more concerned about linearity when it spans multiple codebases. Mutual recursion within a single codebase is fine. Hopefully this shows that I don't \"totally avoid this\". But yes I think the places to avoid cycles are precisely the places where it's most difficult today.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mnx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interestingly, Racket macros enforce a deep notion of linearity: macros can call functions but not functions that call them. The compiler constructs a topological sort for you and gives pretty decent error messages if it encounters cycles.\n\n...and I don't like it "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " I think macros should be pretty unconstrained.\n\nI'm more concerned about linearity when it spans multiple codebases. Mutual recursion within a single codebase is fine. Hopefully this shows that I don't \"totally avoid this\". But yes I think the places to avoid cycles are precisely the places where it's most difficult today."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1568054731.239500",
        "client_msg_id": "76d13c58-eeb1-458c-8be3-36edffc6bb9e",
        "text": "&gt; To me the essential dissatisfaction in this group seems to be that we should rely less on working things out in our heads and offload as much of that load to our computers as possible.\n\nI think it's a moving target.  It's not clear to me that computing can ever get totally accessible, but maybe we'll focus attention on more interesting problems.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=5Wm",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To me the essential dissatisfaction in this group seems to be that we should rely less on working things out in our heads and offload as much of that load to our computers as possible."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI think it's a moving target.  It's not clear to me that computing can ever get totally accessible, but maybe we'll focus attention on more interesting problems."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1568055100.239800",
        "client_msg_id": "8f2c36e5-43e7-48cf-b8ef-35a6497f5e08",
        "text": "<@UCUSW7WVD> When you define a language operationally through its implementation (\"a valid C program is what my C compiler accepts\"), then no language is implemented in itself. Maybe that's a good point of view to explain the problem. It immediately leads to the notion that the implementation language of X can at best be an earlier implementation of X, but not the very same language X that is being implemented.\n\nPragmatically, the Guix package manager is a nice way to arrive at the same conclusion, since it traces the build dependency tree back to a ground-zero set of binaries. The Guix community is working on reducing this set to a minimum (see [this talk](<https:\/\/av.tib.eu\/media\/42193>) for details).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "title": "Mes -- Maxwell's Equations of Software",
                "title_link": "https:\/\/av.tib.eu\/media\/42193",
                "text": "Mes aims to create an entirely source-based bootstrapping path. The target isto [have GuixSD] bootstrap from a minimal, easily inspectable binary --thatshould be readable as source-- into something close to R6RS Scheme. We will show the current state of Mes, some interesting things found on thepath so far, and Q&amp;A on `Why Scheme?' and its future.",
                "fallback": "Mes -- Maxwell's Equations of Software",
                "from_url": "https:\/\/av.tib.eu\/media\/42193",
                "service_icon": "https:\/\/av.tib.eu\/favicon.ico",
                "service_name": "av.tib.eu",
                "id": 1,
                "original_url": "https:\/\/av.tib.eu\/media\/42193"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fqKV+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " When you define a language operationally through its implementation (\"a valid C program is what my C compiler accepts\"), then no language is implemented in itself. Maybe that's a good point of view to explain the problem. It immediately leads to the notion that the implementation language of X can at best be an earlier implementation of X, but not the very same language X that is being implemented.\n\nPragmatically, the Guix package manager is a nice way to arrive at the same conclusion, since it traces the build dependency tree back to a ground-zero set of binaries. The Guix community is working on reducing this set to a minimum (see [this talk]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/av.tib.eu\/media\/42193"
                            },
                            {
                                "type": "text",
                                "text": ") for details)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1568068607.241000",
        "client_msg_id": "f62816da-77d8-43a0-80ea-c4e6cbbb55b2",
        "text": "Yeah, the tooling is what keeps me from using it, despite my unabashed love of Clojure _in theory_.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568040192.212800",
        "parent_user_id": "UM1HH60GN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v6g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, the tooling is what keeps me from using it, despite my unabashed love of Clojure "
                            },
                            {
                                "type": "text",
                                "text": "in theory",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1568069856.241200",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1568070203.000000"
        },
        "client_msg_id": "be4f964f-c845-493a-82a2-9923ca838b7f",
        "text": "It is impractical, i would go so far as to say a doomed effort, to try and convert one language to another across a wide range of languages. There are concepts in one language that don't exist in another. In my Beads language  i have physical units of measurement built in, so you can say  3 m + 3 feet + 3 inches. How would you remap that? You would have to build basically the entire arithmetic runtime of Beads in some other language.  And syntactically you can't just add suffixes in other languages, you would have to emulate it via function calls. Another feature isn't even syntactical, it is semantic, that would be impossible to express, namely the deductive nature of drawing code, where whatever state variables used, if those variables change, the runtime redraws the affected draw block without having to manually schedule a refresh. this is a huge effort saving, automatic feature, that eliminates a whole category of under- and over-refresh bugs that are so common in graphical interactive software. This is not shown in the ENBF grammar of the Beads language; it an implied feature performed by the runtime. Languages aren't just their syntax; all the modern ones come with very fancy runtimes, that do all sorts of clever things. There is zero chance that you can implement Erlang in Python; not because Erlang does some computational trick that Python cannot, rather, Erlang has a very customized runtime system that creates a stack and heap for each of the hundreds of thousands of threads you create, which makes garbage collection easy because the heap is so tiny. When you get to a problem that needs the massive thread count of Erlang\/Elixir, there is nothing else on the planet that is built that way. Only within a set of \"dumb\" languages, which have negligible runtime features can one map one language to another.  I can think of dozens of counter-examples from pairs of languages that would be a nightmare to convert. I have had to convert plenty of code in my day, and sometimes it is a challenge.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568012264.208900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mkTZZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is impractical, i would go so far as to say a doomed effort, to try and convert one language to another across a wide range of languages. There are concepts in one language that don't exist in another. In my Beads language  i have physical units of measurement built in, so you can say  3 m + 3 feet + 3 inches. How would you remap that? You would have to build basically the entire arithmetic runtime of Beads in some other language.  And syntactically you can't just add suffixes in other languages, you would have to emulate it via function calls. Another feature isn't even syntactical, it is semantic, that would be impossible to express, namely the deductive nature of drawing code, where whatever state variables used, if those variables change, the runtime redraws the affected draw block without having to manually schedule a refresh. this is a huge effort saving, automatic feature, that eliminates a whole category of under- and over-refresh bugs that are so common in graphical interactive software. This is not shown in the ENBF grammar of the Beads language; it an implied feature performed by the runtime. Languages aren't just their syntax; all the modern ones come with very fancy runtimes, that do all sorts of clever things. There is zero chance that you can implement Erlang in Python; not because Erlang does some computational trick that Python cannot, rather, Erlang has a very customized runtime system that creates a stack and heap for each of the hundreds of thousands of threads you create, which makes garbage collection easy because the heap is so tiny. When you get to a problem that needs the massive thread count of Erlang\/Elixir, there is nothing else on the planet that is built that way. Only within a set of \"dumb\" languages, which have negligible runtime features can one map one language to another.  I can think of dozens of counter-examples from pairs of languages that would be a nightmare to convert. I have had to convert plenty of code in my day, and sometimes it is a challenge."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1568076724.242200",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1568076774.000000"
        },
        "client_msg_id": "d74eb878-0865-4eee-9b2c-27cdec6c27b8",
        "text": "<@UJBAJNFLK> Well put!\n\nYour comment reminds me to link to <http:\/\/bootstrappable.org>. There's also a #bootstrappable channel on Freenode IRC if anybody's interested.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h8rJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Well put!\n\nYour comment reminds me to link to "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/bootstrappable.org"
                            },
                            {
                                "type": "text",
                                "text": ". There's also a #bootstrappable channel on Freenode IRC if anybody's interested."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1568076962.242500",
        "client_msg_id": "b51974ad-f496-4ac2-a97f-14fd8c2fad69",
        "text": "<@UM1HH60GN> I actually love the idea of Terra. I can't quite say why :slightly_smiling_face: but I guess I'm not as dogmatic as I sound. Terra is an improvement on the world we have today.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568046843.233900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JK4fr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UM1HH60GN"
                            },
                            {
                                "type": "text",
                                "text": " I actually love the idea of Terra. I can't quite say why "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " but I guess I'm not as dogmatic as I sound. Terra is an improvement on the world we have today."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]