[
    {
        "user": "U01L6HZEHFX",
        "type": "message",
        "ts": "1613378800.139200",
        "edited": {
            "user": "U01L6HZEHFX",
            "ts": "1613379035.000000"
        },
        "client_msg_id": "e292ed4d-bf95-4fa7-80f8-926d7a9085c3",
        "text": "The Database Inside Your Codebase <https:\/\/feifan.blog\/posts\/the-database-inside-your-codebase|https:\/\/feifan.blog\/posts\/the-database-inside-your-codebase>. Querying a code base like a database has been my dream for years. What are the state of the art for this? I had the idea of designing a language that can query itself for a while but nothing concrete yet.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3a9710d9a208",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-29\/1686621807717_3a9710d9a208814fffb1_72.jpg",
            "first_name": "Thanh",
            "real_name": "Thanh Dinh",
            "display_name": "Thanh Dinh",
            "team": "T5TCAFTA9",
            "name": "thanhdk",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613378800.139200",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1613420999.144600",
        "reply_users": [
            "UDQBTJ211",
            "UN9SCH5RD",
            "UJBAJNFLK",
            "U01JNTE35QS"
        ],
        "replies": [
            {
                "user": "UDQBTJ211",
                "ts": "1613382097.143600"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1613385144.143800"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1613388523.144200"
            },
            {
                "user": "U01JNTE35QS",
                "ts": "1613420999.144600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "The Blog of Feifan Zhou",
                "title": "The Database Inside Your Codebase",
                "title_link": "https:\/\/feifan.blog\/posts\/the-database-inside-your-codebase",
                "text": "Navigating codebases of any meaningful size is difficult. Most of a programmer's time is spent jumping through the codebase, reading or skimming to build a mental model of the constructs and conventions within it. These constructs — among them: the DSLs, interfaces, and taxonomy of types that exist — are arguably the most important precursor to understanding where and how to make changes. But these constructs only exist in programmers' heads. It's difficult or impossible to navigate most codebases through the lens of those constructs; programmers lack \"code browsers\" that present the underlying code independently of files and the filesystem hierarchy. Yet code browsers that can do so — and we'll look at some examples below — would be incredibly useful. This is because instances of these constructs can be thought of as records in a database, albeit an ad-hoc, poorly-specified database that can only be queried through carefully-crafted regexes.",
                "fallback": "The Blog of Feifan Zhou: The Database Inside Your Codebase",
                "image_url": "https:\/\/files.tanagram.app\/file\/tanagram-data\/prod-feifans-blog\/joshua-sortino-LqKhnDzSF-8-unsplash.jpg",
                "ts": 1613242431,
                "from_url": "https:\/\/feifan.blog\/posts\/the-database-inside-your-codebase",
                "image_width": 374,
                "image_height": 250,
                "image_bytes": 954111,
                "id": 1,
                "original_url": "https:\/\/feifan.blog\/posts\/the-database-inside-your-codebase"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DN9sN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Database Inside Your Codebase "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/feifan.blog\/posts\/the-database-inside-your-codebase",
                                "text": "https:\/\/feifan.blog\/posts\/the-database-inside-your-codebase"
                            },
                            {
                                "type": "text",
                                "text": ". Querying a code base like a database has been my dream for years. What are the state of the art for this? I had the idea of designing a language that can query itself for a while but nothing concrete yet."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U01LAJFKC2K",
                    "U01L6HZEHFX",
                    "U01KZQEQVUP",
                    "UJ6LDMMN0",
                    "U01661S9F34",
                    "UHWC9PXBL"
                ],
                "count": 6
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1613382097.143600",
        "client_msg_id": "5f53b6df-e1e4-4011-8c5d-54e2e8e99a0c",
        "text": "JetBrains IDEs tend to have very good static analysis and refactoring, not sure to what extent the model is exposed to query freely. OpenGrok also has some semantic features. Other than that I think you covered most of it in your article.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613378800.139200",
        "parent_user_id": "U01L6HZEHFX",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sHgeo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "JetBrains IDEs tend to have very good static analysis and refactoring, not sure to what extent the model is exposed to query freely. OpenGrok also has some semantic features. Other than that I think you covered most of it in your article."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1613385144.143800",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1613385153.000000"
        },
        "client_msg_id": "9168276c-daa7-485e-929f-6fdc0527ade2",
        "text": "the two products that come to mind are <https:\/\/codeql.github.com\/docs\/writing-codeql-queries\/introduction-to-ql\/|Semle's CodeQL> and <https:\/\/www.ndepend.com\/docs\/cqlinq-features#Object|NDepend's CQLinq>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613378800.139200",
        "parent_user_id": "U01L6HZEHFX",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1SgYB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the two products that come to mind are "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/codeql.github.com\/docs\/writing-codeql-queries\/introduction-to-ql\/",
                                "text": "Semle's CodeQL"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.ndepend.com\/docs\/cqlinq-features#Object",
                                "text": "NDepend's CQLinq"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1613388523.144200",
        "client_msg_id": "30d1bb9a-0275-4e8c-8f3a-5d89b2b0aed5",
        "text": "It's a built-in feature of Smalltalk systems. And <@UE1JQM9HQ>'s Glamorous Toolkit is extending this approch to other languages.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613378800.139200",
        "parent_user_id": "U01L6HZEHFX",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dJ4sH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's a built-in feature of Smalltalk systems. And "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": "'s Glamorous Toolkit is extending this approch to other languages."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U01JNTE35QS",
        "type": "message",
        "ts": "1613420999.144600",
        "client_msg_id": "b20f846a-6009-4531-b66f-4d8f08dc29b7",
        "text": "Our own platform is built on top of a reactive database model, and the builder assets are stored in the db, as is the executable (VM for now, soon to be wasm). This allows the interesting ability to build tools as apps in our builder, and also to have plugins that are themselves apps built using the builder. Furthermore the database is a git meets mongodb style multi versioned log structured thing so you can also access previous states of all entities.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "97155db555c2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-13\/1631845309525_97155db555c2091ecd20_72.jpg",
            "first_name": "",
            "real_name": "Vijay Chakravarthy",
            "display_name": "Vijay Chakravarthy",
            "team": "T5TCAFTA9",
            "name": "vchakrav",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613378800.139200",
        "parent_user_id": "U01L6HZEHFX",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DQ7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Our own platform is built on top of a reactive database model, and the builder assets are stored in the db, as is the executable (VM for now, soon to be wasm). This allows the interesting ability to build tools as apps in our builder, and also to have plugins that are themselves apps built using the builder. Furthermore the database is a git meets mongodb style multi versioned log structured thing so you can also access previous states of all entities."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1613452813.145500",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1613457321.000000"
        },
        "client_msg_id": "6325502f-57ea-4e8a-8c02-ec123ab14b0a",
        "text": "I think many programmers have the (correct) intuition that some kind of circular bootstrapping will unlock or manifest some deep or profound power, but unfortunately can't substantiate why this is. So metacircularity is either dismissed as pointless, or recognized as automatically profound and powerful, regardless whether it's leveraged in any meaningfully powerful way.\n\nThe powerful idea behind metacircularity (which often sensed but rarely realized) is that we can potentially leverage all the power of programming, to leverage all the power of programming. Software ~can be~ _is_ its own lever.\n\nBut this is not what you see in most \"metacircular\" software. It's usually more like using a robot-arm to control another identical robot-arm, versus using the arm on *itself* (e.g. to give itself new or improved capabilities). Less like a living cell, which contains (and thus \"is\") all its own apparatus for defining \/ executing \/ replicating itself; and more like a virus, which does not.\n\n(That's the link I see between \"living structure\", \"unfolding wholeness\", and what I called \"actual circular\" metacircularity).\n\nAn example of what I think this would look like, is software that is actually written (and subsequently interpreted or created from) _within_ *itself.*",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612344518.049600",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tao",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think many programmers have the (correct) intuition that some kind of circular bootstrapping will unlock or manifest some deep or profound power, but unfortunately can't substantiate why this is. So metacircularity is either dismissed as pointless, or recognized as automatically profound and powerful, regardless whether it's leveraged in any meaningfully powerful way.\n\nThe powerful idea behind metacircularity (which often sensed but rarely realized) is that we can potentially leverage all the power of programming, to leverage all the power of programming. Software "
                            },
                            {
                                "type": "text",
                                "text": "can be",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " its own lever.\n\nBut this is not what you see in most \"metacircular\" software. It's usually more like using a robot-arm to control another identical robot-arm, versus using the arm on "
                            },
                            {
                                "type": "text",
                                "text": "itself ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(e.g. to give itself new or improved capabilities). Less like a living cell, which contains (and thus \"is\") all its own apparatus for defining \/ executing \/ replicating itself; and more like a virus, which does not.\n\n(That's the link I see between \"living structure\", \"unfolding wholeness\", and what I called \"actual circular\" metacircularity).\n\nAn example of what I think this would look like, is software that is actually written (and subsequently interpreted or created from) "
                            },
                            {
                                "type": "text",
                                "text": "within",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "itself.",
                                "style": {
                                    "bold": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1613454213.146000",
        "client_msg_id": "2afe7d1a-be6c-4d72-a0a9-d3662bbf5506",
        "text": "That's _way_ out of my expertise to argue with :slightly_smiling_face: Both the bio and CA angles. Though I'd weakly claim that CA's notion of living order includes the environment, particularly people. It feels tenuous to connect it to metacircularity.\n\nIs any software metacircular by your definition? Smalltalk?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612344518.049600",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fri7q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's "
                            },
                            {
                                "type": "text",
                                "text": "way",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " out of my expertise to argue with "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " Both the bio and CA angles. Though I'd weakly claim that CA's notion of living order includes the environment, particularly people. It feels tenuous to connect it to metacircularity.\n\nIs any software metacircular by your definition? Smalltalk?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1613458436.146600",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1613461163.000000"
        },
        "client_msg_id": "caf24df6-ea7e-4819-8ac1-e51864ef03b9",
        "text": "I'd say things like SmallTalk, Forth, Lisp, Glamorous Toolkit, come the closest. The gaps are in whether it's actually _used_ that way (e.g. treating arches like bricks and building a pyramid out of them); or that it's still forced through artificial layers (like \"language\") that are taken as a given, but which are actually just one of a million possible \"interfaces\", any of which could be self-contained.\n\nMPS has the right idea, except that it provides a plethora or set-in-stone concepts, interfaces, layers, and languages for everything -- which I find highly ironic, given what is supposed to be.\n\nRacket gets an honorable mention for being the best \"make your own language, in your own language\" language; but it's very linear, and forced through the very specific paradigm of specifying, creating, etc etc, all through parsing textual language. Zero progress at escaping that, but it does it WELL.\n\nActually, Rebol \/ Red may do it better in some (but not all) respects. It's parsing util(s) treats not only the thing being parsed as a datastructure, but also the code doing the parsing! I think it's just called \"parse\", and there's a write-up about this that's google-able.\n\nThe principles of the moldable objects initiative (or whatever it's called) that <@UML4ZEKDK> is part of, are actually pretty in line with this stuff. I don't think it's prescriptive of what I'm talking about here, alright I think the goals overlap.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612344518.049600",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9QIIv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd say things like SmallTalk, Forth, Lisp, Glamorous Toolkit, come the closest. The gaps are in whether it's actually "
                            },
                            {
                                "type": "text",
                                "text": "used ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "that way (e.g. treating arches like bricks and building a pyramid out of them); or that it's still forced through artificial layers (like \"language\") that are taken as a given, but which are actually just one of a million possible \"interfaces\", any of which could be self-contained.\n\nMPS has the right idea, except that it provides a plethora or set-in-stone concepts, interfaces, layers, and languages for everything -- which I find highly ironic, given what is supposed to be.\n\nRacket gets an honorable mention for being the best \"make your own language, in your own language\" language; but it's very linear, and forced through the very specific paradigm of specifying, creating, etc etc, all through parsing textual language. Zero progress at escaping that, but it does it WELL.\n\nActually, Rebol \/ Red may do it better in some (but not all) respects. It's parsing util(s) treats not only the thing being parsed as a datastructure, but also the code doing the parsing! I think it's just called \"parse\", and there's a write-up about this that's google-able.\n\nThe principles of the moldable objects initiative (or whatever it's called) that "
                            },
                            {
                                "type": "user",
                                "user_id": "UML4ZEKDK"
                            },
                            {
                                "type": "text",
                                "text": " is part of, are actually pretty in line with this stuff. I don't think it's prescriptive of what I'm talking about here, alright I think the goals overlap."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1613462194.147400",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1613463119.000000"
        },
        "client_msg_id": "1ac940be-a79b-4906-b229-abf51e24eb42",
        "text": "I do think that \"living structure\" (Purpose) _is_ the thing one is after (consciously or not), in seeking metacircularity (Mechanism); and vice versa, that metacircularity (as I've described it) is _necessarily_ how \"living structure\" (e.g. organism, business, or software extension of human capability) is achieved or constituted.\n\nMechanism:\n\nThe living thing necessarily contains it's own code (or other self-representation -- DNA is code), interpreter(s), replication, ability to replace it's bits while preserving structure &amp; identity, and all this is self-contained, ergo the living thing \"is\" \/ \"does\" these things \/ \"has\" these capabilities.\n\nPurpose:\n\nCapable of adapting, changing, preserving, etc, in a way that dynamically keeps it fit for it's purpose or environment, evolving \/ learning all the while. Conversely, a thing that must be painstakingly redesigned and\/or thrown out once it is no longer fit (if it was even a good fit at all) for some very specific (perhaps very static) purpose it was rigorously designed for, is in essence \"dead\" at creation.\n\nEnvironment does control a metacircular software thing, because that's the whole point. A car \"that can do anything\" really means that YOU can MAKE IT do anything (for whatever \"do anything\" means). That is how it can be perfectly fit and adaptable, because it provides a means to adapt \"itself\", _including_ (by definition of being \"fully\" metacircular) those means it provides to do so.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612344518.049600",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a2Y6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do think that \"living structure\" (Purpose) "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the thing one is after (consciously or not), in seeking metacircularity (Mechanism); and vice versa, that metacircularity (as I've described it) is "
                            },
                            {
                                "type": "text",
                                "text": "necessarily ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "how \"living structure\" (e.g. organism, business, or software extension of human capability) is achieved or constituted.\n\nMechanism:\n\nThe living thing necessarily contains it's own code (or other self-representation -- DNA is code), interpreter(s), replication, ability to replace it's bits while preserving structure & identity, and all this is self-contained, ergo the living thing \"is\" \/ \"does\" these things \/ \"has\" these capabilities.\n\nPurpose:\n\nCapable of adapting, changing, preserving, etc, in a way that dynamically keeps it fit for it's purpose or environment, evolving \/ learning all the while. Conversely, a thing that must be painstakingly redesigned and\/or thrown out once it is no longer fit (if it was even a good fit at all) for some very specific (perhaps very static) purpose it was rigorously designed for, is in essence \"dead\" at creation.\n\nEnvironment does control a metacircular software thing, because that's the whole point. A car \"that can do anything\" really means that YOU can MAKE IT do anything (for whatever \"do anything\" means). That is how it can be perfectly fit and adaptable, because it provides a means to adapt \"itself\", "
                            },
                            {
                                "type": "text",
                                "text": "including",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (by definition of being \"fully\" metacircular) those means it provides to do so."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]