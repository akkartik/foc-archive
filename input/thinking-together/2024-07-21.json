[
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1721549441.347489",
        "client_msg_id": "971cb601-f944-4c90-98f2-7c29615905f7",
        "text": "<@U079M43CQ31> Reading your post,.. you know, writing down geometric and algebraic problems like this is sort of a prompt for an AI? That makes me realize why I dislike AI for coding, it's like we un-invented algebraic notation and went back to writing prose. Instead I want to go into the other direction.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf6784b7d6d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df6784b7d6d97fb67dec89320cc88a84.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Dany",
            "real_name": "Dany",
            "display_name": "Dany",
            "team": "T5TCAFTA9",
            "name": "bitteldany",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dLig6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U079M43CQ31"
                            },
                            {
                                "type": "text",
                                "text": " Reading your post,.. you know, writing down geometric and algebraic problems like this is sort of a prompt for an AI? That makes me realize why I dislike AI for coding, it's like we un-invented algebraic notation and went back to writing prose. Instead I want to go into the other direction."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U079M43CQ31",
                    "U05UK5T7LPP",
                    "U014WA16VNJ"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1721555013.669599",
        "client_msg_id": "2050d27b-78b8-4cd3-a618-1bf5df0b6a84",
        "text": "The issue of CPUs is addressed, but, maybe not with enough brutality\n\nThere’s approximately 60+ truly-asynchronous processes on the 1972 Pong schematic, but no CPU. The design employs massive parallelism and real internal asynchronousity.\n\nIn 2024, we consider 8-ish cores to be a marvel. The cores share memory, so they cannot even be truly asynchronous.\n\nThat’s some 50 years later. Something is wrong with this picture.\n\nA CPU was originally meant to be a simple sequencer circuit that was not reentrant. There is no reason to make CPU’s multi-threaded, other than co$t. In 1950, it was too expensive to own more than one CPU, so human brain-power was wasted on inventing and adding software to make CPUs multi-threaded. Today, we have access to very cheap hardware actors - Arduinos, Rasberry Pis, etc. (cheaper yet, if you discard Linux and reclaim internal chip space).\n\nN.B. “central” is a bad word these days. We probably want DPUs (distributed processing units).\n\nI previously tried to write about hardware actors in <https:\/\/guitarvydas.github.io\/2024\/02\/17\/Hardware-Actors.html>.\n\nSo, one might imagine a reprogrammable electronic machine (avoid the use of the word “compute-er”) to be a collection of 1,000s of cheap hardware actors on-a-chip, where only one of them is a big honking Linux blob for running existing bloatware and for backwards compatibility.\n\n<@UJBAJNFLK>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721246911.989019",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/guitarvydas.github.io\/2024\/02\/17\/Hardware-Actors.html",
                "ts": 1708128000,
                "id": 1,
                "original_url": "https:\/\/guitarvydas.github.io\/2024\/02\/17\/Hardware-Actors.html",
                "fallback": "Computing Simplicity: Hardware actors",
                "text": "Oops! Your browser doesn't support PDFs! Download Instead",
                "title": "Hardware actors",
                "title_link": "https:\/\/guitarvydas.github.io\/2024\/02\/17\/Hardware-Actors.html",
                "service_name": "Computing Simplicity"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Apka",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The issue of CPUs is addressed, but, maybe not with enough brutality\n\nThere’s approximately 60+ truly-asynchronous processes on the 1972 Pong schematic, but no CPU. The design employs massive parallelism and real internal asynchronousity.\n\nIn 2024, we consider 8-ish cores to be a marvel. The cores share memory, so they cannot even be truly asynchronous.\n\nThat’s some 50 years later. Something is wrong with this picture.\n\nA CPU was originally meant to be a simple sequencer circuit that was not reentrant. There is no reason to make CPU’s multi-threaded, other than co$t. In 1950, it was too expensive to own more than one CPU, so human brain-power was wasted on inventing and adding software to make CPUs multi-threaded. Today, we have access to very cheap hardware actors - Arduinos, Rasberry Pis, etc. (cheaper yet, if you discard Linux and reclaim internal chip space).\n\nN.B. “central” is a bad word these days. We probably want DPUs (distributed processing units).\n\nI previously tried to write about hardware actors in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/guitarvydas.github.io\/2024\/02\/17\/Hardware-Actors.html"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nSo, one might imagine a reprogrammable electronic machine (avoid the use of the word “compute-er”) to be a collection of 1,000s of cheap hardware actors on-a-chip, where only one of them is a big honking Linux blob for running existing bloatware and for backwards compatibility.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1721595452.158329",
        "client_msg_id": "81b51c37-3683-4b5a-bf2f-5669c6821d17",
        "text": "Love this train of thought. I like to think of visual programming as a 'superset' of textual programming.\n\n\nIn general the following roots my thinking in a broader context but beware: This definitely has im14andthisisdeep energy:\n\nPerhaps the stark divide between computation and physicality is an illusion as all computation is physical in nature, with much of it being observable- some through a representation on an interface (the 'visual' component), or some so hidden in patterns of electricity. So we might say minimizing the visio-spatial element of a computation is either compressing the representation of the code (Now you don't need semicolons!) or leaving information out (No more writing explicit types!).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9eac202d45a2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-28\/6396121022742_9eac202d45a2827e9fa6_72.jpg",
            "first_name": "Dennis",
            "real_name": "Dennis Hansen",
            "display_name": "Dennis Hansen",
            "team": "T5TCAFTA9",
            "name": "dhansen909",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ybrs9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Love this train of thought. I like to think of visual programming as a 'superset' of textual programming.\n\n\nIn general the following roots my thinking in a broader context but beware: This definitely has im14andthisisdeep energy:\n\nPerhaps the stark divide between computation and physicality is an illusion as all computation is physical in nature, with much of it being observable- some through a representation on an interface (the 'visual' component), or some so hidden in patterns of electricity. So we might say minimizing the visio-spatial element of a computation is either compressing the representation of the code (Now you don't need semicolons!) or leaving information out (No more writing explicit types!)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U079M43CQ31"
                ],
                "count": 1
            }
        ]
    }
]