[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1733735455.939969",
        "client_msg_id": "24087fdd-e3ff-4f04-85a6-bbb0879ff049",
        "text": "I've implemented a rough-in of a VHLL (Very High Level Language) and used it to write a non-trivial program (a mutual multi-tasking kernel that does message passing, about 1,400 LOC). It generates Python, Common Lisp and Javascript (node.js) code, essentially using existing languages as assemblers. This uses a variety of techniques, including a DPL (diagrammatic programming language), t2t (text-to-text transpilation) and a jury-rigged REPL programming language workbench. Several mundane gotchas were wrestled down. Now, I'm wondering what direction to take this next. My thought is that this needs to run in a browser (Javascript, WASM?), but that exceeds my limited knowledge and will require going down new learning curves. Maybe I'm thinking too much inside-the-box? Comments (and help) appreciated. FWIW more detail: <https:\/\/programmingsimplicity.substack.com\/p\/rt-now-what?r=1egdky> which further references <https:\/\/programmingsimplicity.substack.com\/p\/rt-transpiler?r=1egdky>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1733735455.939969",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1733917680.136089",
        "reply_users": [
            "U02E4DAQGSZ",
            "UGWUJUZHT"
        ],
        "replies": [
            {
                "user": "U02E4DAQGSZ",
                "ts": "1733774193.777179"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1733843259.333559"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1733917680.136089"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MeSUR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've implemented a rough-in of a VHLL (Very High Level Language) and used it to write a non-trivial program (a mutual multi-tasking kernel that does message passing, about 1,400 LOC). It generates Python, Common Lisp and Javascript (node.js) code, essentially using existing languages as assemblers. This uses a variety of techniques, including a DPL (diagrammatic programming language), t2t (text-to-text transpilation) and a jury-rigged REPL programming language workbench. Several mundane gotchas were wrestled down. Now, I'm wondering what direction to take this next. My thought is that this needs to run in a browser (Javascript, WASM?), but that exceeds my limited knowledge and will require going down new learning curves. Maybe I'm thinking too much inside-the-box? Comments (and help) appreciated. FWIW more detail: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/programmingsimplicity.substack.com\/p\/rt-now-what?r=1egdky"
                            },
                            {
                                "type": "text",
                                "text": " which further references "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/programmingsimplicity.substack.com\/p\/rt-transpiler?r=1egdky"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1733774193.777179",
        "client_msg_id": "4fdbd6a5-ed5b-40b4-b3a6-fe7798cd9ccc",
        "text": "I used to use <https:\/\/haxe.org\/> and quite liked it and thought it might be useful for places where you need to maintain business logic in multiple places, e.g. web app + mobile app. There is still quite a frustrating part where you have to normalize external connections e.g. UI as no cross language thing can really do that. Haxe was a compelling type system and existed before Typescript. I think thats what motivated me, so I would like to understand more on what the language RT actually looks like.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1733735455.939969",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kgbnp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I used to use "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/haxe.org\/"
                            },
                            {
                                "type": "text",
                                "text": " and quite liked it and thought it might be useful for places where you need to maintain business logic in multiple places, e.g. web app + mobile app. There is still quite a frustrating part where you have to normalize external connections e.g. UI as no cross language thing can really do that. Haxe was a compelling type system and existed before Typescript. I think thats what motivated me, so I would like to understand more on what the language RT actually looks like."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Miniscule progress on an alternative notebook renderer that hacks the observable runtime to capture all the values. Behold, \"foo\" is rendered in two places! One of those places is a giant cells containing every other cell in the notebook.... that is what visualizer will be. A cell that renders the whole. So then the outer HTML frame will not actually provide any DOM nodes for the runtime to render into externally, the engine will start and visualizer will dynamically create DOM nodes to render the rest from the inside. An inversion, much more hackable that way.",
        "files": [
            {
                "id": "F0850BEDVAL",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U02E4DAQGSZ",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L34M3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Miniscule progress on an alternative notebook renderer that hacks the observable runtime to capture all the values. Behold, \"foo\" is rendered in two places! One of those places is a giant cells containing every other cell in the notebook.... that is what visualizer will be. A cell that renders the whole. So then the outer HTML frame will not actually provide any DOM nodes for the runtime to render into externally, the engine will start and visualizer will dynamically create DOM nodes to render the rest from the inside. An inversion, much more hackable that way."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1733774745.921929",
        "client_msg_id": "433ee22c-2c42-48b9-93a5-81d19a2ba6a9",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    }
]