[
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1563013870.229000",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1563081897.000000"
        },
        "client_msg_id": "35b61cf6-7062-4f33-b1d9-4c4338917248",
        "text": "Has anyone seen examples of languages that *only* use named parameters (a.k.a. keyword args, as opposed to positional parameters) and also support first-class functions? Looks like these features become messy when combined since now your type signatures ask for e.g. \"a function named f with parameters x and y\",  whereas the function named g that you intend to pass as an argument has parameters a and b, so then you have to make a wrapper function around it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "reply_count": 26,
        "reply_users_count": 9,
        "latest_reply": "1563729655.055400",
        "reply_users": [
            "UJG7QQQJW",
            "UJBAJNFLK",
            "UDKTZSD6H",
            "U8A5MS6R1",
            "UA14TGLTC",
            "UCGAK10LS",
            "U79HM6726",
            "UJNJQD2AC",
            "UKQT95T1V"
        ],
        "replies": [
            {
                "user": "UJG7QQQJW",
                "ts": "1563019625.233100"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1563021358.234500"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1563030267.235100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1563032405.235900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1563032794.236100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1563040733.236600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1563080039.251800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1563081740.252400"
            },
            {
                "user": "U79HM6726",
                "ts": "1563089712.256500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1563098012.256800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1563101098.257000"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1563102704.258700"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1563102727.259200"
            },
            {
                "user": "U79HM6726",
                "ts": "1563105356.259600"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1563140544.273900"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1563141326.274100"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1563141630.274400"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1563141781.274600"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1563141843.274800"
            },
            {
                "user": "U79HM6726",
                "ts": "1563172102.279500"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1563192586.281400"
            },
            {
                "user": "U79HM6726",
                "ts": "1563192781.281800"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1563193281.282000"
            },
            {
                "user": "U79HM6726",
                "ts": "1563193308.282200"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1563193690.282400"
            },
            {
                "user": "UKQT95T1V",
                "ts": "1563729655.055400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fPKf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone seen examples of languages that "
                            },
                            {
                                "type": "text",
                                "text": "only",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " use named parameters (a.k.a. keyword args, as opposed to positional parameters) and also support first-class functions? Looks like these features become messy when combined since now your type signatures ask for e.g. \"a function named f with parameters x and y\",  whereas the function named g that you intend to pass as an argument has parameters a and b, so then you have to make a wrapper function around it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U79HM6726"
                ],
                "count": 2
            },
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1563013937.230200",
        "client_msg_id": "218676ce-7666-4ad8-adc6-5761fbeacd64",
        "text": "I'm basically wondering if there's a clean approach to \"wiring\" arguments to parameters when everything is named but the names may not always be the same",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZzW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm basically wondering if there's a clean approach to \"wiring\" arguments to parameters when everything is named but the names may not always be the same"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1563014045.231600",
        "client_msg_id": "67ae82c9-5fee-413d-834d-7e4e36928a44",
        "text": "Seems like an interesting problem",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N7kKC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seems like an interesting problem"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1563014364.232900",
        "client_msg_id": "e5d44ca4-1ef5-4536-b374-b6f59633f39b",
        "text": "I can imagine with editor support the wiring can be type-directed (in a statically typed language), but that doesn't seem like a complete solution",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563014364.232900",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1563059524.251400",
        "reply_users": [
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1563059524.251400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ToB2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can imagine with editor support the wiring can be type-directed (in a statically typed language), but that doesn't seem like a complete solution"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJG7QQQJW",
        "type": "message",
        "ts": "1563019625.233100",
        "client_msg_id": "51588b4a-c8c7-4c9d-b500-267e94c175c7",
        "text": "Interesting question. I was thinking that only named parameters might be a good idea, but it never occurred to me that this problem would pop up.\nMaybe pattern matching on types, and all passed types must be different (e.g. via newtypes)?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6028a1c7a821",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-19\/639818983280_6028a1c7a82161b81120_72.jpg",
            "first_name": "Adrian",
            "real_name": "Adrian Sieber",
            "display_name": "Adrian Sieber",
            "team": "T5TCAFTA9",
            "name": "futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YuY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting question. I was thinking that only named parameters might be a good idea, but it never occurred to me that this problem would pop up.\nMaybe pattern matching on types, and all passed types must be different (e.g. via newtypes)?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1563021358.234500",
        "client_msg_id": "E827EE3B-754D-494A-8559-DC88A1C5B632",
        "text": "There’s a reason why naming is often called one of the hard problems in programming!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CL2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There’s a reason why naming is often called one of the hard problems in programming!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "U8A5MS6R1",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "disappointed_relieved",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1563030267.235100",
        "client_msg_id": "27a8ccd8-3745-4b3c-8919-edff29c4e5a4",
        "text": "Yes, Piccola: <http:\/\/scg.unibe.ch\/archive\/papers\/Ache01bPASCL.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y2R=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, Piccola: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/scg.unibe.ch\/archive\/papers\/Ache01bPASCL.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1563030663.235400",
        "client_msg_id": "b94fb3cf-dbd5-41bb-a455-1a9c105984cb",
        "text": "Jeez, that was dense.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562954574.220600",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2D3PV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Jeez, that was dense."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1563031461.235600",
        "client_msg_id": "27d34409-a61a-4987-8ab5-42b5029de7f2",
        "text": "Oh, just realized why Activity Theory sounded familiar: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1559459872064600>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562954574.220600",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1559459872064600",
                "fallback": "[June 2nd, 2019 12:17 AM] ak: The recent discussion of Bonnie Nardi's _\"A small matter of programming\"_[1] got me to take it off my bookshelf and reread it. Here are some notes from my reading, in case anybody's interested. Particularly <@U6KQ2S410> who asked for a summary.\n\n<http:\/\/akkartik.name\/post\/nardi>\n\n[1] <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1559061487146900>",
                "ts": "1559459872.064600",
                "author_id": "UCUSW7WVD",
                "author_subname": "Kartik Agaram",
                "channel_id": "C5T9GPWFL",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "The recent discussion of Bonnie Nardi's _\"A small matter of programming\"_[1] got me to take it off my bookshelf and reread it. Here are some notes from my reading, in case anybody's interested. Particularly <@U6KQ2S410> who asked for a summary.\n\n<http:\/\/akkartik.name\/post\/nardi>\n\n[1] <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1559061487146900>",
                "author_name": "Kartik Agaram",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UCUSW7WVD",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2018-09-14\/435669206004_3ed0e6ac6eafe8bcf338_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1559459872064600",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4qst3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, just realized why Activity Theory sounded familiar: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1559459872064600"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1563032405.235900",
        "client_msg_id": "a6629a8d-986a-4643-805e-4349e4916295",
        "text": "Smalltalk!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qG\/59",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Smalltalk!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1563032794.236100",
        "client_msg_id": "db926e7b-725f-4611-96de-6bfb12630709",
        "text": "Arguably it doesn't have functions so not what you're looking for.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KHshv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Arguably it doesn't have functions so not what you're looking for."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1563040733.236600",
        "client_msg_id": "29f6c6d9-556f-4d8c-8995-8659d28ef525",
        "text": "Yes, about Smalltalk, you can think of methods as having named parameters or as selectors just:being:names:with:colons:in:them: using positional parameters.  Ultimately anytime you have more than one positional parameter, plumbing is going to become an issue.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EcV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, about Smalltalk, you can think of methods as having named parameters or as selectors just"
                            },
                            {
                                "type": "emoji",
                                "name": "being"
                            },
                            {
                                "type": "text",
                                "text": "names"
                            },
                            {
                                "type": "emoji",
                                "name": "with"
                            },
                            {
                                "type": "text",
                                "text": "colons"
                            },
                            {
                                "type": "emoji",
                                "name": "in"
                            },
                            {
                                "type": "text",
                                "text": "them: using positional parameters.  Ultimately anytime you have more than one positional parameter, plumbing is going to become an issue."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1563041751.249000",
        "client_msg_id": "7cba6ed8-6e7e-4cc8-867e-d05ada43224c",
        "text": "You can't escape wiring as a thing that needs doing.  After trying a bunch of approaches here and there, the ultimate best I can imagine is something in the spirit of type-directed explicit disambiguation.  So when you first write code, you tell the system, \"here's an X, here's a Y, let's combine them.\"  It shows the ways to do so.  Then you pick a specific one.  (See also inheritance.)  Dynamic lookup rules will at times be right and at times be wrong and usually be confusing.  Consider the following.  This was Java (don't know if they've changed it since), which dispatches based on the type of the variables used, not on their values:\n\n```\nclass StaticOverloadingMightSurpriseYou {\n    void overloaded(Object o) { System.out.println(\"as understood as an object\"); }\n    void overloaded(String s) { System.out.println(\"as understood as a string\"); }\n    public static void main(String[] args) {\n        String hello = \"hello, world\";\n        Object world = hello;\n        overloaded(hello); \/\/ prints \"as understood as an object\"\n        overloaded(world); \/\/ prints \"as understood as a string\"\n    }\n}\n```\n\nOf course if `overloaded` is a method in two classes, the dispatch would be based on the value.  So, as a rule, `x.m(y)` may work differently than a superficially equivalent `m_(x, y)` or `y.m__(x)`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bCA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can't escape wiring as a thing that needs doing.  After trying a bunch of approaches here and there, the ultimate best I can imagine is something in the spirit of type-directed explicit disambiguation.  So when you first write code, you tell the system, \"here's an X, here's a Y, let's combine them.\"  It shows the ways to do so.  Then you pick a specific one.  (See also inheritance.)  Dynamic lookup rules will at times be right and at times be wrong and usually be confusing.  Consider the following.  This was Java (don't know if they've changed it since), which dispatches based on the type of the variables used, not on their values:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "class StaticOverloadingMightSurpriseYou {\n    void overloaded(Object o) { System.out.println(\"as understood as an object\"); }\n    void overloaded(String s) { System.out.println(\"as understood as a string\"); }\n    public static void main(String[] args) {\n        String hello = \"hello, world\";\n        Object world = hello;\n        overloaded(hello); \/\/ prints \"as understood as an object\"\n        overloaded(world); \/\/ prints \"as understood as a string\"\n    }\n}\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nOf course if "
                            },
                            {
                                "type": "text",
                                "text": "overloaded",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a method in two classes, the dispatch would be based on the value.  So, as a rule, "
                            },
                            {
                                "type": "text",
                                "text": "x.m(y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " may work differently than a superficially equivalent "
                            },
                            {
                                "type": "text",
                                "text": "m_(x, y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "y.m__(x)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1563041942.251300",
        "client_msg_id": "2534febd-91a8-44bb-a3af-7e179cbdd0c6",
        "text": "As extra credit, I'd love to see an interactive editor which remembers how you went about disambiguating calls so as to warn you when the assumptions that lead to a choice change.  For example, if you chose to use X and Y together in some way and the list of things you can do with an X and Y changes, then you might want to select a different choice.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563041942.251300",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1563082012.252700",
        "reply_users": [
            "UCGAK10LS"
        ],
        "replies": [
            {
                "user": "UCGAK10LS",
                "ts": "1563082012.252700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BDG6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As extra credit, I'd love to see an interactive editor which remembers how you went about disambiguating calls so as to warn you when the assumptions that lead to a choice change.  For example, if you chose to use X and Y together in some way and the list of things you can do with an X and Y changes, then you might want to select a different choice."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UDJ2TKB99"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1563059524.251400",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1563061376.000000"
        },
        "client_msg_id": "6644729e-2236-413a-9b06-42c2884ee692",
        "text": "This gels with my recent noodling that we are perhaps not using the type systems we have as well as we could be: <https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1562181908185100?thread_ts=1562010026.133300&amp;cid=C5U3SEW6A>. A function taking an int and a string often can\/should be reframed to take a `PrimaryKey` and `Guid`, and so on.\n\nIf this is true then maybe we can often disambiguate how arguments map to formal parameters based purely on type. The obvious examples where this breaks down are low level functions for say comparing two strings. In those cases if an operation is commutative then the mapping didn't matter. If it isn't commutative then we must fall back to ordered args. But maybe that shouldn't be the default. Positional arguments are the default only because that's easiest to implement.\n\nCan anyone think of an example of a fairly platonic, low-level operation that needs to take more than two args where one is of a different type than the others? Then it would be harder to decide whether to switch to positional args or not. Ah, here's one:\n\n```\nbool is-substring?(string big, string small, int start)\n```\n\nI'm not sure what to do here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563014364.232900",
        "parent_user_id": "UCGAK10LS",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1562181908185100?thread_ts=1562010026.133300&amp;cid=C5U3SEW6A",
                "fallback": "[July 3rd, 2019 12:25 PM] ak: <@U8A5MS6R1> I like your categories better than 'nominal' and 'structural', which constantly slide past my brain.\n\nArguably your requirement is met even by Java, using interfaces. Perhaps interfaces are just under-used? Part of the problem is that they make it too easy to exit them because their methods often operate on memory layout types. What if we required types within interfaces to only be other interfaces? Is this a well-known 'design pattern' or something? It isn't quite a Facade. <http:\/\/wiki.c2.com\/?CategoryStructuralPatterns>",
                "ts": "1562181908.185100",
                "author_id": "UCUSW7WVD",
                "author_subname": "Kartik Agaram",
                "channel_id": "C5U3SEW6A",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "<@U8A5MS6R1> I like your categories better than 'nominal' and 'structural', which constantly slide past my brain.\n\nArguably your requirement is met even by Java, using interfaces. Perhaps interfaces are just under-used? Part of the problem is that they make it too easy to exit them because their methods often operate on memory layout types. What if we required types within interfaces to only be other interfaces? Is this a well-known 'design pattern' or something? It isn't quite a Facade. <http:\/\/wiki.c2.com\/?CategoryStructuralPatterns>",
                "author_name": "Kartik Agaram",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UCUSW7WVD",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2018-09-14\/435669206004_3ed0e6ac6eafe8bcf338_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1562181908185100?thread_ts=1562010026.133300&amp;cid=C5U3SEW6A",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gyL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This gels with my recent noodling that we are perhaps not using the type systems we have as well as we could be: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1562181908185100?thread_ts=1562010026.133300&amp;cid=C5U3SEW6A",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1562181908185100?thread_ts=1562010026.133300&cid=C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": ". A function taking an int and a string often can\/should be reframed to take a "
                            },
                            {
                                "type": "text",
                                "text": "PrimaryKey",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "Guid",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and so on.\n\nIf this is true then maybe we can often disambiguate how arguments map to formal parameters based purely on type. The obvious examples where this breaks down are low level functions for say comparing two strings. In those cases if an operation is commutative then the mapping didn't matter. If it isn't commutative then we must fall back to ordered args. But maybe that shouldn't be the default. Positional arguments are the default only because that's easiest to implement.\n\nCan anyone think of an example of a fairly platonic, low-level operation that needs to take more than two args where one is of a different type than the others? Then it would be harder to decide whether to switch to positional args or not. Ah, here's one:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "bool is-substring?(string big, string small, int start)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI'm not sure what to do here."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1563080039.251800",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1563080052.000000"
        },
        "client_msg_id": "9091e550-bf32-46b8-ab26-4449f9ac42b9",
        "text": "<@UDKTZSD6H> Are you able to point me more precisely to what you're referring to? From a quick browse of the paper it appears Piccola *functions* use positional parameters.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wA4L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDKTZSD6H"
                            },
                            {
                                "type": "text",
                                "text": " Are you able to point me more precisely to what you're referring to? From a quick browse of the paper it appears Piccola "
                            },
                            {
                                "type": "text",
                                "text": "functions",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " use positional parameters."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1563081740.252400",
        "client_msg_id": "c33f2b9d-1273-439c-bc13-50e580409998",
        "text": "<@UJG7QQQJW> that's one possible approach, but I think it would still force you to do the same amount of wiring since you'll probably have to newtype things for each instance where you'd otherwise use a wrapper function.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hb0Vq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJG7QQQJW"
                            },
                            {
                                "type": "text",
                                "text": " that's one possible approach, but I think it would still force you to do the same amount of wiring since you'll probably have to newtype things for each instance where you'd otherwise use a wrapper function."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1563082012.252700",
        "client_msg_id": "97769902-4fed-4829-b19e-33fea8d20f51",
        "text": "Yeah there's a lot of potential for that kind of automatic support for a language that benefits from it. Something you could never do with a text editor!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563041942.251300",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g8=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah there's a lot of potential for that kind of automatic support for a language that benefits from it. Something you could never do with a text editor!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]