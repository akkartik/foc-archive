[
    {
        "user": "U05TJD2V4P2",
        "type": "message",
        "ts": "1710174261.066199",
        "client_msg_id": "c7d34aa0-fce4-4c7d-9cf9-1d0083ec8c57",
        "text": "I loved using Cuttle, made by a few people in here, but it’s 2D. It only took like 30 minutes for me to make clean parametrized drawings with zero prior experience.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c62c43b01fd5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5926088433521_c62c43b01fd5b63ec214_72.jpg",
            "first_name": "Jacob",
            "real_name": "Jacob Zimmerman",
            "display_name": "Jacob Zimmerman",
            "team": "T5TCAFTA9",
            "name": "jacob.zimmerman135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709874560.556809",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vwu\/Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I loved using Cuttle, made by a few people in here, but it’s 2D. It only took like 30 minutes for me to make clean parametrized drawings with zero prior experience."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U067XHT91HV",
        "type": "message",
        "ts": "1710187472.193219",
        "edited": {
            "user": "U067XHT91HV",
            "ts": "1710187537.000000"
        },
        "client_msg_id": "ab6c0365-63c1-488a-8518-1caebdf49585",
        "text": "Hmm, is this new? Framing\/phrasing may, points are the old ones? Otherwise, there's <@UJFN50C00>'s personal notes, great he already liked these above. Then there's the old abandoned\/lost wiki for discussing Kay where the main guy locked everybody else out, taking it into a silo (Notion, then too behind a login wall). I started a little bit of some wiki-ish commentary on Kay videos of my own, Yoshiki Ohshima being so kind to contribute his list too under a libre-free license (but not taking comments\/discussion, because obviously lots of people will have lots of opinions, including me and all of us). Also put on Weco if I remember correctly. And there's now this Reddit thread and this one in Slack. I'm wondering, no interest in systematic study? To maybe do some practical projects?\n\nLike, \"future of coding\", would you people say the computer revolution has at this point already happened, or not? If not, what is it and how to get there? Everybody going in their own directions and having some answers, maybe getting there by random chance eventually, or simply by waiting? If people say they're working on it, cool, then one can wait till the result\/solution is made available.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "488abf9ee399",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-02\/6284140728162_488abf9ee399f7e43d8b_72.png",
            "first_name": "Stephan",
            "real_name": "Stephan Kreutzer",
            "display_name": "skreutzer",
            "team": "T5TCAFTA9",
            "name": "stephankreutzer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709732691.993869",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F9r50",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, is this new? Framing\/phrasing may, points are the old ones? Otherwise, there's "
                            },
                            {
                                "type": "user",
                                "user_id": "UJFN50C00"
                            },
                            {
                                "type": "text",
                                "text": "'s personal notes, great he already liked these above. Then there's the old abandoned\/lost wiki for discussing Kay where the main guy locked everybody else out, taking it into a silo (Notion, then too behind a login wall). I started a little bit of some wiki-ish commentary on Kay videos of my own, Yoshiki Ohshima being so kind to contribute his list too under a libre-free license (but not taking comments\/discussion, because obviously lots of people will have lots of opinions, including me and all of us). Also put on Weco if I remember correctly. And there's now this Reddit thread and this one in Slack. I'm wondering, no interest in systematic study? To maybe do some practical projects?\n\nLike, \"future of coding\", would you people say the computer revolution has at this point already happened, or not? If not, what is it and how to get there? Everybody going in their own directions and having some answers, maybe getting there by random chance eventually, or simply by waiting? If people say they're working on it, cool, then one can wait till the result\/solution is made available."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "wave",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U067XHT91HV",
        "type": "message",
        "ts": "1710188268.323319",
        "edited": {
            "user": "U067XHT91HV",
            "ts": "1710190985.000000"
        },
        "client_msg_id": "9bbecd4c-c57d-48ba-a743-2d28d26fc66e",
        "text": "Hmm, Slack not supporting replies and going for flat lists? Fine, then be it so. A few points re: <https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1709909385363469?thread_ts=1709732691.993869&cid=C5U3SEW6A>, don't worry I'll be brief :slightly_smiling_face:\n\nI didn't look too much into STEPS (because...why? how?), but my impression is that they \"attacked\" the various parts separately, which makes sense (for size\/scope, research results), but left out integrating the parts into a system. Too, various parts may have been only half-completed, maybe rushed to produce results or make progress with the burn rate eating up the funding. Could be that results were not prepared or really made to be shared with the public, but to present or sell or continue, not with\/for the public.\n\nThe graphics renderer may not be that interesting - like, we have lots of graphics for a long time, amazing graphics. Per the mainstream model of pushing lots of polygons from scene composition, highly optimized floating-point calculations, shaders and what not into graphics card memory. That there's a DSL, OK, maybe more of an interface benefit. But using a different model of transformers or something, that may be nice, *except* it's for the goal of using less code (regular people may not need\/care that much about it?) and it may not provide more\/faster graphics. So I wonder, wouldn't some regular rendering, canvas\/graphics do as well? Why\/how is the STEPS one better, other than less LOC? Doing some image post-rendering\/optimization from geometry, instead of redrawing everything for the frame rate, using system\/context knowledge? Not sure if other graphics do\/try that too, or if that's even significant\/noticeable\/worth-it in performance. Now people doing \"AI\" post-render (specifically ignoring\/predicting structure).\n\nThere's a thing with some of the Kay people, subsequently Ingalls, etc.: there's a big focus on graphics, GUI, runtime images, these sorts of things. Personal desktop, and so on. Like Andreas Kling with SerenityOS, so you can do a windowing framework, all in graphics programming, but that's primarily the desktop manager only. (KDE, Gnome, GTK, X11, AWT\/Swing, Win32\/MFC\/WinForms\/WPF, whichever). Wayland. Does not need to boot\/run natively operating a CPU, memory management, device drivers, these being the main task\/purpose for an OS. There can be potentials in doing better GUI\/controls, but what do these people want\/need to use it for? In comparison to the GUIs\/frameworks that get made for games (often each coming with their own, custom)? With the challenge that can't get system\/OS support against Windows\/Apple or get into a distro, or on the WWW it's either only the browser or per-server\/server-side, and then people don't install a Smalltalk OS natively nor extra apps. OK, maybe could make a window toolkit to put it into various apps (to not reinvent, but then, every graphics guy wants to reinvent another different, personal one). At the same time, how much effort goes into say, the OO or programming part?\n\nThe \"technology\" cargo cult - highly promoted by productization, fetishisation (Apple), which is for the appearance of \"technology\" but only selling locked-down passive consumer goods, not educating or providing access to the actual tech. So people are clueless about the tech, and have a hard time to learn about it. Too, the Robert C. Martin thing of number of developers doubling every 5 years since inception (till peak), means less than 50% have more than 5 years of experience, and all the teachers are busy or retired. So ofc it's not popular even among \"programmers\" (who only use a lang, as a mere tool) to know or learn much about Alan's points, systems, architecture, paradigms. And why would one? May not be in their job description nor help to profit (potentially to the contrary).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "488abf9ee399",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-02\/6284140728162_488abf9ee399f7e43d8b_72.png",
            "first_name": "Stephan",
            "real_name": "Stephan Kreutzer",
            "display_name": "skreutzer",
            "team": "T5TCAFTA9",
            "name": "stephankreutzer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709732691.993869",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "785p4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, Slack not supporting replies and going for flat lists? Fine, then be it so. A few points re: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1709909385363469?thread_ts=1709732691.993869&cid=C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": ", don't worry I'll be brief "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI didn't look too much into STEPS (because...why? how?), but my impression is that they \"attacked\" the various parts separately, which makes sense (for size\/scope, research results), but left out integrating the parts into a system. Too, various parts may have been only half-completed, maybe rushed to produce results or make progress with the burn rate eating up the funding. Could be that results were not prepared or really made to be shared with the public, but to present or sell or continue, not with\/for the public.\n\nThe graphics renderer may not be that interesting - like, we have lots of graphics for a long time, amazing graphics. Per the mainstream model of pushing lots of polygons from scene composition, highly optimized floating-point calculations, shaders and what not into graphics card memory. That there's a DSL, OK, maybe more of an interface benefit. But using a different model of transformers or something, that may be nice, "
                            },
                            {
                                "type": "text",
                                "text": "except",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it's for the goal of using less code (regular people may not need\/care that much about it?) and it may not provide more\/faster graphics. So I wonder, wouldn't some regular rendering, canvas\/graphics do as well? Why\/how is the STEPS one better, other than less LOC? Doing some image post-rendering\/optimization from geometry, instead of redrawing everything for the frame rate, using system\/context knowledge? Not sure if other graphics do\/try that too, or if that's even significant\/noticeable\/worth-it in performance. Now people doing \"AI\" post-render (specifically ignoring\/predicting structure).\n\nThere's a thing with some of the Kay people, subsequently Ingalls, etc.: there's a big focus on graphics, GUI, runtime images, these sorts of things. Personal desktop, and so on. Like Andreas Kling with SerenityOS, so you can do a windowing framework, all in graphics programming, but that's primarily the desktop manager only. (KDE, Gnome, GTK, X11, AWT\/Swing, Win32\/MFC\/WinForms\/WPF, whichever). Wayland. Does not need to boot\/run natively operating a CPU, memory management, device drivers, these being the main task\/purpose for an OS. There can be potentials in doing better GUI\/controls, but what do these people want\/need to use it for? In comparison to the GUIs\/frameworks that get made for games (often each coming with their own, custom)? With the challenge that can't get system\/OS support against Windows\/Apple or get into a distro, or on the WWW it's either only the browser or per-server\/server-side, and then people don't install a Smalltalk OS natively nor extra apps. OK, maybe could make a window toolkit to put it into various apps (to not reinvent, but then, every graphics guy wants to reinvent another different, personal one). At the same time, how much effort goes into say, the OO or programming part?\n\nThe \"technology\" cargo cult - highly promoted by productization, fetishisation (Apple), which is for the appearance of \"technology\" but only selling locked-down passive consumer goods, not educating or providing access to the actual tech. So people are clueless about the tech, and have a hard time to learn about it. Too, the Robert C. Martin thing of number of developers doubling every 5 years since inception (till peak), means less than 50% have more than 5 years of experience, and all the teachers are busy or retired. So ofc it's not popular even among \"programmers\" (who only use a lang, as a mere tool) to know or learn much about Alan's points, systems, architecture, paradigms. And why would one? May not be in their job description nor help to profit (potentially to the contrary)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U067XHT91HV",
        "type": "message",
        "ts": "1710191557.628949",
        "client_msg_id": "1eb84c0a-31de-4e9d-bff0-6f02b19c05e5",
        "text": "<https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1709993457030099?thread_ts=1709732691.993869&amp;cid=C5U3SEW6A> seems to be curious-reader's view, that some money need to be spent. It goes for the salaries\/expenses of these developers, to buy\/complete whatever they were doing (which may remain somewhat unknown, or of questionable use\/benefit, or it's great). OK, there's of course options, like: saving the money to then buy this person's time, or crowdfund to collect the sum together, or one could spend his own time and make a similar new thing, or as there's lots of programmers around, could make such a thing (or study the existing code to complete it). I wonder what the rationale and benefit is to spending the money\/time? To me sounds like: not spending my own\/time money, but insistent that someone else's money should be spent, to get this thing completed (if ever, which is another question - in what state it's left\/in, cost vs. benefit\/gain). Same question for lots of other code and projects, of which there's a whole lot. Programmers seem to highly prefer writing new (their own new!) code than looking at or investing into anyone else's.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "488abf9ee399",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-02\/6284140728162_488abf9ee399f7e43d8b_72.png",
            "first_name": "Stephan",
            "real_name": "Stephan Kreutzer",
            "display_name": "skreutzer",
            "team": "T5TCAFTA9",
            "name": "stephankreutzer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709732691.993869",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/lvDA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1709993457030099?thread_ts=1709732691.993869&cid=C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": " seems to be curious-reader's view, that some money need to be spent. It goes for the salaries\/expenses of these developers, to buy\/complete whatever they were doing (which may remain somewhat unknown, or of questionable use\/benefit, or it's great). OK, there's of course options, like: saving the money to then buy this person's time, or crowdfund to collect the sum together, or one could spend his own time and make a similar new thing, or as there's lots of programmers around, could make such a thing (or study the existing code to complete it). I wonder what the rationale and benefit is to spending the money\/time? To me sounds like: not spending my own\/time money, but insistent that someone else's money should be spent, to get this thing completed (if ever, which is another question - in what state it's left\/in, cost vs. benefit\/gain). Same question for lots of other code and projects, of which there's a whole lot. Programmers seem to highly prefer writing new (their own new!) code than looking at or investing into anyone else's."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U067XHT91HV",
        "type": "message",
        "ts": "1710191869.862119",
        "client_msg_id": "83dfc9e3-7b02-48a9-a0c1-957d5e8cdfb5",
        "text": "<https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1710001649220709?thread_ts=1709732691.993869&amp;cid=C5U3SEW6A> Kay's message being: without money\/funding, the research can't\/won't be done. They stopped doing\/continuing when the money ran out. People don't start the work\/research if not paid. Means, there's nothing to do or some chance or benefit until some money drops, and when it's all spent\/burnt and ran out, you drop the research again, scrap\/abandon the results, and maybe look for the next \"investor\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "488abf9ee399",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-02\/6284140728162_488abf9ee399f7e43d8b_72.png",
            "first_name": "Stephan",
            "real_name": "Stephan Kreutzer",
            "display_name": "skreutzer",
            "team": "T5TCAFTA9",
            "name": "stephankreutzer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709732691.993869",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sNF8Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1710001649220709?thread_ts=1709732691.993869&cid=C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": " Kay's message being: without money\/funding, the research can't\/won't be done. They stopped doing\/continuing when the money ran out. People don't start the work\/research if not paid. Means, there's nothing to do or some chance or benefit until some money drops, and when it's all spent\/burnt and ran out, you drop the research again, scrap\/abandon the results, and maybe look for the next \"investor\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U067XHT91HV",
        "type": "message",
        "ts": "1710192152.878729",
        "client_msg_id": "632a2491-3efa-4ff3-8371-d58b4ed3d4ab",
        "text": "<https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1710103708401079?thread_ts=1709732691.993869&amp;cid=C5U3SEW6A> Yes, this means, if you don't have or can't get a lot of money, what are you guys here even doing? \"Future of coding\"? Best of luck! See you in the better future, once there's some new big funding again?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "488abf9ee399",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-02\/6284140728162_488abf9ee399f7e43d8b_72.png",
            "first_name": "Stephan",
            "real_name": "Stephan Kreutzer",
            "display_name": "skreutzer",
            "team": "T5TCAFTA9",
            "name": "stephankreutzer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709732691.993869",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QCu6R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1710103708401079?thread_ts=1709732691.993869&cid=C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": " Yes, this means, if you don't have or can't get a lot of money, what are you guys here even doing? \"Future of coding\"? Best of luck! See you in the better future, once there's some new big funding again?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1710195137.410709",
        "client_msg_id": "a31bc6be-9f7c-41be-adcb-3a46c65787cd",
        "text": "&gt; Like, \"future of coding\", would you people say the computer revolution has at this point already happened, or not? If not, what is it and how to get there?\nNot sure if that’s clear to everyone, but in the context of Alan Kay, “The [Real] Computer Revolution Hasn’t Happened Yet” refers to specific talks or papers of him. Reviewing those should make it obvious that Alan Kay surely still believes that it still hasn’t happened, and he would probably also say that we’re not making any progress either.\n\nHere’s my attempt at “speedrunning” those who don’t want to spent several hours watching and reading through it, to maybe get a sense of what he might mean:\n\n1. I recommend <https:\/\/www.youtube.com\/watch?v=oKg1hTOQXoY&amp;t=3465s|the last five minutes of his 1997 OOPSLA talk>, where he talks about how “we don’t know how to design systems yet” and how Smalltalk was never about its capabilities but about how it transformed from version to version and was able to get rid of itself to bootstrap the next system. He uses “point of view” here, and if you’ve watched any of his talks you must have heard him say “point of view is worth 80 IQ points” and that hints also at why he called it *Viewpoints* Research Institute. The artifact — the designed system that falls out of the process — surely is not what is important to him,\n2. Understanding that part will help explain why he was so interested in education. But he also talks about that a lot. And he writes about it in <https:\/\/tinlizzie.org\/VPRIPapers\/m2007007a_revolution.pdf|this document>. Again, the important bit is in the last two pages, the last paragraph being (highlights mine): _Though the world today is far from peaceful, there are now examples of much larger groups of people living peacefully and prospering for many more generations than ever before in history. The enlightenment of some has led to communities of outlook, knowledge, wealth, commerce, and energy that help the less enlightened behave better. It is not at all a coincidence that the first part of this real revolution in society was powered by the printing press. The next revolutions in thought – such as *whole systems thinking and planning leading to major new changes in outlook* – will be powered by the real computer revolution – and it could come just in time to win over catastrophe._\n3. In the <https:\/\/tinlizzie.org\/VPRIPapers\/rn2006002_nsfprop.pdf|STEPS Proposal to NSF> it says (again, highlights mine): _creating a practical working system that is also its own model – a whole system from the end-users to the metal that could be extremely compact (we think under 20,000 lines of code) yet practical enough to serve both as a highly useful end-user system *and a “system to learn about systems”*. I.e. the system could be compact, comprehensive, clear, high-level, and *understandable enough to be an “Exploratorium of itself”*._ The 20,000 LOC thing was only there as a crude measure to make it “fit inside the head of an individual”. It was all about understanding the whole system fully, so you can take what you have figured out designing it, throw the artifact away but take your insights and design a better system.\nWe have stopped designing most infrastructure parts and just take them as given. And we have painted ourselves into a corner where it’s difficult to go back and redesign everything from scratch, because we rely on so many things that we don’t want to give up. And so we are stuck with a paradigm, or a “point of view” as Alan would say, preventing us from leaving our pink plane and discovering the next true level of abstraction that enables us to get close to the biological ideal of scalability through an analogous step like the invention of the arch in architecture. (If that sounds like a lot of weird metaphors in one sentence, watch the whole 1997 talk I linked above.)\n\nMost people looking through the scraps of STEPS seem fascinated by the artifacts: how the GUI was implemented, perhaps OMeta, or just what they accomplished to pack into 20K LOC. But the real gems require reading between the lines and looking at their design process. Personally, I’d recommend studying all of Ian Piumarta’s <https:\/\/tinlizzie.org\/IA\/index.php\/Papers_from_Viewpoints_Research_Institute|VPRI papers> in order of publishing date, even (especially) the ones with extra weird titles. That will give you a deeper appreciation for why Alan loves page 13 in the <https:\/\/www.softwarepreservation.org\/projects\/LISP\/book\/LISP%201.5%20Programmers%20Manual.pdf|LISP 1.5 Programmers Manual> so much, and why he thinks of it as “the Maxwell equations for computing”.\nThey describe a whole universe.\nEven better, they give you the power to design a whole universe by yourself.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709732691.993869",
        "parent_user_id": "UAJKEBGP8",
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=oKg1hTOQXoY&amp;t=3465s",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/oKg1hTOQXoY\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/oKg1hTOQXoY?feature=oembed&start=3465&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Alan Kay at OOPSLA 1997 - The computer revolution hasnt happened yet\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=oKg1hTOQXoY&amp;t=3465s",
                "fallback": "YouTube Video: Alan Kay at OOPSLA 1997 - The computer revolution hasnt happened yet",
                "title": "Alan Kay at OOPSLA 1997 - The computer revolution hasnt happened yet",
                "title_link": "https:\/\/www.youtube.com\/watch?v=oKg1hTOQXoY&amp;t=3465s",
                "author_name": "Jeff Gonis",
                "author_link": "https:\/\/www.youtube.com\/@jeffgonis8975",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "26V1t",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like, \"future of coding\", would you people say the computer revolution has at this point already happened, or not? If not, what is it and how to get there?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNot sure if that’s clear to everyone, but in the context of Alan Kay, “The [Real] Computer Revolution Hasn’t Happened Yet” refers to specific talks or papers of him. Reviewing those should make it obvious that Alan Kay surely still believes that it still hasn’t happened, and he would probably also say that we’re not making any progress either.\n\nHere’s my attempt at “speedrunning” those who don’t want to spent several hours watching and reading through it, to maybe get a sense of what he might mean:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I recommend "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.youtube.com\/watch?v=oKg1hTOQXoY&t=3465s",
                                        "text": "the last five minutes of his 1997 OOPSLA talk"
                                    },
                                    {
                                        "type": "text",
                                        "text": ", where he talks about how “we don’t know how to design systems yet” and how Smalltalk was never about its capabilities but about how it transformed from version to version and was able to get rid of itself to bootstrap the next system. He uses “point of view” here, and if you’ve watched any of his talks you must have heard him say “point of view is worth 80 IQ points” and that hints also at why he called it "
                                    },
                                    {
                                        "type": "text",
                                        "text": "Viewpoints",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " Research Institute. The artifact — the designed system that falls out of the process — surely is not what is important to him,"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Understanding that part will help explain why he was so interested in education. But he also talks about that a lot. And he writes about it in "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/tinlizzie.org\/VPRIPapers\/m2007007a_revolution.pdf",
                                        "text": "this document"
                                    },
                                    {
                                        "type": "text",
                                        "text": ". Again, the important bit is in the last two pages, the last paragraph being (highlights mine): "
                                    },
                                    {
                                        "type": "text",
                                        "text": "Though the world today is far from peaceful, there are now examples of much larger groups of people living peacefully and prospering for many more generations than ever before in history. The enlightenment of some has led to communities of outlook, knowledge, wealth, commerce, and energy that help the less enlightened behave better. It is not at all a coincidence that the first part of this real revolution in society was powered by the printing press. The next revolutions in thought – such as ",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "whole systems thinking and planning leading to major new changes in outlook",
                                        "style": {
                                            "bold": true,
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " – will be powered by the real computer revolution – and it could come just in time to win over catastrophe.",
                                        "style": {
                                            "italic": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "In the "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/tinlizzie.org\/VPRIPapers\/rn2006002_nsfprop.pdf",
                                        "text": "STEPS Proposal to NSF"
                                    },
                                    {
                                        "type": "text",
                                        "text": " it says (again, highlights mine): "
                                    },
                                    {
                                        "type": "text",
                                        "text": "creating a practical working system that is also its own model – a whole system from the end-users to the metal that could be extremely compact (we think under 20,000 lines of code) yet practical enough to serve both as a highly useful end-user system ",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "and a “system to learn about systems”",
                                        "style": {
                                            "bold": true,
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ". I.e. the system could be compact, comprehensive, clear, high-level, and ",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "understandable enough to be an “Exploratorium of itself”",
                                        "style": {
                                            "bold": true,
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ".",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " The 20,000 LOC thing was only there as a crude measure to make it “fit inside the head of an individual”. It was all about understanding the whole system fully, so you can take what you have figured out designing it, throw the artifact away but take your insights and design a better system."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWe have stopped designing most infrastructure parts and just take them as given. And we have painted ourselves into a corner where it’s difficult to go back and redesign everything from scratch, because we rely on so many things that we don’t want to give up. And so we are stuck with a paradigm, or a “point of view” as Alan would say, preventing us from leaving our pink plane and discovering the next true level of abstraction that enables us to get close to the biological ideal of scalability through an analogous step like the invention of the arch in architecture. (If that sounds like a lot of weird metaphors in one sentence, watch the whole 1997 talk I linked above.)\n\nMost people looking through the scraps of STEPS seem fascinated by the artifacts: how the GUI was implemented, perhaps OMeta, or just what they accomplished to pack into 20K LOC. But the real gems require reading between the lines and looking at their design process. Personally, I’d recommend studying all of Ian Piumarta’s "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tinlizzie.org\/IA\/index.php\/Papers_from_Viewpoints_Research_Institute",
                                "text": "VPRI papers"
                            },
                            {
                                "type": "text",
                                "text": " in order of publishing date, even (especially) the ones with extra weird titles. That will give you a deeper appreciation for why Alan loves page 13 in the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.softwarepreservation.org\/projects\/LISP\/book\/LISP%201.5%20Programmers%20Manual.pdf",
                                "text": "LISP 1.5 Programmers Manual"
                            },
                            {
                                "type": "text",
                                "text": " so much, and why he thinks of it as “the Maxwell equations for computing”.\nThey describe a whole universe.\nEven better, they give you the power to design a whole universe by yourself."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U067XHT91HV",
                    "U02JQA5FY5C"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U067XHT91HV",
        "type": "message",
        "ts": "1710197590.508639",
        "client_msg_id": "7e0b01bf-cccc-4ab4-8c03-ad555b72b309",
        "text": "This is a good overview! A few brief replies\/points:\n\n1. one thing is, we got Smalltalk, both 80 and earlier. Nothing stops people from making new versions or other similar things (or what does?). What was wrong or missing with Smalltalk (both early and 80)? Point could be that we're not making these systems continuously or a good one (while some here\/elsewhere may say they do). OK, obviously, the general trend is to throw\/add more code at it, making it more complex\/convoluted, to add the desired feature, ending up with another mess. But anyone could go and work on small, meta-recursive systems. And try to somehow address the Smalltalk-80 problem of \"succeeding\" (Goldberg, failure is easy success is hard), once there's investments in it, other stuff depending on the system. Like, idk, to me Kay is a weaker immitation of Engelbart's system work, just with the addition of computer graphics (which is what attracts the people and they remain puzzled\/unaware about the systems\/programming things).\n2. Point of view, Lisp eval, I mean it's not that hard to get the idea (just need to cut away the jargon and clutter), that you save LOC by not writing lots and lots of new, specific, custom code, explicitly expressing lots of possible paths and cases, and instead feed some configuration\/input through the same core loop. Like, the lang should not be a generator of more complexity for the programmers to type out, but instead need one\/system which covers a lot of it combinatorially, just from a few well-chosen elements.\n3. Agreed, it's not really literally about the 20K LOC, these are just a shorthand\/indicator for a good design that does not need to explode in size. May take it as a metric\/limit, a force function, to not become sloppy\/wasteful\/excessive.\n4. Yes, it is probably more about system designing principles and great architecture implementation practice, as the universal meta-model across many systems that are made like that (vs. the ones that are not). But OK historically we see that there's not much interest in this, nor do (new, old too) programmers know or care, it also may always be easier to just type out more \"naive\"\/straightforward code than to spend all the time seriously thinking about it, and too one may get paid more fixing\/debugging a highly convoluted mess someone produced, than to make something small, neat, elegant, qualitatively better (because once this exists, it's too easy? or maybe too dense to maintain or adapt?)\n5. given Kay's work produced Smalltalk (both early and 80, not sure if the later revivals and immitations\/variants are seen as \"progress\" or improvements, or just as repeating\/reviving the old state of the art, not getting much better), how can\/would one improve on that, and come up with a \"smaller\"\/better design, in other words, what was\/is missing, wrong or lacking in Smalltalk (old and 80) that today someone could do better?\nStraighforward questions like this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "488abf9ee399",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-02\/6284140728162_488abf9ee399f7e43d8b_72.png",
            "first_name": "Stephan",
            "real_name": "Stephan Kreutzer",
            "display_name": "skreutzer",
            "team": "T5TCAFTA9",
            "name": "stephankreutzer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709732691.993869",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SP6Mq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a good overview! A few brief replies\/points:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "one thing is, we got Smalltalk, both 80 and earlier. Nothing stops people from making new versions or other similar things (or what does?). What was wrong or missing with Smalltalk (both early and 80)? Point could be that we're not making these systems continuously or a good one (while some here\/elsewhere may say they do). OK, obviously, the general trend is to throw\/add more code at it, making it more complex\/convoluted, to add the desired feature, ending up with another mess. But anyone could go and work on small, meta-recursive systems. And try to somehow address the Smalltalk-80 problem of \"succeeding\" (Goldberg, failure is easy success is hard), once there's investments in it, other stuff depending on the system. Like, idk, to me Kay is a weaker immitation of Engelbart's system work, just with the addition of computer graphics (which is what attracts the people and they remain puzzled\/unaware about the systems\/programming things)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Point of view, Lisp eval, I mean it's not that hard to get the idea (just need to cut away the jargon and clutter), that you save LOC by not writing lots and lots of new, specific, custom code, explicitly expressing lots of possible paths and cases, and instead feed some configuration\/input through the same core loop. Like, the lang should not be a generator of more complexity for the programmers to type out, but instead need one\/system which covers a lot of it combinatorially, just from a few well-chosen elements."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Agreed, it's not really literally about the 20K LOC, these are just a shorthand\/indicator for a good design that does not need to explode in size. May take it as a metric\/limit, a force function, to not become sloppy\/wasteful\/excessive."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Yes, it is probably more about system designing principles and great architecture implementation practice, as the universal meta-model across many systems that are made like that (vs. the ones that are not). But OK historically we see that there's not much interest in this, nor do (new, old too) programmers know or care, it also may always be easier to just type out more \"naive\"\/straightforward code than to spend all the time seriously thinking about it, and too one may get paid more fixing\/debugging a highly convoluted mess someone produced, than to make something small, neat, elegant, qualitatively better (because once this exists, it's too easy? or maybe too dense to maintain or adapt?)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "given Kay's work produced Smalltalk (both early and 80, not sure if the later revivals and immitations\/variants are seen as \"progress\" or improvements, or just as repeating\/reviving the old state of the art, not getting much better), how can\/would one improve on that, and come up with a \"smaller\"\/better design, in other words, what was\/is missing, wrong or lacking in Smalltalk (old and 80) that today someone could do better?"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nStraighforward questions like this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U067XHT91HV",
        "type": "message",
        "ts": "1710198340.964279",
        "edited": {
            "user": "U067XHT91HV",
            "ts": "1710198562.000000"
        },
        "client_msg_id": "662165df-d111-46a2-bab4-b4d48f62f57b",
        "text": "Like, look: this Lisp page 13 Maxwell's equations thing, it's not that there's anything complicated or highly sophisticated going on there. It's just a very confused, convoluted, cluttered, obscured, obfuscated statement of the basis of all computation (more or less, known in other formulations also by\/to other people), and it does not help much to only promote it in old Lisp notation nor some abstract mathematical descriptions, but you me and anyone can easily just use these in designs. Same with the \"Meta\" language thing (not to be confused, there's probably 3 langs by the name of \"Meta\", if not more). It's just old stuff in old langs, no modern programmer has heard of or can read, so of course these concepts are largely lost or unknown. Granted, there's contemporary books, materials and what not, but these may not be that interested in system work either.\n\nUpdate: oh no, there's another \"Meta language\" on page 9, I don't mean that one but the other one Kay once referenced :disappointed: like, I mean, whatever, who can possibly keep track, it's just a big mess that's different words and notations for essentially the very same thing(s).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "488abf9ee399",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-02\/6284140728162_488abf9ee399f7e43d8b_72.png",
            "first_name": "Stephan",
            "real_name": "Stephan Kreutzer",
            "display_name": "skreutzer",
            "team": "T5TCAFTA9",
            "name": "stephankreutzer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709732691.993869",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QA9NA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like, look: this Lisp page 13 Maxwell's equations thing, it's not that there's anything complicated or highly sophisticated going on there. It's just a very confused, convoluted, cluttered, obscured, obfuscated statement of the basis of all computation (more or less, known in other formulations also by\/to other people), and it does not help much to only promote it in old Lisp notation nor some abstract mathematical descriptions, but you me and anyone can easily just use these in designs. Same with the \"Meta\" language thing (not to be confused, there's probably 3 langs by the name of \"Meta\", if not more). It's just old stuff in old langs, no modern programmer has heard of or can read, so of course these concepts are largely lost or unknown. Granted, there's contemporary books, materials and what not, but these may not be that interested in system work either.\n\nUpdate: oh no, there's another \"Meta language\" on page 9, I don't mean that one but the other one Kay once referenced "
                            },
                            {
                                "type": "emoji",
                                "name": "disappointed",
                                "unicode": "1f61e"
                            },
                            {
                                "type": "text",
                                "text": " like, I mean, whatever, who can possibly keep track, it's just a big mess that's different words and notations for essentially the very same thing(s)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1710214540.669599",
        "client_msg_id": "5F77FA22-EF36-4ECC-9CC9-AB267FB50A07",
        "text": "I think the goal of a system that can fit inside the head of an individual is described by Dan Ingalls as:\n&gt; If a system is to serve the creative spirit, it must be entirely comprehensible to a single individual.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709732691.993869",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C4J7N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the goal of a system that can fit inside the head of an individual is described by Dan Ingalls as:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If a system is to serve the creative spirit, it must be entirely comprehensible to a single individual."
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up_2",
                "users": [
                    "UJFN50C00",
                    "UA14TGLTC",
                    "U5STGTB3J"
                ],
                "count": 3
            },
            {
                "name": "fire",
                "users": [
                    "U02JQA5FY5C"
                ],
                "count": 1
            }
        ]
    }
]