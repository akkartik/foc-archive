[
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1615819241.216500",
        "client_msg_id": "aa6a74a7-c027-4976-8576-ece3792b7029",
        "text": "When you drag to make the offset, portions of the drag will “snap” to existing offset lengths. You can sort of see (feel) it as you drag. It is actually possible to make them the same length without introducing a variable, but the drag region for doing so is only 1px big so you have to be precise :slightly_smiling_face:.  You can try it yourself to see what I mean: grab the offset tool and drag-draw two offsets: <https:\/\/ravichugh.github.io\/sketch-n-sketch\/releases\/uist-2019-acm-archive\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615528167.138300",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n1\/q1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When you drag to make the offset, portions of the drag will “snap” to existing offset lengths. You can sort of see (feel) it as you drag. It is actually possible to make them the same length without introducing a variable, but the drag region for doing so is only 1px big so you have to be precise "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ".  You can try it yourself to see what I mean: grab the offset tool and drag-draw two offsets: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ravichugh.github.io\/sketch-n-sketch\/releases\/uist-2019-acm-archive\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1615819657.217100",
        "client_msg_id": "9f20273c-e592-4b3f-aac6-1f9f71eb5051",
        "text": "&gt; Interesting that the same technique was not used for the colours. Wouldn’t it also be a safe assumption that colours that are the same in your “example” drawing are meant to be the same in the definition? When you have an explicit, editable, textual definition right there I feel like the bar is raised right up for making these kind of assumptions.\nHmm. Yeah. We could have a snapping interaction in the color sliders as well, with a simple way to override and say “no, I dont want to snap” (e.g. the command key). I prefer indicating to the user before an action that the action will produce a constrained relationship, rather than silently doing so post-hoc. Another excellent take on this problem is Object-Oriented Drawing: <https:\/\/www.youtube.com\/watch?v=81RudeP3Tvg>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615528167.138300",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Object-Oriented Drawing",
                "title_link": "https:\/\/www.youtube.com\/watch?v=81RudeP3Tvg",
                "author_name": "ACM SIGCHI",
                "author_link": "https:\/\/www.youtube.com\/c\/acmsigchi",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/81RudeP3Tvg\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Object-Oriented Drawing",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/81RudeP3Tvg?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=81RudeP3Tvg",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=81RudeP3Tvg"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZWt",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting that the same technique was not used for the colours. Wouldn’t it also be a safe assumption that colours that are the same in your “example” drawing are meant to be the same in the definition? When you have an explicit, editable, textual definition right there I feel like the bar is raised right up for making these kind of assumptions."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm. Yeah. We could have a snapping interaction in the color sliders as well, with a simple way to override and say “no, I dont want to snap” (e.g. the command key). I prefer indicating to the user before an action that the action will produce a constrained relationship, rather than silently doing so post-hoc. Another excellent take on this problem is Object-Oriented Drawing: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=81RudeP3Tvg"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]