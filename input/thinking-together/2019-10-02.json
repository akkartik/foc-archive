[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1570002682.141100",
        "client_msg_id": "7044bb2f-81f5-4110-82eb-a7a5c6510c38",
        "text": "this is a very abstract notation, starting to remind me of APL. Not sure having abstract semantics is helpful to the millions of new programmers coming online.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569866970.116800",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mcg+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is a very abstract notation, starting to remind me of APL. Not sure having abstract semantics is helpful to the millions of new programmers coming online."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1570003743.141300",
        "client_msg_id": "3f49eff0-0c6a-4784-8d10-009f05bf1765",
        "text": "The pipelining approach pioneered by APL proved very powerful, but in the end fairly obscure. Your pipeline example presumes a single input to each function, which is almost never the case. Functions have many options, and external conditions that they reference. There is a very good reason why languages that are based primarily on composition as the \"power tool\" of the language  ultimately become obscure.\n\nIt is commendable that Curv uses a much nicer syntax with the pipelining, but in zero of my sample programs in beads did pipelining occur. APL was very good at unraveling 2D matrices into 1D so that the pipelining would be more usable, and to this day APL is one of most compact languages ever devised. Unfortunately a function name does not disclose the mapping of what the function does, and  the sequence k &gt;&gt; j &gt;&gt; etc. would require deep study to understand, particularly if the data is structured, and not merely an array. I can see why Haskell splits out the mapping of data types of a function away from the field names, but I don't like it one bit; it creates a double declaration of the function which i find wasteful. But i see why they did it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557860308.364300",
        "parent_user_id": "UJM9NG84Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xeez",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The pipelining approach pioneered by APL proved very powerful, but in the end fairly obscure. Your pipeline example presumes a single input to each function, which is almost never the case. Functions have many options, and external conditions that they reference. There is a very good reason why languages that are based primarily on composition as the \"power tool\" of the language  ultimately become obscure.\n\nIt is commendable that Curv uses a much nicer syntax with the pipelining, but in zero of my sample programs in beads did pipelining occur. APL was very good at unraveling 2D matrices into 1D so that the pipelining would be more usable, and to this day APL is one of most compact languages ever devised. Unfortunately a function name does not disclose the mapping of what the function does, and  the sequence k >> j >> etc. would require deep study to understand, particularly if the data is structured, and not merely an array. I can see why Haskell splits out the mapping of data types of a function away from the field names, but I don't like it one bit; it creates a double declaration of the function which i find wasteful. But i see why they did it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1570006509.141500",
        "client_msg_id": "2d2cb0b8-4936-4e8a-b30f-610f3bccd9c4",
        "text": "You mean the denotational semantics?  That much is tailored to a really specific audience.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569866970.116800",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ehiN3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You mean the denotational semantics?  That much is tailored to a really specific audience."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1570018919.141800",
        "client_msg_id": "cc7d1aa5-dd29-4645-a8dd-2b67fd10793d",
        "text": "<@U71PMQ1V0> One thought about keeping the set semantics pure.  Anytime you display a set, the elements have to be in some order. Instead of making the order a random, non-deterministic, or an implementation accident, require that it be defined.  You can have a default.  It can even be implicit and subtle.  For instance, in an list like `wow = 6 | 5 | 3`, you could print `6 | 5 | 3` by default instead of the standard order `3 | 5 | 6`.  There's a natural way to extend this definitional order across operators.  It's not simplest, but it is least surprising in its own way.  Of course, the operators wouldn't commute with respect to order, but I think associativity is preserved.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569866970.116800",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YfMCg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": " One thought about keeping the set semantics pure.  Anytime you display a set, the elements have to be in some order. Instead of making the order a random, non-deterministic, or an implementation accident, require that it be defined.  You can have a default.  It can even be implicit and subtle.  For instance, in an list like "
                            },
                            {
                                "type": "text",
                                "text": "wow = 6 | 5 | 3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", you could print "
                            },
                            {
                                "type": "text",
                                "text": "6 | 5 | 3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " by default instead of the standard order "
                            },
                            {
                                "type": "text",
                                "text": "3 | 5 | 6",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  There's a natural way to extend this definitional order across operators.  It's not simplest, but it is least surprising in its own way.  Of course, the operators wouldn't commute with respect to order, but I think associativity is preserved."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "The code is going to undergo heavy heavy transformation by the time its running on differential dataflow. There's no hope of preserving ordering from the original code.",
        "username": "jamii (@jamii:scattered-thoughts.net)",
        "type": "message",
        "ts": "1570019333.142000",
        "bot_id": "BEYLABLRH",
        "thread_ts": "1570019333.142000",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1570046950.148200",
        "reply_users": [
            "UL3CJ7YKC"
        ],
        "replies": [
            {
                "user": "UL3CJ7YKC",
                "ts": "1570046950.148200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HE2r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The code is going to undergo heavy heavy transformation by the time its running on differential dataflow. There's no hope of preserving ordering from the original code."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "U5TCAFTD3"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1570046950.148200",
        "client_msg_id": "74A271B9-CC87-478D-A4D3-BA0E7690667E",
        "text": "Thats why I'd like to see a way in my IDE to create different Views of the codebase instead just looking at raw files\/text - to be able to capture and save\/preserve the essence as much as possible - but still being able to have additional, new functionality. In one View I might be able to look at the whole like (old code + \"something\") while from another View I'd be able to show new\/other connection.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570019333.142000",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uNaK+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thats why I'd like to see a way in my IDE to create different Views of the codebase instead just looking at raw files\/text - to be able to capture and save\/preserve the essence as much as possible - but still being able to have additional, new functionality. In one View I might be able to look at the whole like (old code + \"something\") while from another View I'd be able to show new\/other connection."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1570053240.148500",
        "client_msg_id": "7373c9aa-8899-418e-a20d-0b7915b5d125",
        "text": "<@UA14TGLTC> it looks like you can select text it's just the style doesn't show. i was able to contrl+a ctrl+c",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569866970.116800",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zzW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " it looks like you can select text it's just the style doesn't show. i was able to contrl+a ctrl+c"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1570060307.148700",
        "client_msg_id": "347beddc-3c7f-4ab6-9a9f-f552398ef920",
        "text": "Sure enough!  Still.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569866970.116800",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o1Xe7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure enough!  Still."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1570074913.148900",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1570074935.000000"
        },
        "client_msg_id": "4a952cac-ba8e-447e-936d-b58fb804a4e1",
        "text": "I think a good compromise would be to generate some \"error\" token in cases like that. That way you don't get nonsense results, but it also doesn't make the whole program blow up in your face.\n\nI also like giving null for a.b.c.d... when anything in that chain is null",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569855917.108100",
        "parent_user_id": "UF5PAGQQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yoB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think a good compromise would be to generate some \"error\" token in cases like that. That way you don't get nonsense results, but it also doesn't make the whole program blow up in your face.\n\nI also like giving null for a.b.c.d... when anything in that chain is null"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULTSNR8LF",
        "type": "message",
        "ts": "1570075206.150500",
        "client_msg_id": "AEEB7D07-89ED-4C10-B449-A2075CF8B016",
        "text": "<@U8A5MS6R1> I’ve done a fair amount of prototyping with arangodb and it’s pretty fun to use actually ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbf9758a8150",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/fbf9758a8150cef0eea447876cd48346.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "Robert Hall",
            "display_name": "Robert Hall",
            "team": "T5TCAFTA9",
            "name": "thebookofrobert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569787170.079600",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4T7v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " I’ve done a fair amount of prototyping with arangodb and it’s pretty fun to use actually"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULTSNR8LF",
        "type": "message",
        "ts": "1570075225.151200",
        "client_msg_id": "AAB75CE8-2977-4CEA-A59B-0BBB16A42653",
        "text": "As a more serious tool, I can’t speak to that",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbf9758a8150",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/fbf9758a8150cef0eea447876cd48346.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "Robert Hall",
            "display_name": "Robert Hall",
            "team": "T5TCAFTA9",
            "name": "thebookofrobert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569787170.079600",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2eK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As a more serious tool, I can’t speak to that"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULTSNR8LF",
        "type": "message",
        "ts": "1570075306.152200",
        "client_msg_id": "B7CF56F7-B7D9-4218-8C02-219F681E3D4D",
        "text": "Oh this is actually a problem I’ve been thinking about one possible solution to",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbf9758a8150",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/fbf9758a8150cef0eea447876cd48346.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "Robert Hall",
            "display_name": "Robert Hall",
            "team": "T5TCAFTA9",
            "name": "thebookofrobert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569860914.113900",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QXws",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh this is actually a problem I’ve been thinking about one possible solution to"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULTSNR8LF",
        "type": "message",
        "ts": "1570075326.152900",
        "client_msg_id": "A0048E6D-5E4F-4D8A-94DF-109C0B77D57F",
        "text": "I drafted up an idea just today in fact",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbf9758a8150",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/fbf9758a8150cef0eea447876cd48346.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "Robert Hall",
            "display_name": "Robert Hall",
            "team": "T5TCAFTA9",
            "name": "thebookofrobert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569860914.113900",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HR5\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I drafted up an idea just today in fact"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULTSNR8LF",
        "type": "message",
        "ts": "1570075335.153400",
        "client_msg_id": "2999E81B-94C2-4DA4-98B0-CEA8A78671C5",
        "text": "I’ll share it later ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbf9758a8150",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/fbf9758a8150cef0eea447876cd48346.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "Robert Hall",
            "display_name": "Robert Hall",
            "team": "T5TCAFTA9",
            "name": "thebookofrobert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569860914.113900",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gAi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ll share it later"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1570079757.153600",
        "client_msg_id": "ea68cf5f-0be6-4fa8-a023-14d9a5acf572",
        "text": "<@UL3CJ7YKC> I'm not sure of alternatives in the js world. I've built smallish apps with durus (e.g. a commenting system on a blog). The really great thing about something like that is there is no impedance mismatch because you're just working with objects in your language. So you modify an object and call a commit method and the new object is now persistent. If your process restarts you can find the object again, typically by traversing a root object of the db. The bad thing about something like this is also that it is integrated with one language\/runtime only, so while you could build export mechanisms, there may not be any standard ones.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569787170.079600",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "43LhT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL3CJ7YKC"
                            },
                            {
                                "type": "text",
                                "text": " I'm not sure of alternatives in the js world. I've built smallish apps with durus (e.g. a commenting system on a blog). The really great thing about something like that is there is no impedance mismatch because you're just working with objects in your language. So you modify an object and call a commit method and the new object is now persistent. If your process restarts you can find the object again, typically by traversing a root object of the db. The bad thing about something like this is also that it is integrated with one language\/runtime only, so while you could build export mechanisms, there may not be any standard ones."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1570079798.153900",
        "client_msg_id": "265b3a4e-e7a7-4cdd-a853-f7fd520445b2",
        "text": "<@ULTSNR8LF> good to hear",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569787170.079600",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3g+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULTSNR8LF"
                            },
                            {
                                "type": "text",
                                "text": " good to hear"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]