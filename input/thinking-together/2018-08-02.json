[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1533211031.000180",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1533211080.000000"
        },
        "client_msg_id": "8af67b0e-d382-49a7-94ca-835d96945436",
        "text": "Just in case someone doesn't know about this resources, here they are: <http:\/\/web.media.mit.edu\/~lieber\/Your-Wish\/> \"Your Wish is My Command: Giving Users the Power to Instruct their Software\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vLN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just in case someone doesn't know about this resources, here they are: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/web.media.mit.edu\/~lieber\/Your-Wish\/"
                            },
                            {
                                "type": "text",
                                "text": " \"Your Wish is My Command: Giving Users the Power to Instruct their Software\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1533211038.000294",
        "client_msg_id": "2008f1ba-c2b1-4c07-b4ba-908c697821c5",
        "text": "<http:\/\/acypher.com\/wwid\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533211038.000294",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1533216671.000031",
        "reply_users": [
            "U5TCAFTD3"
        ],
        "replies": [
            {
                "user": "U5TCAFTD3",
                "ts": "1533216671.000031"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1533216671.000031",
        "attachments": [
            {
                "title": "Watch What I Do",
                "title_link": "http:\/\/acypher.com\/wwid\/",
                "text": "Watch What I Do: Programming by Demonstration. Edited by Allen Cypher. 1993, MIT Press, 652 pages. The motivation behind Programming by Demonstration is simple and compelling: if a user knows how to perform a task on the computer, that should be sufficient to create a program to perform the task. It should not be necessary to learn a programming language like C or BASIC. Instead, the user should be able to instruct the computer to",
                "fallback": "Watch What I Do",
                "from_url": "http:\/\/acypher.com\/wwid\/",
                "service_name": "acypher.com",
                "id": 1,
                "original_url": "http:\/\/acypher.com\/wwid\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FWK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/acypher.com\/wwid\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC21F8Q48"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1533216671.000031",
        "client_msg_id": "3D9A6961-321A-49EE-82D6-8CE83F6E5410",
        "text": "Wow these are great. Thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533211038.000294",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DOeC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow these are great. Thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1533217235.000292",
        "client_msg_id": "9C16A1EE-6F40-4A78-B62B-9AF518E60943",
        "text": "I wrote a rant about how great you all are that it makes it hard for me to talk “regular engineers” <http:\/\/futureofcoding.org\/essays\/sissies>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533217235.000292",
        "reply_count": 14,
        "reply_users_count": 6,
        "latest_reply": "1536958796.000100",
        "reply_users": [
            "UA8HY8R7B",
            "U5STGTB3J",
            "UA14TGLTC",
            "U8A5MS6R1",
            "U5TCAFTD3",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UA8HY8R7B",
                "ts": "1533217843.000481"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1533221055.000304"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1533227909.000149"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1533233110.000521"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1533263825.000133"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1533263946.000174"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1533264138.000129"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1536956877.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1536957054.000100"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1536957586.000100"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1536958003.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1536958404.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1536958685.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1536958796.000100"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1536981660.631572",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wa\/UO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wrote a rant about how great you all are that it makes it hard for me to talk “regular engineers” "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/futureofcoding.org\/essays\/sissies"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UASNE4JBG"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA8HY8R7B",
        "type": "message",
        "ts": "1533217843.000481",
        "client_msg_id": "95ec0ccf-8ee1-4f9e-80b9-b8c0ac2fcdb5",
        "text": "Great read. Very uplifting :smiley:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7db3c1ad975",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e7db3c1ad975b0355d3047ca8acb7c54.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Nikolas",
            "real_name": "Nikolas Martens",
            "display_name": "Nikolas",
            "team": "T5TCAFTA9",
            "name": "nikolas.m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533217235.000292",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9cLkh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great read. Very uplifting "
                            },
                            {
                                "type": "emoji",
                                "name": "smiley",
                                "unicode": "1f603"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1533221055.000304",
        "client_msg_id": "e58dc5b2-561e-48fa-bc95-4b94a22fce1d",
        "text": "Yes, wonderful post. I wonder, are the 17 people you interviewed all here in Slack? And if not, why not? :sunglasses:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533217235.000292",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4tXq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, wonderful post. I wonder, are the 17 people you interviewed all here in Slack? And if not, why not? "
                            },
                            {
                                "type": "emoji",
                                "name": "sunglasses",
                                "unicode": "1f60e"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1533223332.000294",
        "client_msg_id": "1b0c652d-a7e4-4af7-be8e-675ab3708b8b",
        "text": "Ok, here's some context on why I'm after \"unintended\/unforseen use cases\": We talk about _expressiveness_ a lot, or how powerful these new tools we want are going to be. And then there's _composition_, which seems to be an accepted way to enable expressiveness through combining simple building blocks to form more complex behavior. And then there's _hacking_ in the positive sense of taking something that has been built for one thing and creatively repurposing it for another.\n\nThese are all things that we can try to design into the systems we build. But there's just no way to anticipate all the possibilities in the problem space upfront. We might even have a totally limited view on what that problem space is. A more pragmatic (and possibly more successful, as demonstrated by Unix) approach is to let go of specifying everything and just rely on a minimal subset of assumptions to make things useful.\n\nI often use music production or video editing tools as examples: in electronic music sound designers (aka people who _play_ with synthesizers and effect modules) created many iconic sounds because they were just aimlessly exploring the possibility landscape (aka fiddling with the knobs until it sounds great). Their tools had relatively few parameters but an endless range of combinations to explore and often you would just accidentally land on a great set of parameters, likely while looking for something completely different. We need to build that into our systems! But today we're more focused on preventing unintended things to happen, because we usually consider them exceptions to be avoided.\n\nThere are also many stories from science, where great inventions started as happy accidents, like the \"superglue\" that turned out to be totally disappointing, but then 3M turned it into their best known product, because as it turns out people wanted glue that doesn't really stick to things.\n\nWe need more happy accidents in computing, more hackers that repurpose things with their creativity and discover new use cases for things that weren't supposed to be used that way, and more non-hackers who explore the systems we build in seemingly stupid ways, just to end up on something that we would've never put together in that way, but turns out to be useful.\n\nTo bring it back to our original example of byte streams vs. encapsulated objects: the latter seems to discourage tinkering to prevent unwanted effects — and this is a very reasonable demand for architecting a robust system. The former encourages you to plug weird things together to see what happens just because you can or \"to poke the power socket with a screwdriver\" which is, yes, dangerous, but can sometimes also be… enlightening…?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1532963038.000621",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xO2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, here's some context on why I'm after \"unintended\/unforseen use cases\": We talk about "
                            },
                            {
                                "type": "text",
                                "text": "expressiveness",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a lot, or how powerful these new tools we want are going to be. And then there's "
                            },
                            {
                                "type": "text",
                                "text": "composition",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which seems to be an accepted way to enable expressiveness through combining simple building blocks to form more complex behavior. And then there's "
                            },
                            {
                                "type": "text",
                                "text": "hacking",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the positive sense of taking something that has been built for one thing and creatively repurposing it for another.\n\nThese are all things that we can try to design into the systems we build. But there's just no way to anticipate all the possibilities in the problem space upfront. We might even have a totally limited view on what that problem space is. A more pragmatic (and possibly more successful, as demonstrated by Unix) approach is to let go of specifying everything and just rely on a minimal subset of assumptions to make things useful.\n\nI often use music production or video editing tools as examples: in electronic music sound designers (aka people who "
                            },
                            {
                                "type": "text",
                                "text": "play",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with synthesizers and effect modules) created many iconic sounds because they were just aimlessly exploring the possibility landscape (aka fiddling with the knobs until it sounds great). Their tools had relatively few parameters but an endless range of combinations to explore and often you would just accidentally land on a great set of parameters, likely while looking for something completely different. We need to build that into our systems! But today we're more focused on preventing unintended things to happen, because we usually consider them exceptions to be avoided.\n\nThere are also many stories from science, where great inventions started as happy accidents, like the \"superglue\" that turned out to be totally disappointing, but then 3M turned it into their best known product, because as it turns out people wanted glue that doesn't really stick to things.\n\nWe need more happy accidents in computing, more hackers that repurpose things with their creativity and discover new use cases for things that weren't supposed to be used that way, and more non-hackers who explore the systems we build in seemingly stupid ways, just to end up on something that we would've never put together in that way, but turns out to be useful.\n\nTo bring it back to our original example of byte streams vs. encapsulated objects: the latter seems to discourage tinkering to prevent unwanted effects — and this is a very reasonable demand for architecting a robust system. The former encourages you to plug weird things together to see what happens just because you can or \"to poke the power socket with a screwdriver\" which is, yes, dangerous, but can sometimes also be… enlightening…?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1533227909.000149",
        "client_msg_id": "ceefe51f-c123-4d0b-8442-02916a6cc7c2",
        "text": "I hope Dave is more pleasant in other contexts.  Sounds like you ran into a classic values mismatch.  In those cases, I try visiting their side.  Requires preparation because you won't naturally be equipped to survive the alien atmosphere.  \"You're right Dave.  You can do a lot when you're talking to the metal.  Take C's precise memory layout.  What with the billions of records you index, every word saved means one less node.  [True story.]  It's the perfect match for your work.  It's the right abstraction.\"  I've had this conversation a few times.  One direction is to head toward segmentation faults, how preventing them is a sometimes useful limitation.  Another approach is to tour many kinds programs, that different constructs are better for different things.  What with Turing completeness, a language can pick bit-twiddling as the primitive with state-charts as the library or state-charts as the primitive with bit-twiddling as the library.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533217235.000292",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Os5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hope Dave is more pleasant in other contexts.  Sounds like you ran into a classic values mismatch.  In those cases, I try visiting their side.  Requires preparation because you won't naturally be equipped to survive the alien atmosphere.  \"You're right Dave.  You can do a lot when you're talking to the metal.  Take C's precise memory layout.  What with the billions of records you index, every word saved means one less node.  [True story.]  It's the perfect match for your work.  It's the right abstraction.\"  I've had this conversation a few times.  One direction is to head toward segmentation faults, how preventing them is a sometimes useful limitation.  Another approach is to tour many kinds programs, that different constructs are better for different things.  What with Turing completeness, a language can pick bit-twiddling as the primitive with state-charts as the library or state-charts as the primitive with bit-twiddling as the library."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5TCAFTD3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1533229102.000346",
        "client_msg_id": "9c7b79c0-df1b-4db3-84ac-bcb6bd832b55",
        "text": "Ah.. this resonated with me - I agree this spirit of exploration, 'just playing around', 'connecting things and seeing what happens' should be kept alive. I see one downside of objects (which I think you've been saying all along): if we have name based messages the name-symbols have to match exactly for two things to connect. Whereas I can connect any file with any 'input stream'. Also, we'd have to 'pre-share' the names so we agree on their meaning - this may not scale well either. This relates to another idea - use something other than nominal (or even structural) binding. \n\nAt one point I was thinking about how to connect two objects that weren't designed with each other in mind (i.e. don't share types\/message names) - e.g. display an object that exposes two numbers onto another object that's a 2D plane. One way is to manually specify the precise mapping - but this is least preferable. We 'know' there are a few natural ways for these to connect - one object has two values on a scale and the other side has two 'scales' ~axes. Can we have the user just 'mush' the objects together and have the system discover reasonable bindings? More impressive would be if we can take an object from very different domains and mush them together and have something reasonable happen or at least be presented with good binding options. Anyway I didn't get very far thinking about this. I started thinking of this as cross-ontological mapping. Maybe introspecting objects should reveal more than message names. Perhaps we need a different system for defining the interfaces where deeper characteristics of the messages can be inferred.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1532963038.000621",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oSU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah.. this resonated with me - I agree this spirit of exploration, 'just playing around', 'connecting things and seeing what happens' should be kept alive. I see one downside of objects (which I think you've been saying all along): if we have name based messages the name-symbols have to match exactly for two things to connect. Whereas I can connect any file with any 'input stream'. Also, we'd have to 'pre-share' the names so we agree on their meaning - this may not scale well either. This relates to another idea - use something other than nominal (or even structural) binding. \n\nAt one point I was thinking about how to connect two objects that weren't designed with each other in mind (i.e. don't share types\/message names) - e.g. display an object that exposes two numbers onto another object that's a 2D plane. One way is to manually specify the precise mapping - but this is least preferable. We 'know' there are a few natural ways for these to connect - one object has two values on a scale and the other side has two 'scales' ~axes. Can we have the user just 'mush' the objects together and have the system discover reasonable bindings? More impressive would be if we can take an object from very different domains and mush them together and have something reasonable happen or at least be presented with good binding options. Anyway I didn't get very far thinking about this. I started thinking of this as cross-ontological mapping. Maybe introspecting objects should reveal more than message names. Perhaps we need a different system for defining the interfaces where deeper characteristics of the messages can be inferred."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1533229285.000223",
        "client_msg_id": "342cec00-83fb-4161-932b-ed59c022355a",
        "text": "So I do agree with you. We don't want gear-like fitting of these entities (but we don't want liquid like mixing either).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1532963038.000621",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8+USv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So I do agree with you. We don't want gear-like fitting of these entities (but we don't want liquid like mixing either)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1533233110.000521",
        "client_msg_id": "e966937c-a1a3-4441-b4e0-a917a158d654",
        "text": "Good write-up. Though I'm not a fan of the title - because connotations of the word 'sissy'.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533217235.000292",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BRdrx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good write-up. Though I'm not a fan of the title - because connotations of the word 'sissy'."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1533263074.000050",
        "client_msg_id": "50893087-d51b-437e-8dc1-4ce03d16c628",
        "text": "I feel this kind of \"mushing\" awkwardness often in Haskell.  Every algebraic data type is pretty similar (a combination of sums, products, and function arrows) and of course converting between these is what functional programs do.  Still, shifting between similar representations often feels awkward: you end up with either conversion boilerplate or type class indirection or monad stacks or experimental type extensions.  Impedance mismatch is by no means a Haskell specific problem.  <@U8A5MS6R1> noted that OO systems end up with a lot of wrapping and unwrapping.  I think a real solution is tool support for basic mushing, \"I want to combine this and this.\"  \"Okay,\" says the system.  \"They naturally mush this way or that way and any other way is too tricky to guess.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1532963038.000621",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+5=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel this kind of \"mushing\" awkwardness often in Haskell.  Every algebraic data type is pretty similar (a combination of sums, products, and function arrows) and of course converting between these is what functional programs do.  Still, shifting between similar representations often feels awkward: you end up with either conversion boilerplate or type class indirection or monad stacks or experimental type extensions.  Impedance mismatch is by no means a Haskell specific problem.  "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " noted that OO systems end up with a lot of wrapping and unwrapping.  I think a real solution is tool support for basic mushing, \"I want to combine this and this.\"  \"Okay,\" says the system.  \"They naturally mush this way or that way and any other way is too tricky to guess.\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1533263825.000133",
        "client_msg_id": "2534D2A0-FD5E-49EB-9247-A181735B31A2",
        "text": "Working on it <@U5STGTB3J>!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533217235.000292",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xca",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Working on it "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": "!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1533263946.000174",
        "client_msg_id": "660D8FE0-21FB-4552-AD7E-1DBE46F19382",
        "text": "Yeah I agree with you on sissies. That’s part of the point - people like “Dave” condescend with a macho man attitude",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533217235.000292",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SGO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah I agree with you on sissies. That’s part of the point - people like “Dave” condescend with a macho man attitude"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1533264138.000129",
        "client_msg_id": "a74f345b-7b14-4819-8eb9-ddd1fb18cf70",
        "text": "Macho can be hard, \"everything would be easy if other people weren't so stupid.\"  Not much you can do with that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533217235.000292",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aM9MP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Macho can be hard, \"everything would be easy if other people weren't so stupid.\"  Not much you can do with that."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]