[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1667095355.922339",
        "client_msg_id": "d757d1c8-ce59-42c3-8413-4458de1b68c3",
        "text": "Future of Coding • Episode 59\nRichard P. Gabriel • Worse is Better\n:link: <https:\/\/futureofcoding.org\/episodes\/059>\n\nFollowing our <https:\/\/futureofcoding.org\/episodes\/058|previous episode> on Richard P. Gabriel's _Incommensurability_ paper, we're back for round two with an analysis of what we've dubbed the _Worse is Better family of thought products:_\n1. <https:\/\/dreamsongs.com\/RiseOfWorseIsBetter.html|The Rise of Worse Is Better> by Richard P. Gabriel\n2. <https:\/\/www.dreamsongs.com\/Files\/worse-is-worse.pdf|Worse is Better is Worse> by Nickieben Bourbaki\n3. <https:\/\/www.dreamsongs.com\/Files\/IsWorseReallyBetter.pdf|Is Worse Really Better?> by Richard P. Gabriel\nNext episode, we've got a recent work by a real up-and-comer in the field. While you may not have heard of him yet, he's a promising young lad who's sure to become a household name.\n• <http:\/\/worrydream.com\/MagicInk\/|Magic Ink> by Bret Victor\nI am usually really thorough in my editing of the show, but this one I sort of had to rush out the door because the month is rapidly drawing to a close. If anyone spots any weird edits, or anything that sounds out of place, let me know. In particular, the sponsors (which now come at the end of the episode) might be a little rough. Oh well — pays the bills, amirite?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667095355.922339",
        "reply_count": 7,
        "reply_users_count": 6,
        "latest_reply": "1668839304.727229",
        "reply_users": [
            "U03GBV8B58V",
            "U03CEGR3HSL",
            "UJBAJNFLK",
            "UA14TGLTC",
            "UC2A2ARPT",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "U03GBV8B58V",
                "ts": "1667105075.864229"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1667106555.058219"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1667197326.494819"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1667199657.995029"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1667225181.392229"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1667268920.667379"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1668839304.727229"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fG9Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Future of Coding • Episode 59\nRichard P. Gabriel • Worse is Better\n"
                            },
                            {
                                "type": "emoji",
                                "name": "link",
                                "unicode": "1f517"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/059"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFollowing our "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/058",
                                "text": "previous episode"
                            },
                            {
                                "type": "text",
                                "text": " on Richard P. Gabriel's "
                            },
                            {
                                "type": "text",
                                "text": "Incommensurability",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " paper, we're back for round two with an analysis of what we've dubbed the "
                            },
                            {
                                "type": "text",
                                "text": "Worse is Better family of thought products:",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/dreamsongs.com\/RiseOfWorseIsBetter.html",
                                        "text": "The Rise of Worse Is Better"
                                    },
                                    {
                                        "type": "text",
                                        "text": " by Richard P. Gabriel"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.dreamsongs.com\/Files\/worse-is-worse.pdf",
                                        "text": "Worse is Better is Worse"
                                    },
                                    {
                                        "type": "text",
                                        "text": " by Nickieben Bourbaki"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.dreamsongs.com\/Files\/IsWorseReallyBetter.pdf",
                                        "text": "Is Worse Really Better?"
                                    },
                                    {
                                        "type": "text",
                                        "text": " by Richard P. Gabriel"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNext episode, we've got a recent work by a real up-and-comer in the field. While you may not have heard of him yet, he's a promising young lad who's sure to become a household name.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http:\/\/worrydream.com\/MagicInk\/",
                                        "text": "Magic Ink"
                                    },
                                    {
                                        "type": "text",
                                        "text": " by Bret Victor"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI am usually really thorough in my editing of the show, but this one I sort of had to rush out the door because the month is rapidly drawing to a close. If anyone spots any weird edits, or anything that sounds out of place, let me know. In particular, the sponsors (which now come at the end of the episode) might be a little rough. Oh well — pays the bills, amirite?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U03GBV8B58V",
                    "U0123H7JRDM",
                    "U013HU44GLS",
                    "U02NU8FTL5N"
                ],
                "count": 4
            },
            {
                "name": "100",
                "users": [
                    "U0275EZH3UN",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1667105075.864229",
        "client_msg_id": "f0d105d0-8ca7-4b24-90be-9816f87b9943",
        "text": "*i*Land :joy:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667095355.922339",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xUd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "Land "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1667106555.058219",
        "edited": {
            "user": "U03CEGR3HSL",
            "ts": "1667108108.000000"
        },
        "client_msg_id": "26a275bc-c054-470b-a0e5-62982a40002b",
        "text": "Thank you, this was a fun listen. I also really appreciate that you have dropped the disrespectful nicknames. Thank you.\n\nWhen comparing the priorities of the authors of Unix versus the authors of ITS, I think it's worth remembering some of the technical differences between the hardware.\n\nUnix grew up on a mini computer, the PDP-11 (Yes, it started life on a PDP-7, but the real growth into the operating system we would recognize today occurred on the PDP 11.), where the kernel had to fit in 64K, and each program had to fit in its own 64K (later models let you use 64K for code and a separate 64K for data). This environment will naturally encourage one to prioritize performance and simplicity of implementation.\n\nOn the other hand, ITS grew up on a mainframe, the PDP-6 (later PDP-10), which had a 36-bit word and 18-bit addressing, making it possible for a single address space to contain substantially more memory. It's much easier to put more complexity into your kernel in this environment.\n\nAs a result, I'm not convinced that the differences in prioritization were fundamentally the results of the two cultures in question. I suspect the different priorities may have arisen partly from the technologies in question.\n\nWith respect to the question of how well the Unix interface hides complexity, I would argue that many Unix tools provide a good, simple interface for utilizing some pretty deep complexity. In fact, I think the relevant comparison is not Lisp versus C, but Lisp versus sh. The ubiquitous data type in Lisp is the list, while the ubiquitous data type in sh is the file full of variable length one line records. Pipelines in sh fill the role of function composition in Lisp. The equivalent of C in ITS was the MIDAS assembler, which WAS really nice for an assembler. See <https:\/\/wiki.c2.com\/?SymbioticLanguages|https:\/\/wiki.c2.com\/?SymbioticLanguages> for some elaboration on where I'm coming from with this comparison.\n\nFor example, make provides a relatively easy way to make use of a topological sort, without having to understand the implementation details or even what a topological sort is.\n\nThe sort command allows you to sort files substantially larger than RAM, handling all issues of breaking files into chunks that can be sorted within RAM, merging those chunks into larger chunks, storing intermediate results on disc, etc.\n\nThe diff command provides a simple interface for finding the longest common substring between two sets of lines.\n\nlex and yacc pack a lot of powerful computer science into a relatively straightforward interface for specifying tokens and grammars.\n\njoin, comm, awk, dc, bc, and many other tools that were already available in v7 Unix also present simple interfaces for making use of powerful code.\n\nSpeaking as a huge Smalltalk and Lisp fan, as well as a huge Unix fan, I think the question of how Unix won extends far beyond Gabriel's analysis, though I appreciate the factors that he identified.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667095355.922339",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PyFm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you, this was a fun listen. I also really appreciate that you have dropped the disrespectful nicknames. Thank you.\n\nWhen comparing the priorities of the authors of Unix versus the authors of ITS, I think it's worth remembering some of the technical differences between the hardware.\n\nUnix grew up on a mini computer, the PDP-11 (Yes, it started life on a PDP-7, but the real growth into the operating system we would recognize today occurred on the PDP 11.), where the kernel had to fit in 64K, and each program had to fit in its own 64K (later models let you use 64K for code and a separate 64K for data). This environment will naturally encourage one to prioritize performance and simplicity of implementation.\n\nOn the other hand, ITS grew up on a mainframe, the PDP-6 (later PDP-10), which had a 36-bit word and 18-bit addressing, making it possible for a single address space to contain substantially more memory. It's much easier to put more complexity into your kernel in this environment.\n\nAs a result, I'm not convinced that the differences in prioritization were fundamentally the results of the two cultures in question. I suspect the different priorities may have arisen partly from the technologies in question.\n\nWith respect to the question of how well the Unix interface hides complexity, I would argue that many Unix tools provide a good, simple interface for utilizing some pretty deep complexity. In fact, I think the relevant comparison is not Lisp versus C, but Lisp versus sh. The ubiquitous data type in Lisp is the list, while the ubiquitous data type in sh is the file full of variable length one line records. Pipelines in sh fill the role of function composition in Lisp. The equivalent of C in ITS was the MIDAS assembler, which WAS really nice for an assembler. See "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.c2.com\/?SymbioticLanguages",
                                "text": "https:\/\/wiki.c2.com\/?SymbioticLanguages"
                            },
                            {
                                "type": "text",
                                "text": " for some elaboration on where I'm coming from with this comparison.\n\nFor example, make provides a relatively easy way to make use of a topological sort, without having to understand the implementation details or even what a topological sort is.\n\nThe sort command allows you to sort files substantially larger than RAM, handling all issues of breaking files into chunks that can be sorted within RAM, merging those chunks into larger chunks, storing intermediate results on disc, etc.\n\nThe diff command provides a simple interface for finding the longest common substring between two sets of lines.\n\nlex and yacc pack a lot of powerful computer science into a relatively straightforward interface for specifying tokens and grammars.\n\njoin, comm, awk, dc, bc, and many other tools that were already available in v7 Unix also present simple interfaces for making use of powerful code.\n\nSpeaking as a huge Smalltalk and Lisp fan, as well as a huge Unix fan, I think the question of how Unix won extends far beyond Gabriel's analysis, though I appreciate the factors that he identified."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]