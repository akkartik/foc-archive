[
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1543850871.002400",
        "client_msg_id": "89108e19-0824-4ceb-852c-f9b4f631f491",
        "text": "Fascinating discussion at that link, <@UCUSW7WVD>. Thanks for sharing. I wonder if you can solve the same problem (different subsystems producing\/consuming slightly different sets of fields, and therefore all fields are optional) with subtyping and adaptors with defaults. My intuition is that you’re alway going to be better off if each subsystem publishes its I\/O assumptions precisely (via input type declarations and output type declarations w\/optional fields explicit) and then those differences are managed at an interface boundary. The reason for that intuition is that it’s always better to tell the truth.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543241688.079600",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2eUq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fascinating discussion at that link, "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": ". Thanks for sharing. I wonder if you can solve the same problem (different subsystems producing\/consuming slightly different sets of fields, and therefore all fields are optional) with subtyping and adaptors with defaults. My intuition is that you’re alway going to be better off if each subsystem publishes its I\/O assumptions precisely (via input type declarations and output type declarations w\/optional fields explicit) and then those differences are managed at an interface boundary. The reason for that intuition is that it’s always better to tell the truth."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1543859180.003600",
        "client_msg_id": "979d077f-6e27-4f45-a74a-0fa41aa5c185",
        "text": "New podcast episode! <https:\/\/futureofcoding.org\/episodes\/33>\n\nIt's a good one to begin with if you haven't been following from the beginning. I talk a lot about my new \/about page and the vision for the project",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543859180.003600",
        "reply_count": 11,
        "reply_users_count": 5,
        "latest_reply": "1545420441.000700",
        "reply_users": [
            "UE6EFEPTQ",
            "U5TCAFTD3",
            "UC6997THT",
            "UDJ2TKB99",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UE6EFEPTQ",
                "ts": "1543876357.010500"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1543876408.010700"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1543876635.010900"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1543878189.011800"
            },
            {
                "user": "UC6997THT",
                "ts": "1543939373.016300"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1543939609.016600"
            },
            {
                "user": "UDJ2TKB99",
                "ts": "1543951479.024200"
            },
            {
                "user": "UDJ2TKB99",
                "ts": "1543951675.029300"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1543952838.029600"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1543952873.029800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1545420441.000700"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1545424930.000633",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AtWV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "New podcast episode! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/33"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt's a good one to begin with if you haven't been following from the beginning. I talk a lot about my new \/about page and the vision for the project"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ear",
                "users": [
                    "UDYGH7K8V",
                    "UBAP530VB",
                    "UBSMEUXAA",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1543873378.006400",
        "client_msg_id": "1a1ccc82-f7bf-493d-ac24-fc5a1786d111",
        "text": "Two questions I thought about today: 1) is there any other data representation\/query language that has a theoretical foundation other than SQL\/relational algebra and datalog?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873378.006400",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1544474842.038100",
        "reply_users": [
            "UEKEQGB9C",
            "UBN9AFS0N",
            "UEF95M2RH"
        ],
        "replies": [
            {
                "user": "UEKEQGB9C",
                "ts": "1543874365.010300"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1543876950.011300"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1543877019.011500"
            },
            {
                "user": "UEF95M2RH",
                "ts": "1544204611.034400"
            },
            {
                "user": "UEF95M2RH",
                "ts": "1544204642.034600"
            },
            {
                "user": "UEF95M2RH",
                "ts": "1544204748.034900"
            },
            {
                "user": "UEF95M2RH",
                "ts": "1544204769.035100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1544474831.037900"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1544474842.038100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aN\/D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Two questions I thought about today: 1) is there any other data representation\/query language that has a theoretical foundation other than SQL\/relational algebra and datalog?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1543873428.007500",
        "client_msg_id": "ef0e9a47-d2f1-4ba0-b0d8-d649e93479e6",
        "text": "2) do you consider reduce\/foldLeft to be \"fundamental\" at the level of map and filter? is there another way of expresing? why reduce never has a special syntax in languages?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873428.007500",
        "reply_count": 9,
        "reply_users_count": 4,
        "latest_reply": "1543964817.030500",
        "reply_users": [
            "UEKEQGB9C",
            "UBN9AFS0N",
            "U85HCL7JP",
            "UBKNXPBAB"
        ],
        "replies": [
            {
                "user": "UEKEQGB9C",
                "ts": "1543874090.010100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1543876828.011100"
            },
            {
                "user": "U85HCL7JP",
                "ts": "1543889275.014000"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1543901972.014200"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1543914446.014700"
            },
            {
                "user": "UEKEQGB9C",
                "ts": "1543933850.014900"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1543934012.015100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1543934122.015500"
            },
            {
                "user": "UEKEQGB9C",
                "ts": "1543964817.030500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5C=F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "2) do you consider reduce\/foldLeft to be \"fundamental\" at the level of map and filter? is there another way of expresing? why reduce never has a special syntax in languages?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEKEQGB9C",
        "type": "message",
        "ts": "1543873883.010000",
        "client_msg_id": "20c384b1-df40-4359-b7d9-37210128a3c2",
        "text": "Looking for comments, opinions on an idea I've been thinking about, described here : <http:\/\/sdi.thoughtstorms.info\/?p=1344>\n\nSomething we could call \"Assemblage Programming\"\n\nDoes this make sense? Can anyone see anything wrong with this idea? Is there a language out there that actually works like this?\n\nFinally, I'd like to build a prototype of this. But what would people recommend as the compile target? I'd quite like a very simple, prototype-based OO virtual machine. Maybe that is just Javascript. Or maybe something else. Anyone know of a good, high-level overview of what a Smalltalk or minimal OO VM architecture looks like?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48a3c4ba8f2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/248a3c4ba8f2972427222d46954f9c1c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Phil Jones",
            "display_name": "interstar",
            "team": "T5TCAFTA9",
            "name": "interstar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873883.010000",
        "reply_count": 15,
        "reply_users_count": 3,
        "latest_reply": "1544288729.037400",
        "reply_users": [
            "U8A5MS6R1",
            "UEH6T3RJB",
            "UEKEQGB9C"
        ],
        "replies": [
            {
                "user": "U8A5MS6R1",
                "ts": "1543992703.030900"
            },
            {
                "user": "UEH6T3RJB",
                "ts": "1544009885.031100"
            },
            {
                "user": "UEKEQGB9C",
                "ts": "1544013807.031300"
            },
            {
                "user": "UEKEQGB9C",
                "ts": "1544014390.031600"
            },
            {
                "user": "UEH6T3RJB",
                "ts": "1544015622.032100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1544049553.032400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1544049657.032600"
            },
            {
                "user": "UEKEQGB9C",
                "ts": "1544055122.032900"
            },
            {
                "user": "UEKEQGB9C",
                "ts": "1544057166.033100"
            },
            {
                "user": "UEH6T3RJB",
                "ts": "1544108136.033400"
            },
            {
                "user": "UEKEQGB9C",
                "ts": "1544112367.033600"
            },
            {
                "user": "UEH6T3RJB",
                "ts": "1544134503.033800"
            },
            {
                "user": "UEKEQGB9C",
                "ts": "1544144879.034100"
            },
            {
                "user": "UEH6T3RJB",
                "ts": "1544270148.037200"
            },
            {
                "user": "UEKEQGB9C",
                "ts": "1544288729.037400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rfb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looking for comments, opinions on an idea I've been thinking about, described here : "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/sdi.thoughtstorms.info\/?p=1344"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSomething we could call \"Assemblage Programming\"\n\nDoes this make sense? Can anyone see anything wrong with this idea? Is there a language out there that actually works like this?\n\nFinally, I'd like to build a prototype of this. But what would people recommend as the compile target? I'd quite like a very simple, prototype-based OO virtual machine. Maybe that is just Javascript. Or maybe something else. Anyone know of a good, high-level overview of what a Smalltalk or minimal OO VM architecture looks like?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEKEQGB9C",
        "type": "message",
        "ts": "1543874090.010100",
        "client_msg_id": "91478f4d-7dff-4e38-89f9-526ea32f2b71",
        "text": "The main difference between map and filter is that reduce is more likely to change the shape of the final output. The result of map and filter are still collections (though map obviously can change the type of what the collection contains)\n\nYou could perhaps argue that reduces like \"sum\" or \"group by\" in SQL *are* a kind of special syntax for for reduce.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48a3c4ba8f2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/248a3c4ba8f2972427222d46954f9c1c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Phil Jones",
            "display_name": "interstar",
            "team": "T5TCAFTA9",
            "name": "interstar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873428.007500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X\/b=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The main difference between map and filter is that reduce is more likely to change the shape of the final output. The result of map and filter are still collections (though map obviously can change the type of what the collection contains)\n\nYou could perhaps argue that reduces like \"sum\" or \"group by\" in SQL "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a kind of special syntax for for reduce."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEKEQGB9C",
        "type": "message",
        "ts": "1543874365.010300",
        "client_msg_id": "b5791217-921f-43c1-936c-5f2f8a2fb231",
        "text": "What do you mean by \"theoretical foundation\"? Any query has some kind of model behind it. Even the tape in a Turing machine.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48a3c4ba8f2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/248a3c4ba8f2972427222d46954f9c1c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Phil Jones",
            "display_name": "interstar",
            "team": "T5TCAFTA9",
            "name": "interstar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873378.006400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yjsgF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What do you mean by \"theoretical foundation\"? Any query has some kind of model behind it. Even the tape in a Turing machine."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543876357.010500",
        "client_msg_id": "cca7e659-bb38-49bd-b4a3-284ebdba5e30",
        "text": "In this podcast, you describe two of your influences: \"Out of the Tar Pit\", and Conal Elliott's \"Can functional programming be liberated from the von Neumann paradigm?\"\n\nI read them both (thanks for the tip-offs!), and both in turn refer to Backus' 1977 Turing lecture \"Can Programming Be Liberated from the von Neumann Style?\".\n\nThis turns out to include an early (the earliest?) description of the approach that I'm using in Onex! Again, thanks for the indirect tip-off!\n\nBackus called the approach AST or Applicative State Transition systems. Here, you have pure functions that transform a state into a new state that replaces it.\n\nI'm guessing it wasn't very popular, as I have never come across it until today (AFAIR), and I've been researching this whole area since the 1980s! :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543859180.003600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G3zuy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In this podcast, you describe two of your influences: \"Out of the Tar Pit\", and Conal Elliott's \"Can functional programming be liberated from the von Neumann paradigm?\"\n\nI read them both (thanks for the tip-offs!), and both in turn refer to Backus' 1977 Turing lecture \"Can Programming Be Liberated from the von Neumann Style?\".\n\nThis turns out to include an early (the earliest?) description of the approach that I'm using in Onex! Again, thanks for the indirect tip-off!\n\nBackus called the approach AST or Applicative State Transition systems. Here, you have pure functions that transform a state into a new state that replaces it.\n\nI'm guessing it wasn't very popular, as I have never come across it until today (AFAIR), and I've been researching this whole area since the 1980s! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543876408.010700",
        "client_msg_id": "48c21db8-6848-49b9-9d3e-470d05a6dfeb",
        "text": "Link: <https:\/\/www.thocp.net\/biographies\/papers\/backus_turingaward_lecture.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543859180.003600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j4Ob",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Link: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.thocp.net\/biographies\/papers\/backus_turingaward_lecture.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1543876635.010900",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1543877042.000000"
        },
        "client_msg_id": "fa0c4c58-a1f3-40f3-ad7f-de1ca4facc62",
        "text": "Out of the Tar pit, of course, proposes a different \"FRP\" - Functional Relational Programming, which is similar in its approach to state and state transformation by a pure logic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543859180.003600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W+6w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Out of the Tar pit, of course, proposes a different \"FRP\" - Functional Relational Programming, which is similar in its approach to state and state transformation by a pure logic."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1543876828.011100",
        "client_msg_id": "8448d37d-f393-42c5-b1dd-6791a03c387a",
        "text": "that's a good observation, maybe there are many specializations to reduce that have syntax and reduce is too general (can do too many things to have a single\/simple \"representation\")",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873428.007500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tSu5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that's a good observation, maybe there are many specializations to reduce that have syntax and reduce is too general (can do too many things to have a single\/simple \"representation\")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1543876950.011300",
        "client_msg_id": "07afa5c7-acf0-41b2-ba9f-272a51f17ed4",
        "text": "sql is based on a formal model (relational algebra) that was defined before it and was not \"contaminated\" by implementation\/optimization decisions, maybe that's why it lasted so long",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873378.006400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D9O12",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "sql is based on a formal model (relational algebra) that was defined before it and was not \"contaminated\" by implementation\/optimization decisions, maybe that's why it lasted so long"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1543877019.011500",
        "client_msg_id": "7677f913-e30e-4e42-8f0b-3a480c5ca951",
        "text": "prolog\/datalog are based on formal logic",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873378.006400",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Uay",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "prolog\/datalog are based on formal logic"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1543878189.011800",
        "edited": {
            "user": "U5TCAFTD3",
            "ts": "1543878222.000000"
        },
        "client_msg_id": "6ad8d1ac-df9e-409f-92a7-7c83c6b8bd79",
        "text": "Yes, Backus definitely deserves a hat tip from me, but I often forget him. Conal Elliot talks about Backus frequently. Conal also mentions Peter Landin a lot",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543859180.003600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Pn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, Backus definitely deserves a hat tip from me, but I often forget him. Conal Elliot talks about Backus frequently. Conal also mentions Peter Landin a lot"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1543889275.014000",
        "client_msg_id": "AC798DBF-9046-4C80-8998-C27B6B476D5C",
        "text": "You can create map and also filter with reduce. So I guess is more fundamental than them. What do you mean by special syntax?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873428.007500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "omm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can create map and also filter with reduce. So I guess is more fundamental than them. What do you mean by special syntax?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1543901972.014200",
        "edited": {
            "user": "UBKNXPBAB",
            "ts": "1543902147.000000"
        },
        "client_msg_id": "0e165809-a6cb-4104-9c43-3c2807e68624",
        "text": "Kinda tangental, but: you can take the existence of \"reduce\" as the *definition* of a list.\n\nUsually you define a list with something like:\n\nList a = Nil | Cons a (List a)\n\nThis is the \"positive\" definition of a list, in terms of constructors. But there's a dual, \"negative\" definition in terms of eliminators:\n\nList a = ∀b. (b, (a, b) → b) → b\n\nWhat's that weird term on the RHS? It's the signature of a generic reduce function!\n\nTurning the positive definition into the negative definition is a totally mechanical process, which I'm pretty sure is called Church encoding. This connection might look slightly more clear if I write:\n\nList a = ∀b. (() → b, (a, b) → b) → b\n\n\"() → b\" says what the reduce does to Nil, and \"(a, b) → b\" says what the reduce does to Cons. Every constructor turns into a parameter to the reduce.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873428.007500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RXoO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Kinda tangental, but: you can take the existence of \"reduce\" as the "
                            },
                            {
                                "type": "text",
                                "text": "definition",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of a list.\n\nUsually you define a list with something like:\n\nList a = Nil | Cons a (List a)\n\nThis is the \"positive\" definition of a list, in terms of constructors. But there's a dual, \"negative\" definition in terms of eliminators:\n\nList a = ∀b. (b, (a, b) → b) → b\n\nWhat's that weird term on the RHS? It's the signature of a generic reduce function!\n\nTurning the positive definition into the negative definition is a totally mechanical process, which I'm pretty sure is called Church encoding. This connection might look slightly more clear if I write:\n\nList a = ∀b. (() → b, (a, b) → b) → b\n\n\"() → b\" says what the reduce does to Nil, and \"(a, b) → b\" says what the reduce does to Cons. Every constructor turns into a parameter to the reduce."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]