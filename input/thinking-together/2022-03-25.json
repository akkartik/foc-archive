[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1648193753.489339",
        "client_msg_id": "2b9ef35b-0183-482e-997f-084f1097ab6f",
        "text": "The command palette is a relatively old pattern, at least dating the late 80s.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J\/j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The command palette is a relatively old pattern, at least dating the late 80s."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1648193875.560539",
        "client_msg_id": "5d2e87b0-3099-452d-81c2-ece3f8cb227f",
        "text": "Hm. There are some I still don't see on UI builders that were developed in the 90s, like pie menus (radial menus in general). There have been some new things in touch interfaces, but they are usually a bit different in character, like: <https:\/\/www.schultzschultz.com\/touchtype.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ynhZr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hm. There are some I still don't see on UI builders that were developed in the 90s, like pie menus (radial menus in general). There have been some new things in touch interfaces, but they are usually a bit different in character, like: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.schultzschultz.com\/touchtype.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1648195100.306929",
        "client_msg_id": "3e15760f-16ea-4b1e-8e18-6669ba23a741",
        "text": "something other than the current \"tool of tought\" markdown\/outliner :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154165.982099",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OU7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "something other than the current \"tool of tought\" markdown\/outliner "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1648208627.304989",
        "client_msg_id": "33e3fcb8-f676-41f5-b9e0-f6581a9c8341",
        "text": "Pinch zoom and fling scroll aren't really \"widgets\" but they are major developments in the last 20yrs",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=PA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pinch zoom and fling scroll aren't really \"widgets\" but they are major developments in the last 20yrs"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1648208751.945409",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1648208865.000000"
        },
        "client_msg_id": "0160af49-78a7-41a5-9fa1-3d216d4cced7",
        "text": "Fling scroll I find interesting because it introduces a new phenomenon (inertia\/momentum) into the \"physics\" of the UI.\n\nOld school scrolling now feels quite unnatural and unintuitive to me, although I still don't expect windows themselves to be flingable",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JMv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fling scroll I find interesting because it introduces a new phenomenon (inertia\/momentum) into the \"physics\" of the UI.\n\nOld school scrolling now feels quite unnatural and unintuitive to me, although I still don't expect windows themselves to be flingable"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U014WA16VNJ",
        "type": "message",
        "ts": "1648211888.622649",
        "edited": {
            "user": "U014WA16VNJ",
            "ts": "1648212816.000000"
        },
        "client_msg_id": "1CBB55A4-DE97-47D3-B29A-87FC3FA25822",
        "text": "Been thinking today about “handoff mechanisms” and how they're essential in networking\/communications infrastructure, but we don't have a similar notion in software (that I know of).\n\nThis came up while working on an Obsidian plugin to replace the built-in “graph view”. One of the design constraints was that it handles different scales appropriately, from deterministic approaches at small scales -&gt; physically simulated at medium scales -&gt; probabilistic\/heuristic at large scales.\n\nI didn't want there to be any modes and I wanted there to be consistent observed behaviour, so I started referring to this as “pixel-perfect handoff”.\n\nIt's made me wonder what else there is to explore here. Imagine interface systems that are able to switch backends without you noticing; tools that can be “dragged” into other software which appear to continue uninterrupted; data transformations switching to faster approaches when the context allows.\n\nWhat other examples might there be? Where else could this idea go? What infrastructure could be developed? Is this just another lens on interoperability, or something else?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "808c371ba009",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-15\/7281936611971_808c371ba00918560d75_72.jpg",
            "first_name": "Orion",
            "real_name": "Orion Reed",
            "display_name": "Orion Reed",
            "team": "T5TCAFTA9",
            "name": "orionreedt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648211888.622649",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1648243726.162199",
        "reply_users": [
            "UAJKEBGP8",
            "UQ706GB9U",
            "U016VUZGUUQ"
        ],
        "replies": [
            {
                "user": "UAJKEBGP8",
                "ts": "1648216373.384539"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1648225531.357829"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1648243726.162199"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t\/0y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Been thinking today about “handoff mechanisms” and how they're essential in networking\/communications infrastructure, but we don't have a similar notion in software (that I know of).\n\nThis came up while working on an Obsidian plugin to replace the built-in “graph view”. One of the design constraints was that it handles different scales appropriately, from deterministic approaches at small scales -> physically simulated at medium scales -> probabilistic\/heuristic at large scales.\n\nI didn't want there to be any modes and I wanted there to be consistent observed behaviour, so I started referring to this as “pixel-perfect handoff”.\n\nIt's made me wonder what else there is to explore here. Imagine interface systems that are able to switch backends without you noticing; tools that can be “dragged” into other software which appear to continue uninterrupted; data transformations switching to faster approaches when the context allows.\n\nWhat other examples might there be? Where else could this idea go? What infrastructure could be developed? Is this just another lens on interoperability, or something else?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAJKEBGP8",
        "type": "message",
        "ts": "1648216373.384539",
        "client_msg_id": "3912869d-a3fa-412b-87e1-a5127fc473c0",
        "text": "This is a compelling kernel of a thought undoubtedly. IMO there’s a bigger discussion here around how rarely design + UX is factored in when general protocols are designed &amp; agreed upon. In some ways, it’s hard (e.g. the email protocol was designed in a day and age where the GUI wasn’t really a thing \/ key factor).\n\nAs a tangent — in my day job, I work to support a popular open source project that has a large GUI footprint (that’s also open source) and unsurprisingly the discussions around what to change are driven primarily by engineers oriented towards implementation details. Designers aren’t usually empowered to participate in the open source change management process and many engineers don’t have design skills of their own (it’s a deep separate skill \/ field so no surprise there!).\n\nI know <@UFPPABQ7P> has done some thinking here for <https:\/\/blockprotocol.org\/> that _feels_ related to this discussion",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "72578ab3b4f8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-09\/2610495978720_72578ab3b4f8ab9ef250_72.jpg",
            "first_name": "Srini",
            "real_name": "Srini K",
            "display_name": "Srini K",
            "team": "T5TCAFTA9",
            "name": "skadamat",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648211888.622649",
        "parent_user_id": "U014WA16VNJ",
        "attachments": [
            {
                "from_url": "https:\/\/blockprotocol.org\/",
                "image_url": "https:\/\/blockprotocol.org\/assets\/bp_twitter_cover.png",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 223220,
                "service_icon": "https:\/\/blockprotocol.org\/assets\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/blockprotocol.org\/",
                "fallback": "Block Protocol",
                "text": "An open standard for data-driven blocks",
                "title": "Block Protocol",
                "title_link": "https:\/\/blockprotocol.org\/",
                "service_name": "blockprotocol.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "58xnn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a compelling kernel of a thought undoubtedly. IMO there’s a bigger discussion here around how rarely design + UX is factored in when general protocols are designed & agreed upon. In some ways, it’s hard (e.g. the email protocol was designed in a day and age where the GUI wasn’t really a thing \/ key factor).\n\nAs a tangent — in my day job, I work to support a popular open source project that has a large GUI footprint (that’s also open source) and unsurprisingly the discussions around what to change are driven primarily by engineers oriented towards implementation details. Designers aren’t usually empowered to participate in the open source change management process and many engineers don’t have design skills of their own (it’s a deep separate skill \/ field so no surprise there!).\n\nI know "
                            },
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": " has done some thinking here for "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blockprotocol.org\/"
                            },
                            {
                                "type": "text",
                                "text": " that "
                            },
                            {
                                "type": "text",
                                "text": "feels",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " related to this discussion"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1648222132.482389",
        "client_msg_id": "e21d88d2-2017-42bd-8f46-021bb1608125",
        "text": "Likewise, the pull-to-refresh on list views. (The list view would be the UI widget, but the behaviour of it has changed. Not sure how you want to account for that, because the same probably applies to all the prototypical UI elements.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QdcR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Likewise, the pull-to-refresh on list views. (The list view would be the UI widget, but the behaviour of it has changed. Not sure how you want to account for that, because the same probably applies to all the prototypical UI elements.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "U0245E9RB2B"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1648222477.075549",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1648222499.000000"
        },
        "client_msg_id": "e946af12-9e7a-47a9-8a71-412d644c8b67",
        "text": "to clarify, I think there has been a lot of innovation in the mobile space in the last 20 years, in terms of responsive UIs, touch, animations and so on, I'm looking for new \"controls\", new visual ways to display and manipulate data.\n\nMy questions comes from a feeling in different areas where I'm not sure if there's stagnation or there's an upper bound in the number of things that can be created in the space (similarly: new visualization\/chart types, data manipulation primitives, \"primitive\" data types etc)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lntY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to clarify, I think there has been a lot of innovation in the mobile space in the last 20 years, in terms of responsive UIs, touch, animations and so on, I'm looking for new \"controls\", new visual ways to display and manipulate data.\n\nMy questions comes from a feeling in different areas where I'm not sure if there's stagnation or there's an upper bound in the number of things that can be created in the space (similarly: new visualization\/chart types, data manipulation primitives, \"primitive\" data types etc)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1648222596.481969",
        "client_msg_id": "0254ad98-fcc2-437e-96a5-8f9adf557ade",
        "text": "Someone asked the other day on twitter \"what's the new cool scripting\/dynamically typed language\" and it was either wrong responses or crickets. In that case, is some mix of lisp and smalltalk a local or global maxima?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pyN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Someone asked the other day on twitter \"what's the new cool scripting\/dynamically typed language\" and it was either wrong responses or crickets. In that case, is some mix of lisp and smalltalk a local or global maxima?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "do you mean switching backends services. I live by this diagram.",
        "files": [
            {
                "id": "F038J3Z3KCN",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UQ706GB9U",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ceyBG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "do you mean switching backends services. I live by this diagram."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1648225531.357829",
        "client_msg_id": "82adf278-f505-474a-aad8-b52b4792ffcb",
        "thread_ts": "1648211888.622649",
        "parent_user_id": "U014WA16VNJ",
        "reactions": [
            {
                "name": "brain",
                "users": [
                    "UFPPABQ7P",
                    "U014WA16VNJ",
                    "U02PDVC9CNT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1648226929.416679",
        "client_msg_id": "ae74e55e-7056-4c7a-a1a1-228a2c5cf2fa",
        "text": "Part of it might also be the mental \"snap to grid\" effect, for lack of a better term, where the existence of a \"good enough\" UI widget means most people won't bother to create something new and different that might be an even better fit for a particular situation.\n\nFor instance, if you want to turn something off and on, you could use:\n• An \"On\" button that turns into an \"Off\" button, like a toggle or checkbox\n• Two separate buttons (perhaps segmented), like a radio selector, or a select \/ pulldown with 2 options\n• A button that you need to press and hold for \"On\" which reverts to \"Off\" when released, or the same but on hover rather than on press\n• A box \/ region that you drag some other object into for \"On\", and drag it back out for \"Off\"\n• A button that will \"latch\" into the \"On\" state when clicked, which requires a complicated procedure of clicking many other buttons to release the latch and turn it off\nThe first three examples are fairly simple \/ obvious, and are thus ubiquitous. There are probably other simple \/ obvious approaches, but probably not many, because the interaction here is really, really simple — it's a binary off \/ on. Looking at the real world, it's hard to find examples of a binary off \/ on control that aren't basically the same as the top 3 bullets. And when they are different, it's usually through some additional elaboration that serves some other purpose than \"make it simple \/ obvious to turn the thing off \/ on\", much like the last 2 bullets.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U4H6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Part of it might also be the mental \"snap to grid\" effect, for lack of a better term, where the existence of a \"good enough\" UI widget means most people won't bother to create something new and different that might be an even better fit for a particular situation.\n\nFor instance, if you want to turn something off and on, you could use:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "An \"On\" button that turns into an \"Off\" button, like a toggle or checkbox"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Two separate buttons (perhaps segmented), like a radio selector, or a select \/ pulldown with 2 options"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A button that you need to press and hold for \"On\" which reverts to \"Off\" when released, or the same but on hover rather than on press"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A box \/ region that you drag some other object into for \"On\", and drag it back out for \"Off\""
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A button that will \"latch\" into the \"On\" state when clicked, which requires a complicated procedure of clicking many other buttons to release the latch and turn it off"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe first three examples are fairly simple \/ obvious, and are thus ubiquitous. There are probably other simple \/ obvious approaches, but probably not many, because the interaction here is really, really simple — it's a binary off \/ on. Looking at the real world, it's hard to find examples of a binary off \/ on control that aren't basically the same as the top 3 bullets. And when they are different, it's usually through some additional elaboration that serves some other purpose than \"make it simple \/ obvious to turn the thing off \/ on\", much like the last 2 bullets."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1648227118.907689",
        "client_msg_id": "d4ae5e0a-008c-494d-9e1e-ea946a14a07b",
        "text": "1D continuous inputs are similar, but allow a fair bit more customization:\n• Min\/max limits (a slider), or infinite (a knob)?\n• Detents\n• Nonlinear relationship between input and output\n• Return-to-initial-position when released\nThere are a lot more things about these that can be customized, especially when you get into the physical world. For instance, a slider that resists motion in one direction but not the other (which recently went mainstream in a software context with the adaptive triggers on the PS5 controller).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8wad",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "1D continuous inputs are similar, but allow a fair bit more customization:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Min\/max limits (a slider), or infinite (a knob)?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Detents"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Nonlinear relationship between input and output"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Return-to-initial-position when released"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThere are a lot more things about these that can be customized, especially when you get into the physical world. For instance, a slider that resists motion in one direction but not the other (which recently went mainstream in a software context with the adaptive triggers on the PS5 controller)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1648227269.940419",
        "client_msg_id": "0af134d8-c8ba-4bca-8b36-a44ea07e0a4e",
        "text": "In software, you can add all sorts of elaborations, but any elaboration needs to have some justifiable reason to exist, and that reason needs to be communicated to the user somehow (either out-of-band, or perhaps implicitly through the interaction itself). This is a challenge. So that \"snap to grid\" effect kicks in, and people go with the simple \/ obvious standards. These standards lack _texture_, but at least they don't impose a new learning curve, they don't reveal new accessibility problems, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PP0rs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In software, you can add all sorts of elaborations, but any elaboration needs to have some justifiable reason to exist, and that reason needs to be communicated to the user somehow (either out-of-band, or perhaps implicitly through the interaction itself). This is a challenge. So that \"snap to grid\" effect kicks in, and people go with the simple \/ obvious standards. These standards lack "
                            },
                            {
                                "type": "text",
                                "text": "texture",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but at least they don't impose a new learning curve, they don't reveal new accessibility problems, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1648227744.170469",
        "client_msg_id": "2dac31bd-0968-45b7-96c6-11cdab8cd37f",
        "text": "Unrelated to the above, here's another aspect: we tend to see new UI widgets when there's a new UI paradigm. The 2D GUI is pretty well-explored at this point. 3D GUIs are almost as old, and not as fully explored, but we still see an increasing degree of stability there (ie: look at in-world GUI elements in games and game engines, like beacons\/markers, paths, brushes. Also look at the common in-viewport GUI elements in 3D apps, like surface normals, TRS-manipulators, the way verts\/edges\/faces are depicted, etc.)\n\nWe haven't explored VR nearly enough to reach consensus. Likewise, voice interfaces. Likewise, tangible dynamic media (Dynamicland, Reactable, etc). So if these new paradigms continue to grow and expand in usage, we'll probably eventually see a standard set of interface conventions emerge for them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648154366.171239",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7ND",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unrelated to the above, here's another aspect: we tend to see new UI widgets when there's a new UI paradigm. The 2D GUI is pretty well-explored at this point. 3D GUIs are almost as old, and not as fully explored, but we still see an increasing degree of stability there (ie: look at in-world GUI elements in games and game engines, like beacons\/markers, paths, brushes. Also look at the common in-viewport GUI elements in 3D apps, like surface normals, TRS-manipulators, the way verts\/edges\/faces are depicted, etc.)\n\nWe haven't explored VR nearly enough to reach consensus. Likewise, voice interfaces. Likewise, tangible dynamic media (Dynamicland, Reactable, etc). So if these new paradigms continue to grow and expand in usage, we'll probably eventually see a standard set of interface conventions emerge for them."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UBN9AFS0N",
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1648229519.737769",
        "client_msg_id": "3f79e9d5-010a-4476-ac1b-43def0290ebc",
        "text": "Yes, any i\/o potentially introduces some level of indeterminacy (whether or not it's async) as the input may be different on another run, but that's both a necessary and tractable problem. This is unlike multiple threads preemptively writing on the same memory at the same time, which is an environment where even the world's top experts have been shown to be unable to write correct code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1647422642.414839",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pg8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, any i\/o potentially introduces some level of indeterminacy (whether or not it's async) as the input may be different on another run, but that's both a necessary and tractable problem. This is unlike multiple threads preemptively writing on the same memory at the same time, which is an environment where even the world's top experts have been shown to be unable to write correct code."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UK3LH8CF5"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1648235135.414739",
        "client_msg_id": "e0cc5dcc-9a00-4735-be38-a144cf5d3ea3",
        "text": "Isn't that part of the fundamental complexity of concurrency? Async is a solution to the problem of variable IO. Async is all about having more control over code scheduling using more accurate domain knowledge. It doesn't hide scheduling from you. It actually makes it more explicit so you can exploit it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1647422642.414839",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=ud",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't that part of the fundamental complexity of concurrency? Async is a solution to the problem of variable IO. Async is all about having more control over code scheduling using more accurate domain knowledge. It doesn't hide scheduling from you. It actually makes it more explicit so you can exploit it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1648243726.162199",
        "client_msg_id": "98a3309b-881f-418b-ab83-0713f0f6feec",
        "text": "Not sure it's precisely the same, but it reminds me of when I was trying to figure out how to mix procedurally and manually generated content. For instance trying to generate a map with a broad outline of terrain, plains here and mountains there, perhaps going into detail on a specific mountain pass that must be just so for your story to work, but leaving the rest up to the generator. That midpoint displacement algorithm or whatever that drives your mountains needs to plan to meet up with your finely specified terrain even while it's still roughing out where the peaks are going to go. <https:\/\/en.m.wikipedia.org\/wiki\/File:Animated_fractal_mountain.gif|https:\/\/en.m.wikipedia.org\/wiki\/File:Animated_fractal_mountain.gif>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1648211888.622649",
        "parent_user_id": "U014WA16VNJ",
        "attachments": [
            {
                "from_url": "https:\/\/en.m.wikipedia.org\/wiki\/File:Animated_fractal_mountain.gif",
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/6\/6d\/Animated_fractal_mountain.gif",
                "image_width": 542,
                "image_height": 295,
                "image_bytes": 192498,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.m.wikipedia.org\/wiki\/File:Animated_fractal_mountain.gif",
                "fallback": "wikipedia: File:Animated fractal mountain.gif",
                "title": "File:Animated fractal mountain.gif",
                "title_link": "https:\/\/en.m.wikipedia.org\/wiki\/File:Animated_fractal_mountain.gif",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UqNh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure it's precisely the same, but it reminds me of when I was trying to figure out how to mix procedurally and manually generated content. For instance trying to generate a map with a broad outline of terrain, plains here and mountains there, perhaps going into detail on a specific mountain pass that must be just so for your story to work, but leaving the rest up to the generator. That midpoint displacement algorithm or whatever that drives your mountains needs to plan to meet up with your finely specified terrain even while it's still roughing out where the peaks are going to go. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/File:Animated_fractal_mountain.gif",
                                "text": "https:\/\/en.m.wikipedia.org\/wiki\/File:Animated_fractal_mountain.gif"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1648252082.188639",
        "client_msg_id": "18f48145-f830-43f4-96cf-e72ce3e75289",
        "text": "No, we can have multiple stacks without preemption. This isn't for every situation (e.g. when you actually need to run threads in parallel on different cores) but for most situations in desktop, web, and even server apps, coroutines allow us to avoid the complexity of state machines (by using stacks) without making in impossible to write correct code (as preemption does). As for controlling scheduling, I don't see why your coroutine scheduling code can't provide ways for you to do whatever you like. Many languages with coroutines (e.g. Lua) leave scheduling up to the programmer. I think this is a mistake though, as modules from different programmers can be effectively incompatible without a shared scheduler.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1647422642.414839",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gmhf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No, we can have multiple stacks without preemption. This isn't for every situation (e.g. when you actually need to run threads in parallel on different cores) but for most situations in desktop, web, and even server apps, coroutines allow us to avoid the complexity of state machines (by using stacks) without making in impossible to write correct code (as preemption does). As for controlling scheduling, I don't see why your coroutine scheduling code can't provide ways for you to do whatever you like. Many languages with coroutines (e.g. Lua) leave scheduling up to the programmer. I think this is a mistake though, as modules from different programmers can be effectively incompatible without a shared scheduler."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1648252243.470739",
        "client_msg_id": "96cfc8ce-fcdb-4f3d-8768-b9f387e8a043",
        "text": "Coroutines also have the advantage (depending on how they are implemented) of having far smaller (and extendable) stacks than preemptive threads, which allows them to scale to several orders of magnitude more concurrency than preemptive\/OS threads.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1647422642.414839",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OXgI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Coroutines also have the advantage (depending on how they are implemented) of having far smaller (and extendable) stacks than preemptive threads, which allows them to scale to several orders of magnitude more concurrency than preemptive\/OS threads."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1648256901.538549",
        "client_msg_id": "e87a62db-4634-42a1-a325-affa44c1e2a7",
        "text": "My response was for <@UK3LH8CF5> and not you, <@ULM3U6275>. I think there was some ordering confusion here. I'm not sure I follow exactly which response you are responding to but I think we are saying compatible things? I didn't mention anything about preemption, but maybe that's a response to someone else? I think we agree. I was saying \"any i\/o introduces some level of indeterminacy\" in a different (maybe less clear) way. Though I don't think it's a mistake to expose the underlying scheduler, but I'm biased towards performance tuning over code reuse.\n\nIsn't cpu scheduling a state machine by definition? The difference between preemptive and cooperative scheduling (coroutines, async, etc...) is that you are matching the state transitions to more closely align with the program logic instead of being controlled by an external algorithm?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1647422642.414839",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eRNX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My response was for "
                            },
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " and not you, "
                            },
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": ". I think there was some ordering confusion here. I'm not sure I follow exactly which response you are responding to but I think we are saying compatible things? I didn't mention anything about preemption, but maybe that's a response to someone else? I think we agree. I was saying \"any i\/o introduces some level of indeterminacy\" in a different (maybe less clear) way. Though I don't think it's a mistake to expose the underlying scheduler, but I'm biased towards performance tuning over code reuse.\n\nIsn't cpu scheduling a state machine by definition? The difference between preemptive and cooperative scheduling (coroutines, async, etc...) is that you are matching the state transitions to more closely align with the program logic instead of being controlled by an external algorithm?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]