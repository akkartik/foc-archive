[
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1601466678.069900",
        "edited": {
            "user": "UPVBV34EL",
            "ts": "1601466745.000000"
        },
        "client_msg_id": "535ef79d-3e27-4997-8c32-8d394817089f",
        "text": "I understand it better now. It has the possibility of being a game changer in the field of using machine learning on code. Great initiative. What kind of involvement are you expecting from people? I would be happy to help out and in be involved in this from an early stage.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TyS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I understand it better now. It has the possibility of being a game changer in the field of using machine learning on code. Great initiative. What kind of involvement are you expecting from people? I would be happy to help out and in be involved in this from an early stage."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1601468992.070500",
        "client_msg_id": "ff5fa546-1ba8-4671-87c7-2db1e43e39b4",
        "text": "What's the future of side effects?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "reply_count": 29,
        "reply_users_count": 14,
        "latest_reply": "1627992425.023300",
        "reply_users": [
            "UNCP67JSK",
            "UE6EFEPTQ",
            "UBN9AFS0N",
            "UE1JQM9HQ",
            "UN06QADNV",
            "UDQBTJ211",
            "UFZFETUH1",
            "UN57U8V53",
            "UN9SCH5RD",
            "U016VUZGUUQ",
            "UHWC9PXBL",
            "UJN1TAYEQ",
            "UCGAK10LS",
            "U017TE5R09M"
        ],
        "replies": [
            {
                "user": "UNCP67JSK",
                "ts": "1601469297.073000"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1601469321.073200"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1601469375.073400"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1601469505.073900"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1601472292.074100"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1601472517.074300"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1601472646.074500"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1601472903.074700"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1601472937.074900"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1601472997.075100"
            },
            {
                "user": "UN06QADNV",
                "ts": "1601474836.075500"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1601477895.075800"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1601479448.076000"
            },
            {
                "user": "UFZFETUH1",
                "ts": "1601480966.076200"
            },
            {
                "user": "UFZFETUH1",
                "ts": "1601482120.076500"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1601482655.076700"
            },
            {
                "user": "UN57U8V53",
                "ts": "1601484008.078200"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1601484717.079600"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1601485703.079900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1601491457.082600"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1601498651.082900"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1601504545.096800"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1601507115.097500"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1601520834.106600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1601552062.111900"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1601555025.112200"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1601578120.120600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1601593895.135000"
            },
            {
                "user": "U017TE5R09M",
                "ts": "1627992425.023300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "16E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's the future of side effects?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1601469297.073000",
        "edited": {
            "user": "UNCP67JSK",
            "ts": "1601469462.000000"
        },
        "client_msg_id": "FAF2BBA1-C666-4162-879A-441125908943",
        "text": "modeled as a \"possibly affecting\" graph, and thus possible to reason about, while limiting the spread of model-precision-degradation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "38c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "modeled as a \"possibly affecting\" graph, and thus possible to reason about, while limiting the spread of model-precision-degradation."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UDQBTJ211",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1601469321.073200",
        "client_msg_id": "09cf5882-271e-4db1-a0da-ee89e5e0b104",
        "text": "Define side effects. Ta :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5U1e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Define side effects. Ta "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1601469375.073400",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1601469385.000000"
        },
        "client_msg_id": "4ff09939-f440-471c-b682-29efd58a82fa",
        "text": "anything that make a function not pure, interacting with the \"outside\", examples: write to disk, network request, read from a socket",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g4V2V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "anything that make a function not pure, interacting with the \"outside\", examples: write to disk, network request, read from a socket"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1601469505.073900",
        "client_msg_id": "467900df-bc88-455f-bcb2-0ada18427781",
        "text": "I won't mess with this thread with my heresies, so don't answer this: suffice to stay, \"start with side effects\"!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SR0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I won't mess with this thread with my heresies, so don't answer this: suffice to stay, \"start with side effects\"!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDKTZSD6H",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1601472292.074100",
        "client_msg_id": "82bc135d-936c-456c-b2b5-ae336614e6f0",
        "text": "<@UE6EFEPTQ> now I really want to hear more :slightly_smiling_face:. In what way “start with”?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wBZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " now I really want to hear more "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". In what way “start with”?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1601472517.074300",
        "client_msg_id": "de35c0ee-39ac-4be0-9296-176491ce89e2",
        "text": "I said don't answer! This is a functional programming thread! :hugging_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FwA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I said don't answer! This is a functional programming thread! "
                            },
                            {
                                "type": "emoji",
                                "name": "hugging_face",
                                "unicode": "1f917"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1601472646.074500",
        "client_msg_id": "842bdd97-c034-4c07-9f27-f1605412c5a7",
        "text": "The OP's question was posed with a hidden presumption that respondents have already agreed to tie their hands and feet with pure FP :blush:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SKH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The OP's question was posed with a hidden presumption that respondents have already agreed to tie their hands and feet with pure FP "
                            },
                            {
                                "type": "emoji",
                                "name": "blush",
                                "unicode": "1f60a"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UE1JQM9HQ",
                    "U01A1C2K8MP"
                ],
                "count": 2
            },
            {
                "name": "slightly_smiling_face",
                "users": [
                    "U017TE5R09M"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1601472903.074700",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1601473079.000000"
        },
        "client_msg_id": "cbe4d2d4-891c-4d47-a6d9-62435ba86b91",
        "text": "nope, I'm not an FP fundamentalist, I don't even use types that much (python, js, erlang and elixir are the languages I use the most)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "209",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "nope, I'm not an FP fundamentalist, I don't even use types that much (python, js, erlang and elixir are the languages I use the most)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1601472937.074900",
        "client_msg_id": "e0c3b720-9e77-4e67-95a6-1c01e7aaa3ff",
        "text": "but I don't like to write code full of side effects, hard to test, hard to reason about, hard to know all the edge cases",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nICw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but I don't like to write code full of side effects, hard to test, hard to reason about, hard to know all the edge cases"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1601472997.075100",
        "client_msg_id": "6b4d83d8-2849-4b0f-9e12-fb3a7b2f985b",
        "text": "I also don't like mocks and doing dependency injection everywhere to be able to switch the side effect parts is a lot of work",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+cm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also don't like mocks and doing dependency injection everywhere to be able to switch the side effect parts is a lot of work"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN06QADNV",
        "type": "message",
        "ts": "1601474836.075500",
        "client_msg_id": "6b9ac24c-4da3-40a5-9635-36df4c990995",
        "text": "ooh oooh; good news everyone; I've actually totally solved this!!!!\nOK so.... that was a lie; just to put you in the correct mindset of TRUST NOTHING THAT FOLLOWs.\n\nI would be interested in exploring how \"developer tooling\" could get better at addressing this. I use that term rather broadly; so would put \"type systems\" and \"interpreters that support dynamic languages\" into the bucket of developer tooling.\n\nDesign of these tools is the hard part. I'm currently of the hypothesis that highly opinionated tools are great; as long as they restrict users in \"the right way\"\n\nSo one day in fantasy land our tools will tell us where our impure code is. And let us chose our poison in a boilerplate friendly way of how we wish to address testing; probably using different trade offs at different stages of various test cycles.\n\nThe \"lessons learned\" in building type systems is likely a fertile learning ground\n\nThe last 15 years in API design lessons relating to \"high performance IO\" must have some critical insights.\n\nIf we can put all those take aways in one box; that might be the starting point for having enough info to build the end-game of effect management.\n\n(I clearly need to work on refining my thinking &amp; communication thereof in this space)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g96c2c97e5ed",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/96c2c97e5edea550b6935e656f64204c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Brent",
            "display_name": "Brent",
            "team": "T5TCAFTA9",
            "name": "brentgracey",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wz+vK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ooh oooh; good news everyone; I've actually totally solved this!!!!\nOK so.... that was a lie; just to put you in the correct mindset of TRUST NOTHING THAT FOLLOWs.\n\nI would be interested in exploring how \"developer tooling\" could get better at addressing this. I use that term rather broadly; so would put \"type systems\" and \"interpreters that support dynamic languages\" into the bucket of developer tooling.\n\nDesign of these tools is the hard part. I'm currently of the hypothesis that highly opinionated tools are great; as long as they restrict users in \"the right way\"\n\nSo one day in fantasy land our tools will tell us where our impure code is. And let us chose our poison in a boilerplate friendly way of how we wish to address testing; probably using different trade offs at different stages of various test cycles.\n\nThe \"lessons learned\" in building type systems is likely a fertile learning ground\n\nThe last 15 years in API design lessons relating to \"high performance IO\" must have some critical insights.\n\nIf we can put all those take aways in one box; that might be the starting point for having enough info to build the end-game of effect management.\n\n(I clearly need to work on refining my thinking & communication thereof in this space)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1601477895.075800",
        "client_msg_id": "2bd368a6-a23a-45b4-a10e-81b9ca0493e2",
        "text": "If the choice is between \"no side effects\" (e.g. Haskell) and \"no guarantees\" (e.g. Python) then I think Python is better, because your assumptions about side effects are usually right.\n\nThe claims such as \"a + b could format your HD\" are basically nonsense, whereas the impractically of a pure FP language are actually real (for me at least).\n\nIt does annoy me that I can't actively mark something as pure and have it enforced.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hEt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If the choice is between \"no side effects\" (e.g. Haskell) and \"no guarantees\" (e.g. Python) then I think Python is better, because your assumptions about side effects are usually right.\n\nThe claims such as \"a + b could format your HD\" are basically nonsense, whereas the impractically of a pure FP language are actually real (for me at least).\n\nIt does annoy me that I can't actively mark something as pure and have it enforced."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "U01A1C2K8MP",
                    "U017TE5R09M"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1601479448.076000",
        "client_msg_id": "877640c9-310e-4115-b8ba-be681db67ab3",
        "text": "who\/what claims that \"a + b could format your HD\"?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sddS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "who\/what claims that \"a + b could format your HD\"?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFZFETUH1",
        "type": "message",
        "ts": "1601480966.076200",
        "edited": {
            "user": "UFZFETUH1",
            "ts": "1601481508.000000"
        },
        "client_msg_id": "cb87febc-afbd-4a42-8329-90a49dd1e19c",
        "text": "Ok huh. We're not in <#C0133ED5811|of-functional-programming> , but I'd like to propose a recent functional programming innovation: Algebraic Effects.\n\nI wouldn't bother too much in understanding the name (I don't quite get why it's named that), but the essence is this:\n\n1. Annotate your function types with the effects they can have. Haskell kind of has this with IO, for example. but IO is this behemoth that can do anything. And you can't get rid of it, once something in your call stack uses it, you have to be IO as well. In contrast, if you use e.g. the `State` monad, you can resolve it at a higher level by running it, and you'll get back a pure value.\n2. All the annotated side-effects your functions can generate are accumulated. So a function that needs an effect like `readFile : FilePath -&gt; String` will be composable with a function that needs an effect like `openSocket : () -&gt; SocketId` . The resulting expression will contain both effects.\n3. Finally, all the effects don't actually refer to actual implementations, but rather, they refer to something like datatypes. At any point you can do something similar to what try-catch does to exceptions: You can handle effects. Thus, you can e.g. always return the same (mocked) string for `readFile : FilePath -&gt; String`. Or you can accumulate all files written with the `writeFile : FilePath -&gt; String -&gt; ()` effect.\nIf you want to learn more about algebraic effects, I recommend looking at <http:\/\/unisonweb.org|unisonweb.org>. Other than that, there's the typescript-like language koka (microsoft research) and the paper for \"Frank\", horribly named \"Do be do be do\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga72dfb84ee3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a72dfb84ee31009c2810f7f590d4ff8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Philipp Krüger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "philipp.krueger1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "==9MF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok huh. We're not in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C0133ED5811"
                            },
                            {
                                "type": "text",
                                "text": " , but I'd like to propose a recent functional programming innovation: Algebraic Effects.\n\nI wouldn't bother too much in understanding the name (I don't quite get why it's named that), but the essence is this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Annotate your function types with the effects they can have. Haskell kind of has this with IO, for example. but IO is this behemoth that can do anything. And you can't get rid of it, once something in your call stack uses it, you have to be IO as well. In contrast, if you use e.g. the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "State",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " monad, you can resolve it at a higher level by running it, and you'll get back a pure value."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "All the annotated side-effects your functions can generate are accumulated. So a function that needs an effect like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "readFile : FilePath -> String",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " will be composable with a function that needs an effect like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "openSocket : () -> SocketId",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " . The resulting expression will contain both effects."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Finally, all the effects don't actually refer to actual implementations, but rather, they refer to something like datatypes. At any point you can do something similar to what try-catch does to exceptions: You can handle effects. Thus, you can e.g. always return the same (mocked) string for "
                                    },
                                    {
                                        "type": "text",
                                        "text": "readFile : FilePath -> String",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ". Or you can accumulate all files written with the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "writeFile : FilePath -> String -> ()",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " effect."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIf you want to learn more about algebraic effects, I recommend looking at "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/unisonweb.org",
                                "text": "unisonweb.org"
                            },
                            {
                                "type": "text",
                                "text": ". Other than that, there's the typescript-like language koka (microsoft research) and the paper for \"Frank\", horribly named \"Do be do be do\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFZFETUH1",
        "type": "message",
        "ts": "1601482120.076500",
        "client_msg_id": "f2d8dcbf-6e66-4bf8-9c90-473d2a35a3fb",
        "text": "<@UDQBTJ211> I know some people say 'Haskell doesn't have side effects', and I know why they do: From the perspective of haskell's type system, haskell doesn't have side effects.\n\nHowever, in reality, you can write and read files in haskell, thus, it has side effects.\n\n&gt; It does annoy me that I can't actively mark something as pure and have it enforced.\nThis is what motivated me to answer you: In haskell, if a function is annotated with `IO`, including this computation in the `main :: IO ()` computation will run its side effects. If not, it's pure.\n\nI feel like this is exactly fulfills your wish.\n\nHowever, writing IO functions is not very common in haskell. In fact, you try to write as much pure logic as possible, before your call stack approaches the outermost layer of your application, which is written in IO. I feel like this is one big difference between haskell and python, and it's not about functionality, it's about conventions.\n\nIn terms of functionality, there's one big difference between haskell and python: Types. However, if your goal is annotating pure-ness and statically enforcing this, you'll probably need some form of type system (even if only two types exist \"has side effect\" and \"doesn't have side effect\").\n\nSo... yay types, yay haskell? :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga72dfb84ee3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a72dfb84ee31009c2810f7f590d4ff8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Philipp Krüger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "philipp.krueger1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "72wSB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " I know some people say 'Haskell doesn't have side effects', and I know why they do: From the perspective of haskell's type system, haskell doesn't have side effects.\n\nHowever, in reality, you can write and read files in haskell, thus, it has side effects.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It does annoy me that I can't actively mark something as pure and have it enforced."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is what motivated me to answer you: In haskell, if a function is annotated with "
                            },
                            {
                                "type": "text",
                                "text": "IO",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", including this computation in the "
                            },
                            {
                                "type": "text",
                                "text": "main :: IO ()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " computation will run its side effects. If not, it's pure.\n\nI feel like this is exactly fulfills your wish.\n\nHowever, writing IO functions is not very common in haskell. In fact, you try to write as much pure logic as possible, before your call stack approaches the outermost layer of your application, which is written in IO. I feel like this is one big difference between haskell and python, and it's not about functionality, it's about conventions.\n\nIn terms of functionality, there's one big difference between haskell and python: Types. However, if your goal is annotating pure-ness and statically enforcing this, you'll probably need some form of type system (even if only two types exist \"has side effect\" and \"doesn't have side effect\").\n\nSo... yay types, yay haskell? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1601482655.076700",
        "client_msg_id": "7b3cae78-e251-4820-8fb7-ad19e10e0d63",
        "text": "<@UBN9AFS0N> in many languages + can have arbitrary side effects, e.g. in c++ the operator might be overloaded, in Python it might have ___add___() set, and therefore it could do anything. (People use \"format your HD\" as a deliberately exaggerated example of a side effect)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NFsN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " in many languages + can have arbitrary side effects, e.g. in c++ the operator might be overloaded, in Python it might have __"
                            },
                            {
                                "type": "text",
                                "text": "add",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "__() set, and therefore it could do anything. (People use \"format your HD\" as a deliberately exaggerated example of a side effect)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601483794.076900",
        "client_msg_id": "a74cb023-5f58-4cfb-bb78-bc1e7ce3ba55",
        "text": "You can join the mailing list to join in discussions, or discuss on-wiki for now, or help us writing code. Once we launch the wiki itself there will be more opportunities, that is planned for next year.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tGN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can join the mailing list to join in discussions, or discuss on-wiki for now, or help us writing code. Once we launch the wiki itself there will be more opportunities, that is planned for next year."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UPVBV34EL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1601484008.078200",
        "client_msg_id": "ADC78466-10DA-4706-9975-7A3CBDD4DB24",
        "text": "Right now, the FP community is messing with row types and algebraic effects.\nThere is also this fun document on coeffects: <http:\/\/tomasp.net\/coeffects\/|http:\/\/tomasp.net\/coeffects\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "title": "Coeffects: Context-aware programming languages",
                "title_link": "http:\/\/tomasp.net\/coeffects\/",
                "text": "Interactive essay that explains theory of coeffects and lets you type-check and run sample programs.",
                "fallback": "Coeffects: Context-aware programming languages",
                "thumb_url": "http:\/\/tomasp.net\/coeffects\/favicon-194x194.png",
                "from_url": "http:\/\/tomasp.net\/coeffects\/",
                "thumb_width": 194,
                "thumb_height": 194,
                "service_icon": "http:\/\/tomasp.net\/coeffects\/favicon.ico",
                "service_name": "tomasp.net",
                "id": 1,
                "original_url": "http:\/\/tomasp.net\/coeffects\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ECe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right now, the FP community is messing with row types and algebraic effects.\nThere is also this fun document on coeffects: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/tomasp.net\/coeffects\/",
                                "text": "http:\/\/tomasp.net\/coeffects\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1601484717.079600",
        "client_msg_id": "90087a4c-5881-4759-9e07-bb04d7da9f06",
        "text": "I want to see a good open source implementation of state charts (note: state charts, not state machines). I think all the robust implementations are commercial, hence harder to gain wider acceptance. I still have to keep up to Harel's new work, he's still working on this area (ex: recent paper <https:\/\/arxiv.org\/abs\/1911.10691>). I don't know what scenario-based programming is but I bet there's something good in there :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "service_name": "arXiv.org",
                "title": "Integrating Inter-Object Scenarios with Intra-object Statecharts...",
                "title_link": "https:\/\/arxiv.org\/abs\/1911.10691",
                "text": "In all software development projects, engineers face the challenge of translating the requirements layer into a design layer, then into an implementation-code layer, and then validating the...",
                "fallback": "arXiv.org: Integrating Inter-Object Scenarios with Intra-object Statecharts...",
                "from_url": "https:\/\/arxiv.org\/abs\/1911.10691",
                "service_icon": "https:\/\/static.arxiv.org\/static\/browse\/0.3.3\/images\/icons\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/arxiv.org\/abs\/1911.10691"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AuwI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to see a good open source implementation of state charts (note: state charts, not state machines). I think all the robust implementations are commercial, hence harder to gain wider acceptance. I still have to keep up to Harel's new work, he's still working on this area (ex: recent paper "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arxiv.org\/abs\/1911.10691"
                            },
                            {
                                "type": "text",
                                "text": "). I don't know what scenario-based programming is but I bet there's something good in there "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1601485703.079900",
        "client_msg_id": "0ba7e100-8bb6-4093-9353-e8e4635bc229",
        "text": "I was literally just thinking yesterday, \"dang, algebraic effects are the future\". This paper from MS Research is a nice intro, especially section 2. <https:\/\/www.microsoft.com\/en-us\/research\/publication\/algebraic-effects-for-functional-programming\/|https:\/\/www.microsoft.com\/en-us\/research\/publication\/algebraic-effects-for-functional-programming\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "service_name": "Microsoft Research",
                "title": "Algebraic Effects for Functional Programming - Microsoft Research",
                "title_link": "https:\/\/www.microsoft.com\/en-us\/research\/publication\/algebraic-effects-for-functional-programming\/",
                "text": "Algebraic effect handlers, are recently gaining in popularity as a purely functional approach to modeling effects. In this article, we give an end-to-end overview of practical algebraic effects in the context of a compiled implementation in the Koka language. In particular, we show how algebraic effects generalize over common constructs like exception handling, state, iterators […]",
                "fallback": "Microsoft Research: Algebraic Effects for Functional Programming - Microsoft Research",
                "from_url": "https:\/\/www.microsoft.com\/en-us\/research\/publication\/algebraic-effects-for-functional-programming\/",
                "service_icon": "https:\/\/www.microsoft.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.microsoft.com\/en-us\/research\/publication\/algebraic-effects-for-functional-programming\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p8Ig",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was literally just thinking yesterday, \"dang, algebraic effects are the future\". This paper from MS Research is a nice intro, especially section 2. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.microsoft.com\/en-us\/research\/publication\/algebraic-effects-for-functional-programming\/",
                                "text": "https:\/\/www.microsoft.com\/en-us\/research\/publication\/algebraic-effects-for-functional-programming\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1601491457.082600",
        "client_msg_id": "91F94BA2-9A73-4961-98BD-2811F7E6109E",
        "text": "i don’t understand why we can’t treat all effects as continuation capturing points, use parsing and interpreting to order those continuations hierarchically, and also provide a “script” which is basically a list or tree of dummy inputs and outputs. but i like barely understand continuations :woman-shrugging:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j9j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i don’t understand why we can’t treat all effects as continuation capturing points, use parsing and interpreting to order those continuations hierarchically, and also provide a “script” which is basically a list or tree of dummy inputs and outputs. but i like barely understand continuations "
                            },
                            {
                                "type": "emoji",
                                "name": "woman-shrugging",
                                "unicode": "1f937-200d-2640-fe0f"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1601498651.082900",
        "client_msg_id": "75fc60cc-7745-407f-86c4-41f5c2680d40",
        "text": "Um, we can't? You can definitely think of effects as captures (at least in the form presented in the article I linked), but I'm not sure what you mean by ordering them hierarchically. Do you mean for the purpose of providing isolated simulations?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZkY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Um, we can't? You can definitely think of effects as captures (at least in the form presented in the article I linked), but I'm not sure what you mean by ordering them hierarchically. Do you mean for the purpose of providing isolated simulations?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U019CPED6T1",
        "type": "message",
        "ts": "1601503724.095900",
        "client_msg_id": "a474fd8d-cf41-4ff8-a3fa-613ca07539f2",
        "text": "I'm not sure how to phrase this question. I've been thinking a lot about \"bit rot\" recently. For example, will we reach a point where there are no DVD players that can decode the disks?\n\nOr where there is no existing program to read PowerPoint presentations? \n\nIs this a likely eventuality for systems? Should everything be txt files to avoid this? \n\nAre we going to have our period of history with large gaps from this bit rot problem? \n\nCan we as programmers do anything to avoid this?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa03454e2d2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa03454e2d26593c48c2f67c9fc90534.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Andrew",
            "real_name": "Andrew Carr",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewcarr06",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601503724.095900",
        "reply_count": 9,
        "reply_users_count": 6,
        "latest_reply": "1602183878.169600",
        "reply_users": [
            "U01AD80KMLK",
            "UG0EL18H3",
            "U01A0KANUUU",
            "UJBAJNFLK",
            "UNCP67JSK",
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "U01AD80KMLK",
                "ts": "1601504471.096400"
            },
            {
                "user": "U01AD80KMLK",
                "ts": "1601504499.096600"
            },
            {
                "user": "UG0EL18H3",
                "ts": "1601505379.097000"
            },
            {
                "user": "UG0EL18H3",
                "ts": "1601505716.097200"
            },
            {
                "user": "U01A0KANUUU",
                "ts": "1601507486.097700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1601567010.120000"
            },
            {
                "user": "UNCP67JSK",
                "ts": "1601941405.158400"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1602016602.160700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1602183878.169600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RMXz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure how to phrase this question. I've been thinking a lot about \"bit rot\" recently. For example, will we reach a point where there are no DVD players that can decode the disks?\n\nOr where there is no existing program to read PowerPoint presentations? \n\nIs this a likely eventuality for systems? Should everything be txt files to avoid this? \n\nAre we going to have our period of history with large gaps from this bit rot problem? \n\nCan we as programmers do anything to avoid this?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601504471.096400",
        "client_msg_id": "fa7a5943-9e9a-47f4-b97f-7ad0cf381e04",
        "text": "check the Internet Archive about this, the Long Now Foundation, and the thoughts that Project Gutenberg put into this. GLAMs (Galleries, Libraries, Archives and Museums) have thought about this a lot - you should be able to find papers and work on that topic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601503724.095900",
        "parent_user_id": "U019CPED6T1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6uQW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "check the Internet Archive about this, the Long Now Foundation, and the thoughts that Project Gutenberg put into this. GLAMs (Galleries, Libraries, Archives and Museums) have thought about this a lot - you should be able to find papers and work on that topic."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601504499.096600",
        "client_msg_id": "766a63e1-4264-49e4-9410-c6fb12dfd584",
        "text": "just one example, the work by Katherine Thornton at Yale",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601503724.095900",
        "parent_user_id": "U019CPED6T1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A3Kc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "just one example, the work by Katherine Thornton at Yale"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1601504545.096800",
        "client_msg_id": "569ca978-7ac0-4f72-b680-6653e6caf560",
        "text": "<@UFZFETUH1> said\n&gt; I know some people say 'Haskell doesn't have side effects', and I know why they do: From the perspective of haskell's type system, haskell doesn't have side effects. However, in reality, you can write and read files in haskell, thus, it has side effects.\nA side effect is an _effect_ that happens _on the side_. I\/O actions are effects. Haskell has effects, but it does not have side effects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1h7d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFZFETUH1"
                            },
                            {
                                "type": "text",
                                "text": " said\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know some people say 'Haskell doesn't have side effects', and I know why they do: From the perspective of haskell's type system, haskell doesn't have side effects. However, in reality, you can write and read files in haskell, thus, it has side effects."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A side effect is an "
                            },
                            {
                                "type": "text",
                                "text": "effect",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that happens "
                            },
                            {
                                "type": "text",
                                "text": "on the side",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I\/O actions are effects. Haskell has effects, but it does not have side effects."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UFZFETUH1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UG0EL18H3",
        "type": "message",
        "ts": "1601505379.097000",
        "client_msg_id": "6c64c931-c26f-476e-8dc7-688a183beeed",
        "text": "Not to go too far down the rabbit hole, but yes, this is a very real issue! In fact, something to consider is the point at which the languages we use in this day and age are no longer understood. This is a particular challenge for anyone wishing to convey a message to folks thousands of years in the future: a use case for this might be to warn future generations about the dangers of buried nuclear waste, for instance: <https:\/\/www.currentaffairs.org\/2019\/07\/what-nuclear-semiotics-are>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "25cc47143833",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-01\/702360681283_25cc471438337c72e600_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Rabl",
            "display_name": "crabl",
            "team": "T5TCAFTA9",
            "name": "chris.rabl",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601503724.095900",
        "parent_user_id": "U019CPED6T1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pKk9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not to go too far down the rabbit hole, but yes, this is a very real issue! In fact, something to consider is the point at which the languages we use in this day and age are no longer understood. This is a particular challenge for anyone wishing to convey a message to folks thousands of years in the future: a use case for this might be to warn future generations about the dangers of buried nuclear waste, for instance: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.currentaffairs.org\/2019\/07\/what-nuclear-semiotics-are"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UG0EL18H3",
        "type": "message",
        "ts": "1601505716.097200",
        "edited": {
            "user": "UG0EL18H3",
            "ts": "1601505754.000000"
        },
        "client_msg_id": "281e1381-ca0b-4864-aef0-3a10ad73ba94",
        "text": "The passage that struck me the most in that article (and the reason I included it in my response), grapples with the question “can we as programmers\/technologists do anything to avoid this?“:\n\n```...from the perspective of our era—when the humanities and social sciences are frequently defunded, dismissed, and derided—it's surprising to see an unquestioned faith in the essential relationship between \"hard\" science and social science. The U.S. Department of Energy understood that the nuclear waste disposal problem could not be solved by technological innovation alone; no alloy or neat little locking mechanism would save us from our future selves. Only by examining human nature, and allowing ourselves to conceive of a world beyond all contemporary understanding, could we attempt to protect the planet from the magnitude of what we'd done to it. ```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "25cc47143833",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-01\/702360681283_25cc471438337c72e600_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Rabl",
            "display_name": "crabl",
            "team": "T5TCAFTA9",
            "name": "chris.rabl",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601503724.095900",
        "parent_user_id": "U019CPED6T1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J1BB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The passage that struck me the most in that article (and the reason I included it in my response), grapples with the question “can we as programmers\/technologists do anything to avoid this?“:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...from the perspective of our era—when the humanities and social sciences are frequently defunded, dismissed, and derided—it's surprising to see an unquestioned faith in the essential relationship between \"hard\" science and social science. The U.S. Department of Energy understood that the nuclear waste disposal problem could not be solved by technological innovation alone; no alloy or neat little locking mechanism would save us from our future selves. Only by examining human nature, and allowing ourselves to conceive of a world beyond all contemporary understanding, could we attempt to protect the planet from the magnitude of what we'd done to it. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1601507115.097500",
        "client_msg_id": "0409c664-80e8-4d62-a932-2e1961540bcb",
        "text": "I sympathize with what Mariano wrote:\n&gt; I don't like to write code full of side effects, hard to test, hard to reason about, hard to know all the edge cases. I also don't like mocks and doing dependency injection everywhere to be able to switch the side effect parts is a lot of work.\nOne of my hobby projects is to make a practical programming language that is easy to use, easy to understand, has a low barrier to entry, and has simple semantics. In my language, all functions are pure (function calls do not have side effects), and there is no shared mutable state, because that leads to simpler semantics and less cognitive load. I think my goals are different from functional programming researchers, because there, the focus is on complex type systems. Eg, Haskell is a very complex language with a steep learning curve. Whereas my language is dynamically typed.\n\nAs for \"the future of side effects\", I think there is a much larger design space for side-effect-free programming languages than what is currently explored by FP researchers focused on higher order type theory.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Z72Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I sympathize with what Mariano wrote:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't like to write code full of side effects, hard to test, hard to reason about, hard to know all the edge cases. I also don't like mocks and doing dependency injection everywhere to be able to switch the side effect parts is a lot of work."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of my hobby projects is to make a practical programming language that is easy to use, easy to understand, has a low barrier to entry, and has simple semantics. In my language, all functions are pure (function calls do not have side effects), and there is no shared mutable state, because that leads to simpler semantics and less cognitive load. I think my goals are different from functional programming researchers, because there, the focus is on complex type systems. Eg, Haskell is a very complex language with a steep learning curve. Whereas my language is dynamically typed.\n\nAs for \"the future of side effects\", I think there is a much larger design space for side-effect-free programming languages than what is currently explored by FP researchers focused on higher order type theory."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01A0KANUUU",
        "type": "message",
        "ts": "1601507486.097700",
        "client_msg_id": "355841a9-114e-436c-8a36-6727c0f829ab",
        "text": "And of course there is an Alan Kay paper about that:\n<http:\/\/www.vpri.org\/pdf\/tr2015004_cuneiform.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gca7b3cd16bf",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ca7b3cd16bf67a61acaf224e2219929c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "Eric Gade",
            "display_name": "Eric Gade",
            "team": "T5TCAFTA9",
            "name": "eric.gade",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601503724.095900",
        "parent_user_id": "U019CPED6T1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jXY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And of course there is an Alan Kay paper about that:\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.vpri.org\/pdf\/tr2015004_cuneiform.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1601510649.105100",
        "edited": {
            "user": "UFB8STN7K",
            "ts": "1601511189.000000"
        },
        "client_msg_id": "0b378223-4e86-4b96-b8af-196035027672",
        "text": "I was reading Fred Kjolstad’s thesis (<http:\/\/fredrikbk.com\/publications\/kjolstad-thesis.pdf>) about compilers for sparse linear algebra. He says:\n\n&gt; The issue with libraries of hand-optimized functions boils down to our inability to easily build composable building blocks that perform well. Current sparse linear algebra libraries do not let us compose expressions, data structures, optimization strategies, and architectures without sacrificing performance. The first performance loss is from lost temporal locality—a deficiency that is also present with dense operations. Second, sparse operations may operate on many different data structures, which are each designed to work well on one type of sparsity pattern. If two composed functions do not support the same data structure, then it becomes necessary to perform an expensive conversion between irregular data structures. But the most serious issue is that composing two sparse linear or tensor algebra functions may perform asymptotically worse than a fused function written to compute the entire expression at once.\nThis made me think more generally about the composability vs. performance trade-off.  Being able to compose black box abstractions at a high level is at the very foundation of software engineering, enabling programmers to eliminate boilerplate and more easily use others’ work. Yet composition is the enemy of performance: a careful implementation that fuses two operations is often more efficient than a sequenced invocation of the two. However, most compilers today only offer `#[inline]` pragmas or other extremely shallow means of reducing abstraction\/composition costs. Even the most advanced C++ template magic can’t do the necessary code-reordering to achieve the optimal composition that Fred describes.\n\nSeveral programming systems have good ideas in this direction:\n• Zero-cost abstractions in programming languages (eg Rust <https:\/\/blog.rust-lang.org\/2015\/05\/11\/traits.html>)\n• Separating algorithm from schedule (eg Halide <http:\/\/halide-lang.org\/>)\n• Using higher-order functions to express data parallelism (eg Spark <https:\/\/spark.apache.org\/>)\nCurious to hear others’ thoughts (how will we manage this trade-off in future langs\/compilers?) and pointers to relevant work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601510649.105100",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1601889507.156300",
        "reply_users": [
            "UJN1TAYEQ",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UJN1TAYEQ",
                "ts": "1601517629.106100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1601889507.156300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HL=r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was reading Fred Kjolstad’s thesis ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/fredrikbk.com\/publications\/kjolstad-thesis.pdf"
                            },
                            {
                                "type": "text",
                                "text": ") about compilers for sparse linear algebra. He says:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The issue with libraries of hand-optimized functions boils down to our inability to easily build composable building blocks that perform well. Current sparse linear algebra libraries do not let us compose expressions, data structures, optimization strategies, and architectures without sacrificing performance. The first performance loss is from lost temporal locality—a deficiency that is also present with dense operations. Second, sparse operations may operate on many different data structures, which are each designed to work well on one type of sparsity pattern. If two composed functions do not support the same data structure, then it becomes necessary to perform an expensive conversion between irregular data structures. But the most serious issue is that composing two sparse linear or tensor algebra functions may perform asymptotically worse than a fused function written to compute the entire expression at once."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis made me think more generally about the composability vs. performance trade-off.  Being able to compose black box abstractions at a high level is at the very foundation of software engineering, enabling programmers to eliminate boilerplate and more easily use others’ work. Yet composition is the enemy of performance: a careful implementation that fuses two operations is often more efficient than a sequenced invocation of the two. However, most compilers today only offer "
                            },
                            {
                                "type": "text",
                                "text": "#[inline]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " pragmas or other extremely shallow means of reducing abstraction\/composition costs. Even the most advanced C++ template magic can’t do the necessary code-reordering to achieve the optimal composition that Fred describes.\n\nSeveral programming systems have good ideas in this direction:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Zero-cost abstractions in programming languages (eg Rust "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/blog.rust-lang.org\/2015\/05\/11\/traits.html"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Separating algorithm from schedule (eg Halide "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/halide-lang.org\/"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Using higher-order functions to express data parallelism (eg Spark "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/spark.apache.org\/"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nCurious to hear others’ thoughts (how will we manage this trade-off in future langs\/compilers?) and pointers to relevant work."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U016VUZGUUQ",
                    "U015V233CFL",
                    "U01A57MG2HM",
                    "UDKTZSD6H"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1601517629.106100",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1601517687.000000"
        },
        "client_msg_id": "b462fba3-589d-4b06-9a23-3b67605f8249",
        "text": "Taichi addresses this problem, for sparse arrays on a GPU.\n<http:\/\/taichi.graphics\/wp-content\/uploads\/2019\/09\/taichi_lang.pdf>\n<https:\/\/github.com\/yuanming-hu\/taichi>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601510649.105100",
        "parent_user_id": "UFB8STN7K",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "yuanming-hu\/taichi",
                "title_link": "https:\/\/github.com\/yuanming-hu\/taichi",
                "text": "My fork of <https:\/\/github.com\/taichi-dev\/taichi>. Contribute to yuanming-hu\/taichi development by creating an account on GitHub.",
                "fallback": "GitHub: yuanming-hu\/taichi",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/6553256?s=400&v=4",
                "from_url": "https:\/\/github.com\/yuanming-hu\/taichi",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/yuanming-hu\/taichi"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+3Gd4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Taichi addresses this problem, for sparse arrays on a GPU.\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/taichi.graphics\/wp-content\/uploads\/2019\/09\/taichi_lang.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/yuanming-hu\/taichi"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1601520834.106600",
        "client_msg_id": "69ddab96-83e6-46b4-87ed-cec0a8707e5a",
        "text": "The big advantage of Algebraic Effects seems to lie in the fact that it is a type system for old style imperative code, and functions with side effects, in which the type of a function includes its side effects. That seems like an incremental improvement to the current state of things, with backwards compatibility to the old coding style. Side effects are more visible and more controllable, giving at least some of the advantages of using a side effect free language.\n\nI'm not sure Algebraic Effects provides all the advantages of side-effect-free programming. If you've got a big web of shared mutable state, and you call a function that modifies some of that state as a side effect, AE can tell you that there are side effects but I don't see how it helps you understand what state is being modified. In side effect free programming, the connections are explicit, since you can't modify state that isn't passed as an argument.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z+=y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The big advantage of Algebraic Effects seems to lie in the fact that it is a type system for old style imperative code, and functions with side effects, in which the type of a function includes its side effects. That seems like an incremental improvement to the current state of things, with backwards compatibility to the old coding style. Side effects are more visible and more controllable, giving at least some of the advantages of using a side effect free language.\n\nI'm not sure Algebraic Effects provides all the advantages of side-effect-free programming. If you've got a big web of shared mutable state, and you call a function that modifies some of that state as a side effect, AE can tell you that there are side effects but I don't see how it helps you understand what state is being modified. In side effect free programming, the connections are explicit, since you can't modify state that isn't passed as an argument."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]