[
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1688176784.223859",
        "client_msg_id": "abbe418b-85ce-498d-b973-35c41c93a14c",
        "text": "Hi everyone, I’ve been thinking about using hypertext instead of text files as the medium to represent programs _and their executions_.\nPrograms contain a lot of cross references that are resolved only after the parser\/runtime have had a go. IDEs also redo this parsing work to simulate the same cross references for easy editing. The idea is to embed these references in the medium itself. So, get rid of import statements, file boundaries and such. Each textual reference - function name, type name, any identifier really - would be link to the object it references. Unlike strongly structured environments, this allows some flexibility in representing partial and possibly invalid structures. I’m interested in implementations you know of that match this idea.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "reply_count": 31,
        "reply_users_count": 9,
        "latest_reply": "1689087507.222709",
        "reply_users": [
            "U8A5MS6R1",
            "U01U19ECZTJ",
            "UCUSW7WVD",
            "UJBAJNFLK",
            "U05EREC3DCK",
            "UGWUJUZHT",
            "U02QC0PPER3",
            "U6KQ2S410",
            "U03LJBR6THT"
        ],
        "replies": [
            {
                "user": "U8A5MS6R1",
                "ts": "1688177006.799399"
            },
            {
                "user": "U01U19ECZTJ",
                "ts": "1688177431.749399"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688177695.357569"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1688179265.293859"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688184545.967029"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1688184701.593059"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688184839.712609"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1688184952.214569"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1688193883.502389"
            },
            {
                "user": "U05EREC3DCK",
                "ts": "1688211948.038639"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688249425.972249"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1688253408.334309"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1688253846.867889"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688258729.660449"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1688260474.718849"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1688261232.042339"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688267306.869679"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688268275.855239"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1688282392.993429"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688318668.116859"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1688319741.564619"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688325171.005499"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1688363769.240389"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688364252.706259"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1688368417.823879"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688371071.737869"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1688379464.582099"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1688420320.431729"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1688445462.628399"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1688454125.692439"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1689087507.222709"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U4Yd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi everyone, I’ve been thinking about using hypertext instead of text files as the medium to represent programs "
                            },
                            {
                                "type": "text",
                                "text": "and their executions",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\nPrograms contain a lot of cross references that are resolved only after the parser\/runtime have had a go. IDEs also redo this parsing work to simulate the same cross references for easy editing. The idea is to embed these references in the medium itself. So, get rid of import statements, file boundaries and such. Each textual reference - function name, type name, any identifier really - would be link to the object it references. Unlike strongly structured environments, this allows some flexibility in representing partial and possibly invalid structures. I’m interested in implementations you know of that match this idea."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heartbeat",
                "users": [
                    "UCUSW7WVD",
                    "USH01JEDQ",
                    "U03LJBR6THT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1688177006.799399",
        "client_msg_id": "85ed7e16-0a40-4cf8-9206-27fb05788b26",
        "text": "About “and their executions”: after execution of a metaprogram, and during execution of the program, many references are resolved - perhaps this can also be represented in the same medium. The “generated program” or “execution trace” could form new hypertext objects that reference the original or other new hypertext objects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JhBQf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "About “and their executions”: after execution of a metaprogram, and during execution of the program, many references are resolved - perhaps this can also be represented in the same medium. The “generated program” or “execution trace” could form new hypertext objects that reference the original or other new hypertext objects."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03JUAWDVSR"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01U19ECZTJ",
        "type": "message",
        "ts": "1688177431.749399",
        "client_msg_id": "9b80e3fc-541a-4df0-a36c-1f81cfb234af",
        "text": "Your idea reminds me of Jonathan Edwards' Subtext system: <https:\/\/www.subtext-lang.org\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d80d37c53cd4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-05\/1929520000754_d80d37c53cd4ee3c8f5f_72.png",
            "first_name": "",
            "real_name": "Kevin Greer",
            "display_name": "Kevin Greer",
            "team": "T5TCAFTA9",
            "name": "kgrgreer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R66W=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Your idea reminds me of Jonathan Edwards' Subtext system: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.subtext-lang.org\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1688177695.357569",
        "client_msg_id": "3a82ee08-ee56-4fd2-80a3-0d4e88893c57",
        "text": "Ah yes thanks for bringing that up. I’m familiar with Subtext and in fact using the same structure for both the execution trace and the program is influenced by <https:\/\/vimeo.com\/228372549\/8f5e39658b|Reifying Programming>. The difference here is using hypertext objects as the underlying structure. Subtext tends to have more strict tree like editors.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+lPm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah yes thanks for bringing that up. I’m familiar with Subtext and in fact using the same structure for both the execution trace and the program is influenced by "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/vimeo.com\/228372549\/8f5e39658b",
                                "text": "Reifying Programming"
                            },
                            {
                                "type": "text",
                                "text": ". The difference here is using hypertext objects as the underlying structure. Subtext tends to have more strict tree like editors."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1688179265.293859",
        "client_msg_id": "b2cd032f-2ede-4ca5-bae5-35459462d447",
        "text": "I assume hyperlinks here would be just a mechanism to construct trees?\n\nI've long thought there should be a dual of `link` called `inline`: you don't need to click, you just see the contents of the destination in place. A combination of `link` and `inline` might subsume lots of ideas like Subtext and Brief (<https:\/\/youtube.com\/watch?v=R3MNcA2dpts|https:\/\/youtube.com\/watch?v=R3MNcA2dpts>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "from_url": "https:\/\/youtube.com\/watch?v=R3MNcA2dpts",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/R3MNcA2dpts\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/R3MNcA2dpts?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"&quot;Brief&quot; Concatenative Programming Language Demo\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "id": 1,
                "original_url": "https:\/\/youtube.com\/watch?v=R3MNcA2dpts",
                "fallback": "YouTube Video: \"Brief\" Concatenative Programming Language Demo",
                "title": "\"Brief\" Concatenative Programming Language Demo",
                "title_link": "https:\/\/youtube.com\/watch?v=R3MNcA2dpts",
                "author_name": "Ashley Feniello",
                "author_link": "https:\/\/www.youtube.com\/@AshLeaFen",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YB5a+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I assume hyperlinks here would be just a mechanism to construct trees?\n\nI've long thought there should be a dual of "
                            },
                            {
                                "type": "text",
                                "text": "link",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " called "
                            },
                            {
                                "type": "text",
                                "text": "inline",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": you don't need to click, you just see the contents of the destination in place. A combination of "
                            },
                            {
                                "type": "text",
                                "text": "link",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "inline",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " might subsume lots of ideas like Subtext and Brief ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtube.com\/watch?v=R3MNcA2dpts",
                                "text": "https:\/\/youtube.com\/watch?v=R3MNcA2dpts"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1688184545.967029",
        "client_msg_id": "9c069dea-fa9c-4963-a031-75d8d1f21e74",
        "text": "Thanks for the video - will check it out.\nHyperlinks are not mechanisms just to construct trees. Even in basic cases references form DAGs and even cycles. eg here’s a trivial DAG:\n```class T: ...\ndef f1(a: T): ...\ndef f2(b: T):\n  f1(b)```\nThe `T` annotation in both function definitions link to the class definition. The `f1()` call links to the `f1` function definition.\nAny mutually recursive definition will form cycles.\nNote also the hypertext objects here are individual definitions and dont impose any language semantics.\n\nNot sure I understood the `inline` idea. Are you talking about transclusion?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OOdli",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the video - will check it out.\nHyperlinks are not mechanisms just to construct trees. Even in basic cases references form DAGs and even cycles. eg here’s a trivial DAG:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "class T: ...\ndef f1(a: T): ...\ndef f2(b: T):\n  f1(b)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The "
                            },
                            {
                                "type": "text",
                                "text": "T",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " annotation in both function definitions link to the class definition. The "
                            },
                            {
                                "type": "text",
                                "text": "f1()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " call links to the "
                            },
                            {
                                "type": "text",
                                "text": "f1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " function definition.\nAny mutually recursive definition will form cycles.\nNote also the hypertext objects here are individual definitions and dont impose any language semantics.\n\nNot sure I understood the "
                            },
                            {
                                "type": "text",
                                "text": "inline",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " idea. Are you talking about transclusion?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1688184701.593059",
        "client_msg_id": "880c3ab1-d808-4e48-b3aa-e868c8400d66",
        "text": "Yeah, everything is in Xanadu.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p4lHk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, everything is in Xanadu."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1688184839.712609",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1688184857.000000"
        },
        "client_msg_id": "218b2e41-ee43-47e6-bb88-618a7ad0d032",
        "text": "Indeed I think to `inline` any refererence makes sense. Any hard link should be inline-able by the reader. I don’t think the writer has to decide if the link should be inlined or not.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zU8O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Indeed I think to "
                            },
                            {
                                "type": "text",
                                "text": "inline",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " any refererence makes sense. Any hard link should be inline-able by the reader. I don’t think the writer has to decide if the link should be inlined or not."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1688184952.214569",
        "client_msg_id": "f08f2257-11a9-41b4-8fd4-3532200606e3",
        "text": "There's advantages both ways. Writer deciding can construct experiences.\n\nI mostly care about when writer == reader, so the question is moot.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VWqB0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's advantages both ways. Writer deciding can construct experiences.\n\nI mostly care about when writer == reader, so the question is moot."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1688193883.502389",
        "client_msg_id": "a3026d42-a7b0-4696-9a8a-4485ac912965",
        "text": "<@U8A5MS6R1> One ingredient of your idea is extreme late binding. That's one of the principles of Smalltalk, and Smalltalk IDEs implement some of what is being discussed here, though only within the universe of the image.\n\nExample: Glamorous Toolkit lets you see the definitions of methods you call inline, which is very convenient. Your outline of metaprograms defining programs which again contain dynamically resolved references is pretty much what people call metaprogramming in Smalltalk.\n\nPharo's relatively recent slot mechanism would allow implementing more general types of links, but I haven't seen this done.\n\nSmalltalk users wouldn't call their code \"hypertext\" but rather \"object graph\", as much of the code structure never gets expressed as text. But that seems a minor technical detail to me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lqk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " One ingredient of your idea is extreme late binding. That's one of the principles of Smalltalk, and Smalltalk IDEs implement some of what is being discussed here, though only within the universe of the image.\n\nExample: Glamorous Toolkit lets you see the definitions of methods you call inline, which is very convenient. Your outline of metaprograms defining programs which again contain dynamically resolved references is pretty much what people call metaprogramming in Smalltalk.\n\nPharo's relatively recent slot mechanism would allow implementing more general types of links, but I haven't seen this done.\n\nSmalltalk users wouldn't call their code \"hypertext\" but rather \"object graph\", as much of the code structure never gets expressed as text. But that seems a minor technical detail to me."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]