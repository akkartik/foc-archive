[
    {
        "user": "U018S42NMMM",
        "type": "message",
        "ts": "1735100761.836229",
        "client_msg_id": "0a5fc205-1cd9-4e7e-ad94-c05b8fa53def",
        "text": "This post covered the challenges with graphs : <https:\/\/www.hillelwayne.com\/post\/graph-types\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "972d4c887a7c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-10\/4782052692709_972d4c887a7c689aae4a_72.jpg",
            "first_name": "",
            "real_name": "Nilesh Trivedi",
            "display_name": "Nilesh Trivedi",
            "team": "T5TCAFTA9",
            "name": "nilesh.tr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1734713588.023319",
        "parent_user_id": "U02U0AS3J49",
        "attachments": [
            {
                "from_url": "https:\/\/www.hillelwayne.com\/post\/graph-types\/",
                "service_icon": "https:\/\/www.hillelwayne.com\/favicon.ico",
                "ts": 1709337600,
                "id": 1,
                "original_url": "https:\/\/www.hillelwayne.com\/post\/graph-types\/",
                "fallback": "Hillel Wayne: The Hunt for the Missing Data Type",
                "text": "A (directed) graph is a set of nodes, connected by arrows (edges). The nodes and edges may contain data. Here are some graphs:\n\n \nAll graphs made with graphviz (source)\n\nGraphs are ubiquitous in software engineering:\n Package dependencies form directed graphs, as do module imports. The internet is a graph of links between webpages. Model checkers analyze software by exploring the “state space” of all possible configurations.",
                "title": "The Hunt for the Missing Data Type",
                "title_link": "https:\/\/www.hillelwayne.com\/post\/graph-types\/",
                "service_name": "Hillel Wayne"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X63y8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This post covered the challenges with graphs : "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.hillelwayne.com\/post\/graph-types\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1735103962.024699",
        "client_msg_id": "ebb419a8-18e8-4a7f-9a03-5aae204d6f1a",
        "text": "<@U07BD7U4S4R>, the problem is not using the library. The problem is that after I do something using the library, the representation in my head of what the output will be and how it will behave elsewhere in the code is dramatically wrong.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1734713588.023319",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1E2xF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U07BD7U4S4R"
                            },
                            {
                                "type": "text",
                                "text": ", the problem is not using the library. The problem is that after I do something using the library, the representation in my head of what the output will be and how it will behave elsewhere in the code is dramatically wrong."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1735104043.918729",
        "client_msg_id": "9d829ea1-7091-4fe1-884f-4ec5b1555a3f",
        "text": "<@U018S42NMMM> thanks for the Hillel link. I'm a fan of his and hadn't seen it before. But again, that's addressing bad libraries.. The problem I'm describing is with me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1734713588.023319",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "raQZ7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U018S42NMMM"
                            },
                            {
                                "type": "text",
                                "text": " thanks for the Hillel link. I'm a fan of his and hadn't seen it before. But again, that's addressing bad libraries.. The problem I'm describing is with me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1735107542.432769",
        "client_msg_id": "20c71a9a-3e44-4daa-b20e-dd6492c0e7f5",
        "text": "But I wonder if this isn't the same category of problem that strict typing is supposed to solve, where it detects for you when the shape you are expecting is not the shape that will arrive. But some of the properties that I would need to specify would be across wide portions of the graph, at arbitrary levels of complexity. I could define two OWL ontologies, and use reasoners to validate the before and after versions of the graph data. But that seems like a nightmarish level of overhead. Pydantic for graphs, maybe. :sweat_smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1734713588.023319",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p\/Af8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But I wonder if this isn't the same category of problem that strict typing is supposed to solve, where it detects for you when the shape you are expecting is not the shape that will arrive. But some of the properties that I would need to specify would be across wide portions of the graph, at arbitrary levels of complexity. I could define two OWL ontologies, and use reasoners to validate the before and after versions of the graph data. But that seems like a nightmarish level of overhead. Pydantic for graphs, maybe. "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]