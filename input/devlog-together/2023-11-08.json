[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1699507456.115349",
        "client_msg_id": "fee132ea-48ea-41d9-acd4-3aff88cddace",
        "text": "Now that I've started inserting coroutines into my apps (<https:\/\/futureofcoding.slack.com\/archives\/C0120A3L30R\/p1698818828191999>) to make them more debuggable, I'm starting to find and plug gaps in error recovery:\n• I have to be careful to check the results of coroutine operations, because the underlying coroutine might have thrown an error.\n• Errors in Lua include a call stack, but errors within coroutines don't return the stack by default.\n• If I create a higher-order helper to abstract away the coroutine munging just to smear a computation across frames, does that impact the quality of debug information in the call stack? (Answer: no it doesn't in Lua, but it wasn't obvious.)\n• Call stacks returned by LÖVE aren't _quite_ as clean as plain Lua.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699507456.115349",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1699577246.529979",
        "reply_users": [
            "UML4ZEKDK",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UML4ZEKDK",
                "ts": "1699555669.146779"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1699577246.529979"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xn5U3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now that I've started inserting coroutines into my apps ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C0120A3L30R\/p1698818828191999"
                            },
                            {
                                "type": "text",
                                "text": ") to make them more debuggable, I'm starting to find and plug gaps in error recovery:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I have to be careful to check the results of coroutine operations, because the underlying coroutine might have thrown an error."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Errors in Lua include a call stack, but errors within coroutines don't return the stack by default."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If I create a higher-order helper to abstract away the coroutine munging just to smear a computation across frames, does that impact the quality of debug information in the call stack? (Answer: no it doesn't in Lua, but it wasn't obvious.)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Call stacks returned by LÖVE aren't "
                                    },
                                    {
                                        "type": "text",
                                        "text": "quite",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " as clean as plain Lua."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    }
]