[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1588404594.413600",
        "client_msg_id": "2fac2ce1-4579-40d7-a81f-96a5a4f0c653",
        "text": "And honestly Excel doesn't scale so well.  As for the MS machine, I did not learn until visiting Microsoft (a good many years back now) how they had a real value proposition in supporting business seemingly separate from their role as a pedler of, iffy to my eyes, software.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q=v2e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And honestly Excel doesn't scale so well.  As for the MS machine, I did not learn until visiting Microsoft (a good many years back now) how they had a real value proposition in supporting business seemingly separate from their role as a pedler of, iffy to my eyes, software."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1588405005.413900",
        "client_msg_id": "5e7494cb-a7ba-460b-9304-0fee1ae43a76",
        "text": "<@ULM3U6275> I love it, \"oh, code!\"  That's perfect.  Definitely modeling tools give me a feel of \"fuck it: take the cartesian closure of this and call it a day.\"  (The reference here is to category theory where a Cartesian Closed Category is, basically, one with structures, unions, and functions.)  For example, you add a little bit of parametric modeling.  You think it would be nice to nest these so that parameters to a big model can be passed into its parts.  Then the next thing you know, you want to be able pass models as parameters.  Why not?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Ug",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " I love it, \"oh, code!\"  That's perfect.  Definitely modeling tools give me a feel of \"fuck it: take the cartesian closure of this and call it a day.\"  (The reference here is to category theory where a Cartesian Closed Category is, basically, one with structures, unions, and functions.)  For example, you add a little bit of parametric modeling.  You think it would be nice to nest these so that parameters to a big model can be passed into its parts.  Then the next thing you know, you want to be able pass models as parameters.  Why not?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1588406629.414200",
        "client_msg_id": "751b3e03-0ada-47e7-aede-3bf70a22e24d",
        "text": "At $12 a month per person, for an Office 365 license, MS has an almost insurmountable advantage. Google has been doing their best to cut off their air supply by gradually beefing up Google Sheets, and it is having some effect, but as a programming system once you go beyond simple stuff Excel is pretty ugly. But fully understand why people stay in Excel, because the current popular programming stack, HTML\/CSS\/JS\/Frameworks is more than 10x the effort to learn.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eQtvS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At $12 a month per person, for an Office 365 license, MS has an almost insurmountable advantage. Google has been doing their best to cut off their air supply by gradually beefing up Google Sheets, and it is having some effect, but as a programming system once you go beyond simple stuff Excel is pretty ugly. But fully understand why people stay in Excel, because the current popular programming stack, HTML\/CSS\/JS\/Frameworks is more than 10x the effort to learn."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMWF81HTP",
        "type": "message",
        "ts": "1588414994.414600",
        "client_msg_id": "324a6303-6ecf-4888-ba53-d41faf056430",
        "text": "<@UPMFG2571> I love this vision. It's something I've wanted for a while too: a comprehensive description of a whole stack, simulated in media, approachable from very basic knowledge with a smooth path to global understanding.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4022671f3400",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-03\/775814402657_4022671f340032b9eb75_72.jpg",
            "first_name": "yoshiki",
            "real_name": "yoshiki",
            "display_name": "yoshiki",
            "team": "T5TCAFTA9",
            "name": "yoshikischmitz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N1D+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UPMFG2571"
                            },
                            {
                                "type": "text",
                                "text": " I love this vision. It's something I've wanted for a while too: a comprehensive description of a whole stack, simulated in media, approachable from very basic knowledge with a smooth path to global understanding."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UPMFG2571",
                    "UU45NNMHT",
                    "UDQBTJ211"
                ],
                "count": 3
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UJN1TAYEQ",
        "thread_ts": "1588341505.403500",
        "root": {
            "user": "UJN1TAYEQ",
            "type": "message",
            "ts": "1588341505.403500",
            "client_msg_id": "c4befa80-cd3d-4c0e-afc3-656607ac3d0a",
            "text": "Tangible Functional Programming by Conal Elliott\n• apps are user-friendly (usable, concrete, visual) but limit functionality, aren't composable\n• software libraries are programmer-friendly (composable, abstract, syntactic)\nThe dream is: unlimited access to functionality, usably and composably. How?\n• Unix pipes are a composable text-mode UI, but we lose the GUI.\n• A Tangible Value is a typed value (model) paired with a GUI (view, controller). GUIs are composable whenever their underlying values are composable: eg unix-like pipelines, function composition.\n<http:\/\/conal.net\/blog\/posts\/tangible-functional-programming-a-modern-marriage-of-usability-and-composability>",
            "team": "T5TCAFTA9",
            "thread_ts": "1588341505.403500",
            "reply_count": 11,
            "reply_users_count": 5,
            "latest_reply": "1588436154.415700",
            "reply_users": [
                "UJN1TAYEQ",
                "UC21F8Q48",
                "UEQ6M68H0",
                "UA14TGLTC",
                "U010328JA1E"
            ],
            "replies": [
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1588345251.407000"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1588351254.409600"
                },
                {
                    "user": "UC21F8Q48",
                    "ts": "1588368031.411700"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1588374012.412300"
                },
                {
                    "user": "UC21F8Q48",
                    "ts": "1588381473.412700"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1588400904.413300"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1588404594.413600"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1588406629.414200"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1588422527.414900"
                },
                {
                    "user": "U010328JA1E",
                    "ts": "1588428967.415300"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1588436154.415700"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "fUr",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Tangible Functional Programming by Conal Elliott\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_list",
                            "elements": [
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "apps are user-friendly (usable, concrete, visual) but limit functionality, aren't composable"
                                        }
                                    ]
                                },
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "software libraries are programmer-friendly (composable, abstract, syntactic)"
                                        }
                                    ]
                                }
                            ],
                            "style": "bullet",
                            "indent": 0
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "The dream is: unlimited access to functionality, usably and composably. How?\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_list",
                            "elements": [
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "Unix pipes are a composable text-mode UI, but we lose the GUI."
                                        }
                                    ]
                                },
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "A Tangible Value is a typed value (model) paired with a GUI (view, controller). GUIs are composable whenever their underlying values are composable: eg unix-like pipelines, function composition."
                                        }
                                    ]
                                }
                            ],
                            "style": "bullet",
                            "indent": 0
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "link",
                                    "url": "http:\/\/conal.net\/blog\/posts\/tangible-functional-programming-a-modern-marriage-of-usability-and-composability"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1588422527.414900",
        "client_msg_id": "a4f35e67-7b15-4ba1-b7e8-642f770f0bff",
        "text": "<@UEQ6M68H0> Imperative programming (and shared mutable state) was a reasonable idea in the 1950's, 60's and 70's, when programs were small, processors had a single core, and internet-related security holes were not a concern. But imperative programming doesn't scale. The legacy of imperative and shared-mutable-state programming is responsible for our current software crisis. The future of coding is pure functional programming and immutable values.\n\nLarge programs with shared mutable state can't be fully understood or debugged. This problem becomes much worse with multiple cores. The imperative programming community's response to multi-core programming was mutable state shared between threads and processor cores, guarded by mutexes. This is a catastrophically bad programming model. You can't understand or debug the code. The solution is to eliminate shared mutable state.\n\nImperative programming doesn't scale to large numbers of cores--mutual exclusion mechanisms steal most of your performance. The solution is to eliminate shared mutable state. Machine learning with TensorFlow is an important example of massively multi-core programming. What makes it possible is that TensorFlow is a pure functional language. Unfortunately it has to be embedded in Python, because we don't have a mainstream pure functional language yet.\n\nAs an aside, I find it tragic that my personal computer has a 1000 cores (most in the GPU), and most of these cores must remain idle because my system software and apps are written in weak, stone age imperative languages that don't provide a simple and efficient way to distribute computation across a huge number of cores.\n\nImperative programming is a catastrophy for software security. In the imperative model, any function call can change any state in the entire system. This is the root cause of most security flaws. A sort function can encrypt all your files, display a ransom message, and phone home to an internet malware server. And we are seeing these kinds of exploits in supply chain attacks on open source software repositories. Pure functional programming puts security first: functions cannot have side effects, and functions have no access to data that isn't passed as an argument. The type system can trivially guarantee that a sort function will not intentionally spawn a bitcoin miner, or accidently corrupt shared mutable state outside of the array that you are sorting. A common response to the inherent insecurity of imperative code is sandboxing. It's a backwards approach. What if architects built buildings out of contact-sensitive explosive materials, then attempted to mitigate the resulting safety issues using a complex system of nested blast barriers. Imperative programming is inherently insecure, and pure functional programming is the answer.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fP2e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " Imperative programming (and shared mutable state) was a reasonable idea in the 1950's, 60's and 70's, when programs were small, processors had a single core, and internet-related security holes were not a concern. But imperative programming doesn't scale. The legacy of imperative and shared-mutable-state programming is responsible for our current software crisis. The future of coding is pure functional programming and immutable values.\n\nLarge programs with shared mutable state can't be fully understood or debugged. This problem becomes much worse with multiple cores. The imperative programming community's response to multi-core programming was mutable state shared between threads and processor cores, guarded by mutexes. This is a catastrophically bad programming model. You can't understand or debug the code. The solution is to eliminate shared mutable state.\n\nImperative programming doesn't scale to large numbers of cores--mutual exclusion mechanisms steal most of your performance. The solution is to eliminate shared mutable state. Machine learning with TensorFlow is an important example of massively multi-core programming. What makes it possible is that TensorFlow is a pure functional language. Unfortunately it has to be embedded in Python, because we don't have a mainstream pure functional language yet.\n\nAs an aside, I find it tragic that my personal computer has a 1000 cores (most in the GPU), and most of these cores must remain idle because my system software and apps are written in weak, stone age imperative languages that don't provide a simple and efficient way to distribute computation across a huge number of cores.\n\nImperative programming is a catastrophy for software security. In the imperative model, any function call can change any state in the entire system. This is the root cause of most security flaws. A sort function can encrypt all your files, display a ransom message, and phone home to an internet malware server. And we are seeing these kinds of exploits in supply chain attacks on open source software repositories. Pure functional programming puts security first: functions cannot have side effects, and functions have no access to data that isn't passed as an argument. The type system can trivially guarantee that a sort function will not intentionally spawn a bitcoin miner, or accidently corrupt shared mutable state outside of the array that you are sorting. A common response to the inherent insecurity of imperative code is sandboxing. It's a backwards approach. What if architects built buildings out of contact-sensitive explosive materials, then attempted to mitigate the resulting safety issues using a complex system of nested blast barriers. Imperative programming is inherently insecure, and pure functional programming is the answer."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thread-please",
                "users": [
                    "UCUSW7WVD",
                    "UD6EXQVM0"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U010328JA1E",
        "type": "message",
        "ts": "1588428967.415300",
        "client_msg_id": "6a0082c3-379a-4585-ba2a-04119737917d",
        "text": "<@UA14TGLTC> In what ways do you think Excel doesn't scale? Thinking of 1) Having all values at all times on the screen, 2) Obfuscation and debuggability of logic 3) 1 million rows limit 4) Slow updates for big files. ...?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga47904aa9b4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a47904aa9b4359ffea837d58cd82cfb0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Ricardo",
            "real_name": "Ricardo Medina",
            "display_name": "Ricardo Medina",
            "team": "T5TCAFTA9",
            "name": "rickmedina205",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=Dj=Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " In what ways do you think Excel doesn't scale? Thinking of 1) Having all values at all times on the screen, 2) Obfuscation and debuggability of logic 3) 1 million rows limit 4) Slow updates for big files. ...?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1588436154.415700",
        "client_msg_id": "d779bd6b-a8c5-40c1-87c0-e26e4c3cd083",
        "text": "<@U010328JA1E> (4) is what I had in mind though having just opened a 400,000 row file I happened to have handy to time some operations, I find Excel laggy but less laggy than remembered.  (Could be new hardware or some performance improvement with tables.  This is macOS mind you.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4=KgF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U010328JA1E"
                            },
                            {
                                "type": "text",
                                "text": " (4) is what I had in mind though having just opened a 400,000 row file I happened to have handy to time some operations, I find Excel laggy but less laggy than remembered.  (Could be new hardware or some performance improvement with tables.  This is macOS mind you.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "U010328JA1E",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1588444835.416100",
        "client_msg_id": "b872e490-7284-4d65-b461-f91f50405023",
        "text": "<@UA14TGLTC> :)\n\n<@ULM3U6275> We're making the same point, I think. Excel is an \"Oh, code\" tool. So is Factorio. So is Zapier. These are things that don't look like \"programming\", but it turns out you use them to build dynamic, logical systems. You're doing programming, there's still evaluation, but it's an experience that's been designed for _you_, not for _programmers_ (eww).\n\nMy beef with \"no code\" (well, one of my beefs) is that many of these tools are just... frustratingly superficial non-textual programming environments. Given that the distinction between \"coding\" and \"programming\" colloquially is basically nil, it feels like \"non-fat\" all over again — sure, you've removed the text-code, but you've substituted it with something much worse! What you really want is ~good fat~ a full &amp; rich programming environment, but created for non-programmers.\n\nAside: The name of this community is a poor fit, and that's probably just going to have to be a meme that we relish in.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w5laJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " :)\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " We're making the same point, I think. Excel is an \"Oh, code\" tool. So is Factorio. So is Zapier. These are things that don't look like \"programming\", but it turns out you use them to build dynamic, logical systems. You're doing programming, there's still evaluation, but it's an experience that's been designed for "
                            },
                            {
                                "type": "text",
                                "text": "you",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", not for "
                            },
                            {
                                "type": "text",
                                "text": "programmers",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (eww).\n\nMy beef with \"no code\" (well, one of my beefs) is that many of these tools are just... frustratingly superficial non-textual programming environments. Given that the distinction between \"coding\" and \"programming\" colloquially is basically nil, it feels like \"non-fat\" all over again — sure, you've removed the text-code, but you've substituted it with something much worse! What you really want is "
                            },
                            {
                                "type": "text",
                                "text": "good fat",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a full & rich programming environment, but created for non-programmers.\n\nAside: The name of this community is a poor fit, and that's probably just going to have to be a meme that we relish in."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UE0ETTCG7",
                    "UA14TGLTC",
                    "UHWC9PXBL",
                    "UML4ZEKDK",
                    "UFV8P4472"
                ],
                "count": 6
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1588448354.425100",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1588459359.000000"
        },
        "client_msg_id": "0b18ecf8-4c72-4c69-8fe3-73a40ecaefd7",
        "text": "<@UJN1TAYEQ> Spending most of my day every day dealing with 100 million intrusion attempts each 24 hours, i am only too familiar with internet security flaws. However, it is the basic protocols of the internet that are at fault, not how they are implemented. It is a fact that the early internet had zero concern with security, given that it ran on private leased lines between the universities.  I remember visiting MIT at the dawn of the internet, and there was a terminal hooked between boston and berkeley. You could chat back and forth; it was fairly useless until the WWW came along.\n\nYou are perhaps not familiar with Modula-2 which was Prof. Wirth's 10 year later sequel to Pascal. In Modula-2 you can specify whether or not a called function has access to modify data, and along with other clever and simple features you can make rock solid programs that are as tight as it can be. And to claim that pure functional program is the answer to anything is not factual. If you are building a Chess game program, the state of the board is going to change, and any attempt to evade changing the state of the board is merely hiding the state changes somewhere. Minimizing the number of state variables, and making sure there is no redundancy (which is the source of many errors) is a virtue, but to pursue utter purity in avoiding state makes your program unable to do any useful work. John Backus who invented FP, who gave a lecture i attended in 1973 on his Functional language called Red at the time, was unable to finish his work, and his prior creation FORTRAN did battle with COBOL (and losing to an inferior language). He had the goal of interchangeable parts, but did not achieve it.\n\nThere is little evidence that FP is bringing about an era of interchangable parts, and making it easier to maintain large programs, two of the most important unsolved problems in computer engineering. My own project revolves around using deduction, something nearly forgotten as it was last seen in the 70's in PROLOG. Since all programs must eventually map their syntax into the underlying instructions of the Intel or ARM processors, the only difference between 2 languages can be the convenience, conciseness, shareability, and maintainability of the notation. There are languages like FORTH that trade everything for brevity, but nobody programs in FORTH because it is unmaintainable. The ability to share components in the FP languages I have seen is not exemplary. The idiocy of having millions of programmers reinvent the same programs over and over is quite absurd. Look at Google's code pile; they must be close to 10 billion lines, it is ridiculous. I can't recall a time when i found some nice chunk of code on Github and was able to use it. There are billions of lines there, but it is all disorganized, full of dependencies i don't want to carry, and of unknown quality and reliability. So to ensure things work i end up writing almost everything myself. People like me are part of the problem, but i don't have access to a marketplace of nice little widgets like Apple's iTunes App Store has for full apps. That would be a really useful thing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gtU1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Spending most of my day every day dealing with 100 million intrusion attempts each 24 hours, i am only too familiar with internet security flaws. However, it is the basic protocols of the internet that are at fault, not how they are implemented. It is a fact that the early internet had zero concern with security, given that it ran on private leased lines between the universities.  I remember visiting MIT at the dawn of the internet, and there was a terminal hooked between boston and berkeley. You could chat back and forth; it was fairly useless until the WWW came along.\n\nYou are perhaps not familiar with Modula-2 which was Prof. Wirth's 10 year later sequel to Pascal. In Modula-2 you can specify whether or not a called function has access to modify data, and along with other clever and simple features you can make rock solid programs that are as tight as it can be. And to claim that pure functional program is the answer to anything is not factual. If you are building a Chess game program, the state of the board is going to change, and any attempt to evade changing the state of the board is merely hiding the state changes somewhere. Minimizing the number of state variables, and making sure there is no redundancy (which is the source of many errors) is a virtue, but to pursue utter purity in avoiding state makes your program unable to do any useful work. John Backus who invented FP, who gave a lecture i attended in 1973 on his Functional language called Red at the time, was unable to finish his work, and his prior creation FORTRAN did battle with COBOL (and losing to an inferior language). He had the goal of interchangeable parts, but did not achieve it.\n\nThere is little evidence that FP is bringing about an era of interchangable parts, and making it easier to maintain large programs, two of the most important unsolved problems in computer engineering. My own project revolves around using deduction, something nearly forgotten as it was last seen in the 70's in PROLOG. Since all programs must eventually map their syntax into the underlying instructions of the Intel or ARM processors, the only difference between 2 languages can be the convenience, conciseness, shareability, and maintainability of the notation. There are languages like FORTH that trade everything for brevity, but nobody programs in FORTH because it is unmaintainable. The ability to share components in the FP languages I have seen is not exemplary. The idiocy of having millions of programmers reinvent the same programs over and over is quite absurd. Look at Google's code pile; they must be close to 10 billion lines, it is ridiculous. I can't recall a time when i found some nice chunk of code on Github and was able to use it. There are billions of lines there, but it is all disorganized, full of dependencies i don't want to carry, and of unknown quality and reliability. So to ensure things work i end up writing almost everything myself. People like me are part of the problem, but i don't have access to a marketplace of nice little widgets like Apple's iTunes App Store has for full apps. That would be a really useful thing."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UFLN9JFRT",
                    "UC21F8Q48"
                ],
                "count": 3
            },
            {
                "name": "thread-please",
                "users": [
                    "UCUSW7WVD",
                    "UDQBTJ211"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1588452793.429100",
        "client_msg_id": "D46ED12D-637A-4842-9B18-42446D9EEC94",
        "text": "If you’re not yet locked in to either side of the imperative-vs.-functional debate, this podcast interview might have some thought-provoking ideas about where modern programming languages are headed: \n<https:\/\/www.swiftbysundell.com\/podcast\/71\/|https:\/\/www.swiftbysundell.com\/podcast\/71\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588452793.429100",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1588453561.434500",
        "reply_users": [
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "U5STGTB3J",
                "ts": "1588453561.434500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Swift by Sundell",
                "title": "71: “Polymorphic interfaces”, with special guest Dave Abrahams | Swift by Sundell",
                "title_link": "https:\/\/www.swiftbysundell.com\/podcast\/71\/",
                "text": "Dave Abrahams joins John to talk about Protocol-Oriented Programming and how to make the most out of the Swift Standard Library. Also, discussions on Swift’s overall design, why it puts such a strong emphasis on value types and protocols, and how it’s been influenced by other languages.",
                "fallback": "Swift by Sundell: 71: “Polymorphic interfaces”, with special guest Dave Abrahams | Swift by Sundell",
                "image_url": "https:\/\/www.swiftbysundell.com\/images\/podcast\/71.png",
                "from_url": "https:\/\/www.swiftbysundell.com\/podcast\/71\/",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 342048,
                "service_icon": "https:\/\/www.swiftbysundell.com\/images\/favicon.png",
                "id": 1,
                "original_url": "https:\/\/www.swiftbysundell.com\/podcast\/71\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WIN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you’re not yet locked in to either side of the imperative-vs.-functional debate, this podcast interview might have some thought-provoking ideas about where modern programming languages are headed: \n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.swiftbysundell.com\/podcast\/71\/",
                                "text": "https:\/\/www.swiftbysundell.com\/podcast\/71\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "As Kevlin Henney likes to point out in many of his presentations, a fundamental problem is mutable shared state. Sure, pure functions are one solution to this and they are extremely useful, but there are other ways that can be useful too. Better ways to handle value and reference semantics, for instance. I’m excited for what is being explored in Swift and Rust (and C++).",
        "files": [
            {
                "id": "F012RL60B3Q",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "U5STGTB3J",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XMyV\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As Kevlin Henney likes to point out in many of his presentations, a fundamental problem is mutable shared state. Sure, pure functions are one solution to this and they are extremely useful, but there are other ways that can be useful too. Better ways to handle value and reference semantics, for instance. I’m excited for what is being explored in Swift and Rust (and C++)."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1588453561.434500",
        "client_msg_id": "780E4A87-20A4-477C-9208-37FC79562AE0",
        "thread_ts": "1588452793.429100",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1588464075.440000",
        "client_msg_id": "0112efa3-d929-43f3-b718-c2509031c841",
        "text": "to my knowledge the original designer for Swift left Apple, and they are now pursuing a kitchen sink approach to the language, with each version adding more crap. Swift used to be a pretty modest language, but is turning into a monster. Apple is pursuing a strategy of constant enhancement to the language perhaps so as to indirectly block Swift from stabilizing and becoming an Android platform language.  Not that there was much danger, because a great deal of the language is dictated by the Cocoa underpinnings of OSX API sets. At least it has a very tight spec; the old ObjectiveC language that Jobs used at NextStep lacked a manual, and the spec was \"whatever the compiler does\". I wonder what the author of Swift will come up with next; not being tethered to OSX would give you a lot of freedom.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588464075.440000",
        "reply_count": 9,
        "reply_users_count": 5,
        "latest_reply": "1590246837.186700",
        "reply_users": [
            "UC2A2ARPT",
            "ULM3U6275",
            "U5STGTB3J",
            "UFV8P4472",
            "UFLN9JFRT"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1588476771.454700"
            },
            {
                "user": "ULM3U6275",
                "ts": "1588483559.456000"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1588502515.471500"
            },
            {
                "user": "UFV8P4472",
                "ts": "1588540616.476300"
            },
            {
                "user": "UFV8P4472",
                "ts": "1588541038.476700"
            },
            {
                "user": "UFLN9JFRT",
                "ts": "1588741173.068900"
            },
            {
                "user": "UFLN9JFRT",
                "ts": "1590234171.174900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1590236915.177100"
            },
            {
                "user": "UFLN9JFRT",
                "ts": "1590246837.186700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yRFU0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to my knowledge the original designer for Swift left Apple, and they are now pursuing a kitchen sink approach to the language, with each version adding more crap. Swift used to be a pretty modest language, but is turning into a monster. Apple is pursuing a strategy of constant enhancement to the language perhaps so as to indirectly block Swift from stabilizing and becoming an Android platform language.  Not that there was much danger, because a great deal of the language is dictated by the Cocoa underpinnings of OSX API sets. At least it has a very tight spec; the old ObjectiveC language that Jobs used at NextStep lacked a manual, and the spec was \"whatever the compiler does\". I wonder what the author of Swift will come up with next; not being tethered to OSX would give you a lot of freedom."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1588476771.454700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1588476925.000000"
        },
        "client_msg_id": "7f1cdf67-aa0e-48df-a482-2bb9023ec9c6",
        "text": "&gt; I wonder what the author of Swift will come up with next\nThere was a fun interview with Lattner on the Accidental Tech Podcast a few weeks ago about just that: <https:\/\/atp.fm\/episodes\/371>\n\nThe short version — working at Google (previously) and the RISC-V company SiFive (now), creating a new superset of LLVM IR called MLIR, which (he claims) will allow for Swift to be used with TensorFlow (et al.) to great effect.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588464075.440000",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p6z",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder what the author of Swift will come up with next"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThere was a fun interview with Lattner on the Accidental Tech Podcast a few weeks ago about just that: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/atp.fm\/episodes\/371"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe short version — working at Google (previously) and the RISC-V company SiFive (now), creating a new superset of LLVM IR called MLIR, which (he claims) will allow for Swift to be used with TensorFlow (et al.) to great effect."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1588483559.456000",
        "client_msg_id": "66446810-AFC3-4135-AECC-99CE513BF769",
        "text": "Does this not count as a manual? <http:\/\/www.gnustep.org\/resources\/documentation\/ObjectivCBook.pdf|http:\/\/www.gnustep.org\/resources\/documentation\/ObjectivCBook.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588464075.440000",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F5t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does this not count as a manual? "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.gnustep.org\/resources\/documentation\/ObjectivCBook.pdf",
                                "text": "http:\/\/www.gnustep.org\/resources\/documentation\/ObjectivCBook.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]