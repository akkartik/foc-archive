[
    {
        "user": "UL5AX4G2H",
        "type": "message",
        "ts": "1688925235.743329",
        "client_msg_id": "8bdab275-fabd-4dbf-a1c6-94a84fbc5de4",
        "text": "I'm restarting my programming productivity blog, here's the latest on CLI tool design <https:\/\/codefaster.substack.com\/p\/how-to-design-a-cli>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b05739c44158",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-12-05\/1552783044467_b05739c44158d860f3bd_72.png",
            "first_name": "",
            "real_name": "Tyler Adams",
            "display_name": "Tyler Adams",
            "team": "T5TCAFTA9",
            "name": "coppero1237",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "image_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fc21d3e2d-bc9d-401f-bbe8-225d0d0643d9_256x256.png",
                "image_width": 256,
                "image_height": 256,
                "image_bytes": 5621,
                "from_url": "https:\/\/codefaster.substack.com\/p\/how-to-design-a-cli",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fd8afe861-b0e8-49ce-b80e-2d642b648703%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/codefaster.substack.com\/p\/how-to-design-a-cli",
                "fallback": "How to design a CLI",
                "text": "Vercel’s a got a great system for deploying serverless JS web apps. It Just Works(TM). Vercel’s CLI however…is a learning example. We’ll go over some of their interesting and noteworthy design choices, and then, describe what other option we could take.",
                "title": "How to design a CLI",
                "title_link": "https:\/\/codefaster.substack.com\/p\/how-to-design-a-cli",
                "service_name": "codefaster.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MdZsP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm restarting my programming productivity blog, here's the latest on CLI tool design "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/codefaster.substack.com\/p\/how-to-design-a-cli"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I've had this idea rattling in my head to make a frontend framework that's _only_ signals, and after almost a year of maturation I finally put down some code today. Genuinely surprised this works.\n\nI'm curious where it starts to break down. It's not like modern frameworks are unaware of signals, most feature them heavily, so there's probably some reason they haven't gone all-in on them too, right?\n\nI'm using tldraw's lovely `signia` for signals implementation, hence the first param of atoms being a 'name' and not meaningful for execution. This also gave me an excuse to read `signia`'s source and discover their clever trick for tracking atom inheritance which is pretty neat.",
        "files": [
            {
                "id": "F05G90S5MNY",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U05G29UQHKK",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sUa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've had this idea rattling in my head to make a frontend framework that's "
                            },
                            {
                                "type": "text",
                                "text": "only",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " signals, and after almost a year of maturation I finally put down some code today. Genuinely surprised this works.\n\nI'm curious where it starts to break down. It's not like modern frameworks are unaware of signals, most feature them heavily, so there's probably some reason they haven't gone all-in on them too, right?\n\nI'm using tldraw's lovely "
                            },
                            {
                                "type": "text",
                                "text": "signia",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for signals implementation, hence the first param of atoms being a 'name' and not meaningful for execution. This also gave me an excuse to read "
                            },
                            {
                                "type": "text",
                                "text": "signia",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "'s source and discover their clever trick for tracking atom inheritance which is pretty neat."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1688951860.173829",
        "client_msg_id": "031a1dc7-6b27-4fa7-b22a-c090f23702ac",
        "thread_ts": "1688951860.173829",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1688993031.792219",
        "reply_users": [
            "U016VUZGUUQ",
            "U03R0B9U1GD",
            "UEBG0NPDK",
            "U05G29UQHKK"
        ],
        "replies": [
            {
                "user": "U016VUZGUUQ",
                "ts": "1688960416.758899"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1688969901.311999"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1688992186.783879"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1688992530.519679"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1688993031.792219"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U05FGP5ELET",
                    "U03R0B9U1GD",
                    "U0123H7JRDM",
                    "U03LJBR6THT"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1688960416.758899",
        "client_msg_id": "74337963-68dd-4955-ac02-ba780ca5307d",
        "text": "It looks a little like a logic programming approach to web UI. Not sure how much that's coincidental...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688951860.173829",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gAI4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It looks a little like a logic programming approach to web UI. Not sure how much that's coincidental..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03R0B9U1GD",
        "type": "message",
        "ts": "1688969901.311999",
        "client_msg_id": "c208f3c0-7493-460a-8af6-0593a32c59b2",
        "text": "Awesome! I'll pass this on to David and the rest of the team. It's been really great to hear David's thoughts on signals, and how signia came to be, and the unique approach that it takes! I still think that the signia docs gives one of the best explanations of <https:\/\/signia.tldraw.dev\/docs\/what-are-signals|what signals are>.\n\ntldraw has to deal with a huge amount of state changes at high speed, which is why we needed signia (alongside React). We tried other libraries, but they all started to break down with tldraw's unusual use-case. (eg: memory leaks, eg: triggering too many recalculations, eg: too slow)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "78c476adad42",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-26\/3992499177765_78c476adad42ab6cfe32_72.png",
            "first_name": "Lu",
            "real_name": "Lu Wilson",
            "display_name": "TodePond",
            "team": "T5TCAFTA9",
            "name": "l2wilson94",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688951860.173829",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ttFh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Awesome! I'll pass this on to David and the rest of the team. It's been really great to hear David's thoughts on signals, and how signia came to be, and the unique approach that it takes! I still think that the signia docs gives one of the best explanations of "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/signia.tldraw.dev\/docs\/what-are-signals",
                                "text": "what signals are"
                            },
                            {
                                "type": "text",
                                "text": ".\n\ntldraw has to deal with a huge amount of state changes at high speed, which is why we needed signia (alongside React). We tried other libraries, but they all started to break down with tldraw's unusual use-case. (eg: memory leaks, eg: triggering too many recalculations, eg: too slow)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]