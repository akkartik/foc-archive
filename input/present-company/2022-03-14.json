[
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1647272878.197549",
        "client_msg_id": "4e580d76-ca8e-4817-84a1-ebf903f7462e",
        "text": "Hi I have ton of exp as developer. Handled complex projects successfully. For more than 17 years now. Worked on vanilla JS and JQuery a lot. I know basics of WegGL and as I started my programming life a s a game programmer, I used to have (still somewhat) a solid grasp over OpenGL, Shaders, Game Engine etc. I have looked into WebGL to some extent. Even a bit into WebGPU.\n\nI have a full time job, unless you guys are looking for someone full time, and if you think to start with 10-12 hours per week can make the cut, I will be very interested.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646874312.641469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a9KH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi I have ton of exp as developer. Handled complex projects successfully. For more than 17 years now. Worked on vanilla JS and JQuery a lot. I know basics of WegGL and as I started my programming life a s a game programmer, I used to have (still somewhat) a solid grasp over OpenGL, Shaders, Game Engine etc. I have looked into WebGL to some extent. Even a bit into WebGPU.\n\nI have a full time job, unless you guys are looking for someone full time, and if you think to start with 10-12 hours per week can make the cut, I will be very interested."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1647273638.686439",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1647289358.000000"
        },
        "client_msg_id": "aebea92c-448a-4fc5-bdf8-580e70f0948a",
        "text": "<@UGRG57D8C> — Thanks for taking a look! Yes, the programming libraries for our simulations are quite DSL-like. Indeed, going all the way to a richer programming interface is an eventual goal — that shared goal is why we're all here, right?\n\nThe drawing interface is the problem we need to solve first. Once we have a richer interface for drawing, we can build a programming interface in terms of it. Here's an example that should demonstrate why the drawing interface matters.\n\nImagine an <https:\/\/duckduckgo.com\/?q=electrical+circuit+schematic&amp;t=osx&amp;iax=images&amp;ia=images|electrical circuit schematic>. One of the things we do with our electrical circuit simulations is animate little arrows that flow through the circuit to depict the flow of electricity. For these arrows to correctly flow through the circuit, they need to know the visual structure of the circuit — which paths are connected to which other paths, where those connections are, the shape of all paths (sometimes they're curved), the speed and direction of flow on each path, etc.\n\nThe structure of the circuit is fully expressed by the artist when they make the drawing — it's inherent to the visual representation. If two lines touch (usually with a little dot at the intersection), they're electrically connected. But because the artist is using a general purpose vector graphics app, this information about connectivity isn't captured. It's _implied_ through the drawing, but it's not reified in data.\n\nI have to recover this connectivity information by having the artist draw a second version of the circuit (a simplified representation without visual details like intersection dots — sort of like a physics mesh in a video game). This is fed into a system that rebuilds the structure of the circuit using heuristics. Finally, the artist has to write some code to specify the speed and direction of flow on every path within the circuit.\n\nInstead of a general purpose vector graphics app with a \"path\" tool, we need a special purpose simulation drawing app with an \"electrical path\" tool. When drawing electrical paths, the app will know to capture an internal representation of the connectivity structure. But it doesn't just have to be about capture — the app can show actual arrows representing how electricity will flow through the circuit drawing as the artist is drawing it. Immediate feedback, with direct manipulation controls for tuning that behaviour.\n\nHopefully that clarifies things. Thanks again for taking a look at what we're doing!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646874312.641469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1q2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGRG57D8C"
                            },
                            {
                                "type": "text",
                                "text": " — Thanks for taking a look! Yes, the programming libraries for our simulations are quite DSL-like. Indeed, going all the way to a richer programming interface is an eventual goal — that shared goal is why we're all here, right?\n\nThe drawing interface is the problem we need to solve first. Once we have a richer interface for drawing, we can build a programming interface in terms of it. Here's an example that should demonstrate why the drawing interface matters.\n\nImagine an "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/duckduckgo.com\/?q=electrical+circuit+schematic&t=osx&iax=images&ia=images",
                                "text": "electrical circuit schematic"
                            },
                            {
                                "type": "text",
                                "text": ". One of the things we do with our electrical circuit simulations is animate little arrows that flow through the circuit to depict the flow of electricity. For these arrows to correctly flow through the circuit, they need to know the visual structure of the circuit — which paths are connected to which other paths, where those connections are, the shape of all paths (sometimes they're curved), the speed and direction of flow on each path, etc.\n\nThe structure of the circuit is fully expressed by the artist when they make the drawing — it's inherent to the visual representation. If two lines touch (usually with a little dot at the intersection), they're electrically connected. But because the artist is using a general purpose vector graphics app, this information about connectivity isn't captured. It's "
                            },
                            {
                                "type": "text",
                                "text": "implied",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " through the drawing, but it's not reified in data.\n\nI have to recover this connectivity information by having the artist draw a second version of the circuit (a simplified representation without visual details like intersection dots — sort of like a physics mesh in a video game). This is fed into a system that rebuilds the structure of the circuit using heuristics. Finally, the artist has to write some code to specify the speed and direction of flow on every path within the circuit.\n\nInstead of a general purpose vector graphics app with a \"path\" tool, we need a special purpose simulation drawing app with an \"electrical path\" tool. When drawing electrical paths, the app will know to capture an internal representation of the connectivity structure. But it doesn't just have to be about capture — the app can show actual arrows representing how electricity will flow through the circuit drawing as the artist is drawing it. Immediate feedback, with direct manipulation controls for tuning that behaviour.\n\nHopefully that clarifies things. Thanks again for taking a look at what we're doing!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGRG57D8C",
        "type": "message",
        "ts": "1647289201.851909",
        "client_msg_id": "d0a05ca2-37a3-469d-a35b-a1d8bc9f19fe",
        "text": "<@UC2A2ARPT> Sorry I wasn't trying to downplay the drawing part. I was just thinking out loud about the data part. The above clarification helps a lot. I'll respond further in DM",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3b5bc611c34",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/d3b5bc611c34e80ce45f445158f22745.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex Thompson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "pierogitus",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646874312.641469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k\/Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " Sorry I wasn't trying to downplay the drawing part. I was just thinking out loud about the data part. The above clarification helps a lot. I'll respond further in DM"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]