[
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1595753165.155000",
        "client_msg_id": "c5e3d36b-e45f-430d-b162-34b2c2b7c75e",
        "text": "It reminds me of mind-mapping software or the Gingko app: <https:\/\/gingkoapp.com\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595738168.147900",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "title": "Gingko App",
                "title_link": "https:\/\/gingkoapp.com\/",
                "text": "Tree documents for clarity focus and flow",
                "fallback": "Gingko App",
                "from_url": "https:\/\/gingkoapp.com\/",
                "service_icon": "https:\/\/gingkoapp.com\/p\/images\/leaf128.png",
                "service_name": "gingkoapp.com",
                "id": 1,
                "original_url": "https:\/\/gingkoapp.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EzWI9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It reminds me of mind-mapping software or the Gingko app: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gingkoapp.com\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "U016HU16BS6"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595763492.159800",
        "client_msg_id": "AA160405-14E0-449D-88F5-473014B8EFB8",
        "text": "awesome! i really like all these prototypes of like... alternate history of desktop applications. one thing that was a little confusing is that you’re always affecting the objects to the right of your highlighted box, so it took me a second to understand the “create a child” command. i think <@UP28ETUSE> ‘s ginkgo suggestion has an interface that’s slightly easier to understand in terms of what’s changing—i think the cursor moves to children when you create a child",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595738168.147900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NNTBh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "awesome! i really like all these prototypes of like... alternate history of desktop applications. one thing that was a little confusing is that you’re always affecting the objects to the right of your highlighted box, so it took me a second to understand the “create a child” command. i think "
                            },
                            {
                                "type": "user",
                                "user_id": "UP28ETUSE"
                            },
                            {
                                "type": "text",
                                "text": " ‘s ginkgo suggestion has an interface that’s slightly easier to understand in terms of what’s changing—i think the cursor moves to children when you create a child"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1595773406.160000",
        "client_msg_id": "688c59ae-af77-4f0f-b8f2-2dbf27d87fe8",
        "text": "Good idea! Thank you, I have no idea what I'm doing :dog:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595738168.147900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CT8u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good idea! Thank you, I have no idea what I'm doing "
                            },
                            {
                                "type": "emoji",
                                "name": "dog",
                                "unicode": "1f436"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1595774616.160600",
        "client_msg_id": "c320ff69-bc87-4b22-9fe8-2257af9894c2",
        "text": "I like the idea of creating an horizontal hierarchy. And that it fills all the space (compared to mindmap nodes).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595738168.147900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fIf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like the idea of creating an horizontal hierarchy. And that it fills all the space (compared to mindmap nodes)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1595774679.160800",
        "client_msg_id": "0d119152-2922-4a67-a64e-684d07ebfe82",
        "text": "And I also like that prototyping with text force you to go to essential things!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595738168.147900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eag",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I also like that prototyping with text force you to go to essential things!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1595796737.183600",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1595796858.000000"
        },
        "client_msg_id": "ef0cb0bf-7686-4dbe-971d-ccae89b3a2a6",
        "text": "<@UCUSW7WVD> - If saving the instruction pointer includes saving the execution state at that point as well, then I think you're talking about continuations. There are multiple ways those can be modeled.\n\nThe options I'm aware of are:\n\n1. Store and recreate the machine (or VM) state (registers, call stack, etc.)\n\n2. Some abstract representation of execution state (apart from the actual underlying one) that everything you care about saving runs on top of \/ is evaluated in terms of. (In other words, something like the demo you referred to).\n\n3. Something using coroutines (I don't remember the details)\n\n4. In language where code can be serialized and later parsed and executed at runtime, and the execution context of each function call is reified into an object that can also be saved and restored in like manner, and the language itself (not just the code being written in it) is implemented in Continuation Passing Style (CPS), then the continuation itself can just be serialized and then deserialized and invoked as a function. ... I'm not sure to what a degree that necessarily just translates into \"if you are programming in Scheme\" (or at least a homoiconic language); but anyway, this is one way to do it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595738168.147900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nPla",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " - If saving the instruction pointer includes saving the execution state at that point as well, then I think you're talking about continuations. There are multiple ways those can be modeled.\n\nThe options I'm aware of are:\n\n1. Store and recreate the machine (or VM) state (registers, call stack, etc.)\n\n2. Some abstract representation of execution state (apart from the actual underlying one) that everything you care about saving runs on top of \/ is evaluated in terms of. (In other words, something like the demo you referred to).\n\n3. Something using coroutines (I don't remember the details)\n\n4. In language where code can be serialized and later parsed and executed at runtime, and the execution context of each function call is reified into an object that can also be saved and restored in like manner, and the language itself (not just the code being written in it) is implemented in Continuation Passing Style (CPS), then the continuation itself can just be serialized and then deserialized and invoked as a function. ... I'm not sure to what a degree that necessarily just translates into \"if you are programming in Scheme\" (or at least a homoiconic language); but anyway, this is one way to do it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595797182.186200",
        "client_msg_id": "F2295E75-FE9D-4628-A2C3-8A7FB0078784",
        "text": "if we’re talking continuations i’m going to insert my compulsive plug for concatenative programming: a continuation is just the state of the stack plus the rest of the tokens in the program. and you could absolutely implement it with a tree instead of a stack",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595738168.147900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2he",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if we’re talking continuations i’m going to insert my compulsive plug for concatenative programming: a continuation is just the state of the stack plus the rest of the tokens in the program. and you could absolutely implement it with a tree instead of a stack"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]