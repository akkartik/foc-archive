[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1683023523.608309",
        "client_msg_id": "9e06bc35-b5bf-46f2-90cb-4de78c9dca59",
        "text": "<https:\/\/www.youtube.com\/watch?v=FKNjGOv1HxU|Structured Editing for All: Deriving Usable Structured Editors From Grammars>\n\n&gt; Structured editing can show benefits in learnability, tool building, and editing efficiency in programming.\n&gt; \n&gt; However, creating a usable structured editor is laborious and demanding, typically requiring tool builders to manually create or adjust editing interactions.\n&gt; \n&gt; We present Sandblocks, a system that allows users to automatically generate structured editors for every language with a formal grammar available.\n&gt; \n&gt; Our system's input reconciliation process acts on arbitrary syntax trees to provides consistent interactions across our generated editors.\n&gt; \n&gt; Our editors' editing experience is designed to be familiar to users from textual editing but, compared to previous work, requires no manual annotation in the grammars.\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683023523.608309",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1683212695.892749",
        "reply_users": [
            "U0296ACR13M",
            "U02U0AS3J49"
        ],
        "replies": [
            {
                "user": "U0296ACR13M",
                "ts": "1683055237.039829"
            },
            {
                "user": "U0296ACR13M",
                "ts": "1683139203.179179"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1683212695.892749"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=FKNjGOv1HxU",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/FKNjGOv1HxU\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/FKNjGOv1HxU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Structured Editing for All: Deriving Usable Structured Editors From Grammars\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=FKNjGOv1HxU",
                "fallback": "YouTube Video: Structured Editing for All: Deriving Usable Structured Editors From Grammars",
                "title": "Structured Editing for All: Deriving Usable Structured Editors From Grammars",
                "title_link": "https:\/\/www.youtube.com\/watch?v=FKNjGOv1HxU",
                "author_name": "ACM SIGCHI",
                "author_link": "https:\/\/www.youtube.com\/@sigchi",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uzYc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=FKNjGOv1HxU",
                                "text": "Structured Editing for All: Deriving Usable Structured Editors From Grammars"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Structured editing can show benefits in learnability, tool building, and editing efficiency in programming.\n\nHowever, creating a usable structured editor is laborious and demanding, typically requiring tool builders to manually create or adjust editing interactions.\n\nWe present Sandblocks, a system that allows users to automatically generate structured editors for every language with a formal grammar available.\n\nOur system's input reconciliation process acts on arbitrary syntax trees to provides consistent interactions across our generated editors.\n\nOur editors' editing experience is designed to be familiar to users from textual editing but, compared to previous work, requires no manual annotation in the grammars."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UGWUJUZHT",
                    "U0296ACR13M",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1683050567.366109",
        "client_msg_id": "7fe64932-7958-476f-9952-181c9c7cd252",
        "text": "Mojo – a new programming language for AI developers\n\n<https:\/\/www.modular.com\/mojo|https:\/\/www.modular.com\/mojo>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683050567.366109",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1683058833.908229",
        "reply_users": [
            "UC2A2ARPT",
            "UCGR73CAY"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1683054271.205639"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1683058711.418459"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1683058812.116349"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1683058833.908229"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "alLz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mojo – a new programming language for AI developers\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.modular.com\/mojo",
                                "text": "https:\/\/www.modular.com\/mojo"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1683054271.205639",
        "client_msg_id": "a4ff0e85-d1ae-498c-b537-d3e8feadb758",
        "text": "This is the new language by Chris Lattner, the main person behind Swift, LLVM, and clang. Seems he's active in the <https:\/\/news.ycombinator.com\/item?id=35790367|HN discussion> about Mojo, so if you have any pressing questions maybe risk a visit to orangeland.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683050567.366109",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W1L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is the new language by Chris Lattner, the main person behind Swift, LLVM, and clang. Seems he's active in the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=35790367",
                                "text": "HN discussion"
                            },
                            {
                                "type": "text",
                                "text": " about Mojo, so if you have any pressing questions maybe risk a visit to orangeland."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0296ACR13M",
        "type": "message",
        "ts": "1683055237.039829",
        "client_msg_id": "ae108a04-82e6-44b9-aa69-d0c48f9ac767",
        "text": "Very interesting. I actually contemplated on building support for importing ANTLR grammars into my structure editor generator, but ultimately decided against it at this point. Found the paper and couple additional videos from here: <https:\/\/dl.acm.org\/doi\/fullHtml\/10.1145\/3544548.3580785>\n\nHave to read the paper later. Couldn't find any references for code generation for now, so I wonder if this is just a prototype that generates the editor which is able to create and modify internal AST, but is not able to read or write textual code of the said language. Integrating with textual codebases would be an obvious requirement for any real world use and something I investigated quite a bit. Reading is of course easy because you can use an existing parser for the language, but unfortunately 'unparser generators' aren't really a thing so you'll have to implement one. It'll be an extra hurdle if you want your structure editor to only make minimal changes to the textual code and not randomly change formatting etc, so that you wouldn't render git diffs useless.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "59de929720a2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-09-08\/4075674207584_59de929720a2fe0a13d8_72.jpg",
            "first_name": "",
            "real_name": "Jarno Montonen",
            "display_name": "Jarno Montonen",
            "team": "T5TCAFTA9",
            "name": "jarno.montonen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683023523.608309",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sCBfQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting. I actually contemplated on building support for importing ANTLR grammars into my structure editor generator, but ultimately decided against it at this point. Found the paper and couple additional videos from here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/fullHtml\/10.1145\/3544548.3580785"
                            },
                            {
                                "type": "text",
                                "text": "\n\nHave to read the paper later. Couldn't find any references for code generation for now, so I wonder if this is just a prototype that generates the editor which is able to create and modify internal AST, but is not able to read or write textual code of the said language. Integrating with textual codebases would be an obvious requirement for any real world use and something I investigated quite a bit. Reading is of course easy because you can use an existing parser for the language, but unfortunately 'unparser generators' aren't really a thing so you'll have to implement one. It'll be an extra hurdle if you want your structure editor to only make minimal changes to the textual code and not randomly change formatting etc, so that you wouldn't render git diffs useless."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1683058711.418459",
        "client_msg_id": "21944876-8e5e-478b-8c4e-2ca513f9fdb7",
        "text": "Looks interesting! It has a lot in common with Mech.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683050567.366109",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cz0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks interesting! It has a lot in common with Mech."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1683058812.116349",
        "client_msg_id": "b9fb07de-52c2-4016-b4c8-68180b764a35",
        "text": "So if you have a file named `hello.mojo` (or `hello.🔥`—yes, the file extension can be an emoji!), just type `mojo hello.mojo`:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683050567.366109",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KiQA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So if you have a file named "
                            },
                            {
                                "type": "text",
                                "text": "hello.mojo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (or "
                            },
                            {
                                "type": "text",
                                "text": "hello.🔥",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "—yes, the file extension can be an emoji!), just type "
                            },
                            {
                                "type": "text",
                                "text": "mojo hello.mojo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1683058833.908229",
        "edited": {
            "user": "UCGR73CAY",
            "ts": "1683059714.000000"
        },
        "client_msg_id": "107ecc3a-6a64-473f-a361-5b60d6ce79ec",
        "text": "lol I think I'm going to have to add a robot emoji for mech files... <https:\/\/gitlab.com\/mech-lang\/mech\/-\/commit\/3b9d9d3c1b3211d39bd9d32426ff377f8a8a2c25>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683050567.366109",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uelQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "lol I think I'm going to have to add a robot emoji for mech files... "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gitlab.com\/mech-lang\/mech\/-\/commit\/3b9d9d3c1b3211d39bd9d32426ff377f8a8a2c25"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]