[
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1542010871.207300",
        "client_msg_id": "b5615c4a-75b7-4477-bc26-f39c10089f96",
        "text": "I feel like OOP is just a tool. Maybe I don't know what OOP means to everyone else. Like a feel like being able to put a bunch of shapes in a list List&lt;Shape&gt; where concrete shapes are Circle, Rectangle, Triangle, etc is a useful concept. Or that semi standard command pattern that's useful for apps and gives you nearly free undo, redo, scripting language integration, etc.. I don't really know a better way. Another example might be some IO\/stream API where I want to pass in some abstract concept of a stream and that stream might be file, it might be a zip file, etc, it might be some in memory file, etc...\n\nBut I certainly agree OOP can be overused and it's certainly frustrating to have factory factory factories etc.\n\nI just sometimes don't know what the alternative is. For example functional programming doesn't seem like an alternative to all problems. Somethings actually have state and can't easily be duplicated\/discarded\/GCed automagically. Files and GPU resources come to mind but it's certainly possible I'm just aware of the patterns that deal with that fact outside of stateful objects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541955927.202900",
        "parent_user_id": "U9ULPG0UA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "14qC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel like OOP is just a tool. Maybe I don't know what OOP means to everyone else. Like a feel like being able to put a bunch of shapes in a list List<Shape> where concrete shapes are Circle, Rectangle, Triangle, etc is a useful concept. Or that semi standard command pattern that's useful for apps and gives you nearly free undo, redo, scripting language integration, etc.. I don't really know a better way. Another example might be some IO\/stream API where I want to pass in some abstract concept of a stream and that stream might be file, it might be a zip file, etc, it might be some in memory file, etc...\n\nBut I certainly agree OOP can be overused and it's certainly frustrating to have factory factory factories etc.\n\nI just sometimes don't know what the alternative is. For example functional programming doesn't seem like an alternative to all problems. Somethings actually have state and can't easily be duplicated\/discarded\/GCed automagically. Files and GPU resources come to mind but it's certainly possible I'm just aware of the patterns that deal with that fact outside of stateful objects."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA8HY8R7B",
        "type": "message",
        "ts": "1542024436.207500",
        "client_msg_id": "aa07acdb-71ca-4956-8f5a-f37702e6f919",
        "text": "Definitely a tool to me as well. A tool for thinking about and building models of dynamic processes.\n\nIt's also a very ill-defined term and most people probably think about type-based polymorphism and object-oriented design - most prominently GoF and JEE.\n\nBut to me OOP has nothing to do with classes, types, inheritance or patterns and I don't see it as an anti-thesis to FP. Instead, I prefer Kay's definition: \"OOP to me means only messaging, local retention and protection and\nhiding of state-process, and extreme late-binding of all things. It\ncan be done in Smalltalk and in LISP.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7db3c1ad975",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e7db3c1ad975b0355d3047ca8acb7c54.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Nikolas",
            "real_name": "Nikolas Martens",
            "display_name": "Nikolas",
            "team": "T5TCAFTA9",
            "name": "nikolas.m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541955927.202900",
        "parent_user_id": "U9ULPG0UA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EOF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Definitely a tool to me as well. A tool for thinking about and building models of dynamic processes.\n\nIt's also a very ill-defined term and most people probably think about type-based polymorphism and object-oriented design - most prominently GoF and JEE.\n\nBut to me OOP has nothing to do with classes, types, inheritance or patterns and I don't see it as an anti-thesis to FP. Instead, I prefer Kay's definition: \"OOP to me means only messaging, local retention and protection and\nhiding of state-process, and extreme late-binding of all things. It\ncan be done in Smalltalk and in LISP.\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE0ETTCG7",
        "type": "message",
        "ts": "1542042798.207800",
        "edited": {
            "user": "UE0ETTCG7",
            "ts": "1542042827.000000"
        },
        "client_msg_id": "a28d4284-02a5-4cfd-87ac-76cbaca120f1",
        "text": "The problem with OOP is that it facilitates having more state (the only significant difference between OOP and FP is that objects provide a namespace to hang state variables off of). State is the largest source of unexpected results in programing. It means functions can have unexpected side effects (by modifying state), and it also means the surface area for bugs gets increase by an order of magnitude (each function in your class now needs needs be tested with all significant permutations its instance variables can be in). When you do need to have state OOP is a useful (the best?) paradigm for managing it. Gary Bernhardt's \"Boundaries\" is a great talk on when and how to use OOP and FP in the same application <https:\/\/www.destroyallsoftware.com\/talks\/boundaries>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8d5fa305f272",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-24\/1392332871012_8d5fa305f272f9d0c9e3_72.jpg",
            "first_name": "Roben",
            "real_name": "Roben Kleene",
            "display_name": "robenkleene",
            "team": "T5TCAFTA9",
            "name": "services",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541955927.202900",
        "parent_user_id": "U9ULPG0UA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m=WN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The problem with OOP is that it facilitates having more state (the only significant difference between OOP and FP is that objects provide a namespace to hang state variables off of). State is the largest source of unexpected results in programing. It means functions can have unexpected side effects (by modifying state), and it also means the surface area for bugs gets increase by an order of magnitude (each function in your class now needs needs be tested with all significant permutations its instance variables can be in). When you do need to have state OOP is a useful (the best?) paradigm for managing it. Gary Bernhardt's \"Boundaries\" is a great talk on when and how to use OOP and FP in the same application "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.destroyallsoftware.com\/talks\/boundaries"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1542043567.208100",
        "edited": {
            "user": "U5TCAFTD3",
            "ts": "1542043580.000000"
        },
        "client_msg_id": "f26b0fcb-a1d9-4a4a-8a42-ac0cdb4c7c6a",
        "text": "<@UE1JQM9HQ>  is who I mentioned above that I am interviewing soon. He just joined the slack",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541780906.114900",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rd8D5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": "  is who I mentioned above that I am interviewing soon. He just joined the slack"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1542043593.208400",
        "client_msg_id": "c176a3a6-547e-47c4-83cd-2f02a57d772d",
        "text": "Hello everyone!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541780906.114900",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uxH6A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello everyone!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1542043691.208600",
        "client_msg_id": "1aadc0d7-2b3a-4dba-8dc1-7702e0e4ee6a",
        "text": "I am programming in Smalltalk since 16 years, and since 2008 in Pharo. Right now, at my company are building a whole new IDE for Pharo that essentially replaces half of Pharo.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541780906.114900",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8lHUg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am programming in Smalltalk since 16 years, and since 2008 in Pharo. Right now, at my company are building a whole new IDE for Pharo that essentially replaces half of Pharo."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1542043996.208800",
        "client_msg_id": "2c08e20a-1105-4012-902a-11ebc243aead",
        "text": "I see questions about Pharo vs Squeak. Pharo was forked from Squeak due to differences in how people approached software engineering and to differences in how to allocate effort. For example, a great deal of effort was spent in Pharo to create a bootstrap process that recreates the image from dead code. To achieve this, the focus was on cleaning the system to modularize the tiny bits that can be recreated later on. The two are not far apart, but there is more visible momentum around Pharo.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541780906.114900",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dfx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see questions about Pharo vs Squeak. Pharo was forked from Squeak due to differences in how people approached software engineering and to differences in how to allocate effort. For example, a great deal of effort was spent in Pharo to create a bootstrap process that recreates the image from dead code. To achieve this, the focus was on cleaning the system to modularize the tiny bits that can be recreated later on. The two are not far apart, but there is more visible momentum around Pharo."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1542044545.209100",
        "client_msg_id": "9bf2034c-241f-4f07-82f0-2b5fe510292f",
        "text": "Reading the thread, I see the mentioning of Morphic. Indeed, we can say that Smalltalk is a language + environment.  Morphic, which was originally invented in Self, is an exciting vehicle to show how combining a graphical framework with a reflective system can produce live environments that allow us to both make computation available for people and allow us to drill down into the system. Now, Morphic shows its 20+ years. For example, it renders things via BitBlt. We build another graphical stack that brings the Morphic ideas into a more modern form, and also takes advantage of what is possible today. For example, it has exactly one rendering tree at all times. Based on this property, we think we created a novel text editor that is able to incorporate arbitrary graphical elements. This in turn enables us to have a live notebook technology right in the IDE.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541780906.114900",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QkraD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reading the thread, I see the mentioning of Morphic. Indeed, we can say that Smalltalk is a language + environment.  Morphic, which was originally invented in Self, is an exciting vehicle to show how combining a graphical framework with a reflective system can produce live environments that allow us to both make computation available for people and allow us to drill down into the system. Now, Morphic shows its 20+ years. For example, it renders things via BitBlt. We build another graphical stack that brings the Morphic ideas into a more modern form, and also takes advantage of what is possible today. For example, it has exactly one rendering tree at all times. Based on this property, we think we created a novel text editor that is able to incorporate arbitrary graphical elements. This in turn enables us to have a live notebook technology right in the IDE."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1542044665.209300",
        "client_msg_id": "f1154bc6-dfc4-43bf-86ca-2a0bdd026031",
        "text": "If there is interest, you can see some details about the first alpha version that we just reached on the official page <https:\/\/feenk.com\/gt> and on our Twitter feed: <https:\/\/twitter.com\/feenkcom>. Just a note: even though we are a company, everything I described is free and open-source under MIT.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541780906.114900",
        "parent_user_id": "UE0ETTCG7",
        "attachments": [
            {
                "title": "Glamorous Toolkit",
                "title_link": "https:\/\/feenk.com\/gt",
                "text": "The Glamorous Toolkit is the moldable development environment for Pharo",
                "fallback": "Glamorous Toolkit",
                "from_url": "https:\/\/feenk.com\/gt",
                "service_name": "feenk.com",
                "id": 1,
                "original_url": "https:\/\/feenk.com\/gt"
            },
            {
                "title": "feenk (@feenkcom) | Twitter",
                "title_link": "https:\/\/twitter.com\/feenkcom",
                "text": "The latest Tweets from feenk (@feenkcom). We reshape the Development eXperience. #gtoolkit. Switzerland",
                "fallback": "feenk (@feenkcom) | Twitter",
                "from_url": "https:\/\/twitter.com\/feenkcom",
                "service_icon": "https:\/\/abs.twimg.com\/icons\/apple-touch-icon-192x192.png",
                "service_name": "twitter.com",
                "id": 2,
                "original_url": "https:\/\/twitter.com\/feenkcom"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cESQN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If there is interest, you can see some details about the first alpha version that we just reached on the official page "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/feenk.com\/gt"
                            },
                            {
                                "type": "text",
                                "text": " and on our Twitter feed: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/feenkcom"
                            },
                            {
                                "type": "text",
                                "text": ". Just a note: even though we are a company, everything I described is free and open-source under MIT."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1542055885.209800",
        "client_msg_id": "af1f6f2b-76d8-4a05-8901-9baf9a15328e",
        "text": "<@UCGAK10LS> thanks for Elm link, will check it out.\n\n&gt; Managed time is only relevant when looking beneath the actor model abstraction, when you’re looking at how an imperative computation that defines an actor’s state transition can be managed.\n\nI don't really agree. Or, rather the question is can we bring managed time to distributed, concurrent actors? Reading the Managed Time paper, it sure seems so. The Virtual Time paper linked from the Managed Time paper you linked above definitely looks like it is extending the actor model rather than working beneath it. From the paper: \"Processes communicate only by exchanging messages, and any process is free at any time to send a message to any process (including itself) that it can name.\"\n\nWhat I'm looking for is something more than 'trace and record entire executions'. E.g. we may want to explore two alternative executions and then commit to one, or merge them. We may want to do this as part of live programming, or even as part of maintaining consistency in a distributed system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541745698.096700",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GSF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " thanks for Elm link, will check it out.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Managed time is only relevant when looking beneath the actor model abstraction, when you’re looking at how an imperative computation that defines an actor’s state transition can be managed."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI don't really agree. Or, rather the question is can we bring managed time to distributed, concurrent actors? Reading the Managed Time paper, it sure seems so. The Virtual Time paper linked from the Managed Time paper you linked above definitely looks like it is extending the actor model rather than working beneath it. From the paper: \"Processes communicate only by exchanging messages, and any process is free at any time to send a message to any process (including itself) that it can name.\"\n\nWhat I'm looking for is something more than 'trace and record entire executions'. E.g. we may want to explore two alternative executions and then commit to one, or merge them. We may want to do this as part of live programming, or even as part of maintaining consistency in a distributed system."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1542060383.210200",
        "client_msg_id": "0d426f88-6fbb-4a38-ac08-68a9037d1bb4",
        "text": "<@UA8HY8R7B> The kind of OOP you're referring to is perhaps more precisely known as \"the actor model\". I prefer this term because it's unambiguous.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541955927.202900",
        "parent_user_id": "U9ULPG0UA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xn\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA8HY8R7B"
                            },
                            {
                                "type": "text",
                                "text": " The kind of OOP you're referring to is perhaps more precisely known as \"the actor model\". I prefer this term because it's unambiguous."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1542063844.210500",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1542063885.000000"
        },
        "client_msg_id": "499c2264-cfa2-4ee4-b9aa-afa24e9e1243",
        "text": "I've now become confused as to what you're ultimately trying to gain from employing these ideas (and I'm not sure the ideas are well-defined). Beyond debugging features, we don't seem to be achieving any additional reasoning capacity (as we were originally talking about). Exploring two possible executions can be done by just running two slightly different systems in parallel (or doing rewind-resume); it doesn't seem like it would benefit greatly from any special concepts. I think the conversation has gone on a tangent?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541745698.096700",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jpc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've now become confused as to what you're ultimately trying to gain from employing these ideas (and I'm not sure the ideas are well-defined). Beyond debugging features, we don't seem to be achieving any additional reasoning capacity (as we were originally talking about). Exploring two possible executions can be done by just running two slightly different systems in parallel (or doing rewind-resume); it doesn't seem like it would benefit greatly from any special concepts. I think the conversation has gone on a tangent?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1542071660.211100",
        "client_msg_id": "c715685a-0897-44d1-b90a-3811ec76ea39",
        "text": "Hmm, yeah sorry for creating the confusion here. I'm going to try and summarize my thoughts and what I hope to gain as follows: if we replace the mutable state in OOP\/actors with versioned state, could our reasoning, live programming, time travel etc. be as good as we get with FP? Could we get the same benefits for large, distributed systems as well? Anyway, this is probably not a great medium for this discussion further. I hope to write up some more detail at some point.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541745698.096700",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yC+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, yeah sorry for creating the confusion here. I'm going to try and summarize my thoughts and what I hope to gain as follows: if we replace the mutable state in OOP\/actors with versioned state, could our reasoning, live programming, time travel etc. be as good as we get with FP? Could we get the same benefits for large, distributed systems as well? Anyway, this is probably not a great medium for this discussion further. I hope to write up some more detail at some point."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UCKRZS3DZ",
                    "UC25BN0RW"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UBJGA440K",
        "type": "message",
        "ts": "1542083614.211500",
        "client_msg_id": "3e2deb6b-d021-4516-b89a-b85708b55c6f",
        "text": "<@UDJ2TKB99> also the classic Early History of Smalltalk: <http:\/\/worrydream.com\/EarlyHistoryOfSmalltalk\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6015b7c906a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a6015b7c906ada6c2fe6f19feee54557.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Glen",
            "real_name": "Glen Chiacchieri",
            "display_name": "Glen Chiacchieri",
            "team": "T5TCAFTA9",
            "name": "gchiacchieri",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541752846.108200",
        "parent_user_id": "UDJ2TKB99",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aXg5R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDJ2TKB99"
                            },
                            {
                                "type": "text",
                                "text": " also the classic Early History of Smalltalk: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/worrydream.com\/EarlyHistoryOfSmalltalk\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDJ2TKB99",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1542087184.211800",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1542087273.000000"
        },
        "client_msg_id": "d1687ae3-2667-4614-9e11-b784e0138731",
        "text": "Hmm, I tried following the instructions to install GT but failed at the first hurdle of installing Pharo. When I run the PharoLauncher and try to download the stable image I get a \"network error\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541780906.114900",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gi53W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, I tried following the instructions to install GT but failed at the first hurdle of installing Pharo. When I run the PharoLauncher and try to download the stable image I get a \"network error\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1542087517.212100",
        "client_msg_id": "4ef21a18-4d5d-4fad-8753-ca724fc58d83",
        "text": "Which image are you trying? I'm running `Pharo 6.1 - 64bit (tech preview)`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541780906.114900",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/CF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Which image are you trying? I'm running "
                            },
                            {
                                "type": "text",
                                "text": "Pharo 6.1 - 64bit (tech preview)",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA8HY8R7B",
        "type": "message",
        "ts": "1542094012.212500",
        "client_msg_id": "67d3774f-b75c-4a27-aa6a-0016c07c6e91",
        "text": "Good idea. The Actor model does incorporate the most important parts about OOP and it's properly defined.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7db3c1ad975",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e7db3c1ad975b0355d3047ca8acb7c54.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Nikolas",
            "real_name": "Nikolas Martens",
            "display_name": "Nikolas",
            "team": "T5TCAFTA9",
            "name": "nikolas.m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541955927.202900",
        "parent_user_id": "U9ULPG0UA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9NUHe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good idea. The Actor model does incorporate the most important parts about OOP and it's properly defined."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDJ2TKB99",
        "type": "message",
        "ts": "1542094372.216200",
        "client_msg_id": "F39F0FE4-177C-4A03-BB48-047A978C28F3",
        "text": "Interesting work from Cloudflare in running customer computations using V8: <https:\/\/blog.cloudflare.com\/cloud-computing-without-containers\/> I tend to believe that the sheer amount of investment in browser execution contexts will make JS\/WASM the most interesting platform on which to build future computing models",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7acd71947ea2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-04\/2564854327154_7acd71947ea203e9a69b_72.jpg",
            "first_name": "Joe",
            "real_name": "Joe Trellick",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542094372.216200",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1542162171.236100",
        "reply_users": [
            "U8A5MS6R1",
            "UDJ2TKB99",
            "UA14TGLTC",
            "UDLGND5GA",
            "UDJ8A6RNH"
        ],
        "replies": [
            {
                "user": "U8A5MS6R1",
                "ts": "1542095537.216500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1542096313.216700"
            },
            {
                "user": "UDJ2TKB99",
                "ts": "1542098518.219300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1542098989.219900"
            },
            {
                "user": "UDJ2TKB99",
                "ts": "1542115522.223900"
            },
            {
                "user": "UDLGND5GA",
                "ts": "1542130073.224300"
            },
            {
                "user": "UDJ8A6RNH",
                "ts": "1542162171.236100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "The Cloudflare Blog",
                "title": "Cloud Computing without Containers",
                "title_link": "https:\/\/blog.cloudflare.com\/cloud-computing-without-containers\/",
                "text": "We have a cloud computing platform called Workers. Unlike essentially every other cloud computing platform I know of, it doesn’t use containers or virtual machines. We believe that is the future of Serverless and cloud computing in general, and I’ll try to convince you why.",
                "fallback": "The Cloudflare Blog: Cloud Computing without Containers",
                "image_url": "https:\/\/blog.cloudflare.com\/content\/images\/2018\/10\/no-VM-@3x-2.png",
                "image_width": 631,
                "image_height": 250,
                "fields": [
                    {
                        "title": "Written by",
                        "value": "Zack Bloom",
                        "short": true
                    },
                    {
                        "title": "Filed under",
                        "value": "Workers, Cloud Computing",
                        "short": true
                    }
                ],
                "ts": 1541775425,
                "from_url": "https:\/\/blog.cloudflare.com\/cloud-computing-without-containers\/",
                "image_bytes": 93212,
                "service_icon": "https:\/\/blog.cloudflare.com\/assets\/images\/apple-touch-icon-57x57-precomposed.png?v=c89bda66f9",
                "id": 1,
                "original_url": "https:\/\/blog.cloudflare.com\/cloud-computing-without-containers\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cJN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting work from Cloudflare in running customer computations using V8: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.cloudflare.com\/cloud-computing-without-containers\/"
                            },
                            {
                                "type": "text",
                                "text": " I tend to believe that the sheer amount of investment in browser execution contexts will make JS\/WASM the most interesting platform on which to build future computing models"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC",
                    "U5TCAFTD3",
                    "UDJ8A6RNH"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1542095537.216500",
        "client_msg_id": "b9d54295-9375-42e1-9769-3ec1264b69da",
        "text": "I too believe that wasm will end up being a ubiquitous platform.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542094372.216200",
        "parent_user_id": "UDJ2TKB99",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I5jD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I too believe that wasm will end up being a ubiquitous platform."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]