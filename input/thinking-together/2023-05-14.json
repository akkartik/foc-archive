[
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1684077799.066499",
        "edited": {
            "user": "U02QC0PPER3",
            "ts": "1684079273.000000"
        },
        "client_msg_id": "691696b7-7809-4aad-b6fb-968799bda6cd",
        "text": "I hope to experiment with modeling _user input_ in a begginers purely functional env as changing the program text.  100% vaporware, but I'm excited about it this idea for several reasons:\n\n(1) Smuggle some powerful techniques such as \"event sourcing\", React\/redux, time-travel debugging without users having to learn anything new they don't learn anyway about their dev environment while editing code (e.g. the env should be able to show the state at every point of the code).\n\n(2) Dissolve the difference between user actions &amp; programming.  To explain this one, I need a side rant.\n\nWhat is the one most important idea in all programming?  imho, Composing bigger programs out of smaller programs.  How exactly you do that depends on the language, in C it's functions, in Java classes &amp; methods etc...\nBut how do we begin teaching mainstream languages, say C or Java?\n```#include &lt;stdio.h&gt;                  \/\/ OS input\/output facilities\n\nint main(int argc, char **argv) {   \/\/ OS calling convention\n  char *name = argv[1];             \/\/ OS calling convention (I skipped the error handling)\n  printf(\"Hello, %s!\\n\", name);     \/\/ OS input\/output facilities\n  return 0;                         \/\/ OS calling convention\n}```\nAll the attention is on process&lt;-&gt;OS interfaces :frowning:.  Which would be appropriate if teaching a shell, where you compose processes, but is irrelevant noise for teaching modularity within (say) C.\nIf you accept this argument, you must start teaching in a REPL (or better), where you don't build an OS executable; you define a function (or method etc.) and the user \"interacts\" with it by using the language's normal call syntax.\n```&gt;&gt;&gt; def greet(name):\n        return \"Hello, \" + name + \"!\"\n\n&gt;&gt;&gt; greet(\"Alice\")\n\"Hello, Alice!\"```\n[Corollary: the 1st language mustn't be a compiled language.]  \/rant\n\nSo, if you're writing a game where you move a piece, or attack, the MVP is appending `| move ...` or `| attack ...` to the program code!\nWhich would take previous game state &amp; compute next state.\nWell, not necessarily append at the end.  At highest level a game is a `compute_inner_state | render` pipeline, and the place to append player actions is `compute_inner_state` where you work on inner state.  [Game-travel debugging requires an env where you can stop at middle of `compute_inner_state` as if the rest is commented out and run `| render` from there.]\n• If you have multiple moving units\/pieces, it's tempting to append code into their individual \"state functions\", instead of descending a data structure to modify the right one.  [200% vaporware]\n• I'd hope collaborative editing can stretch this into MVP for multi-player turn-based games.  [300% vaporware, requires tricky modeling of time and concurrency. I have some ideas around \"wait until _T_\" meaning \"this function does early return if time &lt; _T_\" but entirely unproven...]\nWell, that's minimal but won't feel like a \"normal game UI\".\nPlus, need some constrained mode temporarily restricting coding to \"legal actions in the game\".\nOK, but I want \"UI buider\" which is explicitly about binding key presses or a clickable screen regions to be shorthands to code modification.\nLike <https:\/\/www.gnu.org\/software\/emacs\/emacs-paper.html#SEC6|Emacs>, one should not code explicit \"I\/O\".  Just customize the environment's event loop.\n\n(3) Even more ideological:  I want people exposed to the subversive idea that it's any action they take interacting with a computer (key press, click etc.) _is_ a form of programming.  And that they can always script bigger programs out of those.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NhCnV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hope to experiment with modeling "
                            },
                            {
                                "type": "text",
                                "text": "user input",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in a begginers purely functional env as changing the program text.  100% vaporware, but I'm excited about it this idea for several reasons:\n\n(1) Smuggle some powerful techniques such as \"event sourcing\", React\/redux, time-travel debugging without users having to learn anything new they don't learn anyway about their dev environment while editing code (e.g. the env should be able to show the state at every point of the code).\n\n(2) Dissolve the difference between user actions & programming.  To explain this one, I need a side rant.\n\nWhat is the one most important idea in all programming?  imho, Composing bigger programs out of smaller programs.  How exactly you do that depends on the language, in C it's functions, in Java classes & methods etc...\nBut how do we begin teaching mainstream languages, say C or Java?\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "#include <stdio.h>                  \/\/ OS input\/output facilities\n\nint main(int argc, char **argv) {   \/\/ OS calling convention\n  char *name = argv[1];             \/\/ OS calling convention (I skipped the error handling)\n  printf(\"Hello, %s!\\n\", name);     \/\/ OS input\/output facilities\n  return 0;                         \/\/ OS calling convention\n}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All the attention is on process<->OS interfaces "
                            },
                            {
                                "type": "emoji",
                                "name": "frowning",
                                "unicode": "1f626"
                            },
                            {
                                "type": "text",
                                "text": ".  Which would be appropriate if teaching a shell, where you compose processes, but is irrelevant noise for teaching modularity within (say) C.\nIf you accept this argument, you must start teaching in a REPL (or better), where you don't build an OS executable; you define a function (or method etc.) and the user \"interacts\" with it by using the language's normal call syntax.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": ">>> def greet(name):\n        return \"Hello, \" + name + \"!\"\n\n>>> greet(\"Alice\")\n\"Hello, Alice!\""
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Corollary: the 1st language mustn't be a compiled language.]  \/rant\n\nSo, if you're writing a game where you move a piece, or attack, the MVP is appending "
                            },
                            {
                                "type": "text",
                                "text": "| move ...",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "| attack ...",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to the program code!\nWhich would take previous game state & compute next state.\nWell, not necessarily append at the end.  At highest level a game is a "
                            },
                            {
                                "type": "text",
                                "text": "compute_inner_state | render",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " pipeline, and the place to append player actions is "
                            },
                            {
                                "type": "text",
                                "text": "compute_inner_state",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " where you work on inner state.  [Game-travel debugging requires an env where you can stop at middle of "
                            },
                            {
                                "type": "text",
                                "text": "compute_inner_state",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as if the rest is commented out and run "
                            },
                            {
                                "type": "text",
                                "text": "| render",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from there.]\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If you have multiple moving units\/pieces, it's tempting to append code into their individual \"state functions\", instead of descending a data structure to modify the right one.  [200% vaporware]"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I'd hope collaborative editing can stretch this into MVP for multi-player turn-based games.  [300% vaporware, requires tricky modeling of time and concurrency. I have some ideas around \"wait until "
                                    },
                                    {
                                        "type": "text",
                                        "text": "T",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "\" meaning \"this function does early return if time < "
                                    },
                                    {
                                        "type": "text",
                                        "text": "T",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "\" but entirely unproven...]"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWell, that's minimal but won't feel like a \"normal game UI\".\nPlus, need some constrained mode temporarily restricting coding to \"legal actions in the game\".\nOK, but I want \"UI buider\" which is explicitly about binding key presses or a clickable screen regions to be shorthands to code modification.\nLike "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.gnu.org\/software\/emacs\/emacs-paper.html#SEC6",
                                "text": "Emacs"
                            },
                            {
                                "type": "text",
                                "text": ", one should not code explicit \"I\/O\".  Just customize the environment's event loop.\n\n(3) Even more ideological:  I want people exposed to the subversive idea that it's any action they take interacting with a computer (key press, click etc.) "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a form of programming.  And that they can always script bigger programs out of those."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1684079263.327259",
        "client_msg_id": "31542b8a-a85f-479a-8fae-40e791483832",
        "text": "[hmm, point 3 sounds like 2.  I feel there is ideological distinction but don't know to articulate it at this time.]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S4t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[hmm, point 3 sounds like 2.  I feel there is ideological distinction but don't know to articulate it at this time.]"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03B14DUZSA",
        "type": "message",
        "ts": "1684120744.486539",
        "client_msg_id": "b95d0004-8588-45fe-9914-5bb6feb008a3",
        "text": "You may want to look at Hash also, they pivoted last year from a modeling\/simulation toolkit to a workspace knowledge graph solution. <https:\/\/hash.ai\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7358a16bdea5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-02\/4314864832259_7358a16bdea535168748_72.png",
            "first_name": "Riley",
            "real_name": "Riley Stewart",
            "display_name": "Riley Stewart",
            "team": "T5TCAFTA9",
            "name": "me1307",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683971902.133109",
        "parent_user_id": "USUMN6XLH",
        "attachments": [
            {
                "image_url": "https:\/\/cdn-us1.hash.ai\/assets\/hash-card.png",
                "image_width": 1600,
                "image_height": 836,
                "image_bytes": 585180,
                "from_url": "https:\/\/hash.ai\/",
                "service_icon": "https:\/\/hash.ai\/assets\/img\/brand\/favicon-57.png",
                "id": 1,
                "original_url": "https:\/\/hash.ai\/",
                "fallback": "HASH - a workspace for structured knowledge.",
                "text": "Integrate live data, construct ontologies, and create shared understanding in a collaborative, open-source workspace.",
                "title": "HASH - a workspace for structured knowledge.",
                "title_link": "https:\/\/hash.ai\/",
                "service_name": "hash.ai"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a8y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You may want to look at Hash also, they pivoted last year from a modeling\/simulation toolkit to a workspace knowledge graph solution. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hash.ai\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKT951SPR"
                ],
                "count": 1
            }
        ]
    }
]