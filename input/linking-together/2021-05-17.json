[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1621237585.179100",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1621259724.000000"
        },
        "client_msg_id": "f8f63280-a9f2-479a-bb3c-9a0ae48c60ab",
        "text": "The 2021 edition of <https:\/\/sigops.org\/s\/conferences\/hotos\/2021\/|HotOS> (hot topics in operating systems) program was just wrapped up (conference is in a week or so). This paper on Aurora, an experimental single level store, seemed like it would be interesting for this audience:\n&gt; We present the Aurora single level store (SLS), an OS that simplifies persistence by automatically persisting all traditionally ephemeral application state. With recent storage hardware like NVMe SSDs and NVDIMMs, Aurora is able to continuously checkpoint entire applications with millisecond granularity.\n<https:\/\/sigops.org\/s\/conferences\/hotos\/2021\/papers\/hotos21-s07-tsalapatis.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t2hkZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The 2021 edition of "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/sigops.org\/s\/conferences\/hotos\/2021\/",
                                "text": "HotOS"
                            },
                            {
                                "type": "text",
                                "text": " (hot topics in operating systems) program was just wrapped up (conference is in a week or so). This paper on Aurora, an experimental single level store, seemed like it would be interesting for this audience:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We present the Aurora single level store (SLS), an OS that simplifies persistence by automatically persisting all traditionally ephemeral application state. With recent storage hardware like NVMe SSDs and NVDIMMs, Aurora is able to continuously checkpoint entire applications with millisecond granularity."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/sigops.org\/s\/conferences\/hotos\/2021\/papers\/hotos21-s07-tsalapatis.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK",
                    "UHWC9PXBL",
                    "UMHG81CBH",
                    "U8A5MS6R1"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1621238959.179300",
        "client_msg_id": "b3014433-88d3-4094-946e-f5cf651ee429",
        "text": "Learn Datalog Today - <http:\/\/www.learndatalogtoday.org|http:\/\/www.learndatalogtoday.org>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qhr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Learn Datalog Today - "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.learndatalogtoday.org",
                                "text": "http:\/\/www.learndatalogtoday.org"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1621257943.179400",
        "client_msg_id": "60680746-3f31-43f3-961a-2f27f68c6f93",
        "text": "I'm only thinking about WASM, I haven't written the code yet. WASM still looks unfinished to me. I'm building a programming environment and a virtual machine using C++. The fastest known interpreter design is no longer a byte code interpreter, it's to use tail-threaded code, which relies on tail-call elimination in gcc and clang. This won't work in WASM yet (maybe in a year or two?). JITing to machine code is also problematic. You can't JIT to WASM then execute the WASM in the same module. The most impressive work on trying to make a fast VM run under WASM is the CheerpX project, and the complexity of their workarounds to WASM's deficiencies are rather scary. I'll just have to accept that my VM will be slow. In my language, the \"bedrock\" experienced by my users will be my VM, which will be simpler and higher level than the substrates I'm implementing on top of. Loosely inspired by Lisp and Smalltalk.\n\nOne big differentiator is that my VM allows the same code to run on the CPU or the GPU, and allows you to mostly not care about the distinction. Low level GPU programming, using existing APIs like Vulkan, is a kind of hell. It is frankly too complicated for me to deal with for any kind of application level programming that I want to do, so I want a high level, habitable VM that abstracts away much of the nonsense. The kind of system I want to build can't be \"truly comprehensible\" since GPUs are far worse in the voodoo department than CPUs. But I don't see an alternative if I want to do interactive 3D graphics. More generally, it's hard to build simple, easy to use, high level abstractions for 3D graphics and 3D modelling that aren't leaky abstractions, and that don't have performance cliffs that you can fall off of.\n\nTail threaded interpreters:\n\"Parsing Protobuf at 2+GB\/s: How I Learned To Love Tail Calls in C\"\n<http:\/\/blog.reverberate.org\/2021\/04\/21\/musttail-efficient-interpreters.html|blog.reverberate.org\/2021\/04\/21\/musttail-efficient-interpreters.html>\n\nCheerpX:\n * <https:\/\/medium.com\/leaningtech\/extreme-webassembly-1-pushing-browsers-to-their-absolute-limits-56a393435323>\n * <https:\/\/medium.com\/leaningtech\/extreme-webassembly-2-the-sad-state-of-webassembly-tail-calls-f5d48ef82a87>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620867412.166800",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "service_name": "Medium",
                "title": "Extreme WebAssembly 1: pushing browsers to their absolute limits",
                "title_link": "https:\/\/medium.com\/leaningtech\/extreme-webassembly-1-pushing-browsers-to-their-absolute-limits-56a393435323",
                "text": "Working on a x86 virtual machine in WebAssembly is highlighting several limitations of current browser implementations",
                "fallback": "Medium: Extreme WebAssembly 1: pushing browsers to their absolute limits",
                "image_url": "https:\/\/miro.medium.com\/max\/1200\/1*S5MKNgGN1sqK04mhasPEEA.png",
                "fields": [
                    {
                        "title": "Reading time",
                        "value": "6 min read",
                        "short": true
                    }
                ],
                "ts": 1592317116,
                "from_url": "https:\/\/medium.com\/leaningtech\/extreme-webassembly-1-pushing-browsers-to-their-absolute-limits-56a393435323",
                "image_width": 294,
                "image_height": 250,
                "image_bytes": 34603,
                "service_icon": "https:\/\/miro.medium.com\/fit\/c\/152\/152\/1*sHhtYhaCe2Uc3IU0IgKwIQ.png",
                "id": 1,
                "original_url": "https:\/\/medium.com\/leaningtech\/extreme-webassembly-1-pushing-browsers-to-their-absolute-limits-56a393435323"
            },
            {
                "service_name": "Medium",
                "title": "Extreme WebAssembly 2: the sad state of WebAssembly tail calls",
                "title_link": "https:\/\/medium.com\/leaningtech\/extreme-webassembly-2-the-sad-state-of-webassembly-tail-calls-f5d48ef82a87",
                "text": "A deep look at the current state of support for WebAssembly tail calls on various browser, plus an hands-on tutorial for CheerpX",
                "fallback": "Medium: Extreme WebAssembly 2: the sad state of WebAssembly tail calls",
                "image_url": "https:\/\/miro.medium.com\/max\/625\/0*IlNy9pfJDAKueZHv.jpg",
                "fields": [
                    {
                        "title": "Reading time",
                        "value": "7 min read",
                        "short": true
                    }
                ],
                "ts": 1597787825,
                "from_url": "https:\/\/medium.com\/leaningtech\/extreme-webassembly-2-the-sad-state-of-webassembly-tail-calls-f5d48ef82a87",
                "image_width": 252,
                "image_height": 250,
                "image_bytes": 149658,
                "service_icon": "https:\/\/miro.medium.com\/fit\/c\/152\/152\/1*sHhtYhaCe2Uc3IU0IgKwIQ.png",
                "id": 2,
                "original_url": "https:\/\/medium.com\/leaningtech\/extreme-webassembly-2-the-sad-state-of-webassembly-tail-calls-f5d48ef82a87"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GAU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm only thinking about WASM, I haven't written the code yet. WASM still looks unfinished to me. I'm building a programming environment and a virtual machine using C++. The fastest known interpreter design is no longer a byte code interpreter, it's to use tail-threaded code, which relies on tail-call elimination in gcc and clang. This won't work in WASM yet (maybe in a year or two?). JITing to machine code is also problematic. You can't JIT to WASM then execute the WASM in the same module. The most impressive work on trying to make a fast VM run under WASM is the CheerpX project, and the complexity of their workarounds to WASM's deficiencies are rather scary. I'll just have to accept that my VM will be slow. In my language, the \"bedrock\" experienced by my users will be my VM, which will be simpler and higher level than the substrates I'm implementing on top of. Loosely inspired by Lisp and Smalltalk.\n\nOne big differentiator is that my VM allows the same code to run on the CPU or the GPU, and allows you to mostly not care about the distinction. Low level GPU programming, using existing APIs like Vulkan, is a kind of hell. It is frankly too complicated for me to deal with for any kind of application level programming that I want to do, so I want a high level, habitable VM that abstracts away much of the nonsense. The kind of system I want to build can't be \"truly comprehensible\" since GPUs are far worse in the voodoo department than CPUs. But I don't see an alternative if I want to do interactive 3D graphics. More generally, it's hard to build simple, easy to use, high level abstractions for 3D graphics and 3D modelling that aren't leaky abstractions, and that don't have performance cliffs that you can fall off of.\n\nTail threaded interpreters:\n\"Parsing Protobuf at 2+GB\/s: How I Learned To Love Tail Calls in C\"\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/blog.reverberate.org\/2021\/04\/21\/musttail-efficient-interpreters.html",
                                "text": "blog.reverberate.org\/2021\/04\/21\/musttail-efficient-interpreters.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nCheerpX:\n * "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/medium.com\/leaningtech\/extreme-webassembly-1-pushing-browsers-to-their-absolute-limits-56a393435323"
                            },
                            {
                                "type": "text",
                                "text": "\n * "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/medium.com\/leaningtech\/extreme-webassembly-2-the-sad-state-of-webassembly-tail-calls-f5d48ef82a87"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1621272206.182700",
        "client_msg_id": "709589c1-e3f1-47e5-be74-9315739d22f3",
        "text": "<https:\/\/www.hillelwayne.com\/talks\/esolangs\/|A Brief Introduction to Esoteric Languages> by <https:\/\/twitter.com\/hillelogram|Hillel Wayne>\n\nA 20 minute video lecture, and 4000 word companion piece, covering a handful of popular _esolangs —_ INTERCAL, FALSE, Brainfuck, Befunge, Shakespeare, Piet (:heart:), BodyFuck, Chef, Orca (:black_heart:), GolfScript, Hexagony (:eyes:), and more!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lFTTi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.hillelwayne.com\/talks\/esolangs\/",
                                "text": "A Brief Introduction to Esoteric Languages"
                            },
                            {
                                "type": "text",
                                "text": " by "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/hillelogram",
                                "text": "Hillel Wayne"
                            },
                            {
                                "type": "text",
                                "text": "\n\nA 20 minute video lecture, and 4000 word companion piece, covering a handful of popular "
                            },
                            {
                                "type": "text",
                                "text": "esolangs — ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "INTERCAL, FALSE, Brainfuck, Befunge, Shakespeare, Piet ("
                            },
                            {
                                "type": "emoji",
                                "name": "heart",
                                "unicode": "2764-fe0f"
                            },
                            {
                                "type": "text",
                                "text": "), BodyFuck, Chef, Orca ("
                            },
                            {
                                "type": "emoji",
                                "name": "black_heart",
                                "unicode": "1f5a4"
                            },
                            {
                                "type": "text",
                                "text": "), GolfScript, Hexagony ("
                            },
                            {
                                "type": "emoji",
                                "name": "eyes",
                                "unicode": "1f440"
                            },
                            {
                                "type": "text",
                                "text": "), and more!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01ULEWACPP",
                    "UBSMEUXAA",
                    "UA14TGLTC",
                    "U013ZLJARC7",
                    "U01MMT90EBE",
                    "U01KL1XH4R1"
                ],
                "count": 6
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1621272896.183700",
        "client_msg_id": "89ddb903-3186-45aa-9551-ab84e9ab4d36",
        "text": "<@UJBAJNFLK>:\n&gt; the bedrock level is the first programmable level of abstraction just above non-programmable hardware. In some contexts (e.g. cybersecurity), that's relevant. For many others, it isn't.\nI've been thinking about this, and the more I think about it the less I understand it. In what context is security not relevant?\n\nWe today don't know how to write secure software. Therefore every layer under you adds to your risk and multiplies to the frequency of required upgrades. That should fairly directly lead to a force pushing you to \"go low\".\n\nThere is no dichotomy between contexts where the bedrock level is relevant and ones where it isn't. Staying close always reduces your risk, moving away always increases your risk. How much risk you want to tolerate is up to you. I understand that we all have things we want to do, and it's hard to give up our desires. I suffer from that as much as anyone else; <@UJN1TAYEQ> caring about 3D feels particularly difficult. I just try to stay cognizant of the risks I'm taking on a daily basis. They're ever-present.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620867412.166800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4nb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the bedrock level is the first programmable level of abstraction just above non-programmable hardware. In some contexts (e.g. cybersecurity), that's relevant. For many others, it isn't."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI've been thinking about this, and the more I think about it the less I understand it. In what context is security not relevant?\n\nWe today don't know how to write secure software. Therefore every layer under you adds to your risk and multiplies to the frequency of required upgrades. That should fairly directly lead to a force pushing you to \"go low\".\n\nThere is no dichotomy between contexts where the bedrock level is relevant and ones where it isn't. Staying close always reduces your risk, moving away always increases your risk. How much risk you want to tolerate is up to you. I understand that we all have things we want to do, and it's hard to give up our desires. I suffer from that as much as anyone else; "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " caring about 3D feels particularly difficult. I just try to stay cognizant of the risks I'm taking on a daily basis. They're ever-present."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1621274669.183900",
        "client_msg_id": "e30bf3ef-9583-443d-8cfc-f026fcade458",
        "text": "<@UCUSW7WVD> I don't want to suggest that security is not relevant, only that having it in one's habitability bubble may not be relevant to many of us. If you cannot evaluate security yourself, for lack of competence or lack of time, it becomes a matter of trusting others. Like for so many other technological artefacts. I can't evaluate the security of my car, for example.\nOnce you accept that you can't check everything yourself, what you care about is that others can do it on your behalf. Independent others, not the producer. But they can safely belong to somebody else's habitat.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620867412.166800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "asL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I don't want to suggest that security is not relevant, only that having it in one's habitability bubble may not be relevant to many of us. If you cannot evaluate security yourself, for lack of competence or lack of time, it becomes a matter of trusting others. Like for so many other technological artefacts. I can't evaluate the security of my car, for example.\nOnce you accept that you can't check everything yourself, what you care about is that others can do it on your behalf. Independent others, not the producer. But they can safely belong to somebody else's habitat."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1621279153.184200",
        "client_msg_id": "de484edc-09b7-48a1-a925-7052288fe0ac",
        "text": "I agree with all of that -- except for the word \"safely\" in the final sentence. It seems pretty clear that in the world we live in, you _cannot_ rely on others to check for you. You can rely on others to do their best, yes. In some situations, if you know who they are, they don't pass on maintainership willy-nilly, etc., etc., with a million details. But you're still hanging in the breeze to a great extent. The things we rely on often do, in practice, belong to somebody else's habitat. But this situation is in no way, shape or form \"safe\".\n\n&gt; having security in one's habitability bubble may not be relevant to many of us\nInstead of \"not relevant to many of us\", I'd say the relationship between security and many of us is more akin to that between an ostrich with its head in the sand and an approaching lion.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620867412.166800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5962H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree with all of that -- except for the word \"safely\" in the final sentence. It seems pretty clear that in the world we live in, you "
                            },
                            {
                                "type": "text",
                                "text": "cannot",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rely on others to check for you. You can rely on others to do their best, yes. In some situations, if you know who they are, they don't pass on maintainership willy-nilly, etc., etc., with a million details. But you're still hanging in the breeze to a great extent. The things we rely on often do, in practice, belong to somebody else's habitat. But this situation is in no way, shape or form \"safe\".\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "having security in one's habitability bubble may not be relevant to many of us"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nInstead of \"not relevant to many of us\", I'd say the relationship between security and many of us is more akin to that between an ostrich with its head in the sand and an approaching lion."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1621310497.000200",
        "client_msg_id": "c983379b-2ec2-479e-bf71-d2dbff9afb79",
        "text": "The graphics environment question is particularly interesting. Modern graphics cards inherently violate the \"inhabit the bedrock\" principal because they are solely concerned with performance. Pushing as high a resolution at as many frames per second with as much realism you can muster is basically the only goal, at least as far as how modern graphics cards work. Tractability has long been an afterthought, so it's not surprising that such a terrible and uninhabitable space developed. However, the graphics environments of the early 8-bit computers were fairly inhabitable as far as these systems go and I wonder if we can take a different approach that might focus on inhabitability over performance and get somewhere.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620867412.166800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zwc6M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The graphics environment question is particularly interesting. Modern graphics cards inherently violate the \"inhabit the bedrock\" principal because they are solely concerned with performance. Pushing as high a resolution at as many frames per second with as much realism you can muster is basically the only goal, at least as far as how modern graphics cards work. Tractability has long been an afterthought, so it's not surprising that such a terrible and uninhabitable space developed. However, the graphics environments of the early 8-bit computers were fairly inhabitable as far as these systems go and I wonder if we can take a different approach that might focus on inhabitability over performance and get somewhere."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1621313982.000400",
        "client_msg_id": "bb45832a-afad-4581-8299-d091c23d9ebd",
        "text": "<@UJBAJNFLK>: Oh sorry, I missed your \"independent others, not the producer\" when I wrote my previous comment. Did you mean stuff like CVE infrastructure?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620867412.166800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TaEOK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": ": Oh sorry, I missed your \"independent others, not the producer\" when I wrote my previous comment. Did you mean stuff like CVE infrastructure?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1621320128.000600",
        "client_msg_id": "7861b454-ad17-4c60-bf27-97233dfc7a09",
        "text": "<@UCUSW7WVD> Yes, CVE is a good example. It's certainly not safe to rely on any one person or institution to take care of an infrastructure, but there is no way around on relying on some collective. At least for all those who are not software professionals.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620867412.166800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M\/OZu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Yes, CVE is a good example. It's certainly not safe to rely on any one person or institution to take care of an infrastructure, but there is no way around on relying on some collective. At least for all those who are not software professionals."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]