[
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661031512.348399",
        "client_msg_id": "3624f161-f9ec-4c3b-b1d6-16e73de96bb3",
        "text": "It seems like the highlighted text should be *anything* instead of *your database*. Since that's the interesting part.\n\nNot sure you need \"inframe\" to be in bold.\n\nWould be cool for the code snippet to have a) syntax highlighting, and b) look more like an editor. Also the screenshot of the table could look more database-ey, maybe even just a db icon. Unless you can't get db access and you have to go through your UI (then you may want to make that more clear).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660033282.838049",
        "parent_user_id": "U022YTVTSR5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G924g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems like the highlighted text should be "
                            },
                            {
                                "type": "text",
                                "text": "anything",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " instead of "
                            },
                            {
                                "type": "text",
                                "text": "your database",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Since that's the interesting part.\n\nNot sure you need \"inframe\" to be in bold.\n\nWould be cool for the code snippet to have a) syntax highlighting, and b) look more like an editor. Also the screenshot of the table could look more database-ey, maybe even just a db icon. Unless you can't get db access and you have to go through your UI (then you may want to make that more clear)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661031813.735419",
        "client_msg_id": "e7151455-a931-43a2-99c4-29d7add053c0",
        "text": "Do you have a video of the second bullet point (rendering debug logs). I've always wanted to experiment with something like that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E1sj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you have a video of the second bullet point (rendering debug logs). I've always wanted to experiment with something like that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I'm working on a way to better preserve order of sibling nodes in my directed graph editor. I'm wondering if anyone's familiar with common data structures for this kind of stuff. Maybe from the text editing world. I use a customized fork of <https:\/\/github.com\/dagrejs\/dagre\/wiki|dagrejs> for auto layout. You can see the difference between videos 1\/2 below where my first solution has made things better. I'm basically using time stamps to track the order in which nodes were added to the graph. And transfer those timestamps to adjacent nodes on deletions\/edits.",
        "files": [
            {
                "id": "F03UJR1DZ0C",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F03U1QDLT63",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U02LHNW0VLP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OKQW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm working on a way to better preserve order of sibling nodes in my directed graph editor. I'm wondering if anyone's familiar with common data structures for this kind of stuff. Maybe from the text editing world. I use a customized fork of "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/dagrejs\/dagre\/wiki",
                                "text": "dagrejs"
                            },
                            {
                                "type": "text",
                                "text": " for auto layout. You can see the difference between videos 1\/2 below where my first solution has made things better. I'm basically using time stamps to track the order in which nodes were added to the graph. And transfer those timestamps to adjacent nodes on deletions\/edits."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1661032755.413189",
        "client_msg_id": "7f73adca-8910-4201-8c38-f72129e84cec",
        "thread_ts": "1661032755.413189",
        "reply_count": 10,
        "reply_users_count": 2,
        "latest_reply": "1661121623.353919",
        "reply_users": [
            "UJZS8UUJV",
            "U02LHNW0VLP"
        ],
        "replies": [
            {
                "user": "UJZS8UUJV",
                "ts": "1661037656.447109"
            },
            {
                "user": "UJZS8UUJV",
                "ts": "1661037732.837109"
            },
            {
                "user": "U02LHNW0VLP",
                "ts": "1661038255.288769"
            },
            {
                "user": "U02LHNW0VLP",
                "ts": "1661041626.430929"
            },
            {
                "user": "UJZS8UUJV",
                "ts": "1661043879.831009"
            },
            {
                "user": "U02LHNW0VLP",
                "ts": "1661057007.858349"
            },
            {
                "user": "U02LHNW0VLP",
                "ts": "1661057314.503209"
            },
            {
                "user": "U02LHNW0VLP",
                "ts": "1661057434.123409"
            },
            {
                "user": "U02LHNW0VLP",
                "ts": "1661121610.895199"
            },
            {
                "user": "U02LHNW0VLP",
                "ts": "1661121623.353919"
            }
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661033002.092949",
        "client_msg_id": "36b923aa-5f32-4dba-bc9c-514da86faa8a",
        "text": "I'm working on that :slightly_smiling_face: The jam is still ongoing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "grEF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm working on that "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " The jam is still ongoing."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U02LHNW0VLP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJZS8UUJV",
        "type": "message",
        "ts": "1661037656.447109",
        "client_msg_id": "3708b1c9-0d01-4e17-af3b-cf0197940391",
        "text": "Can you say a bit more about what capabilities dagrejs provides you with and how your timestamp solution relates to them?\n\nI haven’t seen dagrejs before, but it looks like their priority is more getting an individual graph rendering to have nice properties like minimizing edge crossings rather than consistency across renderings. From the abstract of the first paper they cite:\n\n&gt; The second pass sets the vertex order within ranks by an iterative heuristic incorporating a novel weight function and local transpositions to reduce crossings\nSo you’re able to override their ordering with your timestamp ordering?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g62b260c347a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/962b260c347a11e19b0fdce4a97a5d49.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Luke",
            "real_name": "Luke Persola",
            "display_name": "Luke Persola",
            "team": "T5TCAFTA9",
            "name": "lukepersola",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661032755.413189",
        "parent_user_id": "U02LHNW0VLP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s1M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can you say a bit more about what capabilities dagrejs provides you with and how your timestamp solution relates to them?\n\nI haven’t seen dagrejs before, but it looks like their priority is more getting an individual graph rendering to have nice properties like minimizing edge crossings rather than consistency across renderings. From the abstract of the first paper they cite:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The second pass sets the vertex order within ranks by an iterative heuristic incorporating a novel weight function and local transpositions to reduce crossings"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSo you’re able to override their ordering with your timestamp ordering?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJZS8UUJV",
        "type": "message",
        "ts": "1661037732.837109",
        "client_msg_id": "6b6c24d4-ae78-48d8-a8c7-6daa451872e7",
        "text": "Also that abstract ends on:\n&gt; The algorithm makes good drawings and runs fast.\n:joy:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g62b260c347a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/962b260c347a11e19b0fdce4a97a5d49.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Luke",
            "real_name": "Luke Persola",
            "display_name": "Luke Persola",
            "team": "T5TCAFTA9",
            "name": "lukepersola",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661032755.413189",
        "parent_user_id": "U02LHNW0VLP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J11iu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also that abstract ends on:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The algorithm makes good drawings and runs fast."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661038255.288769",
        "edited": {
            "user": "U02LHNW0VLP",
            "ts": "1661038877.000000"
        },
        "client_msg_id": "e3b63987-997a-4835-9bf0-6253e85a2c5d",
        "text": "Thanks for taking a look! Yes you're right, dagre doesn't try to support incremental rendering, or interactive rendering. It just takes a DAG (<https:\/\/github.com\/dagrejs\/graphlib\/wiki\/API-Reference#graph-api|graphlib>) and assigns x,y coords to all the nodes. It also gives you splines for drawing the edges. It's widely used for these kinds of applications, despite it being no longer maintained (because it's feature complete).\n\nThe order that you add nodes to your graph will determine part of the layout. For example if your code is:\n```graph = new dagre.Graph() \/\/ pseudo code\ngraph.setNode(\"a\");\ngraph.setNode(\"b\");\ngraph.setNode(\"c\"):\ngraph.setNode(\"d\");\ngraph.setEdge(\"c\", \"d\");```\nThen your resulting graph will be rendered like:\n```a\nb\nc -&gt; d```\nmermaid js uses the same layout algo so it can be handy to experiment there: mermaid.live. (And my tool exports to mermaid). Basically you can see the order of the nodes in mermaid since its a DSL, text to diagram thing.\n\nThe issue I have is that I need to tell dagre the correct ordering of nodes in order to maintain the order of sibling branches. Like in the first video above you can see that deleting \"D1\" causes the whole D branch to be re-arranged at the bottom. This is because originally I was creating the dagre graph by ordering the nodes based on their created at time stamps, which is pretty naive but works most of the time. However the user never edits their graph by just always appending to it, top to bottom. So the created at time doesn't end up corresponding with the actual intent. For example in the a,b,c,d graph above, if after making that initial graph we added a node `e` from `a -&gt; e` then e is going to have a late created at time, but conceptually it needs to be ordered at the very beginning of the graph so you would get a layout of:\n```a -&gt; e\nb\nc -&gt; d```\nSo my attempt today is to move away from ordering by createdAt and find a different way. So far its a combination of two things: 1. I add the earliest nodes first in a depth first way by adding the node, then traversing the graph from that node and adding its predecessors\/successors. Eg in the graph above we would add `a` and `e` nodes first because a is the earliest, and it's connected to e.\n\nThis has been a lot better, but I think there's a better way that would capture more information than simple time stamp can. I'm thinking of using a tree (probably) structure to capture the ordering of nodes relative to other siblings. But I haven't come up with a design for this yet.\n\nEventually I want to be able to support letting the user re-order nodes (vertically) or insert nodes above\/below other nodes. Which right now isn't really possible with the timestamp approach.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661032755.413189",
        "parent_user_id": "U02LHNW0VLP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vpxZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for taking a look! Yes you're right, dagre doesn't try to support incremental rendering, or interactive rendering. It just takes a DAG ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/dagrejs\/graphlib\/wiki\/API-Reference#graph-api",
                                "text": "graphlib"
                            },
                            {
                                "type": "text",
                                "text": ") and assigns x,y coords to all the nodes. It also gives you splines for drawing the edges. It's widely used for these kinds of applications, despite it being no longer maintained (because it's feature complete).\n\nThe order that you add nodes to your graph will determine part of the layout. For example if your code is:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "graph = new dagre.Graph() \/\/ pseudo code\ngraph.setNode(\"a\");\ngraph.setNode(\"b\");\ngraph.setNode(\"c\"):\ngraph.setNode(\"d\");\ngraph.setEdge(\"c\", \"d\");"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Then your resulting graph will be rendered like:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a\nb\nc -> d"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "mermaid js uses the same layout algo so it can be handy to experiment there: mermaid.live. (And my tool exports to mermaid). Basically you can see the order of the nodes in mermaid since its a DSL, text to diagram thing.\n\nThe issue I have is that I need to tell dagre the correct ordering of nodes in order to maintain the order of sibling branches. Like in the first video above you can see that deleting \"D1\" causes the whole D branch to be re-arranged at the bottom. This is because originally I was creating the dagre graph by ordering the nodes based on their created at time stamps, which is pretty naive but works most of the time. However the user never edits their graph by just always appending to it, top to bottom. So the created at time doesn't end up corresponding with the actual intent. For example in the a,b,c,d graph above, if after making that initial graph we added a node "
                            },
                            {
                                "type": "text",
                                "text": "e",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from "
                            },
                            {
                                "type": "text",
                                "text": "a -> e",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " then e is going to have a late created at time, but conceptually it needs to be ordered at the very beginning of the graph so you would get a layout of:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a -> e\nb\nc -> d"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So my attempt today is to move away from ordering by createdAt and find a different way. So far its a combination of two things: 1. I add the earliest nodes first in a depth first way by adding the node, then traversing the graph from that node and adding its predecessors\/successors. Eg in the graph above we would add "
                            },
                            {
                                "type": "text",
                                "text": "a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "e",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " nodes first because a is the earliest, and it's connected to e.\n\nThis has been a lot better, but I think there's a better way that would capture more information than simple time stamp can. I'm thinking of using a tree (probably) structure to capture the ordering of nodes relative to other siblings. But I haven't come up with a design for this yet.\n\nEventually I want to be able to support letting the user re-order nodes (vertically) or insert nodes above\/below other nodes. Which right now isn't really possible with the timestamp approach."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "",
        "files": [
            {
                "id": "F03UV4BH56D",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": true,
        "user": "U02LHNW0VLP",
        "display_as_bot": false,
        "type": "message",
        "ts": "1661041626.430929",
        "client_msg_id": "7d8c6fd6-4a83-4440-a398-f987fe72356a",
        "thread_ts": "1661032755.413189",
        "parent_user_id": "U02LHNW0VLP"
    },
    {
        "user": "UJZS8UUJV",
        "type": "message",
        "ts": "1661043879.831009",
        "edited": {
            "user": "UJZS8UUJV",
            "ts": "1661046354.000000"
        },
        "client_msg_id": "9a67de3d-cf9f-4183-9fbf-f2ca319be69d",
        "text": "I rolled it around in my head a bit but don’t have any suggestions at the moment.\n\nWhat graphs does\/will knotend support? All DAGs?\n\n&gt; The order that you add nodes to your graph will determine part of the layout.\nDoes dagre make any specific promises? And in general, do you think a complete solution is possible, or just looking for a good heuristic?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g62b260c347a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/962b260c347a11e19b0fdce4a97a5d49.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Luke",
            "real_name": "Luke Persola",
            "display_name": "Luke Persola",
            "team": "T5TCAFTA9",
            "name": "lukepersola",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661032755.413189",
        "parent_user_id": "U02LHNW0VLP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U7v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I rolled it around in my head a bit but don’t have any suggestions at the moment.\n\nWhat graphs does\/will knotend support? All DAGs?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The order that you add nodes to your graph will determine part of the layout."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nDoes dagre make any specific promises? And in general, do you think a complete solution is possible, or just looking for a good heuristic?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661057007.858349",
        "client_msg_id": "9c52c795-c966-4c95-85e6-ef695785b44b",
        "text": "Knotend supports directed graphs (cycles are ok). It doesn't do compound\/nested graphs. There aren't really any restrictions otherwise.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661032755.413189",
        "parent_user_id": "U02LHNW0VLP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MJX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Knotend supports directed graphs (cycles are ok). It doesn't do compound\/nested graphs. There aren't really any restrictions otherwise."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "One day to go. A quick demo with an unsurprising ending.",
        "files": [
            {
                "id": "F03UGM4K1FC",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w\/L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One day to go. A quick demo with an unsurprising ending."
                            }
                        ]
                    }
                ]
            }
        ],
        "subtype": "thread_broadcast",
        "root": {
            "text": "I've been participating in the wheel reinvention jam over at Handmade network. My entry plays with tools for debug by print, along 2 dimensions:\n• (pictured) hiding debug prints by default in the editor, so that we can save them in version control and share debugging tricks with collaborators without it getting overwhelming and always in our collective faces.\n• (vaporware) rendering debug logs in extensible graphical ways. The tool shouldn't need to know how to render every single type possible; instead it just reads a special representation within a codebase to learn how to render the types in that domain.",
            "files": [
                {
                    "id": "F03TVHR2M8W",
                    "mode": "hidden_by_limit"
                }
            ],
            "upload": false,
            "user": "UCUSW7WVD",
            "display_as_bot": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "cBK",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "I've been participating in the wheel reinvention jam over at Handmade network. My entry plays with tools for debug by print, along 2 dimensions:\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_list",
                            "elements": [
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "(pictured) hiding debug prints by default in the editor, so that we can save them in version control and share debugging tricks with collaborators without it getting overwhelming and always in our collective faces."
                                        }
                                    ]
                                },
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "(vaporware) rendering debug logs in extensible graphical ways. The tool shouldn't need to know how to render every single type possible; instead it just reads a special representation within a codebase to learn how to render the types in that domain."
                                        }
                                    ]
                                }
                            ],
                            "style": "bullet",
                            "indent": 0,
                            "border": 0
                        }
                    ]
                }
            ],
            "type": "message",
            "ts": "1660759262.517909",
            "edited": {
                "user": "UCUSW7WVD",
                "ts": "1660759437.000000"
            },
            "client_msg_id": "229d3048-7b33-4573-92e7-8551bf8f3006",
            "thread_ts": "1660759262.517909",
            "reply_count": 13,
            "reply_users_count": 3,
            "latest_reply": "1661125144.408239",
            "reply_users": [
                "UCUSW7WVD",
                "U02LHNW0VLP",
                "U013ZLJARC7"
            ],
            "replies": [
                {
                    "user": "UCUSW7WVD",
                    "ts": "1660888415.095139"
                },
                {
                    "user": "U02LHNW0VLP",
                    "ts": "1661031813.735419"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1661033002.092949"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1661057288.035179"
                },
                {
                    "user": "U02LHNW0VLP",
                    "ts": "1661057653.168169"
                },
                {
                    "user": "U02LHNW0VLP",
                    "ts": "1661057702.874489"
                },
                {
                    "user": "U02LHNW0VLP",
                    "ts": "1661057767.487009"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1661059115.344779"
                },
                {
                    "user": "U013ZLJARC7",
                    "ts": "1661085055.346119"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1661095643.287179"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1661096824.088489"
                },
                {
                    "user": "U02LHNW0VLP",
                    "ts": "1661110085.079019"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1661125144.408239"
                }
            ],
            "is_locked": false,
            "subscribed": false
        },
        "type": "message",
        "ts": "1661057288.035179",
        "client_msg_id": "de1bf6f2-8ec7-49b8-9f13-9ccc3e9a9807",
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "joy",
                "users": [
                    "UC2A2ARPT",
                    "U02U0AS3J49"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661057314.503209",
        "client_msg_id": "ff7707b0-ee3b-4f82-a7f7-df50b9fd17b7",
        "text": "Dagre doesn't promise this, but from looking at the paper the idea is that dagre mostly cares about setting the rank of the node (in a left to right graph, the rank would be which column the node is placed in). It sets the order (which column the node is in) based on trying to minimize edge crossings. But by default it would just order the nodes vertically in the order that you added them to the graph.\n\nI do think a complete solution is possible. I really just need to help dagre determine the vertical ordering since the horizontal ordering is determined by the dependencies. So I'm thinking of maintaining an ordering as a list, probably a doubly linked list, based on how nodes are added\/deleted. Then I'd use that graph just in the context of ordering sibling nodes vertically.\n\nFor example if we have a graph:\n```a -&gt; b1\na -&gt; b2\nc -&gt; d\ne -&gt; f```\nThen say we add a new node `b3` to the right of `a`. The main bit of information we would need is the ordering of [b1, b2, b3] so that the new `b3` node is placed at the bottom vertically of those children.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661032755.413189",
        "parent_user_id": "U02LHNW0VLP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SjZ9c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dagre doesn't promise this, but from looking at the paper the idea is that dagre mostly cares about setting the rank of the node (in a left to right graph, the rank would be which column the node is placed in). It sets the order (which column the node is in) based on trying to minimize edge crossings. But by default it would just order the nodes vertically in the order that you added them to the graph.\n\nI do think a complete solution is possible. I really just need to help dagre determine the vertical ordering since the horizontal ordering is determined by the dependencies. So I'm thinking of maintaining an ordering as a list, probably a doubly linked list, based on how nodes are added\/deleted. Then I'd use that graph just in the context of ordering sibling nodes vertically.\n\nFor example if we have a graph:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a -> b1\na -> b2\nc -> d\ne -> f"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Then say we add a new node "
                            },
                            {
                                "type": "text",
                                "text": "b3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to the right of "
                            },
                            {
                                "type": "text",
                                "text": "a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The main bit of information we would need is the ordering of [b1, b2, b3] so that the new "
                            },
                            {
                                "type": "text",
                                "text": "b3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " node is placed at the bottom vertically of those children."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661057434.123409",
        "client_msg_id": "52045284-e133-4ef9-831a-4f38b7b22aab",
        "text": "That's a pretty simple case. It gets more complex when you start deleting nodes in the middle of the graph and then have to decide how to stitch the graph together and also update that ordering. But I think overall since the only requirement is to properly maintain the order for nodes that are siblings, it should be doable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661032755.413189",
        "parent_user_id": "U02LHNW0VLP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C98",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's a pretty simple case. It gets more complex when you start deleting nodes in the middle of the graph and then have to decide how to stitch the graph together and also update that ordering. But I think overall since the only requirement is to properly maintain the order for nodes that are siblings, it should be doable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661057653.168169",
        "client_msg_id": "e958b104-1761-4fac-abf8-17084dd6bbaf",
        "text": "Super cool\nI'm guessing you didn't provide a message in your assert?? :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6cCkS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Super cool\nI'm guessing you didn't provide a message in your assert?? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661057702.874489",
        "client_msg_id": "8b3cf085-5fa1-4a22-8bfb-e4275075004a",
        "text": "I would guess that your environment would need to let the programmer determine how to visualize the logs",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mecS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would guess that your environment would need to let the programmer determine how to visualize the logs"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661057767.487009",
        "client_msg_id": "9b032819-792a-4198-b81f-3a81729f36da",
        "text": "I'd also be really curious to see aggregations, within runs of a program and also across runs of a program. With some nice data visualization to show things like \"here's the length of this array over time\", or \"here's the average number of keys in this object over time\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9WDM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd also be really curious to see aggregations, within runs of a program and also across runs of a program. With some nice data visualization to show things like \"here's the length of this array over time\", or \"here's the average number of keys in this object over time\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661059115.344779",
        "client_msg_id": "f840408f-f513-4aca-979f-61386838858c",
        "text": "Yeah, the editor lives in a different directory, but when I pass in a file from the current codebase it loads it in as part of its source code. Super unhygienic but gets the prototype done.\n\nI have some ideas in the direction you indicate, but only one day remaining :slightly_smiling_face: We'll see how it goes.\n\nWhoa, I keep forgetting I can pass in messages to Lua's `assert`! Thanks for the reminder. I shouldn't need to add debug prints to get more information on a failed assertion :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jLRok",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, the editor lives in a different directory, but when I pass in a file from the current codebase it loads it in as part of its source code. Super unhygienic but gets the prototype done.\n\nI have some ideas in the direction you indicate, but only one day remaining "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " We'll see how it goes.\n\nWhoa, I keep forgetting I can pass in messages to Lua's "
                            },
                            {
                                "type": "text",
                                "text": "assert",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "! Thanks for the reminder. I shouldn't need to add debug prints to get more information on a failed assertion "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]