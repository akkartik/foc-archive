[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1719836270.327749",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1719836291.000000"
        },
        "client_msg_id": "A75EAFD0-E6C5-4959-83C3-CF91C8A1A05D",
        "text": "If you're rendering boxes onto a canvas, and you have explicit depth (so painter's algo isn't a factor), draw order ought not matter.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719791347.513999",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aE0sL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you're rendering boxes onto a canvas, and you have explicit depth (so painter's algo isn't a factor), draw order ought not matter."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1719851096.727979",
        "edited": {
            "user": "U02QC0PPER3",
            "ts": "1719851743.000000"
        },
        "client_msg_id": "04fafaa8-e7e1-4ccd-8136-4fac2a70a785",
        "text": "I'm sure you've seen <https:\/\/worrydream.com\/LearnableProgramming\/> but it's really relevant — `rect(x, y, w, h)` is one of the particular examples it attacks\/dissects.\n\nWould you agree order of statements is essential complexity (for your pedagogical goals) whereas order of (x, y, w, h) is incidental complexity?\nOr do you lump both into same mental \"it matters\" bucket?\n\n• Using named arguments and\/or IDE hints\/visualizations (a-la Bret) would make argument order clearer.\n• Having defaults would allow you to start from `rect{}` and learn things you can tweak one-by-one e.g. `rect{x=40}` and so on...\n<https:\/\/code.world\/> is a well-documented functional (haskell) drawing environment; it's not that order doesn't matter — but that you explicitly say how to compose them.\n• This gives a more principled way to label x,y,w,h: Instead of passing x,y treat them as separate translation: <https:\/\/code.world\/#P06ggNifxerLPWXTe_4vgmQ>  \n• You can go further and eliminate even the `rectangle(w, h)` arguments by starting from a (1,1) square and translating\/scaling it: <https:\/\/code.world\/#P9QuT0QUN62BK0RmB1px5mw>\n• This still leaves x-before-y convention in many places.  It'd easy enough to define `translatedX(pic, dx)` etc. helpers to effectively name args one by one — by I think that's going too far, (x,y) tuples are important mental construct.\n• Order of `r1 & r2` does matter if they overlap, try swapping here: <https:\/\/code.world\/#POHjNuz9Uu64FI9TAgTxhPg>\n(cf. Bret's section on \"Recomposition\"; CodeWorld is good at that :+1:)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719791347.513999",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ipz6e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm sure you've seen "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/worrydream.com\/LearnableProgramming\/"
                            },
                            {
                                "type": "text",
                                "text": " but it's really relevant — "
                            },
                            {
                                "type": "text",
                                "text": "rect(x, y, w, h)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is one of the particular examples it attacks\/dissects.\n\nWould you agree order of statements is essential complexity (for your pedagogical goals) whereas order of (x, y, w, h) is incidental complexity?\nOr do you lump both into same mental \"it matters\" bucket?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Using named arguments and\/or IDE hints\/visualizations (a-la Bret) would make argument order clearer."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Having defaults would allow you to start from "
                                    },
                                    {
                                        "type": "text",
                                        "text": "rect{}",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " and learn things you can tweak one-by-one e.g. "
                                    },
                                    {
                                        "type": "text",
                                        "text": "rect{x=40}",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " and so on..."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/code.world\/"
                            },
                            {
                                "type": "text",
                                "text": " is a well-documented functional (haskell) drawing environment; it's not that order doesn't matter — but that you explicitly say how to compose them.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This gives a more principled way to label x,y,w,h: Instead of passing x,y treat them as separate translation: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/code.world\/#P06ggNifxerLPWXTe_4vgmQ"
                                    },
                                    {
                                        "type": "text",
                                        "text": "  "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "You can go further and eliminate even the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "rectangle(w, h)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " arguments by starting from a (1,1) square and translating\/scaling it: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/code.world\/#P9QuT0QUN62BK0RmB1px5mw"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This still leaves x-before-y convention in many places.  It'd easy enough to define "
                                    },
                                    {
                                        "type": "text",
                                        "text": "translatedX(pic, dx)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " etc. helpers to effectively name args one by one — by I think that's going too far, (x,y) tuples are important mental construct."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Order of "
                                    },
                                    {
                                        "type": "text",
                                        "text": "r1 & r2",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " does matter if they overlap, try swapping here: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/code.world\/#POHjNuz9Uu64FI9TAgTxhPg"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n(cf. Bret's section on \"Recomposition\"; CodeWorld is good at that "
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Elm's picture env has similar qualities: <https:\/\/elm-lang.org\/examples\/picture>\nand avoids the need to track which argument goes to what nested function by using `|&gt;` pipeline operator:\n```rectangle brown 40 200\n        |&gt; moveDown 80```\nIn CodeWorld's case, that gets painful enough that the guide has to teach how to read nesting early on (plus editor coloring paren levels): <https:\/\/code.world\/doc.html?shelf=help\/codeworld.shelf#expressionstructure\/nestingexpressions>\n<@UC2A2ARPT> will be amused they draw block diagrams, as something the student should _imagine_, while editor remains textual:  (\"the :cake: is a lie\"?)",
        "files": [
            {
                "id": "F07AMEYD2CC",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U02QC0PPER3",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2uUkr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Elm's picture env has similar qualities: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/elm-lang.org\/examples\/picture"
                            },
                            {
                                "type": "text",
                                "text": "\nand avoids the need to track which argument goes to what nested function by using "
                            },
                            {
                                "type": "text",
                                "text": "|>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " pipeline operator:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "rectangle brown 40 200\n        |> moveDown 80"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn CodeWorld's case, that gets painful enough that the guide has to teach how to read nesting early on (plus editor coloring paren levels): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/code.world\/doc.html?shelf=help\/codeworld.shelf#expressionstructure\/nestingexpressions"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " will be amused they draw block diagrams, as something the student should "
                            },
                            {
                                "type": "text",
                                "text": "imagine",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", while editor remains textual:  (\"the "
                            },
                            {
                                "type": "emoji",
                                "name": "cake",
                                "unicode": "1f370"
                            },
                            {
                                "type": "text",
                                "text": " is a lie\"?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1719852243.019319",
        "client_msg_id": "a320a89d-9313-4363-ae14-c421d451dffb",
        "thread_ts": "1719791347.513999",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1719852417.760139",
        "client_msg_id": "17a03637-ce7d-445d-a67f-000386bf0050",
        "text": "I'm sure Haskell _can_ do better with fancier operators.  Even other choice of arg order could help — this is bad:\n`colored(translated(scaled(square, 12, 2), 4, 3), red)`\nbut if they did this, one could read each transformation and its params together:\n`colored(red, translated(4, 3, scaled(12, 2, square)))`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719791347.513999",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tnukF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm sure Haskell "
                            },
                            {
                                "type": "text",
                                "text": "can",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " do better with fancier operators.  Even other choice of arg order could help — this is bad:\n"
                            },
                            {
                                "type": "text",
                                "text": "colored(translated(scaled(square, 12, 2), 4, 3), red)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nbut if they did this, one could read each transformation and its params together:\n"
                            },
                            {
                                "type": "text",
                                "text": "colored(red, translated(4, 3, scaled(12, 2, square)))",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1719852757.236349",
        "client_msg_id": "3026865e-bbf5-4e3b-a95b-5a8bc6477721",
        "text": "Ooh try the CodeWord [Inspect] button :cake:\nYou may need to drag the divider to the right so picture gets smaller and you can see the inspect tree below it.  It shows all the intermediate parts and how they were combined to build the picture.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719791347.513999",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E+B9x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ooh try the CodeWord [Inspect] button "
                            },
                            {
                                "type": "emoji",
                                "name": "cake",
                                "unicode": "1f370"
                            },
                            {
                                "type": "text",
                                "text": "\nYou may need to drag the divider to the right so picture gets smaller and you can see the inspect tree below it.  It shows all the intermediate parts and how they were combined to build the picture."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1719852849.511969",
        "client_msg_id": "cd7e4893-5072-46f9-8e8e-2a3183a4caf8",
        "text": "This is great! Thank you for writing out those examples for me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719791347.513999",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P+DSg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is great! Thank you for writing out those examples for me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1719858528.607509",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1719858684.000000"
        },
        "client_msg_id": "ba63f595-9126-44e8-9be2-4fe56c2b59cd",
        "text": "> Would you agree order of statements is essential complexity (for your pedagogical goals) whereas order of (x, y, w, h) is incidental complexity?\n> Or do you lump both into same mental \"it matters\" bucket?\nI try to avoid those terms :grimacing: \"Complexity\" is complex and intangible. I try to stay as concrete as possible.\n\nHere the only reason I'm trying to avoid order between arguments is I know the 6yo kids have trouble with it. The four numbers look like similar things but mean different things. They do some experimenting to figure out the first number means \"how far right it is\", then start working on experiments for the second, and by the time they're done they've forgotten what the first number means. So it seems like a problem worth solving.\n\nThe order of statements so far hasn't seemed like a problem to solve. They already understand from reading that things go from top to bottom, it doesn't even come up. And the order is a lot more reasonable when the things being ordered have the same meaning. Draw this, then draw this. Easy.\n\nAt least so far :smile: We've only done sequences of 2 statements so far. What complicates ordering is conditionals and loops, and FP does have value when we get there.\n\nYou probably know that my bias with computers is to emphasize reliability above all else. The goal is to be able to have agency with the computer to the extent that you forget about the tool and focus on what you're doing. Here the kids got to experience that the math they're learning (addition, inequalities) is useful in a very different context.\n\nI think trying out lots of notations and tools and then running into limitations like, \"you can't use this there, you can't do that here\" moves us away from that ideal of a computer that disappears from view. This is kinda why I have them using <https:\/\/akkartik.itch.io\/carousel> (and not at all because I made it :joy:) -- it's available on all their devices, and I know it's as close to a minimal stack as I can think of that is available on all their devices. I know what problems it can run into in the middle of a lesson, and I know what to do to get us back on track. I think that's worth a lot. More than Bret Victor's ideals. They are still important, which is why I appreciate the nudge to reread them and to find out about CodeWorld. But only if they build on that reliability and ubiquity, IMO. We programmers have a tendency to circle obsessively around notations and tools. There's some value in trying to push back on that tendency and just build stuff (that is not notations and tools).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719791347.513999",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "amIA1",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would you agree order of statements is essential complexity (for your pedagogical goals) whereas order of (x, y, w, h) is incidental complexity?\nOr do you lump both into same mental \"it matters\" bucket?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI try to avoid those terms "
                            },
                            {
                                "type": "emoji",
                                "name": "grimacing",
                                "unicode": "1f62c"
                            },
                            {
                                "type": "text",
                                "text": " \"Complexity\" is complex and intangible. I try to stay as concrete as possible.\n\nHere the only reason I'm trying to avoid order between arguments is I know the 6yo kids have trouble with it. The four numbers look like similar things but mean different things. They do some experimenting to figure out the first number means \"how far right it is\", then start working on experiments for the second, and by the time they're done they've forgotten what the first number means. So it seems like a problem worth solving.\n\nThe order of statements so far hasn't seemed like a problem to solve. They already understand from reading that things go from top to bottom, it doesn't even come up. And the order is a lot more reasonable when the things being ordered have the same meaning. Draw this, then draw this. Easy.\n\nAt least so far "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " We've only done sequences of 2 statements so far. What complicates ordering is conditionals and loops, and FP does have value when we get there.\n\nYou probably know that my bias with computers is to emphasize reliability above all else. The goal is to be able to have agency with the computer to the extent that you forget about the tool and focus on what you're doing. Here the kids got to experience that the math they're learning (addition, inequalities) is useful in a very different context.\n\nI think trying out lots of notations and tools and then running into limitations like, \"you can't use this there, you can't do that here\" moves us away from that ideal of a computer that disappears from view. This is kinda why I have them using "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/akkartik.itch.io\/carousel"
                            },
                            {
                                "type": "text",
                                "text": " (and not at all because I made it "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": ") -- it's available on all their devices, and I know it's as close to a minimal stack as I can think of that is available on all their devices. I know what problems it can run into in the middle of a lesson, and I know what to do to get us back on track. I think that's worth a lot. More than Bret Victor's ideals. They are still important, which is why I appreciate the nudge to reread them and to find out about CodeWorld. But only if they build on that reliability and ubiquity, IMO. We programmers have a tendency to circle obsessively around notations and tools. There's some value in trying to push back on that tendency and just build stuff (that is not notations and tools)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1719858919.258109",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1719858977.000000"
        },
        "client_msg_id": "24459d41-784d-41ba-87f8-3a3cfb371fc4",
        "text": "Yes, there's definite value in a UI that lets them scrub around the numbers inside each call. But I don't have that UI right now, and my attempts to create it will also spawn bugs. Good software takes 10 years to create, but in 10 years my kids will be 16. So situated software has to respect certain limitations of time and energy, I think.\n\nI definitely do still appreciate recommendations of new tools. I can play with them and decide whether to include them. And even if I don't I might obsessively circle them at night while the kids are asleep :joy:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719791347.513999",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b0PfO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, there's definite value in a UI that lets them scrub around the numbers inside each call. But I don't have that UI right now, and my attempts to create it will also spawn bugs. Good software takes 10 years to create, but in 10 years my kids will be 16. So situated software has to respect certain limitations of time and energy, I think.\n\nI definitely do still appreciate recommendations of new tools. I can play with them and decide whether to include them. And even if I don't I might obsessively circle them at night while the kids are asleep "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1719861384.278539",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1719861484.000000"
        },
        "client_msg_id": "37BE3097-D9CC-4D4F-AC45-D71A5681B1D1",
        "text": "Even though it's off the main thread, I've been nerd sniped and need to reply to this thing <@U02QC0PPER3> said:\n\n> Order of r1 & r2 does matter if they overlap, try swapping here: <https:\/\/code.world\/#POHjNuz9Uu64FI9TAgTxhPg|https:\/\/code.world\/#POHjNuz9Uu64FI9TAgTxhPg>\n> \n\nWhich I believe is a reply to me saying: \n\n> If you're rendering boxes onto a canvas, and you have explicit depth (so painter's algo isn't a factor), draw order ought not matter.\n> \n\nThe effect being demonstrated is what I meant by <https:\/\/en.m.wikipedia.org\/wiki\/Painter's_algorithm|painter's algo> — things drawn later appear in front of things drawn earlier. (Yes, I was misusing the term slightly, apologies.) My point is that this isn't inherent to 2D graphics, and if you make depth explicit then what you're left with is a situation where statement order doesn't matter — drawing operations commute. Which is important because <@UJBAJNFLK> earlier in the thread said \"order always matters\", which I disagree with.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719791347.513999",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a9aT9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Even though it's off the main thread, I've been nerd sniped and need to reply to this thing "
                            },
                            {
                                "type": "user",
                                "user_id": "U02QC0PPER3"
                            },
                            {
                                "type": "text",
                                "text": " said:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Order of r1 & r2 does matter if they overlap, try swapping here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/code.world\/#POHjNuz9Uu64FI9TAgTxhPg",
                                "text": "https:\/\/code.world\/#POHjNuz9Uu64FI9TAgTxhPg"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nWhich I believe is a reply to me saying: \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you're rendering boxes onto a canvas, and you have explicit depth (so painter's algo isn't a factor), draw order ought not matter.\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe effect being demonstrated is what I meant by "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Painter's_algorithm",
                                "text": "painter's algo"
                            },
                            {
                                "type": "text",
                                "text": " — things drawn later appear in front of things drawn earlier. (Yes, I was misusing the term slightly, apologies.) My point is that this isn't inherent to 2D graphics, and if you make depth explicit then what you're left with is a situation where statement order doesn't matter — drawing operations commute. Which is important because "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " earlier in the thread said \"order always matters\", which I disagree with."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1719876061.824169",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1719880207.000000"
        },
        "client_msg_id": "ba0e977b-cff2-4ac1-9cd2-6adcb7ad544e",
        "text": "Shower thought on yesterday's thread above: the painter's algorithm is a way to make an interface less stateful. It lets you specify shapes to draw in any order. However:\n\n• It does this by adding _more_ state to the implementation. You can't just draw each shape as you encounter it in the code. You have to shove them all into an array, sort by z value, and then draw them all.\n• It does this by adding more state to the communication channel. The human has to provide a z value now for each shape. Sometimes this is naturally obtained, sometimes it is not and the human now has to think in their heads about what z value to give their shapes to make the drawing come out as they want.\nThinking about this, it feels like state is to some extent inevitable. There's some conservation of state going on. You can't really eliminate it. You squeeze it down in one area and like a balloon it pops up somewhere else.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719876061.824169",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1719989980.390449",
        "reply_users": [
            "U03CEGR3HSL",
            "U02QC0PPER3",
            "UC2A2ARPT",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "U03CEGR3HSL",
                "ts": "1719876198.719189"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1719901794.232609"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1719901890.755729"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1719935403.888229"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1719989980.390449"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GCZlp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Shower thought on yesterday's thread above: the painter's algorithm is a way to make an interface less stateful. It lets you specify shapes to draw in any order. However:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "It does this by adding "
                                    },
                                    {
                                        "type": "text",
                                        "text": "more",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " state to the implementation. You can't just draw each shape as you encounter it in the code. You have to shove them all into an array, sort by z value, and then draw them all."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "It does this by adding more state to the communication channel. The human has to provide a z value now for each shape. Sometimes this is naturally obtained, sometimes it is not and the human now has to think in their heads about what z value to give their shapes to make the drawing come out as they want."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThinking about this, it feels like state is to some extent inevitable. There's some conservation of state going on. You can't really eliminate it. You squeeze it down in one area and like a balloon it pops up somewhere else."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1719876198.719189",
        "client_msg_id": "2bb27011-d882-4477-aa86-c7c57d42d070",
        "text": "<https:\/\/wiki.c2.com\/?ComplexityHasToGoSomewhere|https:\/\/wiki.c2.com\/?ComplexityHasToGoSomewhere>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719876061.824169",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lX65f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.c2.com\/?ComplexityHasToGoSomewhere",
                                "text": "https:\/\/wiki.c2.com\/?ComplexityHasToGoSomewhere"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1719900082.142009",
        "client_msg_id": "f89a904e-dffe-4afc-b463-2e70e052de33",
        "text": "<@UJBAJNFLK> My comment was about general Turing-complete notations, in particular FP. For a specific problem domain, order may or may not matter: <https:\/\/en.wikipedia.org\/wiki\/Commutative_property>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719791347.513999",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6XvzG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " My comment was about general Turing-complete notations, in particular FP. For a specific problem domain, order may or may not matter: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Commutative_property"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1719901794.232609",
        "client_msg_id": "514ccab5-f5f4-4d4f-90ad-87c7fadb86af",
        "text": "\"you have to shove them all into an array\" — Well, painter's algo is just one solution; a z-buffer remembering the depth of previously painted pixels _can_ truely allow drawing in any order, as you encouter them in the code.  And by deciding per-pixel it avoids issues like <https:\/\/en.wikipedia.org\/wiki\/Painter%27s_algorithm#Cyclical_overlapping|occlusion cycles>.\nSure that doesn't \"eliminate state\", I added a whole-frame buffer!  But conceptually I think of it as a much smaller departure than \"record, sort, replay\".\n\nPedagogically I wouldn't get into either of this until the student (1) understands occlusion and paint order (2) feels that re-ordering code themselves (painter's algo being run in programmer's head not computer) got frustrating...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719876061.824169",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fM+4V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"you have to shove them all into an array\" — Well, painter's algo is just one solution; a z-buffer remembering the depth of previously painted pixels "
                            },
                            {
                                "type": "text",
                                "text": "can",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " truely allow drawing in any order, as you encouter them in the code.  And by deciding per-pixel it avoids issues like "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Painter%27s_algorithm#Cyclical_overlapping",
                                "text": "occlusion cycles"
                            },
                            {
                                "type": "text",
                                "text": ".\nSure that doesn't \"eliminate state\", I added a whole-frame buffer!  But conceptually I think of it as a much smaller departure than \"record, sort, replay\".\n\nPedagogically I wouldn't get into either of this until the student (1) understands occlusion and paint order (2) feels that re-ordering code themselves (painter's algo being run in programmer's head not computer) got frustrating..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1719901890.755729",
        "client_msg_id": "e327b1ac-f887-44cf-9f37-2a6f05f65e2d",
        "text": "Also good old wireframe drawing can postpone worrying about occlusion for a while.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719876061.824169",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m6XjU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also good old wireframe drawing can postpone worrying about occlusion for a while."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]