[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1756124031.673639",
        "client_msg_id": "cedc1991-e368-401c-8dba-96f322230476",
        "text": "First of all: nice article! Good observations, well written.\n\nNext: Lisp. It has been used by both formalists and informalists. Today, its informalist side is probably more visible. It's much like you describe Smalltalk. But serious formalist work has been done in Lisp as well. <https:\/\/en.wikipedia.org\/wiki\/ACL2|ACL2> is a good example. And you can see Scheme, compared to the Lisps of the 1960s, as a step towards formalist preferences.\n\nSomething that Lispers got right, in my opinion, is that informalist is the right default. Formal systems are always embedded in informal ones, whereas the opposite is not possible. You can embed ACL2 in Common Lisp and make formal subsystems that interact with its Lisp environment. You can implement but not embed an informalist system such as Smalltalk in a formalist language such as Haskell.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KZe4p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "First of all: nice article! Good observations, well written.\n\nNext: Lisp. It has been used by both formalists and informalists. Today, its informalist side is probably more visible. It's much like you describe Smalltalk. But serious formalist work has been done in Lisp as well. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/ACL2",
                                "text": "ACL2"
                            },
                            {
                                "type": "text",
                                "text": " is a good example. And you can see Scheme, compared to the Lisps of the 1960s, as a step towards formalist preferences.\n\nSomething that Lispers got right, in my opinion, is that informalist is the right default. Formal systems are always embedded in informal ones, whereas the opposite is not possible. You can embed ACL2 in Common Lisp and make formal subsystems that interact with its Lisp environment. You can implement but not embed an informalist system such as Smalltalk in a formalist language such as Haskell."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U05GSC0B4A0"
                ],
                "count": 1
            },
            {
                "name": "boom",
                "users": [
                    "U06BZTE8Q3B"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1756124152.327629",
        "client_msg_id": "3fb3e7b0-601e-4603-a04f-d53346b55458",
        "text": "BTW, my <https:\/\/dl.acm.org\/doi\/10.1145\/3689492.3689808|Onwards! 2025> paper is about the same two complementary attitudes towards software systems, which I label as yin (informalist) and yang (formalist).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EO5u7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "BTW, my "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/10.1145\/3689492.3689808",
                                "text": "Onwards! 2025"
                            },
                            {
                                "type": "text",
                                "text": " paper is about the same two complementary attitudes towards software systems, which I label as yin (informalist) and yang (formalist)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "U05GSC0B4A0"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1756125161.097609",
        "client_msg_id": "b724f6e0-61c8-455d-9665-80101bdbe36b",
        "text": "A more recent formalist language embedded into Lisp is <https:\/\/coalton-lang.github.io\/|Coalton>, an ML-style statically typed language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "attachments": [
            {
                "from_url": "https:\/\/coalton-lang.github.io\/",
                "service_icon": "https:\/\/coalton-lang.github.io\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/coalton-lang.github.io\/",
                "fallback": "The Coalton Programming Language",
                "text": "Coalton is an efficient, statically typed functional programming language that supercharges Common Lisp.\nNew! Robert Smith's talk at ELS 2025.",
                "title": "The Coalton Programming Language",
                "title_link": "https:\/\/coalton-lang.github.io\/",
                "service_name": "coalton-lang.github.io"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wgp9I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A more recent formalist language embedded into Lisp is "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/coalton-lang.github.io\/",
                                "text": "Coalton"
                            },
                            {
                                "type": "text",
                                "text": ", an ML-style statically typed language."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]