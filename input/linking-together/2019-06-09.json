[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1560082265.034700",
        "client_msg_id": "5431CD0F-AA22-4572-A813-911B574DD5D5",
        "text": "I don’t know anything about Flutter, but some things about SwiftUI and Xcode Previews (which works with SwiftUI code, but also “classic” UIKit, AppKit, WatchKit UIs in Swift or Objective-C).\n\nThe tooling for previews uses live code injection and rebuilds only the current view while editing. Smaller edits like changing constant strings don’t require a rebuild and are changed directly. Performance looks good, great even, if you’re familiar with the previous Simulator build-run cycle. For developers on the platform, it's a *huge* productivity leap.\n\nXcode Previews supports a “Live” mode feature, which switches into full simulation and provides full interactivity, including high-performance graphics rendering and animation.\n\nHaven’t played much with it yet, but judging from the material I watched\/read and the early feedback from the developer community, this is a huge step forward for the platform that was lagging behind in its live coding capabilities. It feels like they closed the gap in developer experience to React Native, possibly even more than just that.\n\nThere are tons of sessions about it, this one seems to have the most information about Xcode Previews: <https:\/\/developer.apple.com\/wwdc19\/233>\n\nSwiftUI also seems to be quite thoroughly designed and supports a lot more customization than I was anticipating. Need to spend more time with it, but I have a feeling it was dramatically undersold in the keynote and SOTU. We will likely look back to this year's WWDC as one of the most significant ones. Certainly since the introduction of Swift, possibly even more important than that.\n\nSwiftUI is also significant because it shows Apple's idea of framework and API design when you finally take advantage of all the power designed into the language. So far, they couldn’t really do that because almost all frameworks were still Objective-C based. Clearly, a more declarative approach combined (hehe) with some reactive programming is the direction they’re headed. I’m still trying to wrap my head around property wrappers, a new language feature in Swift 5.1, which seems inspired by pure functional programming (looks very monad-ish) but done in a clever way that gets rid of all the functional or math-y ceremony around it. I’ve said it before and will say it again: Swift is bringing all the functional ideas to imperative programmers without them even noticing.\nHere's more about that: <https:\/\/developer.apple.com\/wwdc19\/415>\n\nDisclaimer: I used to be an Evangelist for Developer Tools at Apple so I'm clearly biased. On the other hand if you’re interested you can ask me anything about it and I’ll be happy to tell you more about it. :-)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559593978.011600",
        "parent_user_id": "UE0ETTCG7",
        "attachments": [
            {
                "service_name": "Apple Developer",
                "title": "Mastering Xcode Previews - WWDC 2019 - Videos - Apple Developer",
                "title_link": "https:\/\/developer.apple.com\/wwdc19\/233",
                "text": "Xcode 11 displays previews of your user interface right in the editor, streamlining the edit-debug-run cycle into a seamless workflow...",
                "fallback": "Apple Developer: Mastering Xcode Previews - WWDC 2019 - Videos - Apple Developer",
                "image_url": "https:\/\/devimages-cdn.apple.com\/wwdc-services\/images\/48\/2674\/2674_wide_250x141_2x.jpg",
                "from_url": "https:\/\/developer.apple.com\/wwdc19\/233",
                "image_width": 443,
                "image_height": 250,
                "image_bytes": 19716,
                "service_icon": "https:\/\/developer.apple.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/developer.apple.com\/wwdc19\/233"
            },
            {
                "service_name": "Apple Developer",
                "title": "Modern Swift API Design - WWDC 2019 - Videos - Apple Developer",
                "title_link": "https:\/\/developer.apple.com\/wwdc19\/415",
                "text": "Every programming language has a set of conventions that people come to expect. Learn about the patterns that are common to Swift API...",
                "fallback": "Apple Developer: Modern Swift API Design - WWDC 2019 - Videos - Apple Developer",
                "image_url": "https:\/\/devimages-cdn.apple.com\/wwdc-services\/images\/48\/2769\/2769_wide_250x141_2x.jpg",
                "from_url": "https:\/\/developer.apple.com\/wwdc19\/415",
                "image_width": 443,
                "image_height": 250,
                "image_bytes": 19911,
                "service_icon": "https:\/\/developer.apple.com\/favicon.ico",
                "id": 2,
                "original_url": "https:\/\/developer.apple.com\/wwdc19\/415"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xMpxU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don’t know anything about Flutter, but some things about SwiftUI and Xcode Previews (which works with SwiftUI code, but also “classic” UIKit, AppKit, WatchKit UIs in Swift or Objective-C).\n\nThe tooling for previews uses live code injection and rebuilds only the current view while editing. Smaller edits like changing constant strings don’t require a rebuild and are changed directly. Performance looks good, great even, if you’re familiar with the previous Simulator build-run cycle. For developers on the platform, it's a "
                            },
                            {
                                "type": "text",
                                "text": "huge",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " productivity leap.\n\nXcode Previews supports a “Live” mode feature, which switches into full simulation and provides full interactivity, including high-performance graphics rendering and animation.\n\nHaven’t played much with it yet, but judging from the material I watched\/read and the early feedback from the developer community, this is a huge step forward for the platform that was lagging behind in its live coding capabilities. It feels like they closed the gap in developer experience to React Native, possibly even more than just that.\n\nThere are tons of sessions about it, this one seems to have the most information about Xcode Previews: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.apple.com\/wwdc19\/233"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSwiftUI also seems to be quite thoroughly designed and supports a lot more customization than I was anticipating. Need to spend more time with it, but I have a feeling it was dramatically undersold in the keynote and SOTU. We will likely look back to this year's WWDC as one of the most significant ones. Certainly since the introduction of Swift, possibly even more important than that.\n\nSwiftUI is also significant because it shows Apple's idea of framework and API design when you finally take advantage of all the power designed into the language. So far, they couldn’t really do that because almost all frameworks were still Objective-C based. Clearly, a more declarative approach combined (hehe) with some reactive programming is the direction they’re headed. I’m still trying to wrap my head around property wrappers, a new language feature in Swift 5.1, which seems inspired by pure functional programming (looks very monad-ish) but done in a clever way that gets rid of all the functional or math-y ceremony around it. I’ve said it before and will say it again: Swift is bringing all the functional ideas to imperative programmers without them even noticing.\nHere's more about that: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.apple.com\/wwdc19\/415"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDisclaimer: I used to be an Evangelist for Developer Tools at Apple so I'm clearly biased. On the other hand if you’re interested you can ask me anything about it and I’ll be happy to tell you more about it. :-)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]