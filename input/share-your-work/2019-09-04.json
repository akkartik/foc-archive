[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1567599746.039600",
        "client_msg_id": "224d0477-dd82-4441-bbf6-8fbe4a444887",
        "text": "The first step to short code is working with the grain rather than against.  The second step is choosing the grain so as to work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567533862.019200",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "If4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The first step to short code is working with the grain rather than against.  The second step is choosing the grain so as to work."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1567599780.039900",
        "client_msg_id": "5bbc46b9-d21c-4645-a2d7-774c7771f4f6",
        "text": "More Nile links: <https:\/\/news.ycombinator.com\/item?id=19844088>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567533862.019200",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wnl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More Nile links: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=19844088"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UJFN50C00"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1567626062.041000",
        "client_msg_id": "2ec9219a-88d2-49b6-91c1-753066e2bc64",
        "text": "My preferred representation for a rectangle is none of those— I find it cleaner to work like: `struct Rect { vec lo, vec hi }`, where `lo` and `hi` respectively hold the smallest and largest coordinates along each axis. Then the logic for a rect collapses to range arithmetic (i.e. unions, intersections, translations, etc. are natural using max\/min, including with empty rectangles).\n\nThis also admits \"signed\" rectangles which may contain their interior or exterior, if that makes sense for your application (otherwise, lo &gt; hi can be considered \"empty\").\n\nI have also found it advisable that the range be inclusive (i.e. both endpoints are considered part of the rectangle) to avoid special cases and \"preferred coordinate frames\" where some edges of the rectangle are \"special\". This is somewhat contrary to typical range conventions in programming, but I've found from experience that it saves headache.\n\nThat presentation also generalizes to higher dimensions nicely.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566778546.197000",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hLs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My preferred representation for a rectangle is none of those— I find it cleaner to work like: "
                            },
                            {
                                "type": "text",
                                "text": "struct Rect { vec lo, vec hi }",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", where "
                            },
                            {
                                "type": "text",
                                "text": "lo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "hi",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " respectively hold the smallest and largest coordinates along each axis. Then the logic for a rect collapses to range arithmetic (i.e. unions, intersections, translations, etc. are natural using max\/min, including with empty rectangles).\n\nThis also admits \"signed\" rectangles which may contain their interior or exterior, if that makes sense for your application (otherwise, lo > hi can be considered \"empty\").\n\nI have also found it advisable that the range be inclusive (i.e. both endpoints are considered part of the rectangle) to avoid special cases and \"preferred coordinate frames\" where some edges of the rectangle are \"special\". This is somewhat contrary to typical range conventions in programming, but I've found from experience that it saves headache.\n\nThat presentation also generalizes to higher dimensions nicely."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1567626191.041200",
        "client_msg_id": "f705a189-4585-487a-a777-a6fd85e00e00",
        "text": "if the center of the rectangle is of interest in your app (it probably will be), then it makes sense to expose a convenience function to compute or set it on demand (at basically negligible expense)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566778546.197000",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wimf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if the center of the rectangle is of interest in your app (it probably will be), then it makes sense to expose a convenience function to compute or set it on demand (at basically negligible expense)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1567639394.041400",
        "client_msg_id": "1340a10d-7525-4ebb-94aa-1554c55c5ddf",
        "text": "But how do you store the Graph? JSON?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567008730.001000",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZdSp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But how do you store the Graph? JSON?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1567641291.053100",
        "client_msg_id": "52d3097b-04b5-4188-922b-928f4584a1cc",
        "text": "Boy is Kartik right about that! When I suggested the other day in a Reddit forum that one could measure, approximately, the error propensity of a language, and the mean time to repair by someone other than the author i was practically tarred and feathered. Programmers may be mostly unique like snowflakes, but if you put a bunch of programmers on the same exact task, and give them different tools, their productivity will be wildly different. I once worked a huge project for IBM. They needed a sequel to their very popular DisplayWrite 4 word processor because WordPerfect will killing them, and in previous decades under Thomas J Watson Jr, there was a practice in IBM that any important project was done by 3 different labs, and the winner with the first\/best product, depending on what they were after, would get promotions and staff expansions, and the losing lab would be shuffled a bit like a losing soccer team. A very radical approach that kept internal competition at a high pitch, even when IBM was in its day a giant monopoly. Because IBM is only a mere shadow of its former greatness people don't understand how radical a structure IBM followed, with its technical ladder paying as well as the sales ladder. Who else does this in modern times? Anyway the three teams used different languages and different approaches, and my firm used Modula-2 while the others used C, and we kicked their butts, because Modula-2 is a far superior language to C, particularly as the code grows to large size. More companies should try the multiple team approach. Nothing stimulates human performance like a fair competition, where the stakes are high, but the playing field is level. And to bring it back to Kartik's point, the Academics don't have much at stake in their projects,  and often don't care if anyone uses any of their stuff. These category theorists really drive me over the bend. Please show me how functors make my tictactoe game easier to write and easier to understand...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xkQO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Boy is Kartik right about that! When I suggested the other day in a Reddit forum that one could measure, approximately, the error propensity of a language, and the mean time to repair by someone other than the author i was practically tarred and feathered. Programmers may be mostly unique like snowflakes, but if you put a bunch of programmers on the same exact task, and give them different tools, their productivity will be wildly different. I once worked a huge project for IBM. They needed a sequel to their very popular DisplayWrite 4 word processor because WordPerfect will killing them, and in previous decades under Thomas J Watson Jr, there was a practice in IBM that any important project was done by 3 different labs, and the winner with the first\/best product, depending on what they were after, would get promotions and staff expansions, and the losing lab would be shuffled a bit like a losing soccer team. A very radical approach that kept internal competition at a high pitch, even when IBM was in its day a giant monopoly. Because IBM is only a mere shadow of its former greatness people don't understand how radical a structure IBM followed, with its technical ladder paying as well as the sales ladder. Who else does this in modern times? Anyway the three teams used different languages and different approaches, and my firm used Modula-2 while the others used C, and we kicked their butts, because Modula-2 is a far superior language to C, particularly as the code grows to large size. More companies should try the multiple team approach. Nothing stimulates human performance like a fair competition, where the stakes are high, but the playing field is level. And to bring it back to Kartik's point, the Academics don't have much at stake in their projects,  and often don't care if anyone uses any of their stuff. These category theorists really drive me over the bend. Please show me how functors make my tictactoe game easier to write and easier to understand..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UMVFWPZ36",
                    "UKP3B2J5D"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1567643202.056100",
        "client_msg_id": "5c65506d-cdc4-450a-b29f-f01e8bf5da94",
        "text": "&gt; if you make a working system\nIn defense of academics, making a practically usable system requires engineering resources that are rarely available.\n&gt; Please show me how functors make my tictactoe game easier to write and easier to understand\nNobody knows yet. The heuristic is that mathematic elegance may one day have practical consequence. Expecting practical utility on day one would close down a lot of research avenues that might be fruitful.\n\nIt’s all just the practical industry vs. theoretical academic debate. There’s strengths (and weaknesses) to both approaches.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567643202.056100",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1568072379.087300",
        "reply_users": [
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1568072379.087300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RCg",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if you make a working system"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In defense of academics, making a practically usable system requires engineering resources that are rarely available."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Please show me how functors make my tictactoe game easier to write and easier to understand"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nobody knows yet. The heuristic is that mathematic elegance may one day have practical consequence. Expecting practical utility on day one would close down a lot of research avenues that might be fruitful.\n\nIt’s all just the practical industry vs. theoretical academic debate. There’s strengths (and weaknesses) to both approaches."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U85HCL7JP"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1567645905.057700",
        "client_msg_id": "1D8866D6-F597-4ECC-8AFF-C536BCA231E8",
        "text": "Functors, meh. No, bro, I don't even lift.\n\nNow monoids — there's a useful construct.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J\/dCQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Functors, meh. No, bro, I don't even lift.\n\nNow monoids — there's a useful construct."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UA14TGLTC",
                    "UF2GNRUTV"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ"
                ],
                "count": 1
            }
        ]
    }
]