[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1544261823.037100",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1544294581.000000"
        },
        "client_msg_id": "42311ef0-8835-448e-99d7-0f773edd9668",
        "text": "I spent a while today thinking about how I've been debugging my low-level assembly programs, and writing up a little mini-howto: <https:\/\/github.com\/akkartik\/mu\/blob\/master\/subx\/Readme.md#a-few-hints-for-debugging>. Comments and feedback appreciated.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544261823.037100",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1550556353.025800",
        "reply_users": [
            "UD6EXQVM0",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UD6EXQVM0",
                "ts": "1550448457.016600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1550556353.025800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k3B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I spent a while today thinking about how I've been debugging my low-level assembly programs, and writing up a little mini-howto: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu\/blob\/master\/subx\/Readme.md#a-few-hints-for-debugging"
                            },
                            {
                                "type": "text",
                                "text": ". Comments and feedback appreciated."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEH6T3RJB",
        "type": "message",
        "ts": "1544270148.037200",
        "client_msg_id": "1bf2cec4-da0a-409b-8e26-f0a5d7d32189",
        "text": "<@UEKEQGB9C> Yeah, bringing in JCL and orchestration languages is a great reference point for the discussion. +1 for Prolog-like languages based on rules rather than imperative scripts - and in fact you'll notice that this is an important part of Kell's roadmap for an integration domain expressed in sections 4.2 and 4.3 of his paper. An  integration domain is about \"relations, not scripts\".\nWhilst I share your scepticism that we can collapse this layer down into our programming language, I feel that we can't refuse to make the attempt, otherwise our discipline is a failure. Our mission is to \"put the complete resources of the system at the disposal of the user\", which includes all those of the orchestration layer as well as the endless integration layers beneath. But it is interesting how modern orchestration platforms such as Kubernetes are already more declaratively structured than their predecessors such as JCL, and long line of other system languages such as REXX, etc. We do note in our \"Revolution\" paper that the infrastructure arc of the ownability story looks like it is closing much more quickly than that of our programming languages, which hasn't even started to curve back yet.\nWhen you say, \"being rule based they should certainly be 'dynamic', e.g. able to adapt and compensate when the configuration \/ architecture changes\" I argue that this exactly the kind of admirable property we need all the way down our stack. It has huge benefits, for example, at the level of user interaction which is required to be fluid in the face of the unexpected arrival or disappearance of interaction devices or idioms.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5184556fcf3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/75184556fcf3aa660f5e56b8e5bdd46d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "",
            "real_name": "Antranig Basman",
            "display_name": "Bosmon",
            "team": "T5TCAFTA9",
            "name": "amb26slack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873883.010000",
        "parent_user_id": "UEKEQGB9C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3WlgO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEKEQGB9C"
                            },
                            {
                                "type": "text",
                                "text": " Yeah, bringing in JCL and orchestration languages is a great reference point for the discussion. +1 for Prolog-like languages based on rules rather than imperative scripts - and in fact you'll notice that this is an important part of Kell's roadmap for an integration domain expressed in sections 4.2 and 4.3 of his paper. An  integration domain is about \"relations, not scripts\".\nWhilst I share your scepticism that we can collapse this layer down into our programming language, I feel that we can't refuse to make the attempt, otherwise our discipline is a failure. Our mission is to \"put the complete resources of the system at the disposal of the user\", which includes all those of the orchestration layer as well as the endless integration layers beneath. But it is interesting how modern orchestration platforms such as Kubernetes are already more declaratively structured than their predecessors such as JCL, and long line of other system languages such as REXX, etc. We do note in our \"Revolution\" paper that the infrastructure arc of the ownability story looks like it is closing much more quickly than that of our programming languages, which hasn't even started to curve back yet.\nWhen you say, \"being rule based they should certainly be 'dynamic', e.g. able to adapt and compensate when the configuration \/ architecture changes\" I argue that this exactly the kind of admirable property we need all the way down our stack. It has huge benefits, for example, at the level of user interaction which is required to be fluid in the face of the unexpected arrival or disappearance of interaction devices or idioms."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEKEQGB9C",
        "type": "message",
        "ts": "1544288729.037400",
        "client_msg_id": "a316b5a1-82ba-488d-9e9f-f67012a6225e",
        "text": "Yes. \n\n100% agreed",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48a3c4ba8f2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/248a3c4ba8f2972427222d46954f9c1c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Phil Jones",
            "display_name": "interstar",
            "team": "T5TCAFTA9",
            "name": "interstar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543873883.010000",
        "parent_user_id": "UEKEQGB9C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DzEry",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes. \n\n100% agreed"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]