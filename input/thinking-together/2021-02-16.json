[
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1613492668.163400",
        "edited": {
            "user": "UMVFWPZ36",
            "ts": "1613492702.000000"
        },
        "client_msg_id": "96183835-6c2e-49c0-913a-cad7cddaa724",
        "text": "Recommendations for the best CAD software for a condo renovation project?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613492668.163400",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1614111865.031000",
        "reply_users": [
            "UC2A2ARPT",
            "UPHDH2F0C",
            "UMVFWPZ36",
            "UK22Z72L8"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1613494541.163700"
            },
            {
                "user": "UPHDH2F0C",
                "ts": "1613529841.185600"
            },
            {
                "user": "UMVFWPZ36",
                "ts": "1613535105.194400"
            },
            {
                "user": "UK22Z72L8",
                "ts": "1614111865.031000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EbO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Recommendations for the best CAD software for a condo renovation project?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1613494541.163700",
        "client_msg_id": "7f378c1a-8acd-489f-b1cd-41e442579944",
        "text": "For casual use, SketchUp is decent. We designed our house using that tool (and then handed the plans off to the builder, when sent them off to the people doing the actual engineering drawings).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613492668.163400",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oi7O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For casual use, SketchUp is decent. We designed our house using that tool (and then handed the plans off to the builder, when sent them off to the people doing the actual engineering drawings)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613528098.183700",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1613535718.000000"
        },
        "client_msg_id": "3694585a-8269-444a-b278-c1ae15d654e0",
        "text": "I've been thinking about an alternative approach to \"function calling\" (particularly, for *declarative* languages). Instead of having _*functions*_, where every invocation must explicitly feed in every argument, what if:\n• we define a language that supports only _*expressions containing free variables*_, and\n• we treat invocation as merely (lazy) syntactic substitution, thus arguments are \"retrieved\" from the scope where the expression is _invoked_\nFor example, I write `let f = x * x` (note the absence of a parameter list) and then later write `let x = 3; let y = f` , which sets y to 9.\nIt's important for the substitution to be lazy, since this retains the semantics of traditional functions, including the ability to make _recursive_ definitions. Given this, I don't believe I'm re-inventing macros, though I welcome enlightenment.\nYou can combine this with the usual nested syntactic scoping rules, so it's definitely _not_ the same as using global variables, or the same as closures (where all the free variables are bound at the _definition_ site). The only practical difference seems to be the UX, and the biggest UX downside is probably readability (which invocations consume which values?), but I'm confident an IDE can make the data flow more explicit.\nAdvantages of this approach:\n• Certain programs can become much more concise. For example, in drawing code, you can set the drawing `color` just once, and it will be automatically consumed by all drawing functions (i.e. expressions-with-free-variables) that are invoked in that scope. This actually obviates the \"type classes\" feature that functional languages often pursue. (Type classes aim to enable exactly this kind of \"implicit argument passing\", but achieve it in a more convoluted way.)\n• You've removed the concept of a \"function call\" entirely from the language. You only need substitution (i.e. referencing). Less features is better, when all else is equal.\nDisadvantages of this approach:\n• As mentioned earlier, it may be harder to understand which values are being consumed where. But I'm confident that an IDE can make this clear. (I'm building a language based on ASTs and structured editing anyway, so it's guaranteed to be combined with a sufficiently-smart IDE.)\n• You need to worry about \"accidental variable capture\", where a variable which _just happens_ to be in scope is accidentally used by a function (i.e. expression) invocation. I think this is a real problem in languages where variables are identified by _*text strings*_, but FWIW, the language I'm designing is _not_ based on text strings, and so can be designed in such a way that a local variable will never _accidentally_ have the same UUID as a free variable found in a function (i.e. expression). In an AST-based language, every function definition should _by default_ use unique UUIDs for its free variables. Only _related functions_ from the same library should share UUIDs, for example the `color` variable used in a drawing library should be the same across all drawing functions.\nI'd love to hear others' thoughts. Has this been tried before? Are there additional advantages or disadvantages that I've missed? Is it worth a try? Note that I'm thinking specifically about declarative languages here. Imperative languages _may_ add complications (but may not!).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "reply_count": 55,
        "reply_users_count": 13,
        "latest_reply": "1613982214.028100",
        "reply_users": [
            "UCUSW7WVD",
            "UCGAK10LS",
            "UEBG0NPDK",
            "U01JNTE35QS",
            "UFB8STN7K",
            "UQ706GB9U",
            "UA14TGLTC",
            "UJBAJNFLK",
            "U016VUZGUUQ",
            "UN06QADNV",
            "UF71PR58X",
            "U013ZLJARC7",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1613528712.184100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613528995.184400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1613529602.184900"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1613529738.185100"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1613529787.185300"
            },
            {
                "user": "U01JNTE35QS",
                "ts": "1613529980.188700"
            },
            {
                "user": "U01JNTE35QS",
                "ts": "1613530127.190100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613530387.190300"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613530480.190500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613530582.190700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1613530651.190900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613530723.191100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1613530845.191400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1613531262.191900"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1613531527.192200"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1613531584.192400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613532145.192700"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1613532627.193000"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1613532681.193200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613532991.193600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1613543953.195700"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613544639.195900"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1613544785.197700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1613544827.198500"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1613546395.198700"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613547269.199000"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1613549010.199500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613550266.200800"
            },
            {
                "user": "UN06QADNV",
                "ts": "1613550720.201000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613551020.204200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613551448.206300"
            },
            {
                "user": "UN06QADNV",
                "ts": "1613551463.206500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613551538.207000"
            },
            {
                "user": "UN06QADNV",
                "ts": "1613551893.207300"
            },
            {
                "user": "UF71PR58X",
                "ts": "1613561764.230100"
            },
            {
                "user": "UF71PR58X",
                "ts": "1613561816.230300"
            },
            {
                "user": "UF71PR58X",
                "ts": "1613562110.230500"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1613570290.242400"
            },
            {
                "user": "UF71PR58X",
                "ts": "1613573176.242700"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613609273.243400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613782208.000100"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1613786598.002400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613786661.003400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613786923.006800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1613787099.009300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1613787306.012900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613787546.013600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613787577.014600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613789693.018900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613789742.019100"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1613797039.020000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613797351.021400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613797498.021600"
            },
            {
                "user": "UN06QADNV",
                "ts": "1613981750.023600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613982214.028100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "74r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been thinking about an alternative approach to \"function calling\" (particularly, for "
                            },
                            {
                                "type": "text",
                                "text": "declarative",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " languages). Instead of having "
                            },
                            {
                                "type": "text",
                                "text": "functions",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", where every invocation must explicitly feed in every argument, what if:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "we define a language that supports only "
                                    },
                                    {
                                        "type": "text",
                                        "text": "expressions containing free variables",
                                        "style": {
                                            "bold": true,
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", and"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "we treat invocation as merely (lazy) syntactic substitution, thus arguments are \"retrieved\" from the scope where the expression is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "invoked",
                                        "style": {
                                            "italic": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For example, I write "
                            },
                            {
                                "type": "text",
                                "text": "let f = x * x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (note the absence of a parameter list) and then later write "
                            },
                            {
                                "type": "text",
                                "text": "let x = 3; let y = f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , which sets y to 9.\nIt's important for the substitution to be lazy, since this retains the semantics of traditional functions, including the ability to make "
                            },
                            {
                                "type": "text",
                                "text": "recursive",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " definitions. Given this, I don't believe I'm re-inventing macros, though I welcome enlightenment.\nYou can combine this with the usual nested syntactic scoping rules, so it's definitely "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the same as using global variables, or the same as closures (where all the free variables are bound at the "
                            },
                            {
                                "type": "text",
                                "text": "definition",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " site). The only practical difference seems to be the UX, and the biggest UX downside is probably readability (which invocations consume which values?), but I'm confident an IDE can make the data flow more explicit.\nAdvantages of this approach:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Certain programs can become much more concise. For example, in drawing code, you can set the drawing "
                                    },
                                    {
                                        "type": "text",
                                        "text": "color",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " just once, and it will be automatically consumed by all drawing functions (i.e. expressions-with-free-variables) that are invoked in that scope. This actually obviates the \"type classes\" feature that functional languages often pursue. (Type classes aim to enable exactly this kind of \"implicit argument passing\", but achieve it in a more convoluted way.)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "You've removed the concept of a \"function call\" entirely from the language. You only need substitution (i.e. referencing). Less features is better, when all else is equal."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Disadvantages of this approach:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "As mentioned earlier, it may be harder to understand which values are being consumed where. But I'm confident that an IDE can make this clear. (I'm building a language based on ASTs and structured editing anyway, so it's guaranteed to be combined with a sufficiently-smart IDE.)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "You need to worry about \"accidental variable capture\", where a variable which "
                                    },
                                    {
                                        "type": "text",
                                        "text": "just happens",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " to be in scope is accidentally used by a function (i.e. expression) invocation. I think this is a real problem in languages where variables are identified by "
                                    },
                                    {
                                        "type": "text",
                                        "text": "text strings",
                                        "style": {
                                            "bold": true,
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", but FWIW, the language I'm designing is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "not",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " based on text strings, and so can be designed in such a way that a local variable will never "
                                    },
                                    {
                                        "type": "text",
                                        "text": "accidentally",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " have the same UUID as a free variable found in a function (i.e. expression). In an AST-based language, every function definition should "
                                    },
                                    {
                                        "type": "text",
                                        "text": "by default",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " use unique UUIDs for its free variables. Only "
                                    },
                                    {
                                        "type": "text",
                                        "text": "related functions",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " from the same library should share UUIDs, for example the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "color",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " variable used in a drawing library should be the same across all drawing functions."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd love to hear others' thoughts. Has this been tried before? Are there additional advantages or disadvantages that I've missed? Is it worth a try? Note that I'm thinking specifically about declarative languages here. Imperative languages "
                            },
                            {
                                "type": "text",
                                "text": "may",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " add complications (but may not!)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1613528712.184100",
        "client_msg_id": "61f43831-c757-4cb8-93a3-64384c420d75",
        "text": "Is this the same as unhygienic macros? (I love unhygienic macros, but I haven't tried to program with just them.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o\/JL0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is this the same as unhygienic macros? (I love unhygienic macros, but I haven't tried to program with just them.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613528995.184400",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1613529168.000000"
        },
        "client_msg_id": "fb728db0-9fca-4858-9916-ce546c216817",
        "text": "It shares similarities with macros, but you should still be able to define recursive functions using this approach, and thus substitution needs to be able to occur \"lazily\". I'm not sure if there are macro systems which can do that; I'm not very familiar with macro systems in general.\n\nI added the word \"lazy\" to the original post.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZxHTD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It shares similarities with macros, but you should still be able to define recursive functions using this approach, and thus substitution needs to be able to occur \"lazily\". I'm not sure if there are macro systems which can do that; I'm not very familiar with macro systems in general.\n\nI added the word \"lazy\" to the original post."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1613529602.184900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1613529849.000000"
        },
        "client_msg_id": "cba0be87-28b7-418c-81f2-9de4e5e741f9",
        "text": "Interesting. One phrase for literature surveys may be \"lazy call by name\"\n\n_Edit_: Apparently call by name as defined in the literature is always lazy: <https:\/\/en.wikipedia.org\/wiki\/Evaluation_strategy#Call_by_name>. So this may be subtly different in some way I can't brain atm.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t\/f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting. One phrase for literature surveys may be \"lazy call by name\"\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Edit",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": Apparently call by name as defined in the literature is always lazy: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Evaluation_strategy#Call_by_name"
                            },
                            {
                                "type": "text",
                                "text": ". So this may be subtly different in some way I can't brain atm."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1613529738.185100",
        "client_msg_id": "bfd8c1bc-10bf-4741-8b82-8ff562e8c702",
        "text": "this is how our english stuff works, since in natural language you often don’t refer to arguments if they’re obvious",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uN9m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is how our english stuff works, since in natural language you often don’t refer to arguments if they’re obvious"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1613529787.185300",
        "client_msg_id": "7e189dd9-5ae4-451d-9ad7-61a907970d02",
        "text": "the important part is that we show you our explicit interpretation and allow you to correct it in case we picked the wrong thing",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vPi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the important part is that we show you our explicit interpretation and allow you to correct it in case we picked the wrong thing"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UPHDH2F0C",
        "type": "message",
        "ts": "1613529841.185600",
        "client_msg_id": "3deacc47-1231-4c4a-8875-c438fed9cd62",
        "text": "SweetHome3d - looks dated but holy damn it's good for visualising stuff",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g1f7d7b72626",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1f7d7b7262629274f112246273cca48c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "Aaron Barnes",
            "display_name": "Aaron Barnes",
            "team": "T5TCAFTA9",
            "name": "aaron",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613492668.163400",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jw5KV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "SweetHome3d - looks dated but holy damn it's good for visualising stuff"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01JNTE35QS",
        "type": "message",
        "ts": "1613529980.188700",
        "client_msg_id": "80670677-D309-4F83-8EA1-A94DDA27FA57",
        "text": "There is some similarity with APL trains, hooks and forks, IMHO. Unless I’m not understanding this correctly. \nThere is a bit of a learning curve with APL trains. Note that the analogy to English holds - for most people English has a few years long learning curve going from characters to words to sentences. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "97155db555c2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-13\/1631845309525_97155db555c2091ecd20_72.jpg",
            "first_name": "",
            "real_name": "Vijay Chakravarthy",
            "display_name": "Vijay Chakravarthy",
            "team": "T5TCAFTA9",
            "name": "vchakrav",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XPv=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is some similarity with APL trains, hooks and forks, IMHO. Unless I’m not understanding this correctly. \nThere is a bit of a learning curve with APL trains. Note that the analogy to English holds - for most people English has a few years long learning curve going from characters to words to sentences. "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01JNTE35QS",
        "type": "message",
        "ts": "1613530127.190100",
        "client_msg_id": "4F364CA7-7913-466C-9BD6-5CD5E9DF0574",
        "text": "Wouldn’t this be a problem where f = x*x and f = y*y are not equivalent? ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "97155db555c2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-13\/1631845309525_97155db555c2091ecd20_72.jpg",
            "first_name": "",
            "real_name": "Vijay Chakravarthy",
            "display_name": "Vijay Chakravarthy",
            "team": "T5TCAFTA9",
            "name": "vchakrav",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vJZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wouldn’t this be a problem where f = x*x and f = y*y are not equivalent? "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613530387.190300",
        "client_msg_id": "f8464306-a8f5-4ad1-a728-415fc0b44744",
        "text": "Are you talking about comparing the two expressions under an _equality operator_: `x*x == y*y`? Equality of functions is already undefined in most programming languages.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=S3iJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you talking about comparing the two expressions under an "
                            },
                            {
                                "type": "text",
                                "text": "equality operator",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": "
                            },
                            {
                                "type": "text",
                                "text": "x*x == y*y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Equality of functions is already undefined in most programming languages."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613530480.190500",
        "client_msg_id": "23e208a3-f14b-46c8-af19-18b6e744baff",
        "text": "If you mean that swapping one invocation for the other does not yield the same program, then that's true, but I don't think that will be a problem. The user of the function just has to indicate which variable they want to bind at the invocation site.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WsX8p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you mean that swapping one invocation for the other does not yield the same program, then that's true, but I don't think that will be a problem. The user of the function just has to indicate which variable they want to bind at the invocation site."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613530582.190700",
        "client_msg_id": "c45dd060-746b-441f-b18d-653158b89b68",
        "text": "And you can always rename the variables by saying `let x = z; let y = z` if you want a set of functions to all use the same variable name, post-hoc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QI1\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And you can always rename the variables by saying "
                            },
                            {
                                "type": "text",
                                "text": "let x = z; let y = z",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " if you want a set of functions to all use the same variable name, post-hoc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1613530651.190900",
        "client_msg_id": "f4a3e7e7-03cc-443f-91bf-fb764afac8ac",
        "text": "I believe the point might be that constraints on the names of variables could affect composability. If you want to call `f` you have to have a variable called `x`. But now say you have another function that needs `y` for the same variable. Or `x` for a different variable.\n\nNone of this is insurmountable, but might add noise.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I75Op",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I believe the point might be that constraints on the names of variables could affect composability. If you want to call "
                            },
                            {
                                "type": "text",
                                "text": "f ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "you have to have a variable called "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". But now say you have another function that needs `y` for the same variable. Or `x` for a different variable.\n\nNone of this is insurmountable, but might add noise."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613530723.191100",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1613531067.000000"
        },
        "client_msg_id": "9b40955e-09ec-4d36-a1b6-1ae345dd0ac0",
        "text": "I think my above comment + my second dot point under \"Disadvantages\" addresses those things :slightly_smiling_face: (I just extended the dot point to add more detail)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jcI8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think my above comment + my second dot point under \"Disadvantages\" addresses those things "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " (I just extended the dot point to add more detail)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1613530845.191400",
        "client_msg_id": "38310389-3033-4ab7-9e78-642c12237e56",
        "text": "Ok, maybe. Capture typically involves reasoning about a single call in isolation. I'm thinking about situations where each call is fine in isolation but there's impedance in putting them into a single block. So you end up creating extra block boundaries.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kjzj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, maybe. Capture typically involves reasoning about a single call in isolation. I'm thinking about situations where each call is fine in isolation but there's impedance in putting them into a single block. So you end up creating extra block boundaries."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1613531262.191900",
        "client_msg_id": "40f90bcc-fedb-4866-84e1-52037770709f",
        "text": "Ah, I see your edit. Yeah, that's basically the impedance mismatch I was alluding to. Not a huge deal. Typically when we worry about 'capture' we're concerned about insidious bugs. This is more a case of fixing a new kind of syntax error.\n\nI have to deal with some additional constraints akin to these in Mu. It's a cost, but sometimes it's worth paying.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FTb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, I see your edit. Yeah, that's basically the impedance mismatch I was alluding to. Not a huge deal. Typically when we worry about 'capture' we're concerned about insidious bugs. This is more a case of fixing a new kind of syntax error.\n\nI have to deal with some additional constraints akin to these in Mu. It's a cost, but sometimes it's worth paying."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1613531527.192200",
        "client_msg_id": "14c5cfe5-0e70-4efc-b1e5-6e80df2230c4",
        "text": "This concept is pretty similar to dynamically scoped variables. e.g. emacs lisp:\n```(defun f () (* x x))\n(let ((x 2))\n  (cl-assert (= (f) 4)))```\nSee Richard Stallman’s paper about emacs on why dynamic scoping promotes modularity: <https:\/\/www.gnu.org\/software\/emacs\/emacs-paper.html#SEC17>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PiHs7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This concept is pretty similar to dynamically scoped variables. e.g. emacs lisp:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(defun f () (* x x))\n(let ((x 2))\n  (cl-assert (= (f) 4)))"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "See Richard Stallman’s paper about emacs on why dynamic scoping promotes modularity: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.gnu.org\/software\/emacs\/emacs-paper.html#SEC17"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70",
                    "U013ZLJARC7"
                ],
                "count": 2
            },
            {
                "name": "eyes",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1613531584.192400",
        "edited": {
            "user": "UFB8STN7K",
            "ts": "1613572301.000000"
        },
        "client_msg_id": "4b0cd18e-18d9-4888-a87f-89c4bbef9199",
        "text": "Worth noting that while most programming languages use lexically scoped variables, a variety of programming frameworks include dynamically scoped abstractions. Most notably React contexts.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IFA5m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Worth noting that while most programming languages use lexically scoped variables, a variety of programming frameworks include dynamically scoped abstractions. Most notably React contexts."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613532145.192700",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1613534963.000000"
        },
        "client_msg_id": "00a280bc-383f-4671-8764-ced7578bd4f3",
        "text": "Yeah, this will probably \"feel similar\" to dynamic scoping, though importantly, you can still determine which bindings will be used by an expression using purely syntactic reasoning. I'll read that paper, thanks :slightly_smiling_face: (edit: The arguments Stallman makes for dynamic scope are pretty weak, IMO, and don't overlap with the arguments in my proposal.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OG8nm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, this will probably \"feel similar\" to dynamic scoping, though importantly, you can still determine which bindings will be used by an expression using purely syntactic reasoning. I'll read that paper, thanks "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " (edit: The arguments Stallman makes for dynamic scope are pretty weak, IMO, and don't overlap with the arguments in my proposal.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1613532627.193000",
        "client_msg_id": "16f86001-e738-47b0-bd44-1bc6ced0ebb5",
        "text": "i could see problems with accidentally reusing a variable name and causing unintentional problems.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1ewUN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i could see problems with accidentally reusing a variable name and causing unintentional problems."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1613532681.193200",
        "edited": {
            "user": "UQ706GB9U",
            "ts": "1613532764.000000"
        },
        "client_msg_id": "086eb432-8b9c-4c02-b012-f9bf9f048c9b",
        "text": "what about nested for loops\n```for i in ...:\n  for j in ...:\n    # eval a function that expects an index to be assigned to i but you want it use j.```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s68Fg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what about nested for loops\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for i in ...:\n  for j in ...:\n    # eval a function that expects an index to be assigned to i but you want it use j."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613532991.193600",
        "client_msg_id": "823c9233-effd-4d81-a979-f8e78ae624df",
        "text": "I cover that in \"Disadvantage\" dot point 2. In short: you wouldn't ever be using \"i\" as a parameter name. You'd be using a unique UUID, and perhaps you'd use \"i\" as a human-friendly label for it, to be displayed in the IDE.\nAlso, I didn't explicitly mention that I'm thinking about declarative languages (I always make this mistake). It may be the case that imperative languages have specific qualities that introduce additional problems.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Lt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I cover that in \"Disadvantage\" dot point 2. In short: you wouldn't ever be using \"i\" as a parameter name. You'd be using a unique UUID, and perhaps you'd use \"i\" as a human-friendly label for it, to be displayed in the IDE.\nAlso, I didn't explicitly mention that I'm thinking about declarative languages (I always make this mistake). It may be the case that imperative languages have specific qualities that introduce additional problems."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1613535105.194400",
        "client_msg_id": "59e9847b-0e79-4089-ae42-7f2107e25ab6",
        "text": "Cool, a web version: <http:\/\/www.sweethome3d.com\/SweetHome3DJSOnline.jsp>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613492668.163400",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZVo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool, a web version: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.sweethome3d.com\/SweetHome3DJSOnline.jsp"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1613543953.195700",
        "client_msg_id": "5c6dcae9-05cc-4429-83d9-f3ebbb4f90c7",
        "text": "Yeah, I think I missed how your proposal differs from dynamic scoping <@UCGAK10LS>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S=WPG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I think I missed how your proposal differs from dynamic scoping "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613544639.195900",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1613547390.000000"
        },
        "client_msg_id": "501c2d18-7471-4b3f-8379-add9fb25ede1",
        "text": "Well, if you put a function definition within another function definition, the inner function should still be able to \"use\" variables from the outer function, i.e. binding the variable in the outer function might also bind it in the inner function. In other words, you can _choose_ between lexical scoping and dynamic scoping on a _per variable_ basis. Indeed, with every variable usage, you need a means to indicate which parent scope you want the variable to be bindable from; essentially you want every scope to indicate its \"parameter list\" (free variable list). This puts you somewhere in-between lexical scoping and dynamic scoping. It will require a smart syntax to be comprehensible, of course! It would work similarly to how \"quoting\" works in Lisp or Julia.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=xyur",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, if you put a function definition within another function definition, the inner function should still be able to \"use\" variables from the outer function, i.e. binding the variable in the outer function might also bind it in the inner function. In other words, you can "
                            },
                            {
                                "type": "text",
                                "text": "choose",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " between lexical scoping and dynamic scoping on a "
                            },
                            {
                                "type": "text",
                                "text": "per variable ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "basis. Indeed, with every variable usage, you need a means to indicate which parent scope you want the variable to be bindable from; essentially you want every scope to indicate its \"parameter list\" (free variable list). This puts you somewhere in-between lexical scoping and dynamic scoping. It will require a smart syntax to be comprehensible, of course! It would work similarly to how \"quoting\" works in Lisp or Julia."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1613544785.197700",
        "client_msg_id": "87803CB5-39EC-4AA9-B515-78E373A24A96",
        "text": "To me this proposal sounds a lot like term rewriting, except that typical implementations of term rewriting include more sophisticated pattern matching.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cE5Tm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To me this proposal sounds a lot like term rewriting, except that typical implementations of term rewriting include more sophisticated pattern matching."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1613544827.198500",
        "client_msg_id": "DC1CA410-3571-4F0E-B32C-FCD0ADF23221",
        "text": "And I like term rewriting exactly for the reasons mentioned.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y6C1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I like term rewriting exactly for the reasons mentioned."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1613546395.198700",
        "client_msg_id": "31148352-2512-4d8c-a57e-ec05156e7680",
        "text": "I've considered very similar ideas, down to the example of graphics\/color and idea of library-specific symbols. You might also look into algebraic effects as an underlying formalism for variable lookup. (That should still let you pick which variables are dynamically or lexically scoped, but it's too late for me to be confident). Also effects are just really cool in general, which is why today I lean towards using them to handle this use case by-the-way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hVTO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've considered very similar ideas, down to the example of graphics\/color and idea of library-specific symbols. You might also look into algebraic effects as an underlying formalism for variable lookup. (That should still let you pick which variables are dynamically or lexically scoped, but it's too late for me to be confident). Also effects are just really cool in general, which is why today I lean towards using them to handle this use case by-the-way."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613547269.199000",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1613547295.000000"
        },
        "client_msg_id": "cc2437df-8fd1-4066-b369-392072404137",
        "text": "<@UJBAJNFLK> Does that perspective yield new insight? I thought _*all*_ language semantics could be expressed as a term rewriting system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7qZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Does that perspective yield new insight? I thought "
                            },
                            {
                                "type": "text",
                                "text": "all",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " language semantics could be expressed as a term rewriting system."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]