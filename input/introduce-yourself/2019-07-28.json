[
    {
        "user": "UAST2M9EW",
        "type": "message",
        "ts": "1564351010.029400",
        "edited": {
            "user": "UAST2M9EW",
            "ts": "1564351216.000000"
        },
        "client_msg_id": "6e43d49c-edc2-48c5-b456-8f0a3a5ad798",
        "text": "<@UL3CJ7YKC> dependent types are the future but it's perhaps a little difficult to make money at it right now (some folks are making money in the commercial realm proving things with the likes of Coq). In Haskell there are ways of simulating dependent types (<https:\/\/personal.cis.strath.ac.uk\/conor.mcbride\/pub\/hasochism.pdf>). I'm not sure there is any Haskell&lt;-&gt;Unity integration. Looks like Haskell will get full dependent types in the next few years.\n\nAs you may not be able to use Haskell for your Unity work, I recall seeing this some time ago:\n\n<https:\/\/twitter.com\/steshaw\/status\/775271713940475905>\nSome more tweets here: <https:\/\/twitter.com\/search?q=%20unity3d%20idris&amp;src=typed_query>\n\nI'd never heard of that integration before or since. I can't imagine it's maintained. Idris is a research PL with little funding ATM. Idris v2 is currently under development. I hope it has a bright future.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfe6eecd0900",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/9fe6eecd0900f0e779711f091fec8b3b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "Steven Shaw",
            "display_name": "steshaw",
            "team": "T5TCAFTA9",
            "name": "steven",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564351010.029400",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1564357835.030500",
        "reply_users": [
            "UL3CJ7YKC"
        ],
        "replies": [
            {
                "user": "UL3CJ7YKC",
                "ts": "1564357835.030500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/steshaw|@steshaw>: Just came across this example of integrating #unity3d and #idris <https:\/\/github.com\/bamboo\/IdrisUnityPlayground> by <https:\/\/twitter.com\/rodrigobamboo|@rodrigobamboo> <https:\/\/pbs.twimg.com\/media\/CsJRb6EUAAA_bbF.jpg>",
                "ts": 1473674155,
                "author_name": "⚡teven ⚡haw",
                "author_link": "https:\/\/twitter.com\/steshaw\/status\/775271713940475905",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/949428480764100608\/uc83IoMY_normal.jpg",
                "author_subname": "@steshaw",
                "text": "Just came across this example of integrating #unity3d and #idris <https:\/\/github.com\/bamboo\/IdrisUnityPlayground> by <https:\/\/twitter.com\/rodrigobamboo|@rodrigobamboo> <https:\/\/pbs.twimg.com\/media\/CsJRb6EUAAA_bbF.jpg>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/steshaw\/status\/775271713940475905",
                "image_url": "https:\/\/pbs.twimg.com\/media\/CsJRb6EUAAA_bbF.jpg",
                "image_width": 1200,
                "image_height": 675,
                "image_bytes": 102386,
                "id": 1,
                "original_url": "https:\/\/twitter.com\/steshaw\/status\/775271713940475905",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            },
            {
                "title": " unity3d idris - Twitter Search",
                "title_link": "https:\/\/twitter.com\/search?q=%20unity3d%20idris&src=typed_query",
                "text": "The latest Tweets on unity3d idris. Read what people are saying and join the conversation.",
                "fallback": " unity3d idris - Twitter Search",
                "from_url": "https:\/\/twitter.com\/search?q=%20unity3d%20idris&src=typed_query",
                "service_icon": "https:\/\/abs.twimg.com\/icons\/apple-touch-icon-192x192.png",
                "service_name": "twitter.com",
                "id": 2,
                "original_url": "https:\/\/twitter.com\/search?q=%20unity3d%20idris&amp;src=typed_query"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mZg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL3CJ7YKC"
                            },
                            {
                                "type": "text",
                                "text": " dependent types are the future but it's perhaps a little difficult to make money at it right now (some folks are making money in the commercial realm proving things with the likes of Coq). In Haskell there are ways of simulating dependent types ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/personal.cis.strath.ac.uk\/conor.mcbride\/pub\/hasochism.pdf"
                            },
                            {
                                "type": "text",
                                "text": "). I'm not sure there is any Haskell<->Unity integration. Looks like Haskell will get full dependent types in the next few years.\n\nAs you may not be able to use Haskell for your Unity work, I recall seeing this some time ago:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/steshaw\/status\/775271713940475905"
                            },
                            {
                                "type": "text",
                                "text": "\nSome more tweets here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/search?q=%20unity3d%20idris&amp;src=typed_query",
                                "text": "https:\/\/twitter.com\/search?q=%20unity3d%20idris&src=typed_query"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI'd never heard of that integration before or since. I can't imagine it's maintained. Idris is a research PL with little funding ATM. Idris v2 is currently under development. I hope it has a bright future."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1564357835.030500",
        "client_msg_id": "1F54B333-5E2D-470D-9221-CFC3092EE52D",
        "text": "Thanks a lot! Thats an awesome catch!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564351010.029400",
        "parent_user_id": "UAST2M9EW",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r0ESD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks a lot! Thats an awesome catch!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1564358681.030700",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1564368854.000000"
        },
        "client_msg_id": "1921fccc-3edb-4c59-84f2-8395787b0db1",
        "text": "Hi Pezo! This is the first time I've seen another person here mention DCI, but that's the thing that first got me thinking that something is wrong or missing in software. I think Jim Coplien has a good view of what part of that thing is though, and following his stuff led me to other things (most directly, to Alan Kay and Christopher Alexander (whose work in physical architecture inspired software Design Patterns)).\n\nAnyway, I spent more than a year trying to wrap my head around DCI, like what it is *really* about, and that's opened my eyes on some things -- though I don't think DCI itself fixes anything. That started me on similar journeys to understand that OOP and Design Patterns and many other things have fallen far from what they were originally about, etc. etc. Funny thing is that \"Uncle\" Bob Martin understands this and explains it to some degree, but most software folk that subscribe to him (and his \"clean code\" architecture) wind up excited about new ways to make software more and more needlessly complex and mechanistic.\n\nAnyway, I'd be interested in discussing more of this with you, and hearing your take \/ journey, if you're interested.\n\nI think most people in this community have some story or journey to tell :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563205840.243800",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HHn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi Pezo! This is the first time I've seen another person here mention DCI, but that's the thing that first got me thinking that something is wrong or missing in software. I think Jim Coplien has a good view of what part of that thing is though, and following his stuff led me to other things (most directly, to Alan Kay and Christopher Alexander (whose work in physical architecture inspired software Design Patterns)).\n\nAnyway, I spent more than a year trying to wrap my head around DCI, like what it is "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " about, and that's opened my eyes on some things -- though I don't think DCI itself fixes anything. That started me on similar journeys to understand that OOP and Design Patterns and many other things have fallen far from what they were originally about, etc. etc. Funny thing is that \"Uncle\" Bob Martin understands this and explains it to some degree, but most software folk that subscribe to him (and his \"clean code\" architecture) wind up excited about new ways to make software more and more needlessly complex and mechanistic.\n\nAnyway, I'd be interested in discussing more of this with you, and hearing your take \/ journey, if you're interested.\n\nI think most people in this community have some story or journey to tell :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1564364596.031000",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1564366843.000000"
        },
        "client_msg_id": "2f40d3c0-c76f-4ace-92de-6e498a1b2c4d",
        "text": "Hi <@UAVCC2X70>! Thanks for your response! :slightly_smiling_face: I am glad to have a conversation on that! :slightly_smiling_face:\n\nI have seen almost all Uncle Bob episodes and read the GoF book and many other OO &amp; Design Patterns books because I was really curious what was going on with these “patterns” when started to study OO at the university in my country, Hungary.\n\nOO and Uncle Bob and their debate (<https:\/\/www.youtube.com\/watch?v=KtHQGs3zFAM>) led me to DCI and Jim Coplien. The first couple times I did not get DCI, I think despite Jim tries hard he can’t explain the essence of DCI. This guy, Andreas Soderlund does better job I think. ( <https:\/\/www.youtube.com\/watch?v=B0ebZHUixa0> ). Or maybe his understanding is not proper which would mean neither is mine! :smile:\n\nI really think that the nature of the problems (at least the harder=more important) we want to address through computing is “dynamic” - something which needs runtime information and runtime bindings. Complexity arises for sure when I can’t just “enumerate” all the possible states\/relations “static”\/“compile” time and I need to postpone some computation until multiple pieces of information are gathered together. Because of that I felt I’m just done with Class-based OO and I’ll rather focus on “compositions” (over inheritance) and runtime behaviour. At this point I thought something might still be “over there” in OO I’m not aware of, and when I first met DCI I deeply thought\/“felt” this will be the thing!\n\nWhat I have in my mind for a long time is that the same object can play multiple “roles” in multiple “contexts”. (The funny thing is that this comes from Prolog which I studied for a half year at the uni and I was amazed how flexible it is with the “relations” between “objects”\/“facts?“.)\n\nFurthermore these roles and contexts often need runtime information to put them together (here is the “dynamic”) but I just could not find out how to express that, I was looking for something “deep” and in retrospectively more powerful (than DCI). I really thought if that is deep that must be hard and I did not notice the elephant in the room.\n\nAt the same time I started to look into FP and think about the corresponding FP variant of any OO piece of code. Today I am 99.9% sure there is no feature of OO which would be superior to FP, if you are interested I might create a post on that. But basically DCI itself seems to me just a really really simple pattern: creating and (dynamically) populating data structures which do have references on other data structures which do belong together. Bam. I really think there is nothing more than that.\n\nI found Andreas’ video 2 weeks ago so I am really happy to discuss this topic, in fact I have already created a tweet with a related question to Jim and Andreas.\nIt addresses the problem of asynchronicity and parallel\/concurrent computing which is the root of all evil in my code even if there is no more than 100 lines. It just blows up if I face these issues and I immediately corner myself so there is no way to refactor out myself from that horror. So these days I am focusing on these and I was wondering what DCI says about that.\n\nLook here: <https:\/\/twitter.com\/ZoliPeto\/status\/1151101824595910657>\n\nAnd this was literally my last attempt with OO, since that I had some deep thinking on the topic and I am sure neither OO nor DCI have real solution for taming the complexity in software, its in FP with Types.\n\nI do get and agree with many of your points: DCI as “something promising”, Uncle Bob’s half-baked solutions, OO &amp; Design Patterns as the rigid opposite of the wannabe flexible themselves.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563205840.243800",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TDD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": "! Thanks for your response! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " I am glad to have a conversation on that! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI have seen almost all Uncle Bob episodes and read the GoF book and many other OO & Design Patterns books because I was really curious what was going on with these “patterns” when started to study OO at the university in my country, Hungary.\n\nOO and Uncle Bob and their debate ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=KtHQGs3zFAM"
                            },
                            {
                                "type": "text",
                                "text": ") led me to DCI and Jim Coplien. The first couple times I did not get DCI, I think despite Jim tries hard he can’t explain the essence of DCI. This guy, Andreas Soderlund does better job I think. ( "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=B0ebZHUixa0"
                            },
                            {
                                "type": "text",
                                "text": " ). Or maybe his understanding is not proper which would mean neither is mine! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI really think that the nature of the problems (at least the harder=more important) we want to address through computing is “dynamic” - something which needs runtime information and runtime bindings. Complexity arises for sure when I can’t just “enumerate” all the possible states\/relations “static”\/“compile” time and I need to postpone some computation until multiple pieces of information are gathered together. Because of that I felt I’m just done with Class-based OO and I’ll rather focus on “compositions” (over inheritance) and runtime behaviour. At this point I thought something might still be “over there” in OO I’m not aware of, and when I first met DCI I deeply thought\/“felt” this will be the thing!\n\nWhat I have in my mind for a long time is that the same object can play multiple “roles” in multiple “contexts”. (The funny thing is that this comes from Prolog which I studied for a half year at the uni and I was amazed how flexible it is with the “relations” between “objects”\/“facts?“.)\n\nFurthermore these roles and contexts often need runtime information to put them together (here is the “dynamic”) but I just could not find out how to express that, I was looking for something “deep” and in retrospectively more powerful (than DCI). I really thought if that is deep that must be hard and I did not notice the elephant in the room.\n\nAt the same time I started to look into FP and think about the corresponding FP variant of any OO piece of code. Today I am 99.9% sure there is no feature of OO which would be superior to FP, if you are interested I might create a post on that. But basically DCI itself seems to me just a really really simple pattern: creating and (dynamically) populating data structures which do have references on other data structures which do belong together. Bam. I really think there is nothing more than that.\n\nI found Andreas’ video 2 weeks ago so I am really happy to discuss this topic, in fact I have already created a tweet with a related question to Jim and Andreas.\nIt addresses the problem of asynchronicity and parallel\/concurrent computing which is the root of all evil in my code even if there is no more than 100 lines. It just blows up if I face these issues and I immediately corner myself so there is no way to refactor out myself from that horror. So these days I am focusing on these and I was wondering what DCI says about that.\n\nLook here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/ZoliPeto\/status\/1151101824595910657"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAnd this was literally my last attempt with OO, since that I had some deep thinking on the topic and I am sure neither OO nor DCI have real solution for taming the complexity in software, its in FP with Types.\n\nI do get and agree with many of your points: DCI as “something promising”, Uncle Bob’s half-baked solutions, OO & Design Patterns as the rigid opposite of the wannabe flexible themselves."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1564364596.031200",
        "client_msg_id": "2f40d3c0-c76f-4ace-92de-6e498a1b2c4d",
        "text": "The very shameful and ridiculous fact I’ve found with OO is that it doesnt say anything on correctness except “the thing”: `Tests`\/`TDD`. LOL, OO addresses other mechanisms to solve the main issues! Very limited compared to Agda\/Idris\/Dependent Types\/Proof assistants\/God knows what else. I’m just scratching the surface with these. <@UDKTZSD6H> might know more about what is out there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563205840.243800",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aT0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The very shameful and ridiculous fact I’ve found with OO is that it doesnt say anything on correctness except “the thing”: "
                            },
                            {
                                "type": "text",
                                "text": "Tests",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\/"
                            },
                            {
                                "type": "text",
                                "text": "TDD",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". LOL, OO addresses other mechanisms to solve the main issues! Very limited compared to Agda\/Idris\/Dependent Types\/Proof assistants\/God knows what else. I’m just scratching the surface with these. "
                            },
                            {
                                "type": "user",
                                "user_id": "UDKTZSD6H"
                            },
                            {
                                "type": "text",
                                "text": " might know more about what is out there."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1564365862.031800",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1564365918.000000"
        },
        "client_msg_id": "c08d217f-c34b-4d53-ac56-5f1788f9402d",
        "text": "Ah and one more thing I almost forgot! I’d be happy to be wrong about OO and see at least a somewhat “advanced” approach\/angle it gives on complex problems.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563205840.243800",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u6DSy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah and one more thing I almost forgot! I’d be happy to be wrong about OO and see at least a somewhat “advanced” approach\/angle it gives on complex problems."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1564372614.033000",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1564443437.000000"
        },
        "client_msg_id": "95ba9afc-04a3-4520-a258-41edb0b56e83",
        "text": "I'll bet there's a lot we could discuss that wouldn't all fit in this thread (not in any short amount of time anyway). For now I'll do my best to pick through one piece at a time in this thread, in part because of the good that comes from all the discussions here being out in the open.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563205840.243800",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fm5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll bet there's a lot we could discuss that wouldn't all fit in this thread (not in any short amount of time anyway). For now I'll do my best to pick through one piece at a time in this thread, in part because of the good that comes from all the discussions here being out in the open."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    }
]