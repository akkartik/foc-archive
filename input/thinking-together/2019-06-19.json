[
    {
        "user": "UFZFETUH1",
        "type": "message",
        "ts": "1560929933.497700",
        "client_msg_id": "34c4b287-a28b-48fe-b33a-12b2798956c4",
        "text": "Not mentioned yet: Hopscotch <https:\/\/www.gethopscotch.com\/>\n\nThere is also a fantastic future of coding podcast episode with Samantha John, Hopscotch's CEO, in case anybody missed it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga72dfb84ee3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a72dfb84ee31009c2810f7f590d4ff8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Philipp Kr√ºger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "philipp.krueger1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zIE+x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not mentioned yet: Hopscotch "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.gethopscotch.com\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere is also a fantastic future of coding podcast episode with Samantha John, Hopscotch's CEO, in case anybody missed it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560930270.498000",
        "client_msg_id": "fa936c5e-5ddc-4b6d-b95c-a1a7087e38b6",
        "text": "really interesting, thank you for sharing!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560875589.451900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JYuJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "really interesting, thank you for sharing!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560930310.498200",
        "client_msg_id": "702082e7-0fc5-4631-b5ca-e485faf78874",
        "text": "What do you think about his stance on determinism and scale?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560875589.451900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SoRkT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What do you think about his stance on determinism and scale?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560930954.498400",
        "client_msg_id": "150c6ef8-35da-4d0e-9b31-9cc8da5ddf61",
        "text": "its also interesting to see how much of his systems seems to me like a mechanism to describe constrains, at one point he speaks about degrees of an angle, its to bad that you have to describe the box in such a clumsy way",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560875589.451900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IBz2U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "its also interesting to see how much of his systems seems to me like a mechanism to describe constrains, at one point he speaks about degrees of an angle, its to bad that you have to describe the box in such a clumsy way"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560930969.498600",
        "client_msg_id": "ca3b5bed-8b41-4c2c-bb0f-228acb7dff0a",
        "text": "(by not using degrees that is)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560875589.451900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "custR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(by not using degrees that is)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560931015.499000",
        "client_msg_id": "429cb8a0-6356-4517-b030-4b35383e7746",
        "text": "maybe that is needed to get \"robust-first\" still I think there is improvement in the expression of this robustness",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560875589.451900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dYcUh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "maybe that is needed to get \"robust-first\" still I think there is improvement in the expression of this robustness"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1560933633.499300",
        "client_msg_id": "6a454142-e450-449f-8c96-47d22982f258",
        "text": "How specific is this question to iPads? For me, at least, iPads are far too heavy to comfortably hold in one hand for more than a single digit number of minutes. Which means working with it on a surface of some sort, which will either be flat (very awkward) or tilted, at which point you might as well be working on a laptop with a keyboard.\n\nI can imagine plenty of tasks a where flat or slightly tilted, no keyboard, arrangement would work (musical\/graphical composition) but I'm skeptical that anything that's recognizably programming would fit that model well.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Q3g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How specific is this question to iPads? For me, at least, iPads are far too heavy to comfortably hold in one hand for more than a single digit number of minutes. Which means working with it on a surface of some sort, which will either be flat (very awkward) or tilted, at which point you might as well be working on a laptop with a keyboard.\n\nI can imagine plenty of tasks a where flat or slightly tilted, no keyboard, arrangement would work (musical\/graphical composition) but I'm skeptical that anything that's recognizably programming would fit that model well."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE0ETTCG7",
                    "UC6997THT",
                    "UAL7940NM"
                ],
                "count": 3
            },
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1560960552.001100",
        "client_msg_id": "8fe50a80-a819-4f64-a90f-7aecf0b619ee",
        "text": "Does anyone have a strong argument for people that insist dynamic types are better or easier for novice programmers or non-programmers than explicit types?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "reply_count": 32,
        "reply_users_count": 15,
        "latest_reply": "1561095423.085200",
        "reply_users": [
            "UH84GQ3CZ",
            "U79HM6726",
            "UC2A2ARPT",
            "U8A5MS6R1",
            "UHDQ62M4P",
            "UBSMEUXAA",
            "UJN1TAYEQ",
            "U6FKVSVCK",
            "UJNJQD2AC",
            "UKJGU23KP",
            "UAL7940NM",
            "UC6997THT",
            "UE6EFEPTQ",
            "UJBAJNFLK",
            "UKQT95T1V"
        ],
        "replies": [
            {
                "user": "UH84GQ3CZ",
                "ts": "1560961198.001200"
            },
            {
                "user": "U79HM6726",
                "ts": "1560961896.001600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1560961896.001800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1560961930.002200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1560962100.002600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1560962221.003000"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1560962902.003300"
            },
            {
                "user": "U79HM6726",
                "ts": "1560964033.003600"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1560965273.003900"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1560966381.004500"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1560966771.005000"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1560967141.005600"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1560967842.006000"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1560968131.006300"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1560969094.006600"
            },
            {
                "user": "UAL7940NM",
                "ts": "1560969935.006800"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1560970909.007500"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1560971028.007700"
            },
            {
                "user": "UC6997THT",
                "ts": "1560972315.008000"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1560973823.008700"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1560973928.009000"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1560978172.014000"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1560988550.022100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1560989227.023400"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1560990056.023700"
            },
            {
                "user": "U79HM6726",
                "ts": "1561021946.032700"
            },
            {
                "user": "U79HM6726",
                "ts": "1561022018.032900"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1561038955.033300"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561046516.034900"
            },
            {
                "user": "U79HM6726",
                "ts": "1561053128.036900"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561055464.037100"
            },
            {
                "user": "UKQT95T1V",
                "ts": "1561095423.085200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+\/V6L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone have a strong argument for people that insist dynamic types are better or easier for novice programmers or non-programmers than explicit types?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UH84GQ3CZ",
        "type": "message",
        "ts": "1560961198.001200",
        "client_msg_id": "710f6127-07f5-4d49-84bd-4acc98ae536d",
        "text": "I'm generally an advocate for static types but I think it's hard to argue against the notion that it's easier to learn a dynamically typed system. Obviously there are less rules and less syntax (or interactions etc. if we're not using syntax) in a dynamically typed system. ML-family languages actually require you to learn a kind of logic programming to understand type inference, on top of applicative-style programming to understand terms. Type errors are more abstract than runtime errors and require more cognitive effort to understand.\n\nI sometimes wonder if a type system could be built that reported errors at particular values. I think this would help beginners a lot. \"If you call `f('hello', 5)` then you will end up calling 'hello'+1 here\" is a lot more friendly than \"cannot unify constraint `x : number` arising from use of `+ : number -&gt; number -&gt; number` with `x : string` in type signature of `f`\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "590662e8a2ae",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-16\/610501525696_590662e8a2ae7b2c73e9_72.jpg",
            "first_name": "",
            "real_name": "Jason Priestley",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jasonhpriestley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cj5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm generally an advocate for static types but I think it's hard to argue against the notion that it's easier to learn a dynamically typed system. Obviously there are less rules and less syntax (or interactions etc. if we're not using syntax) in a dynamically typed system. ML-family languages actually require you to learn a kind of logic programming to understand type inference, on top of applicative-style programming to understand terms. Type errors are more abstract than runtime errors and require more cognitive effort to understand.\n\nI sometimes wonder if a type system could be built that reported errors at particular values. I think this would help beginners a lot. \"If you call "
                            },
                            {
                                "type": "text",
                                "text": "f('hello', 5)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " then you will end up calling 'hello'+1 here\" is a lot more friendly than \"cannot unify constraint "
                            },
                            {
                                "type": "text",
                                "text": "x : number",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " arising from use of "
                            },
                            {
                                "type": "text",
                                "text": "+ : number -> number -> number",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with "
                            },
                            {
                                "type": "text",
                                "text": "x : string",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in type signature of "
                            },
                            {
                                "type": "text",
                                "text": "f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFSDUCH2",
        "type": "message",
        "ts": "1560961446.001400",
        "client_msg_id": "8bc3e02a-8de3-4660-9684-610544071023",
        "text": "I‚Äôve used some programming systems for kids on the ipad and they have worked quite well. But I find they don‚Äôt scale to larger projects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcc9260f41ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0cc9260f41ff521633069f4d94782cc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Josh Marinacci",
            "display_name": "Josh Marinacci",
            "team": "T5TCAFTA9",
            "name": "joshua",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jvC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I‚Äôve used some programming systems for kids on the ipad and they have worked quite well. But I find they don‚Äôt scale to larger projects."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1560961896.001600",
        "client_msg_id": "0e856eb3-edb7-4cf2-9984-9b58f6d7595f",
        "text": "<https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/c1899u\/steady_typing\/>\n\nLamdu‚Äôs new video discusses exactly this. It doesn‚Äôt necessarily say that static types are better, but it overviews the pros and cons of dynamic vs explicit static types vs inferred static types vs our own approach ‚ÄúSteady Typing‚Äù which we believe can make static types better :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "attachments": [
            {
                "service_name": "reddit",
                "title": "r\/ProgrammingLanguages - Steady Typing",
                "title_link": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/c1899u\/steady_typing\/",
                "text": "61 votes and 39 comments so far on Reddit",
                "fallback": "reddit: r\/ProgrammingLanguages - Steady Typing",
                "thumb_url": "https:\/\/external-preview.redd.it\/B0PbXYZFwTwX-5RnWb8gIjRNCSwsvT8MFg0QPvAuRs4.jpg?auto=webp&s=b89911ddea25311916de5a894cfc74d14ff4c909",
                "from_url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/c1899u\/steady_typing\/",
                "thumb_width": 480,
                "thumb_height": 360,
                "service_icon": "https:\/\/www.redditstatic.com\/desktop2x\/img\/favicon\/apple-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/c1899u\/steady_typing\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QlbG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/c1899u\/steady_typing\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nLamdu‚Äôs new video discusses exactly this. It doesn‚Äôt necessarily say that static types are better, but it overviews the pros and cons of dynamic vs explicit static types vs inferred static types vs our own approach ‚ÄúSteady Typing‚Äù which we believe can make static types better "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UBSMEUXAA"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1560961896.001800",
        "client_msg_id": "76f8497b-efbd-4795-a55d-840c9ce0afbf",
        "text": "I don't... but I'll die on the hill that dynamic languages are better for expert programmers. * ducks *",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jgm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't... but I'll die on the hill that dynamic languages are better for expert programmers. * ducks *"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560961930.002200",
        "client_msg_id": "d342af23-85ea-4463-8ba3-8cabab90cd54",
        "text": "Basic, Python, VB, Excel, Racket...\n\nIt certainly seems that programming languages and environments designed for - and popular among - novice and non-programmer computer users are dynamically typed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7l=p1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Basic, Python, VB, Excel, Racket...\n\nIt certainly seems that programming languages and environments designed for - and popular among - novice and non-programmer computer users are dynamically typed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560962100.002600",
        "client_msg_id": "828d8a68-6ae6-4ffa-9739-322075ab5958",
        "text": "I'm a static typing fan, but I generally would agree that dynamic typing is easier to get started with. A few reasons I can think of: 1) dynamic types \"just work\", i.e these languages tend to be forgiving that if you pass somewhat mismatched types (e.g. an int where a string is needed) it still does something sensible. In a sense, things are not always either typed correctly or incorrectly, there's a large space of situations in between that in static languages is an error and in dynamic ones it is benign. 2) You typically have less types to deal with, and they are more powerful, like dynamicly typed dictionaries are a swiss army knife of data structures. 3) Just purely the syntax of static typing is confusing to deal with, especially once you factor in genericity.. though some static languages like Lobster solve this issue :slightly_smiling_face: 4) get results quicker means more motivation in learning",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jrGJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm a static typing fan, but I generally would agree that dynamic typing is easier to get started with. A few reasons I can think of: 1) dynamic types \"just work\", i.e these languages tend to be forgiving that if you pass somewhat mismatched types (e.g. an int where a string is needed) it still does something sensible. In a sense, things are not always either typed correctly or incorrectly, there's a large space of situations in between that in static languages is an error and in dynamic ones it is benign. 2) You typically have less types to deal with, and they are more powerful, like dynamicly typed dictionaries are a swiss army knife of data structures. 3) Just purely the syntax of static typing is confusing to deal with, especially once you factor in genericity.. though some static languages like Lobster solve this issue "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " 4) get results quicker means more motivation in learning"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U79HM6726",
                    "U8A5MS6R1"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560962221.003000",
        "client_msg_id": "7db5b0f0-7b27-4a3a-b524-cc77c3850d17",
        "text": "in general: less primitives to learn",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D4u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in general: less primitives to learn"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1560962902.003300",
        "client_msg_id": "132854e5-7381-47a0-881e-3dcea90c0421",
        "text": "so my thoughts are explicit types are better because I'm working on a visual programming language. Users explicitly picking type gives them the \"best\" (given constraints of the UI system and production realities) UI to edit that type, rather than a text box.  It might be ok to make a variable dynamically typed and keep types only in constants, I'd have to come up with some interesting type conversion rules though",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qVW7t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so my thoughts are explicit types are better because I'm working on a visual programming language. Users explicitly picking type gives them the \"best\" (given constraints of the UI system and production realities) UI to edit that type, rather than a text box.  It might be ok to make a variable dynamically typed and keep types only in constants, I'd have to come up with some interesting type conversion rules though"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1560964033.003600",
        "client_msg_id": "6a2056af-70b7-41c4-b7a8-0f7cbdbb1749",
        "text": "<@UBSMEUXAA> my table includes this as the ‚ÄúType assisted editing‚Äù row where indeed static typing wins",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iXHG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " my table includes this as the ‚ÄúType assisted editing‚Äù row where indeed static typing wins"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1560965273.003900",
        "client_msg_id": "9710f2d9-de14-446f-8b65-ecf90bff0356",
        "text": "My language, Curv, is dynamically typed, because that makes the language simpler and more powerful. As Wouter has said.\n\nThe next version of Curv supports visual programming. I want to find a way to support context sensitive editing without losing the simplicity and power of dynamic typing. I don't need or want the ability to prove that an entire program is correct at compile time, I just want context sensitive editing in an IDE, and that is a less constrained problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y6p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My language, Curv, is dynamically typed, because that makes the language simpler and more powerful. As Wouter has said.\n\nThe next version of Curv supports visual programming. I want to find a way to support context sensitive editing without losing the simplicity and power of dynamic typing. I don't need or want the ability to prove that an entire program is correct at compile time, I just want context sensitive editing in an IDE, and that is a less constrained problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U79HM6726"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1560966361.004200",
        "edited": {
            "user": "UJUGB1XGD",
            "ts": "1560966412.000000"
        },
        "client_msg_id": "e396427b-f6c7-401d-84ad-f742027d373a",
        "text": "Answering my own question: <https:\/\/youtu.be\/OP6sJfxNFDc> has some thoughts on countering fork bombs without top-down OOM killer privileges\n(and <https:\/\/youtu.be\/YJRRu4dJnTI> has discussion on the spread patterns of computer viruses through modern systems, though not really mitigation)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560875589.451900",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "War vs Civil Writes - T2sday Updates #15",
                "title_link": "https:\/\/youtu.be\/OP6sJfxNFDc",
                "author_name": "The T2 Tile Project",
                "author_link": "https:\/\/www.youtube.com\/channel\/UC1M91QuLZfCzHjBMEKvIc-A",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/OP6sJfxNFDc\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: War vs Civil Writes - T2sday Updates #15",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/OP6sJfxNFDc?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/OP6sJfxNFDc",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/OP6sJfxNFDc"
            },
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "NMCS4ALL: Artificial Life (full version)",
                "title_link": "https:\/\/youtu.be\/YJRRu4dJnTI",
                "author_name": "Dave Ackley",
                "author_link": "https:\/\/www.youtube.com\/user\/DaveAckley",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/YJRRu4dJnTI\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: NMCS4ALL: Artificial Life (full version)",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/YJRRu4dJnTI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/YJRRu4dJnTI",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 2,
                "original_url": "https:\/\/youtu.be\/YJRRu4dJnTI"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iJru",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Answering my own question: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/OP6sJfxNFDc"
                            },
                            {
                                "type": "text",
                                "text": " has some thoughts on countering fork bombs without top-down OOM killer privileges\n(and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/YJRRu4dJnTI"
                            },
                            {
                                "type": "text",
                                "text": " has discussion on the spread patterns of computer viruses through modern systems, though not really mitigation)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UJFN50C00"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1560966381.004500",
        "client_msg_id": "7c6bb2b0-1891-47bc-8847-f2ad9ee66e29",
        "text": "I think for text languages, dynamic typing is better for all the reasons described. Static types are kind of like a mechanism that forces you to write your program in the shape of a proof. For someone just learning and hacking, \"formal correctness\" is probably not their primary goal; they just want to get something done, and correctness-proving is an impediment to that. Static types are great if you want a complex, maintainable and self-documenting system. That's kind of a different set of needs than those driven  by learning.\n\nBut I think that could flip for a visual system. When type annotation is done _for_ you by the environment, it could stop being a hoop for the programmer to jump through, and start being helpful information from the UI which tells you which affordances are available‚Äî i.e., \"you can't plug this thing into that thing.\" I'd sort of like to see a maybe Haskell-ish system in a visual environment, where the type annotations are as narrow as can be proved, and the affordances are as generous as can be allowed. Basically a system that stays out of your way unless it _knows_ there's trouble; the programming equivalent of an active accident-avoidance automotive system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/JlNB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think for text languages, dynamic typing is better for all the reasons described. Static types are kind of like a mechanism that forces you to write your program in the shape of a proof. For someone just learning and hacking, \"formal correctness\" is probably not their primary goal; they just want to get something done, and correctness-proving is an impediment to that. Static types are great if you want a complex, maintainable and self-documenting system. That's kind of a different set of needs than those driven  by learning.\n\nBut I think that could flip for a visual system. When type annotation is done "
                            },
                            {
                                "type": "text",
                                "text": "for",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you by the environment, it could stop being a hoop for the programmer to jump through, and start being helpful information from the UI which tells you which affordances are available‚Äî i.e., \"you can't plug this thing into that thing.\" I'd sort of like to see a maybe Haskell-ish system in a visual environment, where the type annotations are as narrow as can be proved, and the affordances are as generous as can be allowed. Basically a system that stays out of your way unless it "
                            },
                            {
                                "type": "text",
                                "text": "knows",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " there's trouble; the programming equivalent of an active accident-avoidance automotive system."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1560966771.005000",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1560966897.000000"
        },
        "client_msg_id": "e8480c2c-abfc-4898-85ed-99705a91eab0",
        "text": "While i know roughly what you mean you say dynamic types and explicitly types. I think its important to note that those terms aren't well defined. As those of you with my experience can probably elaborate on, type systems across languages vary greatly.\n\nI always hesitate to poke at this topic. As i know many has spent a lot longer on the on it. But to me, types just invert the problem, but don't necessarily make it more clear. It goes from, what does this function do, to what arguments does this take, which is a function of what this function does.  I think carefully done, this extra information (and constraint) can help users. Lots of times, it just seems to introduce another layer of incidentally complexity.\n\n if a dynamic language exposed all the oddness that occurs between numbers and operating systems then it would be very frustrating to \"learn\" basic data science, because the user didn't want a lesson on all that other stuff.\n\nLike all tools, context matters and deciding that at the language level along isn't capturing enough of it.\n\n We have to be more specific and deiced what we want them to learn about programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vd7Ed",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "While i know roughly what you mean you say dynamic types and explicitly types. I think its important to note that those terms aren't well defined. As those of you with my experience can probably elaborate on, type systems across languages vary greatly.\n\nI always hesitate to poke at this topic. As i know many has spent a lot longer on the on it. But to me, types just invert the problem, but don't necessarily make it more clear. It goes from, what does this function do, to what arguments does this take, which is a function of what this function does.  I think carefully done, this extra information (and constraint) can help users. Lots of times, it just seems to introduce another layer of incidentally complexity.\n\n if a dynamic language exposed all the oddness that occurs between numbers and operating systems then it would be very frustrating to \"learn\" basic data science, because the user didn't want a lesson on all that other stuff.\n\nLike all tools, context matters and deciding that at the language level along isn't capturing enough of it.\n\n We have to be more specific and deiced what we want them to learn about programming."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1560967141.005600",
        "client_msg_id": "ae5cd9a0-1f89-4f04-8137-630d23f5cd51",
        "text": "<@UJN1TAYEQ> what is \"context sensitive editing in an IDE\" links are fine :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fqM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " what is \"context sensitive editing in an IDE\" links are fine "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1560967842.006000",
        "client_msg_id": "cf7e54bb-cda3-4adf-bf9a-397c37156b41",
        "text": "<@U6FKVSVCK> those are my thoughts as well, I could be off though.  Basically if you think of types as puzzle pieces or lego pieces that don't fit when types do not match, I'm not sure if it'd be frustrating for users or empowering.  The alternative is to allow automatic type conversion, or I guess explicit type conversion where a new block\\piece is inserted that represents the type cast (blueprints does this in some cases)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bOJO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " those are my thoughts as well, I could be off though.  Basically if you think of types as puzzle pieces or lego pieces that don't fit when types do not match, I'm not sure if it'd be frustrating for users or empowering.  The alternative is to allow automatic type conversion, or I guess explicit type conversion where a new block\\piece is inserted that represents the type cast (blueprints does this in some cases)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1560968131.006300",
        "client_msg_id": "40afcae6-e081-456b-b4b2-9b019801580b",
        "text": "<@UBSMEUXAA> Yes, exactly‚Äî if you try to plug type A into type B, and there is a conversion available from A to B, that conversion is explicitly inserted for you so you can see it.\n\nIf you plug a float into an integer, there is an obvious thing you would want to happen. I think it is right to show the user that \"something is happening\" there by inserting an explicit type conversion operation, since problems might lurk inside of that operation that the user needs to understand. But I also think it would be wrong to explicitly stop the user from doing that. A well-designed user-facing system should defy the user's expectations as infrequently as possible.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VK4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " Yes, exactly‚Äî if you try to plug type A into type B, and there is a conversion available from A to B, that conversion is explicitly inserted for you so you can see it.\n\nIf you plug a float into an integer, there is an obvious thing you would want to happen. I think it is right to show the user that \"something is happening\" there by inserting an explicit type conversion operation, since problems might lurk inside of that operation that the user needs to understand. But I also think it would be wrong to explicitly stop the user from doing that. A well-designed user-facing system should defy the user's expectations as infrequently as possible."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1560969094.006600",
        "client_msg_id": "2adc22d8-5ea0-4806-84c8-61aa57e43b41",
        "text": "<@UH84GQ3CZ> While it‚Äôs true that type inference introduces complications, it‚Äôs at least in part a decision about how to handle errors, and how much effort to put into making errors helpful. I would say that using the term ‚Äúunification‚Äù in the context of a type error is not putting that effort in.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vTv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UH84GQ3CZ"
                            },
                            {
                                "type": "text",
                                "text": " While it‚Äôs true that type inference introduces complications, it‚Äôs at least in part a decision about how to handle errors, and how much effort to put into making errors helpful. I would say that using the term ‚Äúunification‚Äù in the context of a type error is not putting that effort in."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1560969935.006800",
        "client_msg_id": "a000e255-32f4-466f-8d36-c91138a851a2",
        "text": "What about a language \/ environment that supports both? You could start writing a program that heavily relies on runtime information (Python-like for example) and if you wanted, you could (assisted by the environment) provide additional information which could then unlock additional things like guaranteed type correctness or performance optimizations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgr√ºber",
            "display_name": "Felix Kohlgr√ºber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yo67v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What about a language \/ environment that supports both? You could start writing a program that heavily relies on runtime information (Python-like for example) and if you wanted, you could (assisted by the environment) provide additional information which could then unlock additional things like guaranteed type correctness or performance optimizations."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1560970663.007000",
        "client_msg_id": "0a6cf735-b49e-40a4-af3f-2ac29ac5384b",
        "text": "<@UF71PR58X>, if there are more ergonomic alternatives, please let me know!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RBt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF71PR58X"
                            },
                            {
                                "type": "text",
                                "text": ", if there are more ergonomic alternatives, please let me know!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1560970831.007200",
        "edited": {
            "user": "UJK8MKYAZ",
            "ts": "1560970852.000000"
        },
        "client_msg_id": "aa324ab3-0a4a-4f9b-9011-9dd618b93443",
        "text": "Nebo looks really sweet! I can imagine drawing flow diagrams\/state charts\/etc. in that and compiling it to a real system. I think in my dream world one could make simple UI‚Äôs with a big tablet, an equivalent of the Apple Pencil that way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "728Qu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nebo looks really sweet! I can imagine drawing flow diagrams\/state charts\/etc. in that and compiling it to a real system. I think in my dream world one could make simple UI‚Äôs with a big tablet, an equivalent of the Apple Pencil that way."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1560970909.007500",
        "client_msg_id": "d8b9ef0a-0548-40b0-a988-c768e2b65f5f",
        "text": "Isn't that the premise of gradual typing?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CUt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't that the premise of gradual typing?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1560971028.007700",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1560971182.000000"
        },
        "client_msg_id": "12eace12-5811-40d3-8613-fe58e43ca09f",
        "text": "That was sort of my point, the question of which to use for teaching \"dynamic vs static\", begs the question, what are you trying to teach.\n\nMy brother wanted to build a toy application in Haskell, he ended up just learning a lot about how numbers work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sEZzX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That was sort of my point, the question of which to use for teaching \"dynamic vs static\", begs the question, what are you trying to teach.\n\nMy brother wanted to build a toy application in Haskell, he ended up just learning a lot about how numbers work."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1560972315.008000",
        "client_msg_id": "04974443-86b7-4105-9b08-7b873dea1e19",
        "text": "My current opinion is that dynamic typing is great for a single programmer making a relatively small program (say 100 to 1000 lines). After that static typing wins. I love dynamic typing when I'm just hacking a small something together like a small animation on a webpage but past a certain size I get lost in my own code. Types basically add computer checkable documentation which is useful both for myself and collaborating.\n\nTo take dynamic to an extreme. Today, hacking something small, I started with something like this (JavaScript)\n\n```\nclass Foo {\n  constructor(width, height)  {\n     this.width = width;\n     this.height = height;\n  }\n}\n```\n\nI then added more parameters and decided I'd rather pass in an object so I can add more and more parameters\n\n```\nclass Foo {\n  constructor(options)  {\n     this.width = options.width;\n     this.height = options.height;\n     this.speed = options.speed;\n     this.weight = options.weight;\n  }\n}\n```\n\nbut I realized I can just do this\n\n```\nclass Foo {\n  constructor(options)  {\n     Object.assign(this, options);\n  }\n}\n```\n\nit does the same thing effectively. Yes I know it's dangerous and evil and I'll pull it out but it's tempting because I can add more and more parameters and don't have to write any new code to accept them. But, there is now ZERO documentation :sob:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EEyv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My current opinion is that dynamic typing is great for a single programmer making a relatively small program (say 100 to 1000 lines). After that static typing wins. I love dynamic typing when I'm just hacking a small something together like a small animation on a webpage but past a certain size I get lost in my own code. Types basically add computer checkable documentation which is useful both for myself and collaborating.\n\nTo take dynamic to an extreme. Today, hacking something small, I started with something like this (JavaScript)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "class Foo {\n  constructor(width, height)  {\n     this.width = width;\n     this.height = height;\n  }\n}\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI then added more parameters and decided I'd rather pass in an object so I can add more and more parameters\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "class Foo {\n  constructor(options)  {\n     this.width = options.width;\n     this.height = options.height;\n     this.speed = options.speed;\n     this.weight = options.weight;\n  }\n}\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nbut I realized I can just do this\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "class Foo {\n  constructor(options)  {\n     Object.assign(this, options);\n  }\n}\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nit does the same thing effectively. Yes I know it's dangerous and evil and I'll pull it out but it's tempting because I can add more and more parameters and don't have to write any new code to accept them. But, there is now ZERO documentation "
                            },
                            {
                                "type": "emoji",
                                "name": "sob",
                                "unicode": "1f62d"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1560972366.008200",
        "client_msg_id": "e0c40a44-aa8c-4714-b6e0-d66de946c2c1",
        "text": "I mean _ideally_ we'd have things other than [sliding pictures under glass](<http:\/\/worrydream.com\/ABriefRantOnTheFutureOfInteractionDesign\/>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "83xqW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mean "
                            },
                            {
                                "type": "text",
                                "text": "ideally",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " we'd have things other than [sliding pictures under glass]("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/worrydream.com\/ABriefRantOnTheFutureOfInteractionDesign\/"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1560973579.008500",
        "edited": {
            "user": "UC6997THT",
            "ts": "1560973763.000000"
        },
        "client_msg_id": "20048ec4-7022-408c-a235-f22921592d49",
        "text": "Seeing Code Execute - Useful in the real world or only in demos?\n\nI've seen the Learnable Programming - Bret Victor paper and all the examples. It looks great but impossible to actually implement in reality, at least as far as I can tell there is no way for a program to divine what kind of UI\/UX\/Display is best for a given piece of code so while the page and examples are hugely inspiring I can't see how the ideas can actually be applied to actual code.\n\nSimilarly there are other systems that try to show state over time. I've only ever seen small demos. In real code I work with 16million voxels or 300k vertices and computing matrixes for 2037 scene node graphs. My impression is that pretty much every code execution visualizer I've seen is overwhelmed by anything but the very simplest examples. Even Chrome's dev tools try to highlight all the values on every line of code but of course those values are just from one iteration and yet they are already pretty cluttered.\n\nSo, what tools have you used in actual production code that stick out to see execution?\n\nMaybe the idea is these tools only work with small data and small iterations so you use them to debug some small subset of a problem and once you've confirmed it works then you put your working code back into your real app with real data.\n\nThe thing for me though is that the hurdle of pairing down my app into something small enough to use in one of these tools is really really high. I basically have to not be able to solve the issue any other way before I'll finally spend an hour or 4 building a MCVE to run in a visual execution tool.\n\nEven if it's not big data or big iterations it's big code. I work on some million line program and the code execution visualization environment just can't handle it so I'm back to the hurdle of extracting enough code to make an MCVE which is usually too big a hurdle.\n\nIs that other people's experience?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "reply_count": 33,
        "reply_users_count": 10,
        "latest_reply": "1561218949.225800",
        "reply_users": [
            "UCUSW7WVD",
            "UJ6LDMMN0",
            "UKJGU23KP",
            "UE1JQM9HQ",
            "UHDQ62M4P",
            "U79HM6726",
            "UBSMEUXAA",
            "UDQBTJ211",
            "UFS53UWE5",
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1560974728.009300"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1560976176.009700"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1560976509.010000"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1560976676.010300"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1560976705.010500"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1560976746.010700"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1560976747.010900"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1560976806.011100"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1560976807.011300"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1560976837.011500"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1560976844.011700"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1560976859.011900"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1560976889.012300"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1560976916.012500"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1560976935.012700"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1560976941.012900"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1560977014.013100"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1560977138.013300"
            },
            {
                "user": "U79HM6726",
                "ts": "1560978691.016500"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1560981283.016700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1560981844.017000"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1560986045.017500"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1560987205.020900"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1560987268.021100"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1560987358.021400"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1560987501.021600"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1560987614.021800"
            },
            {
                "user": "UFS53UWE5",
                "ts": "1560988719.022300"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1561005507.029900"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1561006048.030100"
            },
            {
                "user": "UFS53UWE5",
                "ts": "1561131039.162600"
            },
            {
                "user": "UFS53UWE5",
                "ts": "1561131257.162900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1561218949.225800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lF6L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seeing Code Execute - Useful in the real world or only in demos?\n\nI've seen the Learnable Programming - Bret Victor paper and all the examples. It looks great but impossible to actually implement in reality, at least as far as I can tell there is no way for a program to divine what kind of UI\/UX\/Display is best for a given piece of code so while the page and examples are hugely inspiring I can't see how the ideas can actually be applied to actual code.\n\nSimilarly there are other systems that try to show state over time. I've only ever seen small demos. In real code I work with 16million voxels or 300k vertices and computing matrixes for 2037 scene node graphs. My impression is that pretty much every code execution visualizer I've seen is overwhelmed by anything but the very simplest examples. Even Chrome's dev tools try to highlight all the values on every line of code but of course those values are just from one iteration and yet they are already pretty cluttered.\n\nSo, what tools have you used in actual production code that stick out to see execution?\n\nMaybe the idea is these tools only work with small data and small iterations so you use them to debug some small subset of a problem and once you've confirmed it works then you put your working code back into your real app with real data.\n\nThe thing for me though is that the hurdle of pairing down my app into something small enough to use in one of these tools is really really high. I basically have to not be able to solve the issue any other way before I'll finally spend an hour or 4 building a MCVE to run in a visual execution tool.\n\nEven if it's not big data or big iterations it's big code. I work on some million line program and the code execution visualization environment just can't handle it so I'm back to the hurdle of extracting enough code to make an MCVE which is usually too big a hurdle.\n\nIs that other people's experience?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1560973823.008700",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1560973851.000000"
        },
        "client_msg_id": "1117c136-4245-40ce-bcca-22ad25b959e7",
        "text": "I long ago decided that for my language(s), \"type\" will simply mean \"syntax\" or \"match\", and all \"types\" are in the eye of the beholder: when doing a rewrite, if data matches a pattern, are in a given set or meets some condition, then that can trigger the rewrite. Examples of patterns are `number`, `temperature`, `[ab].*d`, `{1 30 93 }` or `&lt; 100`. This extends beyond simple values up to the shape of more complex structures like hash\/map\/object and list\/array.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aRNt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I long ago decided that for my language(s), \"type\" will simply mean \"syntax\" or \"match\", and all \"types\" are in the eye of the beholder: when doing a rewrite, if data matches a pattern, are in a given set or meets some condition, then that can trigger the rewrite. Examples of patterns are "
                            },
                            {
                                "type": "text",
                                "text": "number",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "temperature",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "[ab].*d",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "{1 30 93 }",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "< 100",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". This extends beyond simple values up to the shape of more complex structures like hash\/map\/object and list\/array."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1560973928.009000",
        "client_msg_id": "a0d9b1df-562c-4222-b2e8-a17d296268fb",
        "text": "the UI can detect common shapes or flags in data and offer autocompletion or highlight apparent discrepancies",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MleOD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the UI can detect common shapes or flags in data and offer autocompletion or highlight apparent discrepancies"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1560974728.009300",
        "client_msg_id": "ff427467-6ebb-4e3e-ad92-c5727abb94d6",
        "text": "I use a zoomable UI over traces of domain-specific events. I think it scales pretty nicely for single-threaded programs, and you get all the benefits of time-travel debugging. Try out the instructions at the bottom of <https:\/\/git.sr.ht\/~akkartik\/basic-whitebox-test>. Should be pretty trivial to get running. If that piques your interest I can point you at a larger trace that's more interesting to play with. Also happy to do a demo sometime.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cWf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use a zoomable UI over traces of domain-specific events. I think it scales pretty nicely for single-threaded programs, and you get all the benefits of time-travel debugging. Try out the instructions at the bottom of "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/git.sr.ht\/~akkartik\/basic-whitebox-test"
                            },
                            {
                                "type": "text",
                                "text": ". Should be pretty trivial to get running. If that piques your interest I can point you at a larger trace that's more interesting to play with. Also happy to do a demo sometime."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1560976176.009700",
        "client_msg_id": "89b53312-7e41-413a-b398-15b1e726804a",
        "text": "I have no experience on this, sorry. But I guess some kind of \"moldable debugger\" can help. When you stop somewhere in the code maybe it can help you show your data in way that make sense in your context. When I say help you, is that it gives you some tools you can use to very quickly set some visualisations that help you understand the logic under the code. What I describe doesn't actually exist as a debugger for any code, though (well, I guess. Please tell me I am wrong!). But this approach of \"modlability\", i.e. helping the developper understand her code by letting her quickly create visualisation, and the term itself, come from the GlamorousToolkit by <@UE1JQM9HQ> (\"Glamorous Toolkit is the moldable integrated development environment\").",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=R2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have no experience on this, sorry. But I guess some kind of \"moldable debugger\" can help. When you stop somewhere in the code maybe it can help you show your data in way that make sense in your context. When I say help you, is that it gives you some tools you can use to very quickly set some visualisations that help you understand the logic under the code. What I describe doesn't actually exist as a debugger for any code, though (well, I guess. Please tell me I am wrong!). But this approach of \"modlability\", i.e. helping the developper understand her code by letting her quickly create visualisation, and the term itself, come from the GlamorousToolkit by "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": " (\"Glamorous Toolkit is the moldable integrated development environment\")."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1560976509.010000",
        "edited": {
            "user": "UKJGU23KP",
            "ts": "1560976602.000000"
        },
        "client_msg_id": "b75c3f51-8cd4-4381-be66-b2bc786862e6",
        "text": "I‚Äôve been thinking about identifying patterns in code recently, and I wonder if the sweet spot might be UIs that help you visualize specific aspects of execution. For instance, I built a tool for showing the graph of a certain type of object in our system. It was bespoke (and also not integrated with our debugger), but maybe an environment could have easy hooks to say ‚Äútreat objects of this type as a graph (with edges being field x), and show how it evolves‚Äù.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v9n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I‚Äôve been thinking about identifying patterns in code recently, and I wonder if the sweet spot might be UIs that help you visualize specific aspects of execution. For instance, I built a tool for showing the graph of a certain type of object in our system. It was bespoke (and also not integrated with our debugger), but maybe an environment could have easy hooks to say ‚Äútreat objects of this type as a graph (with edges being field x), and show how it evolves‚Äù."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1560976676.010300",
        "client_msg_id": "eb111d47-e94d-44cf-9d6e-c402febc914b",
        "text": "Indeed, I believe that an effective environment must start from the context of the problem and must allow the developer to tailor the views for that context.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FX49z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Indeed, I believe that an effective environment must start from the context of the problem and must allow the developer to tailor the views for that context."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UDQBTJ211"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1560976705.010500",
        "client_msg_id": "59bb2493-44ed-474c-970e-c416cd7c9c3f",
        "text": "When approached like this, problems that are difficult in general, become attainable in context.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u9t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When approached like this, problems that are difficult in general, become attainable in context."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1560976746.010700",
        "client_msg_id": "76a77896-4180-442d-ae66-ef562579b754",
        "text": "for example, tracking and showing all executions is a hard problem. tracking specifics and showing in a dedicated way only those is much simpler.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PHk3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for example, tracking and showing all executions is a hard problem. tracking specifics and showing in a dedicated way only those is much simpler."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560976747.010900",
        "client_msg_id": "4c535aab-f48a-4ba0-acc2-2ecb2027c8f4",
        "text": "I agree, when I see these demos, I think, that's cute, but how does it scale to the game engine or compiler I am debugging? I haven't seen an answer so far",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eUrE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree, when I see these demos, I think, that's cute, but how does it scale to the game engine or compiler I am debugging? I haven't seen an answer so far"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560976806.011100",
        "client_msg_id": "b9946eb8-f014-4533-8b40-14f34270eac6",
        "text": "The problem with solutions for simple cases is that simple cases are exactly the cases where I don't have a problem :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2=aoD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The problem with solutions for simple cases is that simple cases are exactly the cases where I don't have a problem "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1560976807.011300",
        "client_msg_id": "9f6a68d2-13fd-44c1-b0ea-0f6039cf2255",
        "text": "The simplest way to scale is to go specific.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uPgE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The simplest way to scale is to go specific."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1560976837.011500",
        "client_msg_id": "eb040dec-194f-4e28-9120-9e8c8d64dfb1",
        "text": "I did not say simple cases. I said contextual cases. It just turns out that if you start from the context, the problem is much simpler, too.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z0PP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I did not say simple cases. I said contextual cases. It just turns out that if you start from the context, the problem is much simpler, too."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560976844.011700",
        "client_msg_id": "62536378-c4d4-4f8b-aa3a-d79da96b77d7",
        "text": "but that's a lot of work.. especially if the total amount of data is large",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jtz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but that's a lot of work.. especially if the total amount of data is large"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1560976859.011900",
        "edited": {
            "user": "UE1JQM9HQ",
            "ts": "1560976864.000000"
        },
        "client_msg_id": "f01a14e9-5e0b-4232-aa01-caf25584ab3e",
        "text": "what is a lot of work?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IPd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what is a lot of work?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560976889.012300",
        "client_msg_id": "4c92fb31-5f27-46d0-9315-d47eb4a7fbd8",
        "text": "I was speaking of simple cases in general, not in reference to your past comments",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rVCpe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was speaking of simple cases in general, not in reference to your past comments"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1560976916.012500",
        "client_msg_id": "1ef0822e-a65d-4432-ad08-17be22c5de92",
        "text": "ok",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oKO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560976935.012700",
        "client_msg_id": "40b4eb33-a18b-421c-a700-b7163a54b5a0",
        "text": "making visualizers specific to a particular program or problem domain is a lot of work",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XQlF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "making visualizers specific to a particular program or problem domain is a lot of work"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1560976941.012900",
        "client_msg_id": "5c6f3a90-d0e2-4954-95e9-e29a80e8af0c",
        "text": "I do agree that many demos that get people excited are mostly show and have little practical value",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dOM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do agree that many demos that get people excited are mostly show and have little practical value"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1560977014.013100",
        "client_msg_id": "e9a385f5-228e-4ccc-bdc0-8b1bf36793c6",
        "text": "it used to be a lot of work. However, I think it does not have to be a lot of work. In fact, I think that in minutes you should be able to get a view that tells you more than you knew before you built it. That is the core idea behind moldable development.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cEa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it used to be a lot of work. However, I think it does not have to be a lot of work. In fact, I think that in minutes you should be able to get a view that tells you more than you knew before you built it. That is the core idea behind moldable development."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1560977138.013300",
        "edited": {
            "user": "UE1JQM9HQ",
            "ts": "1560977143.000000"
        },
        "client_msg_id": "0abf2ed7-7601-4565-a49c-bb06d26eecde",
        "text": "Having practiced this since some years now, my little experience tells me that it can be practical. In fact, I found no significant case where it was not more practical than the alternative of not building the tool.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I\/m8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Having practiced this since some years now, my little experience tells me that it can be practical. In fact, I found no significant case where it was not more practical than the alternative of not building the tool."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1560977977.013600",
        "client_msg_id": "0de15e7e-e530-42a0-818c-82fcee26c42a",
        "text": "I want a good portable (smaller than a laptop) tool for writing code, probably mostly small games and creative coding experiments.\n\nPocketChip (RIP, <https:\/\/www.amazon.com\/Pocket-C-H-I-P-Portable-Computer-Thing\/dp\/B07HHNWQW6>) was close to that for me, but I didn't love the hardware.  Might be able to modifying the one I have to get it where I want to be.  Looking at M5Stack (especially FACES pocket computer) looks promising.  Maybe I should buy one of those...  I guess what a really want is a programmable Game Boy or Nintendo DS:slightly_smiling_face:, which is a different experience than coding on an iPad.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DRgQ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want a good portable (smaller than a laptop) tool for writing code, probably mostly small games and creative coding experiments.\n\nPocketChip (RIP, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.com\/Pocket-C-H-I-P-Portable-Computer-Thing\/dp\/B07HHNWQW6"
                            },
                            {
                                "type": "text",
                                "text": ") was close to that for me, but I didn't love the hardware.  Might be able to modifying the one I have to get it where I want to be.  Looking at M5Stack (especially FACES pocket computer) looks promising.  Maybe I should buy one of those...  I guess what a really want is a programmable Game Boy or Nintendo DS"
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ", which is a different experience than coding on an iPad."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1560978025.013800",
        "client_msg_id": "731c14d1-f12a-4783-9103-22ba3d2a7597",
        "text": "Regarding MyScript, for some of my VR experiments I wanted to use the MyScript API (or a simpler low latency gesture recognizer, like <https:\/\/depts.washington.edu\/madlab\/proj\/dollar\/qdollar.html>) and hook it up to an embedded interpreter.  This would allow for executable white boarding...  The same idea would apply to a tablet code editor though.   Never got around to having the time to try it out though",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R\/ffl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Regarding MyScript, for some of my VR experiments I wanted to use the MyScript API (or a simpler low latency gesture recognizer, like "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/depts.washington.edu\/madlab\/proj\/dollar\/qdollar.html"
                            },
                            {
                                "type": "text",
                                "text": ") and hook it up to an embedded interpreter.  This would allow for executable white boarding...  The same idea would apply to a tablet code editor though.   Never got around to having the time to try it out though"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1560978172.014000",
        "client_msg_id": "7dd71d3f-e84f-4362-97f5-ec90eb1cf9d3",
        "text": "<@UC6997THT> Can i suggest that the real culprit there is that:\n\n1. Object assign seems to mutate the both the this target and the source. Even if the source is a const (really js?).\n2. The properties your assigning probably don't need a custom type\/class. You can keep that information by itself and just build functions to handle it. The key \"weight\" is self documenting, if you want to group that information together variable assignment can do this.\n\nThe HashMap type has the advantage for holding data here, because it has an API that other users understand, which solves your documentation issue. It also doesn't constrain the users of that information.\n\nI think the general issue with using a HashMap here has more to do with the fact its mutable and that people mutate it, then how it behaves in terms of holding information.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G39a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": " Can i suggest that the real culprit there is that:\n\n1. Object assign seems to mutate the both the this target and the source. Even if the source is a const (really js?).\n2. The properties your assigning probably don't need a custom type\/class. You can keep that information by itself and just build functions to handle it. The key \"weight\" is self documenting, if you want to group that information together variable assignment can do this.\n\nThe HashMap type has the advantage for holding data here, because it has an API that other users understand, which solves your documentation issue. It also doesn't constrain the users of that information.\n\nI think the general issue with using a HashMap here has more to do with the fact its mutable and that people mutate it, then how it behaves in terms of holding information."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1560978691.016500",
        "client_msg_id": "9B24C70C-7B3F-41B0-8C9F-9B90B154C07B",
        "text": "That‚Äôs what debuggers do, and there‚Äôs no doubt that it‚Äôs invaluable to a lot of real world developers. People use debuggers a lot despite them being clunky. Something more friendly will be extremely useful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GguH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That‚Äôs what debuggers do, and there‚Äôs no doubt that it‚Äôs invaluable to a lot of real world developers. People use debuggers a lot despite them being clunky. Something more friendly will be extremely useful."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1560981283.016700",
        "client_msg_id": "a6f09bea-5b96-462e-ac44-817b3a249121",
        "text": "I recall twelve years ago, when I was working on an algorithm which core data was a 2D grid (like an image). I had some bugs and my debugger (Visual Studio) only shows me arrays of values which helped in nothing to find problems. Obviously I would prefer some kind of pixels display. It was really hard to spot problems so I decided to see if I can extend the debugger to actually do that. In fact Visual Studio allowed that! So I take the time to develop it. I guess it took me a bit more time than reasonnable. But 1\/ it was fun to do it and 2\/ once I had this tool debugging was way less annoying. Since then I dream of systems where I can easily see  my data in my program the way I find the most expressive for the problem at hand.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DLf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I recall twelve years ago, when I was working on an algorithm which core data was a 2D grid (like an image). I had some bugs and my debugger (Visual Studio) only shows me arrays of values which helped in nothing to find problems. Obviously I would prefer some kind of pixels display. It was really hard to spot problems so I decided to see if I can extend the debugger to actually do that. In fact Visual Studio allowed that! So I take the time to develop it. I guess it took me a bit more time than reasonnable. But 1\/ it was fun to do it and 2\/ once I had this tool debugging was way less annoying. Since then I dream of systems where I can easily see  my data in my program the way I find the most expressive for the problem at hand."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE1JQM9HQ",
                    "UHWC9PXBL",
                    "UBSMEUXAA",
                    "UA14TGLTC",
                    "U79HM6726"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1560981844.017000",
        "client_msg_id": "82d316ea-7e86-451a-9165-e52ac09e4e58",
        "text": "At work I have a couple of helpers for a Java codebase that dump a graph to stdout in GraphViz format. Then I copy it out of the console window, paste it into a file, run `dot` on it and open the resulting `.jpg` file. Super useful in spite of being so klunky.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LnX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At work I have a couple of helpers for a Java codebase that dump a graph to stdout in GraphViz format. Then I copy it out of the console window, paste it into a file, run "
                            },
                            {
                                "type": "text",
                                "text": "dot",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on it and open the resulting "
                            },
                            {
                                "type": "text",
                                "text": ".jpg",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " file. Super useful in spite of being so klunky."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE1JQM9HQ",
                    "UA14TGLTC",
                    "U79HM6726"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1560986045.017500",
        "client_msg_id": "4ad46700-5a43-4a27-97fd-6341b3dab520",
        "text": "<@UFS53UWE5> any thoughts? I know you were experimentinf with a learnable programming debugger with a focus on performance",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PjxPa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFS53UWE5"
                            },
                            {
                                "type": "text",
                                "text": " any thoughts? I know you were experimentinf with a learnable programming debugger with a focus on performance"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1560986752.020600",
        "client_msg_id": "B3D94747-746C-4A84-8175-849A7BF6221F",
        "text": "<@UBSMEUXAA> oof you're reactivating my urge to spend two years in the woods writing an embedded os for a tiny little computer I can carry around. on the Gameboy front‚Äîdid you see the tiledtext video I posted a while ago? <https:\/\/youtu.be\/tztmgCcZaM4> coding interface for an Xbox controller ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Tiled Text Engine Demo",
                "title_link": "https:\/\/youtu.be\/tztmgCcZaM4",
                "author_name": "Weston Beecroft",
                "author_link": "https:\/\/www.youtube.com\/user\/someonecb",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/tztmgCcZaM4\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Tiled Text Engine Demo",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/tztmgCcZaM4?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/tztmgCcZaM4",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/tztmgCcZaM4"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f+d+N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " oof you're reactivating my urge to spend two years in the woods writing an embedded os for a tiny little computer I can carry around. on the Gameboy front‚Äîdid you see the tiledtext video I posted a while ago? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/tztmgCcZaM4"
                            },
                            {
                                "type": "text",
                                "text": " coding interface for an Xbox controller"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1560987205.020900",
        "client_msg_id": "385ddca9-2fbb-47c4-aca4-12eb31d7a707",
        "text": "I am working on a Python editor at the moment which is sort of \"moldable\" in that the user writes their own visualizations using \"metacode\" which can arbitrarily query the execution of the \"maincode\". My project is only for toy problems at the moment but I think in theory it could scale.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bo\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am working on a Python editor at the moment which is sort of \"moldable\" in that the user writes their own visualizations using \"metacode\" which can arbitrarily query the execution of the \"maincode\". My project is only for toy problems at the moment but I think in theory it could scale."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1560987268.021100",
        "client_msg_id": "e45ae7ba-8fef-46d4-8d32-32511b998931",
        "text": "Demo of the prototype here <https:\/\/www.youtube.com\/watch?v=9XPE4uT0AdE>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Algojammer demo",
                "title_link": "https:\/\/www.youtube.com\/watch?v=9XPE4uT0AdE",
                "author_name": "ChrisKnott",
                "author_link": "https:\/\/www.youtube.com\/user\/ChrisKnott",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/9XPE4uT0AdE\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Algojammer demo",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/9XPE4uT0AdE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=9XPE4uT0AdE",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=9XPE4uT0AdE"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GkB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Demo of the prototype here "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=9XPE4uT0AdE"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1560987358.021400",
        "client_msg_id": "69962f43-1db0-4fb1-a1a2-74a410629ee9",
        "text": "Current code here - <https:\/\/github.com\/ChrisKnott\/Algojammer\/tree\/electron_rewrite> - in this new version the main \"timeline\" visualisation is written with the same \"metacode\" system as users have access to (in the prototype it was kind of a special case)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a8K2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Current code here - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/ChrisKnott\/Algojammer\/tree\/electron_rewrite"
                            },
                            {
                                "type": "text",
                                "text": " - in this new version the main \"timeline\" visualisation is written with the same \"metacode\" system as users have access to (in the prototype it was kind of a special case)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1560987501.021600",
        "client_msg_id": "4aefc629-493e-4d1d-a225-103661ccdb84",
        "text": "The general idea of writing your own, context specific, visualisations is popular in the games industry because you have a \"canvas\" right there. If you look at dev builds of games they are always doing things like colouring objects to show their internal state (AI state etc).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NCj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The general idea of writing your own, context specific, visualisations is popular in the games industry because you have a \"canvas\" right there. If you look at dev builds of games they are always doing things like colouring objects to show their internal state (AI state etc)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1560987614.021800",
        "client_msg_id": "cd9d3b32-730f-4b0a-8f17-fdd110fc9e86",
        "text": "If you couple this with omniscient debugging then you can hopefully do something similar for more abstract programming. Not succeeded too much so far personally but I think it is territory that has not been explored much so far so I encourage others to try it out",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Ic",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you couple this with omniscient debugging then you can hopefully do something similar for more abstract programming. Not succeeded too much so far personally but I think it is territory that has not been explored much so far so I encourage others to try it out"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1560988550.022100",
        "client_msg_id": "54dfa7c8-4476-459b-8213-730c1200754b",
        "text": "<@UJNJQD2AC> \"Context sensitive editing in an IDE\" means, informally: (1) Editing a literal constant using a domain specific editor (eg, edit a colour value using a colour picker). (2) Context sensitive help for filling in a hole in an incomplete program (eg, an argument expression that you haven't entered yet).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dpp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJNJQD2AC"
                            },
                            {
                                "type": "text",
                                "text": " \"Context sensitive editing in an IDE\" means, informally: (1) Editing a literal constant using a domain specific editor (eg, edit a colour value using a colour picker). (2) Context sensitive help for filling in a hole in an incomplete program (eg, an argument expression that you haven't entered yet)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFS53UWE5",
        "type": "message",
        "ts": "1560988719.022300",
        "client_msg_id": "9a9bc37f-e21e-436f-81bb-64383f6a5d8b",
        "text": "There's two things here, revolving around performance for \"whole program debugging\". (I don't like the concept of 'time traveling' for reasons you can ask me about elsewhere).\n\nThe first is the storage layer, usually some sort of database that keeps information from the program across its execution. In terms of performance the key aspect here is generally memory usage, and choosing what to store. Consider that if you are debugging a pure language, you might not need to store everything! Certain values could be computed on the fly, assuming you have determinism. Procedural languages must store much more.\n\nThe second aspect, which is more commonly talked about, is the visualization of this dataset. This is kept performant in the same ways you would keep any other database querying tool performant! Showing partial slices of the database, allowing queries for just the information you need, etc. The big key here is to treat it as a lightweight view on top of the datastore.\n\nIf you want a *fantastic* example of a tool that is used by millions, supports full time backwards\/forwards traversal, allows queries of the full-program data at any point in time, just look at WinDBG. You can record the run of any program and then write LINQ queries against the program state, memory, etc. And on top of that, it's been around for years with these features.\n\nThe main issue with a lot of the tools that get built is that they start from the second point, with a UI, and work backwards without separating out the underlying database. Without that separation, it's extraordinarily difficult to keep memory and performance under control.\n\nWinDBG has a fairly awful interface, but you could very easily imagine building a React app that sat on top of it, rendering a variety of queries against the program's execution state.\n\nAside: I'm working on a tool like this, for a perfectly pure\/deterministic language, where to build the program you act directly on the 'whole program' execution itself. My goal is to remove the run\/debug loop, making running and debugging the same operation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a88832bbbfe7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-12\/1359700849458_a88832bbbfe7c26df530_72.jpg",
            "first_name": "John",
            "real_name": "John Austin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kleptine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yONev",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's two things here, revolving around performance for \"whole program debugging\". (I don't like the concept of 'time traveling' for reasons you can ask me about elsewhere).\n\nThe first is the storage layer, usually some sort of database that keeps information from the program across its execution. In terms of performance the key aspect here is generally memory usage, and choosing what to store. Consider that if you are debugging a pure language, you might not need to store everything! Certain values could be computed on the fly, assuming you have determinism. Procedural languages must store much more.\n\nThe second aspect, which is more commonly talked about, is the visualization of this dataset. This is kept performant in the same ways you would keep any other database querying tool performant! Showing partial slices of the database, allowing queries for just the information you need, etc. The big key here is to treat it as a lightweight view on top of the datastore.\n\nIf you want a "
                            },
                            {
                                "type": "text",
                                "text": "fantastic",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " example of a tool that is used by millions, supports full time backwards\/forwards traversal, allows queries of the full-program data at any point in time, just look at WinDBG. You can record the run of any program and then write LINQ queries against the program state, memory, etc. And on top of that, it's been around for years with these features.\n\nThe main issue with a lot of the tools that get built is that they start from the second point, with a UI, and work backwards without separating out the underlying database. Without that separation, it's extraordinarily difficult to keep memory and performance under control.\n\nWinDBG has a fairly awful interface, but you could very easily imagine building a React app that sat on top of it, rendering a variety of queries against the program's execution state.\n\nAside: I'm working on a tool like this, for a perfectly pure\/deterministic language, where to build the program you act directly on the 'whole program' execution itself. My goal is to remove the run\/debug loop, making running and debugging the same operation."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDQBTJ211",
                    "UBSMEUXAA",
                    "U79HM6726",
                    "UJ6LDMMN0"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1560988873.022500",
        "client_msg_id": "efac2391-9254-48f4-b66d-47e1b96121b6",
        "text": "I didn't see that but it's great.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wo6z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I didn't see that but it's great."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1560988898.022700",
        "client_msg_id": "47136fa4-04fe-4088-880d-9fff0437a7cc",
        "text": "I recently saw a similar prototype for controller based text input on hacker news",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xBgy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I recently saw a similar prototype for controller based text input on hacker news"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1560988899.022900",
        "client_msg_id": "a354678e-4d32-4ae3-88f3-f85e42e22406",
        "text": "<https:\/\/www.youtube.com\/watch?v=Do0fUWME0Mw>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "d-Board",
                "title_link": "https:\/\/www.youtube.com\/watch?v=Do0fUWME0Mw",
                "author_name": "RocketHands",
                "author_link": "https:\/\/www.youtube.com\/user\/RocketHands",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/Do0fUWME0Mw\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: d-Board",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/Do0fUWME0Mw?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=Do0fUWME0Mw",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=Do0fUWME0Mw"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Um5ET",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=Do0fUWME0Mw"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1560989058.023200",
        "client_msg_id": "2f773ea9-7cd5-4776-87b0-c15d502de921",
        "text": "But it really only addresses text entry, a lot of programming is not typing, but navigating, copy and pasting, and other structure edits to text",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560881542.460600",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YFDn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But it really only addresses text entry, a lot of programming is not typing, but navigating, copy and pasting, and other structure edits to text"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1560989227.023400",
        "client_msg_id": "1c93de28-81df-46d5-a989-b217e5fb2ec6",
        "text": "<@UJNJQD2AC> Static type systems look like a tar pit: you start adding static typing to your language, and you come out the other end with GADTs and dependent types, and 98% of your language complexity is in the type system. But the goal of \"context sensitive editing\" in my visual language is to make things easier and more convenient for non-technical users. I don't want to go off on a tangent playing with type systems, I want to directly solve the problem of providing context sensitive assistance to a user in a visual programming environment in the simplest way possible.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HsH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJNJQD2AC"
                            },
                            {
                                "type": "text",
                                "text": " Static type systems look like a tar pit: you start adding static typing to your language, and you come out the other end with GADTs and dependent types, and 98% of your language complexity is in the type system. But the goal of \"context sensitive editing\" in my visual language is to make things easier and more convenient for non-technical users. I don't want to go off on a tangent playing with type systems, I want to directly solve the problem of providing context sensitive assistance to a user in a visual programming environment in the simplest way possible."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA",
                    "UJNJQD2AC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1560990056.023700",
        "client_msg_id": "cd41cd41-20b5-497b-96fc-76be94c4822e",
        "text": "<@UJNJQD2AC> Curv is a DSL for procedurally generated computer graphics. My first step was to copy a feature from OpenSCAD and Fragmentarium: you can annotate a variable definition with a \"picker expression\", which specifies a graphical value picker to use for editing the contents of this local variable. For example, `slider(1,10)` constrains the local variable to be a floating point number between 1 and 10, and displays a slider widget for changing the value. Or, `scale_picker` treats the variable as a \"scaling factor\": it is constrained to be a floating point number &gt; 0 and &lt; infinity, and a kind of logarithmic slider is used to change the value.\n\nEven though picker expressions constrain the value of a variable, these value constraints don't necessarily correspond to types in any statically typed language that I know. So it's not clear that a static type system is even the right tool for the job.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/5jB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJNJQD2AC"
                            },
                            {
                                "type": "text",
                                "text": " Curv is a DSL for procedurally generated computer graphics. My first step was to copy a feature from OpenSCAD and Fragmentarium: you can annotate a variable definition with a \"picker expression\", which specifies a graphical value picker to use for editing the contents of this local variable. For example, "
                            },
                            {
                                "type": "text",
                                "text": "slider(1,10)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " constrains the local variable to be a floating point number between 1 and 10, and displays a slider widget for changing the value. Or, "
                            },
                            {
                                "type": "text",
                                "text": "scale_picker",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " treats the variable as a \"scaling factor\": it is constrained to be a floating point number > 0 and < infinity, and a kind of logarithmic slider is used to change the value.\n\nEven though picker expressions constrain the value of a variable, these value constraints don't necessarily correspond to types in any statically typed language that I know. So it's not clear that a static type system is even the right tool for the job."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1560992814.027900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1561013958.000000"
        },
        "client_msg_id": "4df83f1f-034a-47c3-a648-25138e533943",
        "text": "Ranty challenge after a long day for anyone working on visual languages: before trying to support running programs, aim for a simpler domain like figures. Something with the controlled placement of SVG, the high abstraction of <http:\/\/plantuml.com> (which supports lots of different kinds of diagrams -- and the abyss of all possible combinations of them) and the WYSIWYG UI of MS Word or <http:\/\/draw.io|draw.io> (which I find myself frequently fighting with). Why the heck doesn't this exist yet? How does _every_ drawing tool manage to suck without bound?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "reply_count": 15,
        "reply_users_count": 3,
        "latest_reply": "1566030867.302200",
        "reply_users": [
            "UC2A2ARPT",
            "UK69SS8LB",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1561000774.029300"
            },
            {
                "user": "UK69SS8LB",
                "ts": "1561005314.029700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1561013863.032300"
            },
            {
                "user": "UK69SS8LB",
                "ts": "1561045095.034400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1561046023.034600"
            },
            {
                "user": "UK69SS8LB",
                "ts": "1561046554.035100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1561046728.035400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1561047472.035900"
            },
            {
                "user": "UK69SS8LB",
                "ts": "1561129412.161500"
            },
            {
                "user": "UK69SS8LB",
                "ts": "1561129453.161700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1561130152.162000"
            },
            {
                "user": "UK69SS8LB",
                "ts": "1561130746.162200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1561130774.162400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1565967860.299100"
            },
            {
                "user": "UK69SS8LB",
                "ts": "1566030867.302200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "PlantUML.com",
                "title": "Open-source tool that uses simple textual descriptions to draw beautiful UML diagrams.",
                "title_link": "http:\/\/plantuml.com\/",
                "text": "Easily create beautiful UML Diagrams from simple textual description. There are also numerous kind of available diagrams. It's also possible to export images in PNG, LaTeX, EPS, SVG.",
                "fallback": "PlantUML.com: Open-source tool that uses simple textual descriptions to draw beautiful UML diagrams.",
                "thumb_url": "http:\/\/plantuml.com\/og-index",
                "from_url": "http:\/\/plantuml.com\/",
                "thumb_width": 120,
                "thumb_height": 126,
                "service_icon": "http:\/\/s.plantuml.com\/favicon.ico",
                "id": 1,
                "original_url": "http:\/\/plantuml.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sTY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ranty challenge after a long day for anyone working on visual languages: before trying to support running programs, aim for a simpler domain like figures. Something with the controlled placement of SVG, the high abstraction of "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/plantuml.com"
                            },
                            {
                                "type": "text",
                                "text": " (which supports lots of different kinds of diagrams -- and the abyss of all possible combinations of them) and the WYSIWYG UI of MS Word or "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/draw.io",
                                "text": "draw.io"
                            },
                            {
                                "type": "text",
                                "text": " (which I find myself frequently fighting with). Why the heck doesn't this exist yet? How does "
                            },
                            {
                                "type": "text",
                                "text": "every",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " drawing tool manage to suck without bound?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UHWC9PXBL",
                    "UBM0S2AN4",
                    "UA14TGLTC",
                    "UFV8P4472"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560997772.028800",
        "client_msg_id": "1e751038-be4f-4d68-accf-e272bc963310",
        "text": "<https:\/\/robert.kra.hn\/posts\/2019-06-20_developer_efficiency.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "Developer Efficiency",
                "title_link": "https:\/\/robert.kra.hn\/posts\/2019-06-20_developer_efficiency.html",
                "text": "The importance of immediacy and concreteness in programming tools",
                "fallback": "Developer Efficiency",
                "from_url": "https:\/\/robert.kra.hn\/posts\/2019-06-20_developer_efficiency.html",
                "service_icon": "https:\/\/robert.kra.hn\/img\/favicon.png",
                "service_name": "robert.kra.hn",
                "id": 1,
                "original_url": "https:\/\/robert.kra.hn\/posts\/2019-06-20_developer_efficiency.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1t49",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/robert.kra.hn\/posts\/2019-06-20_developer_efficiency.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1561000774.029300",
        "client_msg_id": "eb8b2e9e-b355-4ddf-b491-3cfa5f26e632",
        "text": "Visual programming tools should be drawing tools first, and programming tools second.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l0YDv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Visual programming tools should be drawing tools first, and programming tools second."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFV8P4472",
                    "UAVCC2X70",
                    "UHWC9PXBL",
                    "UBUFWBGNN"
                ],
                "count": 4
            },
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UK69SS8LB",
        "type": "message",
        "ts": "1561005314.029700",
        "client_msg_id": "19ba2b35-c28c-4a02-9e6e-c8bce8d3d722",
        "text": "<@UCUSW7WVD> What were you trying to create with a visual tool that frustrated you so much? I'm curious of visual programming myself. I've had my share of frustration with <http:\/\/draw.io|draw.io>, but have never come to be able to articulate the issues. What is your take on that?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb61a4a4200",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3db61a4a42000b4ff62648c0979e8920.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Ken Kan",
            "display_name": "Ken Kan",
            "team": "T5TCAFTA9",
            "name": "kenhkan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JWQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " What were you trying to create with a visual tool that frustrated you so much? I'm curious of visual programming myself. I've had my share of frustration with "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/draw.io",
                                "text": "draw.io"
                            },
                            {
                                "type": "text",
                                "text": ", but have never come to be able to articulate the issues. What is your take on that?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1561005507.029900",
        "client_msg_id": "af69569f-e65e-4625-ae61-cd9b6a673a84",
        "text": "Nice work, <@UDQBTJ211>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "brQ=y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice work, "
                            },
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1561006048.030100",
        "edited": {
            "user": "UE1JQM9HQ",
            "ts": "1561006107.000000"
        },
        "client_msg_id": "f90e8465-6bad-41df-bc41-5c45f98494a5",
        "text": "<@UFS53UWE5> indeed, the challenge with back-in-time-debuggers is size|memory. Some years ago, we proposed an approach that takes advantage of the garbage collection mechanism to limit the amount of data stored. We modified the VM (we worked with the Squeak one) to keep track of the alias history (how an object moved from one variable to another) and simply released the history when the object was no longer referenced. We showed that we can decrease the growth of memory dramatically. To date is, this is likely the most efficient approach we know of. Details here: <http:\/\/scg.unibe.ch\/archive\/papers\/Lien08bBackInTimeDebugging.pdf>\n\n&gt;My goal is to remove the run\/debug loop, making running and debugging the same operation.\nThat is an exciting goal! I‚Äôd be interested to learn more about it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560973579.008500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GzEt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFS53UWE5"
                            },
                            {
                                "type": "text",
                                "text": " indeed, the challenge with back-in-time-debuggers is size|memory. Some years ago, we proposed an approach that takes advantage of the garbage collection mechanism to limit the amount of data stored. We modified the VM (we worked with the Squeak one) to keep track of the alias history (how an object moved from one variable to another) and simply released the history when the object was no longer referenced. We showed that we can decrease the growth of memory dramatically. To date is, this is likely the most efficient approach we know of. Details here: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/scg.unibe.ch\/archive\/papers\/Lien08bBackInTimeDebugging.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My goal is to remove the run\/debug loop, making running and debugging the same operation."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That is an exciting goal! I‚Äôd be interested to learn more about it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1561010003.031800",
        "client_msg_id": "a7e91bff-1f6b-4d29-911e-1c43a3c2b60a",
        "text": "So... V is available as a public release (currently MacOS only, no source) <https:\/\/vlang.io\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561010003.031800",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1561344707.289700",
        "reply_users": [
            "UBSMEUXAA",
            "UFS53UWE5",
            "UJTHWNH2T"
        ],
        "replies": [
            {
                "user": "UBSMEUXAA",
                "ts": "1561041257.034100"
            },
            {
                "user": "UFS53UWE5",
                "ts": "1561050698.036700"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1561070294.054200"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1561075186.056600"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1561075208.056800"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1561344707.289700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "The V Programming Language",
                "title_link": "https:\/\/vlang.io\/",
                "text": "Simple, fast, safe, compiled programming language",
                "fallback": "The V Programming Language",
                "from_url": "https:\/\/vlang.io\/",
                "service_icon": "https:\/\/vlang.io\/img\/favicon.png",
                "service_name": "vlang.io",
                "id": 1,
                "original_url": "https:\/\/vlang.io\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/3j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So... V is available as a public release (currently MacOS only, no source) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/vlang.io\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1561013863.032300",
        "client_msg_id": "587b5313-2c3d-4873-b055-4dbb193f102d",
        "text": "Today it was a schema for a set of database tables. Pointing and clicking through a maze of toolbar icons all alike until I felt demented. Working with a template but repeatedly accidentally destroying it and knowing no way to create the layout it shows from scratch. Go to <http:\/\/draw.io|draw.io> and start a new figure, from the standard `database_1` template under 'software'. You get a bunch of tables. How do you create one from scratch? The toolbar doesn't change from its usual settings. So you can helpfully add various flowchart icons to your database figure.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3oGn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Today it was a schema for a set of database tables. Pointing and clicking through a maze of toolbar icons all alike until I felt demented. Working with a template but repeatedly accidentally destroying it and knowing no way to create the layout it shows from scratch. Go to "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/draw.io",
                                "text": "draw.io"
                            },
                            {
                                "type": "text",
                                "text": " and start a new figure, from the standard "
                            },
                            {
                                "type": "text",
                                "text": "database_1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " template under 'software'. You get a bunch of tables. How do you create one from scratch? The toolbar doesn't change from its usual settings. So you can helpfully add various flowchart icons to your database figure."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]