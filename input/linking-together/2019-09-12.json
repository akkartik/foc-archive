[
    {
        "user": "UNBPP291C",
        "type": "message",
        "ts": "1568277655.070300",
        "client_msg_id": "8a045fe6-3680-4413-b07f-d6bee04e9049",
        "text": "<@UAL7940NM> just saw this, I am. It’s actually using a datastructure which is a graph with multiple categories where you can enter from one into the other, so a “syntax token” (can be more than just a piece of text token) can be different across multiple languages so translation is just casting into that categories proper structure. A bit hacky but works for now. I wonder what kind of features would you look for in a tooling like that?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcf29e340a09",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cf29e340a09ac08ae262632ef9101046.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Ian Rumac",
            "display_name": "Ian Rumac",
            "team": "T5TCAFTA9",
            "name": "ian.rumac",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "poks1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAL7940NM"
                            },
                            {
                                "type": "text",
                                "text": " just saw this, I am. It’s actually using a datastructure which is a graph with multiple categories where you can enter from one into the other, so a “syntax token” (can be more than just a piece of text token) can be different across multiple languages so translation is just casting into that categories proper structure. A bit hacky but works for now. I wonder what kind of features would you look for in a tooling like that?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1568287872.070500",
        "client_msg_id": "aa269b34-5dd2-46a2-a8c4-0480195ba131",
        "text": "<@UNBPP291C> Are you talking about a project of yours? I'd be interested in details \/ links.\nI'm looking for a program representation that's a solid basis for building all kinds of tooling (e.g. static analysis, program transformation \/ synthesis, semantic diff, version control, dependency management, ...).\nMy hypothesis is that a program representation has a big impact on the effort needed to create high-quality tools. For example, finding usages of an item is trivial if they are explicit edges in a graph data structure and much harder if they need to be decoded from a textual syntax.\nText encodings don't seem to offer the abstractions needed for programs. Things like primitive types, sets, lists, links (both ambiguous like interfaces and unambiguous like hash-based links) and so on might be better abstractions to represent programs.\nFinally, even though I want another program representation for better tool support, retaining the ability to edit programs as text seems to be important. Keyboards are text entry devices after all and Structure Editors have shown for decades that moving away from text editing creates serious UX issues.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7eSSG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UNBPP291C"
                            },
                            {
                                "type": "text",
                                "text": " Are you talking about a project of yours? I'd be interested in details \/ links.\nI'm looking for a program representation that's a solid basis for building all kinds of tooling (e.g. static analysis, program transformation \/ synthesis, semantic diff, version control, dependency management, ...).\nMy hypothesis is that a program representation has a big impact on the effort needed to create high-quality tools. For example, finding usages of an item is trivial if they are explicit edges in a graph data structure and much harder if they need to be decoded from a textual syntax.\nText encodings don't seem to offer the abstractions needed for programs. Things like primitive types, sets, lists, links (both ambiguous like interfaces and unambiguous like hash-based links) and so on might be better abstractions to represent programs.\nFinally, even though I want another program representation for better tool support, retaining the ability to edit programs as text seems to be important. Keyboards are text entry devices after all and Structure Editors have shown for decades that moving away from text editing creates serious UX issues."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Yes, my pet project, Lotus Lambda :smile: ! No links yet, I’ll try to have a demo up in a month or two tho\n&gt;My hypothesis is that a program representation has a big impact on the effort needed to create high-quality tools. For example, finding usages of an item is trivial if they are explicit edges in a graph data structure\n\nExactly! I represent it as tree that transforms into graphs\/lists\/whatever your heart desires in the category you’re editing.  Starting with defining data type, then queries\/mutations over data, then defining architecture blueprints because all that data can be reused - to generate code,  manage versioning, diffing, client\/server communication, wrapping\/refactoring en masse, documentation, whatever you like.  For now I don’t want to touch editing AST and code, I want to generate wrapping around the code so that your code is the same as it is now and you just edit the pure logic without worrying about the boilerplate and types and yadayada.\n\n&gt;Keyboards are text entry devices after all and Structure Editors have shown for decades that moving away from text editing creates serious UX issues.\n\nI just learned that lesson :sweat_smile:  I made the editor like this( pic) instead of doing the text editing, this introduced so much UX issues I had to fight it cost me like 2 all-dayer-all-nighter weekends, now I’m back to writing a text editor with forced structure, hopefully this or next weekend will get me back on track, just need to write a parser.",
        "files": [
            {
                "id": "FN9AZP0PN",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UNBPP291C",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ujd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, my pet project, Lotus Lambda "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " ! No links yet, I’ll try to have a demo up in a month or two tho"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My hypothesis is that a program representation has a big impact on the effort needed to create high-quality tools. For example, finding usages of an item is trivial if they are explicit edges in a graph data structure"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nExactly! I represent it as tree that transforms into graphs\/lists\/whatever your heart desires in the category you’re editing.  Starting with defining data type, then queries\/mutations over data, then defining architecture blueprints because all that data can be reused - to generate code,  manage versioning, diffing, client\/server communication, wrapping\/refactoring en masse, documentation, whatever you like.  For now I don’t want to touch editing AST and code, I want to generate wrapping around the code so that your code is the same as it is now and you just edit the pure logic without worrying about the boilerplate and types and yadayada.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Keyboards are text entry devices after all and Structure Editors have shown for decades that moving away from text editing creates serious UX issues."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI just learned that lesson "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": "  I made the editor like this( pic) instead of doing the text editing, this introduced so much UX issues I had to fight it cost me like 2 all-dayer-all-nighter weekends, now I’m back to writing a text editor with forced structure, hopefully this or next weekend will get me back on track, just need to write a parser."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1568288875.070700",
        "client_msg_id": "01c22c62-9e53-4b46-ae74-4aadec054ba1",
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM"
    }
]