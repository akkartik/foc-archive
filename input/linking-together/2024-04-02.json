[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1712125988.462959",
        "client_msg_id": "05a135c3-fedc-4558-95fe-86f7247ec89a",
        "text": "I'd say encapsulation is good for 100% waterproof implementations of commodity abstractions, i.e. abstractions that are well understood by domain professionals. The equivalent of screws or cables in the physical world. Complex or leaky abstractions are a risk factor. I can't say where LLVM should be situated on those scales. Does every language designer understand the abstractions on which LLVM is based? Is the implementation free of bad surprises?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1705918201.798719",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E52jI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd say encapsulation is good for 100% waterproof implementations of commodity abstractions, i.e. abstractions that are well understood by domain professionals. The equivalent of screws or cables in the physical world. Complex or leaky abstractions are a risk factor. I can't say where LLVM should be situated on those scales. Does every language designer understand the abstractions on which LLVM is based? Is the implementation free of bad surprises?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]