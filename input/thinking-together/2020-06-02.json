[
    {
        "user": "UMYKGHYBA",
        "type": "message",
        "ts": "1591081310.339600",
        "client_msg_id": "02359824-1b1b-4847-96bb-1f4d30daba8f",
        "text": "One problem I see here is good\/bad pick of abstractions. Notion is not pure relational database, thus you can design data layer in a familiar way nor tune it for performance. It is easy to start and build something, but when complexity grow it will be harder and harder to maintain. This is true for any serious system, but if you pick not good abstractions from the start, it becomes impossible.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "33a7d80f0969",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-03\/746668776704_33a7d80f09696604a6f4_72.jpg",
            "first_name": "Michael",
            "real_name": "Michael Dubakov",
            "display_name": "Michael Dubakov",
            "team": "T5TCAFTA9",
            "name": "michael172",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591058338.327500",
        "parent_user_id": "U01176YGU4W",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lO+tN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One problem I see here is good\/bad pick of abstractions. Notion is not pure relational database, thus you can design data layer in a familiar way nor tune it for performance. It is easy to start and build something, but when complexity grow it will be harder and harder to maintain. This is true for any serious system, but if you pick not good abstractions from the start, it becomes impossible."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1591081522.339900",
        "client_msg_id": "b6524733-32ba-4219-aeab-b38fcf39c0e6",
        "text": "The recent renaissance in systems languages is a relief. I expect we'll see future software taking much better advantage of the hardware available.\n\nWasm is the first cross-platform standard that doesn't require managed memory, which gives it a huge range and allows much more interoperation between very different languages.  (The jvm and javascript both made it very hard to efficiently implement languages that don't look a lot like java\/javascript.) It's also much much easier to implement well than any of it's predecessors which should encourage more competition and experimentation.\n\nNot to mention the web itself, which only really became standardized in the last two decades.\n\nThere have been amazing algorithmic improvements in constraint solving and query languages. In the former case, they've outpaced the improvements in hardware ie running an old constraint solver on modern hardware would be slower than running a modern constraint solver on old hardware.\n\nNix\/guix are a new idea that simplifies the process of building and combining software packages.\n\nSandboxing and capabilities have come a long way. Modern phones and browsers primarily run untrusted code, which would have been suicidally stupid on the operating systems of the 90s.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xqZY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The recent renaissance in systems languages is a relief. I expect we'll see future software taking much better advantage of the hardware available.\n\nWasm is the first cross-platform standard that doesn't require managed memory, which gives it a huge range and allows much more interoperation between very different languages.  (The jvm and javascript both made it very hard to efficiently implement languages that don't look a lot like java\/javascript.) It's also much much easier to implement well than any of it's predecessors which should encourage more competition and experimentation.\n\nNot to mention the web itself, which only really became standardized in the last two decades.\n\nThere have been amazing algorithmic improvements in constraint solving and query languages. In the former case, they've outpaced the improvements in hardware ie running an old constraint solver on modern hardware would be slower than running a modern constraint solver on old hardware.\n\nNix\/guix are a new idea that simplifies the process of building and combining software packages.\n\nSandboxing and capabilities have come a long way. Modern phones and browsers primarily run untrusted code, which would have been suicidally stupid on the operating systems of the 90s."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UMWF81HTP"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1591081643.340100",
        "client_msg_id": "274ac0ac-31d4-46ed-8f88-36d24a91f13a",
        "text": "The availability of high-quality open source libraries with easy installation is much higher than it used to be.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A8X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The availability of high-quality open source libraries with easy installation is much higher than it used to be."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1591081753.340300",
        "client_msg_id": "66ba8fd4-b995-4851-b0cc-5ffc88c857f6",
        "text": "I propose a programming competition where people who believe programming hasn't improved much in the last few decades get to use only tools that shipped before 1990 and everyone else gets to use modern tools.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xsN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I propose a programming competition where people who believe programming hasn't improved much in the last few decades get to use only tools that shipped before 1990 and everyone else gets to use modern tools."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591081782.340500",
        "client_msg_id": "88a62297-3b70-4604-9aad-ff6f2115e453",
        "text": "<@U015902ESJC> Seems like a cool project, but beyond the chaining you still seem like you're sticking to the classical ALU operations. I'm interested in seeing a re-think of bit manipulation, and for that reason I'm planning on having more powerful primitives than just adds and shifts (but which ultimately can be compiled back to them).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TvNG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U015902ESJC"
                            },
                            {
                                "type": "text",
                                "text": " Seems like a cool project, but beyond the chaining you still seem like you're sticking to the classical ALU operations. I'm interested in seeing a re-think of bit manipulation, and for that reason I'm planning on having more powerful primitives than just adds and shifts (but which ultimately can be compiled back to them)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1591081839.340700",
        "client_msg_id": "caec38f8-f54c-46e2-99bd-b87453b7d2c1",
        "text": "On a totally different tangent, I think the latency of a lot of tools has gotten steadily worse over the last few decades. Too many layers?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rRlr9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On a totally different tangent, I think the latency of a lot of tools has gotten steadily worse over the last few decades. Too many layers?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591081860.340900",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591082603.000000"
        },
        "client_msg_id": "8250594d-be63-4a08-a6ef-17f3b5764ffa",
        "text": "<@UJN1TAYEQ> Yeah LLVM's support for this is really cool, but having integer size be statically-specified seems like it's more limited than having all bit strings be dynamically-sized. In other words, LLVM doesn't seem to have BigInts built in.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m8cA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Yeah LLVM's support for this is really cool, but having integer size be statically-specified seems like it's more limited than having all bit strings be dynamically-sized. In other words, LLVM doesn't seem to have BigInts built in."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591082055.341300",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591082185.000000"
        },
        "client_msg_id": "d3cf61f1-6c58-43a1-9db0-6c35f0cfbebf",
        "text": "Once you've decided to ban overflow, size annotations should be a performance optimisation (computed through static analysis), not a requirement for compilation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5jN8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Once you've decided to ban overflow, size annotations should be a performance optimisation (computed through static analysis), not a requirement for compilation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1591083246.349700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1591110296.000000"
        },
        "client_msg_id": "BCFB2379-9D02-45C8-9C8E-67761237F80C",
        "text": "Yes, latency is to the point that I'm infuriated by it daily. macos 10.15 feels like Mac OS 8 to me (and that was one of the bad ones). Though I think that's not a fault of programming tools directly, but rather how we've decided to employ them not being a good fit with their strengths. Eg: improving battery life was a top priority at Apple there for a few years, which meant things like timer coalescing, which meant making everything asynchronous, which meant new pauses and hiccups, new race conditions, new latency, new places to inject network calls that delay UI handling, new failure modes. None of that was caused by programming tools, but programming tools haven't helped us adequately address it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "emQ0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, latency is to the point that I'm infuriated by it daily. macos 10.15 feels like Mac OS 8 to me (and that was one of the bad ones). Though I think that's not a fault of programming tools directly, but rather how we've decided to employ them not being a good fit with their strengths. Eg: improving battery life was a top priority at Apple there for a few years, which meant things like timer coalescing, which meant making everything asynchronous, which meant new pauses and hiccups, new race conditions, new latency, new places to inject network calls that delay UI handling, new failure modes. None of that was caused by programming tools, but programming tools haven't helped us adequately address it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UML4ZEKDK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1591083654.354700",
        "client_msg_id": "793106A4-5AFA-49EB-B7F5-1E0B280686DD",
        "text": "Wonderful thoughts, Jamie. To your last point, I don't think anyone is saying programming hasn't progressed at all. But that the pace of improvement has slowed, or that issues we might have solved well long ago are still rampant.\n\nThat aside, I think your challenge would actually be fun. Of course, the judgment criteria would have to somehow account for the hardware difference — it's harder to make something that'd compete with a modern GUI when you only have 512 black and white pixels.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xZ4=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wonderful thoughts, Jamie. To your last point, I don't think anyone is saying programming hasn't progressed at all. But that the pace of improvement has slowed, or that issues we might have solved well long ago are still rampant.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "That aside, I think your challenge would actually be fun. Of course, the judgment criteria would have to somehow account for the hardware difference — it's harder to make something that'd compete with a modern GUI when you only have 512 black and white pixels."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U71PMQ1V0",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591084605.354900",
        "edited": {
            "user": "U015902ESJC",
            "ts": "1591084619.000000"
        },
        "client_msg_id": "7d01caca-948d-4c89-80e2-333ddf0c3f0c",
        "text": "I'm curious, why is banning overflow a useful abstraction? At the end of the day, it has to run on hardware and making use of arbitrary bit widths on each operation will work often (with a performance overhead) and sometimes crater the performance. Unless you limit yourself to ALU operations that scale O(n) where n is the bit width, you'll end up with a lot of edge cases.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ARX15",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm curious, why is banning overflow a useful abstraction? At the end of the day, it has to run on hardware and making use of arbitrary bit widths on each operation will work often (with a performance overhead) and sometimes crater the performance. Unless you limit yourself to ALU operations that scale O(n) where n is the bit width, you'll end up with a lot of edge cases."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591084750.355200",
        "client_msg_id": "6a277bc2-d36c-43c7-a3a9-0f09f378cb11",
        "text": "There are plenty of languages (mostly scripting languages) that you are safe to ignore bit widths for most cases since 64bits and double precision numbers can hold a lot of range. Most programmers don't think about those things anyway.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+lw4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are plenty of languages (mostly scripting languages) that you are safe to ignore bit widths for most cases since 64bits and double precision numbers can hold a lot of range. Most programmers don't think about those things anyway."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591084959.355400",
        "client_msg_id": "b05c96c3-bbcc-4e30-8394-2ae901ba6415",
        "text": "If you do start to break out of 64 bits, you very much need to think about the hardware because performance is going to kill the program pretty quickly on anything computation that isn't O(n) with respect to bit width. I guess my question is what is the target audience is this for?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RW5h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you do start to break out of 64 bits, you very much need to think about the hardware because performance is going to kill the program pretty quickly on anything computation that isn't O(n) with respect to bit width. I guess my question is what is the target audience is this for?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1591094680.358100",
        "client_msg_id": "7279EDFB-D72F-4763-B88A-89D6CBDC79BE",
        "text": "Before 1990 you could do nice gui and beautiful graphics programming in color if you wanted : <https:\/\/en.m.wikipedia.org\/wiki\/Amiga|https:\/\/en.m.wikipedia.org\/wiki\/Amiga> Surely it would be a nice challenge:sunglasses: ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c3\/Amiga500_system.jpg\/1200px-Amiga500_system.jpg",
                "image_width": 1200,
                "image_height": 932,
                "image_bytes": 167670,
                "title": "Amiga",
                "title_link": "https:\/\/en.m.wikipedia.org\/wiki\/Amiga",
                "from_url": "https:\/\/en.m.wikipedia.org\/wiki\/Amiga",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "The Amiga is a family of personal computers introduced by Commodore in 1985. The original model was part of a series of 16\/32- and 32-bit computers that featured 256 KB or more of RAM, mouse-based GUIs, and significantly improved graphics and audio over 8-bit systems. This wave included the Atari ST—released the same year—Apple's Macintosh, and later the Apple IIGS. Based on the Motorola 68000 microprocessor, the Amiga differed from its contemporaries through the inclusion of custom hardware to accelerate graphics and sound, including sprites and a blitter, and a pre-emptive multitasking operating system called AmigaOS.\nThe Amiga 1000 was released in July 1985, but a series of production problems kept it from becoming widely available until early 1986. The best selling model, the Amiga 500, was introduced in 1987 and became one of the leading home computers of the late 1980s and early 1990s with four to six million sold. The A3000 was introduced in 1990, followed by the A500+, and the A600 in March 1992. Finally, the A1200 and the A4000 were released in late 1992. The platform became particularly popular for gaming and programming demos. It also found a prominent role in the desktop video, video production, and show control business, leading to video editing systems such as the Video Toaster. The Amiga's native ability to simultaneously play back multiple digital sound samples made it a popular platform for early tracker music software. The relatively powerful processor and ability to access several megabytes of memory enabled the development of 3D rendering packages, including LightWave 3D, Imagine, Aladdin4D, TurboSilver and Traces, a predecessor to Blender.\nAlthough early Commodore advertisements attempt to cast the computer as an all-purpose business machine, especially when outfitted with the Amiga Sidecar PC compatibility add-on, the Amiga was most commercially successful as a home computer, with a wide range of games and creative software. Poor marketing and the failure of the later models to repeat the technological advances of the first systems meant that the Amiga quickly lost its market share to competing platforms, such as the fourth generation game consoles, Macintosh, and the rapidly dropping prices of IBM PC compatibles, which gained 256-color VGA graphics in 1987. Commodore ultimately went bankrupt in April 1994 after a version of the Amiga packaged as a game console, the Amiga CD32, failed in the marketplace.\nSince the demise of Commodore, various groups have marketed successors to the original Amiga line, including Genesi, Eyetech, ACube Systems Srl and A-EON Technology. Likewise, AmigaOS has influenced replacements, clones and compatible systems such as MorphOS, AmigaOS 4 and AROS.",
                "fallback": "wikipedia: Amiga",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.m.wikipedia.org\/wiki\/Amiga"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7aM3l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Before 1990 you could do nice gui and beautiful graphics programming in color if you wanted : "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Amiga",
                                "text": "https:\/\/en.m.wikipedia.org\/wiki\/Amiga"
                            },
                            {
                                "type": "text",
                                "text": " Surely it would be a nice challenge"
                            },
                            {
                                "type": "emoji",
                                "name": "sunglasses",
                                "unicode": "1f60e"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1591095077.364200",
        "client_msg_id": "5B9B3DD7-F7FC-44DE-A868-A168527B9E4D",
        "text": "But what I nowadays that you still need a lot of code to achieve things. Yes you can use npm or nuget packages , if you want to dependent on them. I currently write websites using kentico cms using mvc.. it surprises me how much code we need to add custom logic, views, proper forms, custom styling etc. Dont get me wrong, I like writing code, but I would expect a lot of problems to be solved already by the cms itself in our case",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q48",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But what I nowadays that you still need a lot of code to achieve things. Yes you can use npm or nuget packages , if you want to dependent on them. I currently write websites using kentico cms using mvc.. it surprises me how much code we need to add custom logic, views, proper forms, custom styling etc. Dont get me wrong, I like writing code, but I would expect a lot of problems to be solved already by the cms itself in our case"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1591095579.366900",
        "client_msg_id": "D769CCD8-C26F-461D-AF8C-C3E6E24DA9C6",
        "text": "And then there's tools like Mendix, the so called low-code platforms for building (web)apps in business domains. I dont use it myself but they seem rather succesful, the demand for those tools is increasing I think. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GDVLp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And then there's tools like Mendix, the so called low-code platforms for building (web)apps in business domains. I dont use it myself but they seem rather succesful, the demand for those tools is increasing I think. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1591108095.367900",
        "client_msg_id": "21DAA31C-CE01-4F56-9ABF-61AADDFBC026",
        "text": "Minimum viable browser quine <https:\/\/twitter.com\/Jermolene\/status\/1267801378430373890|https:\/\/twitter.com\/Jermolene\/status\/1267801378430373890>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591108095.367900",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1591119248.374200",
        "reply_users": [
            "UUQ2EQW21"
        ],
        "replies": [
            {
                "user": "UUQ2EQW21",
                "ts": "1591119248.374200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/Jermolene|@Jermolene>: <https:\/\/twitter.com\/nileshtrivedi|@nileshtrivedi> There’s a minimal demo of the main techniques here:\n\n<https:\/\/github.com\/Jermolene\/FileSavingDemo\/blob\/master\/filesavingdemo.html>\n\nIt uses “document.documentElement.innerHTML” to obtain the document content when saving, but in reality TiddlyWiki just renders a template in order to produce the HTML text to save",
                "ts": 1591102377,
                "author_name": "Jeremy Ruston",
                "author_link": "https:\/\/twitter.com\/Jermolene\/status\/1267801378430373890",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/652498614355365888\/6QIrG4G3_normal.jpg",
                "author_subname": "@Jermolene",
                "text": "<https:\/\/twitter.com\/nileshtrivedi|@nileshtrivedi> There’s a minimal demo of the main techniques here:\n\n<https:\/\/github.com\/Jermolene\/FileSavingDemo\/blob\/master\/filesavingdemo.html>\n\nIt uses “document.documentElement.innerHTML” to obtain the document content when saving, but in reality TiddlyWiki just renders a template in order to produce the HTML text to save",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/Jermolene\/status\/1267801378430373890",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/Jermolene\/status\/1267801378430373890",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gv5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Minimum viable browser quine "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/Jermolene\/status\/1267801378430373890",
                                "text": "https:\/\/twitter.com\/Jermolene\/status\/1267801378430373890"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1591109905.372700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1591110060.000000"
        },
        "client_msg_id": "6A89DE17-C467-4988-9DB0-47FE3CEB2B8A",
        "text": "If these notion-wielding people are complete novices, and they're building systems that let a business run more effectively at their current scale, I think this is a phenomenal success. The \"notion experts\" have found a path that will eventually lead them to learn more programming. The businesses running on these notion setups have a working solution that likely didn't cost them nearly as much as hiring a traditional developer. And, best of all, another stuffy traditionalist developer who is obsessed with \"scaling\" and their own credentials has been frustrated, and some egg has landed on their face.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591058338.327500",
        "parent_user_id": "U01176YGU4W",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NV=RP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If these notion-wielding people are complete novices, and they're building systems that let a business run more effectively at their current scale, I think this is a phenomenal success. The \"notion experts\" have found a path that will eventually lead them to learn more programming. The businesses running on these notion setups have a working solution that likely didn't cost them nearly as much as hiring a traditional developer. And, best of all, another stuffy traditionalist developer who is obsessed with \"scaling\" and their own credentials has been frustrated, and some egg has landed on their face."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "UGLSY9X3J",
                    "U6FKVSVCK",
                    "UMWF81HTP",
                    "UML4ZEKDK"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1591113640.373500",
        "client_msg_id": "4a821dc6-cc5d-40f8-a3ac-2d4b4485335e",
        "text": "<@UC2A2ARPT> Check out <https:\/\/sigpipe.macromates.com\/2020\/macos-catalina-slow-by-design\/> for the background on macOS' slowing down. I am sticking to 10.14 as long as I can.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PoTGZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " Check out "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/sigpipe.macromates.com\/2020\/macos-catalina-slow-by-design\/"
                            },
                            {
                                "type": "text",
                                "text": " for the background on macOS' slowing down. I am sticking to 10.14 as long as I can."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U014BMRB170",
        "type": "message",
        "ts": "1591113927.373800",
        "client_msg_id": "68ff500f-031c-4015-b5b1-ed509646524d",
        "text": "<@UJBAJNFLK> Absolutely: \"better\" is a hidden value judgment. I'd say that my definition of better is \"the total combined increase of people's abilities unlocked by programming\" or some sort of \"# programmers X leverage that programming gives them\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "aa987a15dfe3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-29\/1167097708305_aa987a15dfe3dcccd363_72.jpg",
            "first_name": "",
            "real_name": "Tom MacWright",
            "display_name": "Tom MacWright",
            "team": "T5TCAFTA9",
            "name": "tom041",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uOL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Absolutely: \"better\" is a hidden value judgment. I'd say that my definition of better is \"the total combined increase of people's abilities unlocked by programming\" or some sort of \"# programmers X leverage that programming gives them\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1591119248.374200",
        "client_msg_id": "c25feb69-f7f3-4be7-9064-a2840d564c04",
        "text": "This looks interesting, and may make me look at TiddlyWiki again.  I keep my notes in a vimwiki, but it always annoys me that they are not as easily published, or viewable on my phone.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591108095.367900",
        "parent_user_id": "USH01JEDQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AUD2N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This looks interesting, and may make me look at TiddlyWiki again.  I keep my notes in a vimwiki, but it always annoys me that they are not as easily published, or viewable on my phone."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1591121797.379200",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1591121837.000000"
        },
        "client_msg_id": "CABAC983-8E67-4F6E-BCA6-96A2B85EE7FD",
        "text": "1. for me at least, the absolute best thing that’s happened is the rise and improvement in the built-in javascript console on modern web browsers\n2. graph databases are taking off, which i think is a really good thing\n3. i really appreciate the rise in declarative data languages: graphql, datalog, object structuring and destructuring, pattern matching\n4. although all these no\/low\/oops code projects are mostly crap, at least there’s SOME interest (and a lot of money) in making programming more accessible \n5. inventing on principle really did light a fire for more interactive programming and debugging models even if they didn’t go far enough\n6. minecraft. that’s it. that’s the whole bullet point",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1\/CD",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "for me at least, the absolute best thing that’s happened is the rise and improvement in the built-in javascript console on modern web browsers"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "graph databases are taking off, which i think is a really good thing"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "i really appreciate the rise in declarative data languages: graphql, datalog, object structuring and destructuring, pattern matching"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "although all these no\/low\/oops code projects are mostly crap, at least there’s SOME interest (and a lot of money) in making programming more accessible "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "inventing on principle really did light a fire for more interactive programming and debugging models even if they didn’t go far enough"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "minecraft. that’s it. that’s the whole bullet point"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1591122061.379800",
        "client_msg_id": "ecf1bcfe-5156-4ac1-95ee-0a346e327ef9",
        "text": "I'm going to branch this off from the discussion on programming not progressing.\n\n&gt; ...my impression is that programming got much better over the last few decades for large industrial users, at the direct expense of more convivial uses. More layers of abstraction to understand, more constant overheads for starting a project, more moving parts to maintain. But dramatically better distribution, tooling and scaling.\nIt's notable though that the arc in most other technologies has been towards increasing scale and centralization at the cost of individual capacity. A few hundred years ago a single village could probably build their own carts. Now we're down to a dozen or so car companies per country. Most countries don't have the ability to manufacture their own cpus.\n\nI doubt anything in my house was created within a 100 miles of here. There is certainly very little that I could make myself. In \"The Toaster Project\" the author couldn't even find a modern text on iron production that didn't assume you had an entire factory - he had to work off a 16th century textbook instead. And when it came to more modern materials, he completely failed to produce plastic.\n\nI can't think of many exceptions to this arc. Writing comes to mind because we use it as a comparison to programming so often - used to be a centralized profession and now is practiced everywhere.\n\nI'm not even sure to what extent this is a problem. Specialization and economies of scale have been some of our main tools for progress. Maybe the future where programming only happens in thousand-person teams is the one where software works better?\n\nEither way, I think it might be important for this community to understand why most technologies progress in that direction and what makes the few exceptions different.\n\nOne plausible answer is that, like writing, programming has some anti-economies of scale too. If we think of the trend in industrial software as trying to constrain software so that complexity scales linearly with size, then maybe we can find points of leverage in tools that abandon those constraints in exchange for more power in the small-software-niche.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591122061.379800",
        "reply_count": 11,
        "reply_users_count": 6,
        "latest_reply": "1591722173.134200",
        "reply_users": [
            "U6FKVSVCK",
            "U71PMQ1V0",
            "UJBAJNFLK",
            "USL4R0T61",
            "U015902ESJC",
            "UHZUS56SV"
        ],
        "replies": [
            {
                "user": "U6FKVSVCK",
                "ts": "1591124653.380500"
            },
            {
                "user": "U71PMQ1V0",
                "ts": "1591124990.381100"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1591125297.381500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1591172344.383800"
            },
            {
                "user": "USL4R0T61",
                "ts": "1591226517.403000"
            },
            {
                "user": "U015902ESJC",
                "ts": "1591231361.410000"
            },
            {
                "user": "U015902ESJC",
                "ts": "1591231683.410300"
            },
            {
                "user": "U015902ESJC",
                "ts": "1591232096.410500"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1591301983.456200"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1591629627.059900"
            },
            {
                "user": "U015902ESJC",
                "ts": "1591722173.134200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S5nj0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm going to branch this off from the discussion on programming not progressing.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...my impression is that programming got much better over the last few decades for large industrial users, at the direct expense of more convivial uses. More layers of abstraction to understand, more constant overheads for starting a project, more moving parts to maintain. But dramatically better distribution, tooling and scaling."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIt's notable though that the arc in most other technologies has been towards increasing scale and centralization at the cost of individual capacity. A few hundred years ago a single village could probably build their own carts. Now we're down to a dozen or so car companies per country. Most countries don't have the ability to manufacture their own cpus.\n\nI doubt anything in my house was created within a 100 miles of here. There is certainly very little that I could make myself. In \"The Toaster Project\" the author couldn't even find a modern text on iron production that didn't assume you had an entire factory - he had to work off a 16th century textbook instead. And when it came to more modern materials, he completely failed to produce plastic.\n\nI can't think of many exceptions to this arc. Writing comes to mind because we use it as a comparison to programming so often - used to be a centralized profession and now is practiced everywhere.\n\nI'm not even sure to what extent this is a problem. Specialization and economies of scale have been some of our main tools for progress. Maybe the future where programming only happens in thousand-person teams is the one where software works better?\n\nEither way, I think it might be important for this community to understand why most technologies progress in that direction and what makes the few exceptions different.\n\nOne plausible answer is that, like writing, programming has some anti-economies of scale too. If we think of the trend in industrial software as trying to constrain software so that complexity scales linearly with size, then maybe we can find points of leverage in tools that abandon those constraints in exchange for more power in the small-software-niche."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMYKGHYBA",
                    "UFLN9JFRT",
                    "UJ6LDMMN0"
                ],
                "count": 3
            },
            {
                "name": "100",
                "users": [
                    "USL4R0T61"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1591122250.379900",
        "client_msg_id": "e9f7f759-28d7-4d1e-89fe-02f34147b406",
        "text": "I forgot to mention Python. It's just a fantastically designed text language, with a healthy, vibrant, ecosystem, and generally good\/easy-to-use standards and practices. If I had to go back to 1990 and use Perl... shudder.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jCbbP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I forgot to mention Python. It's just a fantastically designed text language, with a healthy, vibrant, ecosystem, and generally good\/easy-to-use standards and practices. If I had to go back to 1990 and use Perl... shudder."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1591124653.380500",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1591125001.000000"
        },
        "client_msg_id": "614daa13-e3bc-4952-add2-b58f8f07df14",
        "text": "I could see a future where programming is more centralized, and it's mostly a good thing for many of the reasons you describe. Much more is possible when you can harmonize the work of thousands of people.\n\nFor example, your programming editor might be a thin client over a mountain of cloud infrastructure. Very little software would run \"locally\", but that's ok, because software shouldn't care what device it's running on; your various devices should all be portals into a single, coherent world where all your data and your tools are accessible anywhere, and computational resources appear bottomless.\n\nIn that world, when you open an app or press \"compile\", a small slice of a datacenter springs to life for you, and it takes millions of lines of code and thousands of engineers to maintain all that. But that's invisible to you, because you shouldn't have to worry about it, the same way you don't have to know how a fuel injector works (let alone build one) in order to drive your car.\n\nModern web tech might be analogous to the complexity of a car, but using it is more like getting a chassis, engine, drivetrain, seats, etc. from various factories and assembling them yourself, and less like buying a complete working car and simply driving it where you want to go. As the \"car\" gets more complex and advanced, it's increasingly inaccessible for an individual to wrangle, but the assembled product can go further than something you could build from scratch in your garage.\n\nIf we're operating under the assumption that user has to do this assembly, you'll tend to want the simplest possible \"car\" you can design. But perhaps there's a second local maximum, where a \"car\" is a polished, well-encapsulated product (with extreme internal complexity and power) that's easy for anyone to pick up and use.\n\nSo we have advanced \"cars\"— complex, economy-of-scale-optimized engineering marvels— but individuals can't really buy and drive them. But we _could_ get there. (And none of this should be to the exclusion of building go-karts in your garage if you want to).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591122061.379800",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SKF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I could see a future where programming is more centralized, and it's mostly a good thing for many of the reasons you describe. Much more is possible when you can harmonize the work of thousands of people.\n\nFor example, your programming editor might be a thin client over a mountain of cloud infrastructure. Very little software would run \"locally\", but that's ok, because software shouldn't care what device it's running on; your various devices should all be portals into a single, coherent world where all your data and your tools are accessible anywhere, and computational resources appear bottomless.\n\nIn that world, when you open an app or press \"compile\", a small slice of a datacenter springs to life for you, and it takes millions of lines of code and thousands of engineers to maintain all that. But that's invisible to you, because you shouldn't have to worry about it, the same way you don't have to know how a fuel injector works (let alone build one) in order to drive your car.\n\nModern web tech might be analogous to the complexity of a car, but using it is more like getting a chassis, engine, drivetrain, seats, etc. from various factories and assembling them yourself, and less like buying a complete working car and simply driving it where you want to go. As the \"car\" gets more complex and advanced, it's increasingly inaccessible for an individual to wrangle, but the assembled product can go further than something you could build from scratch in your garage.\n\nIf we're operating under the assumption that user has to do this assembly, you'll tend to want the simplest possible \"car\" you can design. But perhaps there's a second local maximum, where a \"car\" is a polished, well-encapsulated product (with extreme internal complexity and power) that's easy for anyone to pick up and use.\n\nSo we have advanced \"cars\"— complex, economy-of-scale-optimized engineering marvels— but individuals can't really buy and drive them. But we "
                            },
                            {
                                "type": "text",
                                "text": "could",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " get there. (And none of this should be to the exclusion of building go-karts in your garage if you want to)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U71PMQ1V0",
                    "UFLN9JFRT"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1591124990.381100",
        "client_msg_id": "b66825a7-dc4c-4410-9b60-728e71744e6b",
        "text": "Would you say something like airtable or notion is an example?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591122061.379800",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A\/L26",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would you say something like airtable or notion is an example?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1591125297.381500",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1591125445.000000"
        },
        "client_msg_id": "8c8d93c1-c5fd-4762-8fed-b986911e8490",
        "text": "I think they're doing good work in that direction, though more for \"databases\" than \"programming\". (My aim is to make Lynx fill the programming hole).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591122061.379800",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hvqY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think they're doing good work in that direction, though more for \"databases\" than \"programming\". (My aim is to make Lynx fill the programming hole)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1591127690.381800",
        "client_msg_id": "bb0b9e39-ecc1-42ff-a96b-33d9dd68606a",
        "text": "<@UC2A2ARPT>, this reminds me of a debate I had with someone at Pixar.\n\nInternally, engineering is largely divided between \"production\" and \"tools\". The former are artists and technical people who are actually building the movie itself, and the latter are software engineers who are building and maintaining the high-powered software it takes to make the movie.\n\nProduction often cobbles things together with hastily-coded scripts or node networks, and it's often fragile, ugly, duplicated— most complaints you could level against \"bad engineering\". Generally it's done under a deadline, though, in service of getting the best possible picture on the screen, and knowing the audience won't care about how the sausage is made.\n\nThis other person was griping about a script they had to maintain (and— probably with cause— had several of those complaints), and was arguing that production TDs shouldn't be allowed to write code if they couldn't engineer it properly, and that this stuff should be given to the tools department.\n\nBut the thing is, the tools engineers (and there are ~100 of them) all have their hands completely full on large-scale, long-term projects that are necessary to hit the highest level technical goals of a film, and beyond that, to keep the entire studio on the technological cutting edge. New projects are careful negotiations between all the films' needs and the tools department's limited resources. Bidding these projects takes time, and often they wait in line for several weeks (or months) behind critical bugs and features.\n\nIf tools engineers had to do all \"production\" engineering, that work would simply never get done— or the studio would need an engineering department three times as big, and for the exact same result on the screen.\n\nBashed-together scripts allow technical artists to solve a problem quickly and get back to making the movie. If they had to bid their project to an engineering team, prioritize it, get leadership support, and so on... they'd be waiting for weeks. They'd probably just tediously solve their problem by hand instead, and spend less time making the movie look good.\n\nThe dichotomy frequently isn't \"engineering things cleanly vs. cobbling things messily\", it's \"cobbling things messily vs. not doing them at all\".\n\nIf put into practice, that abstract complaint about the tidiness of how something is done— or gatekeeping about who gets to do it— would result in a worse movie.\n\nI don't have deep experience with Notion, but in general I think this principle extends to the outside world— there are lots of people who are spending hours doing things that should be automated, but there are way more one-off problems than there are engineers to architect tight solutions for each of them. \"Messy and done\" is better than \"not done\" or \"done tediously, at the expense of solving more central problems\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591058338.327500",
        "parent_user_id": "U01176YGU4W",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r53",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": ", this reminds me of a debate I had with someone at Pixar.\n\nInternally, engineering is largely divided between \"production\" and \"tools\". The former are artists and technical people who are actually building the movie itself, and the latter are software engineers who are building and maintaining the high-powered software it takes to make the movie.\n\nProduction often cobbles things together with hastily-coded scripts or node networks, and it's often fragile, ugly, duplicated— most complaints you could level against \"bad engineering\". Generally it's done under a deadline, though, in service of getting the best possible picture on the screen, and knowing the audience won't care about how the sausage is made.\n\nThis other person was griping about a script they had to maintain (and— probably with cause— had several of those complaints), and was arguing that production TDs shouldn't be allowed to write code if they couldn't engineer it properly, and that this stuff should be given to the tools department.\n\nBut the thing is, the tools engineers (and there are ~100 of them) all have their hands completely full on large-scale, long-term projects that are necessary to hit the highest level technical goals of a film, and beyond that, to keep the entire studio on the technological cutting edge. New projects are careful negotiations between all the films' needs and the tools department's limited resources. Bidding these projects takes time, and often they wait in line for several weeks (or months) behind critical bugs and features.\n\nIf tools engineers had to do all \"production\" engineering, that work would simply never get done— or the studio would need an engineering department three times as big, and for the exact same result on the screen.\n\nBashed-together scripts allow technical artists to solve a problem quickly and get back to making the movie. If they had to bid their project to an engineering team, prioritize it, get leadership support, and so on... they'd be waiting for weeks. They'd probably just tediously solve their problem by hand instead, and spend less time making the movie look good.\n\nThe dichotomy frequently isn't \"engineering things cleanly vs. cobbling things messily\", it's \"cobbling things messily vs. not doing them at all\".\n\nIf put into practice, that abstract complaint about the tidiness of how something is done— or gatekeeping about who gets to do it— would result in a worse movie.\n\nI don't have deep experience with Notion, but in general I think this principle extends to the outside world— there are lots of people who are spending hours doing things that should be automated, but there are way more one-off problems than there are engineers to architect tight solutions for each of them. \"Messy and done\" is better than \"not done\" or \"done tediously, at the expense of solving more central problems\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "hot_pepper",
                "users": [
                    "UMYKGHYBA",
                    "U9C92716C"
                ],
                "count": 2
            },
            {
                "name": "smile",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1591133484.382300",
        "client_msg_id": "dd4f74dd-08ed-4ab4-9d44-a0184445df70",
        "text": "Your Pixar anecdote would map perfectly to many (most?) video game teams, too.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591058338.327500",
        "parent_user_id": "U01176YGU4W",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ChpJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Your Pixar anecdote would map perfectly to many (most?) video game teams, too."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U6FKVSVCK",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UMWF81HTP",
        "type": "message",
        "ts": "1591166007.383300",
        "client_msg_id": "7a707f90-4e9f-4443-ae22-e82a301c7a0c",
        "text": "Reminds me of the discussion in this great thread: <https:\/\/twitter.com\/geoffreylitt\/status\/1177607448682582016>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4022671f3400",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-03\/775814402657_4022671f340032b9eb75_72.jpg",
            "first_name": "yoshiki",
            "real_name": "yoshiki",
            "display_name": "yoshiki",
            "team": "T5TCAFTA9",
            "name": "yoshikischmitz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591058338.327500",
        "parent_user_id": "U01176YGU4W",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/geoffreylitt|@geoffreylitt>: 1\/ I used to think specialized software to replace messy spreadsheets was unequivocal progress. Now I'm more conflicted.\n\nFeels a bit like saying \"Find the people who are still cooking at home, and sell them more restaurant food\"\n\n<https:\/\/twitter.com\/jasoncrawford\/status\/1177403618816749568>",
                "ts": 1569598469,
                "author_name": "Geoffrey Litt",
                "author_link": "https:\/\/twitter.com\/geoffreylitt\/status\/1177607448682582016",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/722626068293763072\/4erM-SPN_normal.jpg",
                "author_subname": "@geoffreylitt",
                "text": "1\/ I used to think specialized software to replace messy spreadsheets was unequivocal progress. Now I'm more conflicted.\n\nFeels a bit like saying \"Find the people who are still cooking at home, and sell them more restaurant food\"\n\n<https:\/\/twitter.com\/jasoncrawford\/status\/1177403618816749568>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/geoffreylitt\/status\/1177607448682582016",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/geoffreylitt\/status\/1177607448682582016",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            },
            {
                "fallback": "<https:\/\/twitter.com\/jasoncrawford|@jasoncrawford>: Good startup pattern today: Find an industry that is still run manually by people emailing PDFs and spreadsheets around; build a real data model &amp; workflow.\n\nDoing this in…\n\nFreight: <https:\/\/twitter.com\/flexport|@flexport> \nInsurance: <https:\/\/twitter.com\/NewfrontHQ|@NewfrontHQ> \nLending: <https:\/\/twitter.com\/blendlabsinc|@blendlabsinc>",
                "ts": 1569549872,
                "author_name": "Jason Crawford",
                "author_link": "https:\/\/twitter.com\/jasoncrawford\/status\/1177403618816749568",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1227771761078362113\/AaFoJ0VI_normal.jpg",
                "author_subname": "@jasoncrawford",
                "text": "Good startup pattern today: Find an industry that is still run manually by people emailing PDFs and spreadsheets around; build a real data model &amp; workflow.\n\nDoing this in…\n\nFreight: <https:\/\/twitter.com\/flexport|@flexport> \nInsurance: <https:\/\/twitter.com\/NewfrontHQ|@NewfrontHQ> \nLending: <https:\/\/twitter.com\/blendlabsinc|@blendlabsinc>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/jasoncrawford\/status\/1177403618816749568",
                "indent": true,
                "color": "32BBF3",
                "id": 2,
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Qha",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me of the discussion in this great thread: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/geoffreylitt\/status\/1177607448682582016"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]