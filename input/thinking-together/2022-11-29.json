[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1669752039.228079",
        "client_msg_id": "edfbc88b-3c4a-4708-94ab-6787ff7a95ab",
        "text": "&gt; Deep water: if you move away from text (where the language is external to the content) towards direct symbol manipulation through object networks, you enter the realm of forgotten heroes who have already done a lot.\n&gt; \nPlease be specific - Who? What?\n\n&gt; ... those heroes and their results, giving the theoretical explanation of my experience ... brought the understanding why I can't explain it so I gave up trying... why it was horribly wrong....\n&gt; \nPlease do elaborate on these points!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1669402506.515079",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H40yb",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Deep water: if you move away from text (where the language is external to the content) towards direct symbol manipulation through object networks, you enter the realm of forgotten heroes who have already done a lot.\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nPlease be specific - Who? What?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... those heroes and their results, giving the theoretical explanation of my experience ... brought the understanding why I can't explain it so I gave up trying... why it was horribly wrong....\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nPlease do elaborate on these points!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U046LSVRN1H",
        "type": "message",
        "ts": "1669752289.134639",
        "client_msg_id": "76367003-A6FF-4D4E-9146-6C1CAE5DFC05",
        "text": "Thanks for the feedback! I’d have to politely disagree about the point on language servers. I’ve tried interactive development and I think it’s a valid set of tradeoffs but not my personal cup of tea. \n\nTree sitter generating C is probably the right call, but I would be interested to see if generating Rust or Zig would be worthwhile, as you could keep the C ABI but make the build process way way easier. I’ve been trying to compile a rust codebase with tree-sitter to wasm and because of the C code, I can’t compile to wasm32-wasi without some messy patching, and wasm32-unknown-emscripten appears to be going out of date and has ABI incompatibilities with Rust compiled to wasm. If tree-sitter could generate rust it’d make the composability a lot nicer.\n\nAs for your last point, yeah fair. I’ll try to come up with good examples. Bison has quite poor documentation and an extremely poor dev experience but you’re right, I need to iron that out concretely. Racket is almost worth an entire blog post on its own. I like it a lot but it’s kind of too large and encompassing of an ecosystem to simply be a tool inside a compiler. You either use racket or you don’t. \n\nThanks again! ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2a2aca0fcc14",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-07\/4336773837699_2a2aca0fcc14c8e11371_72.png",
            "first_name": "Nicholas",
            "real_name": "Nicholas Yang",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nick581",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1669496452.119769",
        "parent_user_id": "U046LSVRN1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6YIVg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the feedback! "
                            },
                            {
                                "type": "text",
                                "text": "I’d"
                            },
                            {
                                "type": "text",
                                "text": " have to politely disagree about the point on language servers. "
                            },
                            {
                                "type": "text",
                                "text": "I’ve"
                            },
                            {
                                "type": "text",
                                "text": " tried interactive development and I think "
                            },
                            {
                                "type": "text",
                                "text": "it’s"
                            },
                            {
                                "type": "text",
                                "text": " a valid set of tradeoffs but not my personal cup of tea. \n\nTree sitter generating C is probably the right call, but I would be interested to see if generating Rust or Zig would be worthwhile, as you could keep the C ABI but make the build process way way easier. "
                            },
                            {
                                "type": "text",
                                "text": "I’ve"
                            },
                            {
                                "type": "text",
                                "text": " been trying to compile a rust codebase with tree-sitter to wasm and because of the C code, I "
                            },
                            {
                                "type": "text",
                                "text": "can’t"
                            },
                            {
                                "type": "text",
                                "text": " compile to wasm32-wasi without some messy patching, and wasm32-unknown-emscripten appears to be going out of date and has ABI incompatibilities with Rust compiled to wasm. If tree-sitter could generate rust "
                            },
                            {
                                "type": "text",
                                "text": "it’d"
                            },
                            {
                                "type": "text",
                                "text": " make the composability a lot nicer.\n\nAs for your last point, yeah fair. "
                            },
                            {
                                "type": "text",
                                "text": "I’ll"
                            },
                            {
                                "type": "text",
                                "text": " try to come up with good examples. Bison has quite poor documentation and an extremely poor dev experience but "
                            },
                            {
                                "type": "text",
                                "text": "you’re"
                            },
                            {
                                "type": "text",
                                "text": " right, I need to iron that out concretely. Racket is almost worth an entire blog post on its own. I like it a lot but "
                            },
                            {
                                "type": "text",
                                "text": "it’s"
                            },
                            {
                                "type": "text",
                                "text": " kind of too large and encompassing of an ecosystem to simply be a tool inside a compiler. You either use racket or you "
                            },
                            {
                                "type": "text",
                                "text": "don’t"
                            },
                            {
                                "type": "text",
                                "text": ". \n\nThanks again! "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "Good stuff there, thanks for sharing!",
        "username": "nilix",
        "icons": {
            "image_48": "https:\/\/s3-us-west-2.amazonaws.com\/slack-files2\/bot_icons\/2022-11-09\/4348602967203_48.png"
        },
        "type": "message",
        "ts": "1669754787.055839",
        "bot_id": "BEYLABLRH",
        "app_id": "A1BKR8Y8J",
        "thread_ts": "1669402506.515079",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n6Peu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good stuff there, thanks for sharing!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]