[
    {
        "text": "Finally, finished my most recent article (and published a package): <https:\/\/kizu.dev\/preview-mixin\/> — a lot of overcomplicated CSS, but one that makes it much easier to debug various dynamic values. For now, it is mostly for displaying them as text when possible, but I have a few ideas about some other visualizations. I already used it for a few experiments — and _seeing_ the values of what you're working on in real time really helps.",
        "files": [
            {
                "id": "F08AGL8MU68",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U087592N6HE",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LE5nj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Finally, finished my most recent article (and published a package): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/kizu.dev\/preview-mixin\/"
                            },
                            {
                                "type": "text",
                                "text": " — a lot of overcomplicated CSS, but one that makes it much easier to debug various dynamic values. For now, it is mostly for displaying them as text when possible, but I have a few ideas about some other visualizations. I already used it for a few experiments — and "
                            },
                            {
                                "type": "text",
                                "text": "seeing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the values of what you're working on in real time really helps."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1737975094.579979",
        "client_msg_id": "ab09e265-ee44-4d7a-a5ef-246986fbc72d",
        "thread_ts": "1737975094.579979",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1738616377.531339",
        "reply_users": [
            "U0887QU9G2V"
        ],
        "replies": [
            {
                "user": "U0887QU9G2V",
                "ts": "1738616377.531339"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U06DZDM8C93"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U06SS0DHZD1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U08A3DJ5VKM",
        "type": "message",
        "ts": "1738022087.811939",
        "client_msg_id": "4a54cf03-ac89-4017-b750-64fc194acbb4",
        "text": "I think representing a tree model as a tree data structure (mimicking containment by tucking nodes behind a chain of native pointers) turns data manipulation into a cumbersome process. The tree representation gives close to nothing in terms of access ergonomics, so you practically always need secondary\/tertiary representations\/indexes to avoid traversing it over and over. In my case, I needed the ability to efficiently find nodes in the tree\/graph, and also the ability to natively instantiate nodes across many places. The choice for a flat strucure with data-level pointers affords that. This in-memory repr is basically the sorted in-order image of the tree, which is usually the sort of traversal you'll be performing repeatedly to manipulate the document. Now the matter of finding a set of nodes with a given type\/value becomes a simple branchless\/stackless loop\/filter, both easy to write and more performant. Context-free searches can also be fully paralellized if needed. I understand it's a very particular case, but it just plays very nicely with other systems I'm developing",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f15ff7293c76",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-24\/8368890056976_f15ff7293c7610751dc7_72.jpg",
            "first_name": "Jon",
            "real_name": "Jon Secchis",
            "display_name": "Jon Secchis",
            "team": "T5TCAFTA9",
            "name": "jon979",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737703849.426849",
        "parent_user_id": "U08A3DJ5VKM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gQCgJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think representing a tree model as a tree data structure (mimicking containment by tucking nodes behind a chain of native pointers) turns data manipulation into a cumbersome process. The tree representation gives close to nothing in terms of access ergonomics, so you practically always need secondary\/tertiary representations\/indexes to avoid traversing it over and over. In my case, I needed the ability to efficiently find nodes in the tree\/graph, and also the ability to natively instantiate nodes across many places. The choice for a flat strucure with data-level pointers affords that. This in-memory repr is basically the sorted in-order image of the tree, which is usually the sort of traversal you'll be performing repeatedly to manipulate the document. Now the matter of finding a set of nodes with a given type\/value becomes a simple branchless\/stackless loop\/filter, both easy to write and more performant. Context-free searches can also be fully paralellized if needed. I understand it's a very particular case, but it just plays very nicely with other systems I'm developing"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]