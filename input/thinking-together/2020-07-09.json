[
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1594279127.117000",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1594319548.000000"
        },
        "client_msg_id": "a958c610-4773-4d75-8973-b6d9ef42d99a",
        "text": "One important aspect of what I want to build, is the possibility for the users to define their own visual representations for their programming artifacts. Of course the programming environment will come with some visual semantics as building blocks or general tools, but I would like to allow anybody to add new one.\n\nThe idea is that the history of visual programming is full of unsuccessful attempts (for an \"incomplete\"\/old list see for example: <http:\/\/blog.interfacevision.com\/design\/design-visual-progarmming-languages-snapshots\/>). So I feel that finding and designing the \"good one\" from start is quite hard and will most certainly miss essentials features. So I want to provide some core functionalities that are enough to build complete things but also let some other visual tools emerge from actual usages.\n\nThis idea is in fact at the core of my project.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0=j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One important aspect of what I want to build, is the possibility for the users to define their own visual representations for their programming artifacts. Of course the programming environment will come with some visual semantics as building blocks or general tools, but I would like to allow anybody to add new one.\n\nThe idea is that the history of visual programming is full of unsuccessful attempts (for an \"incomplete\"\/old list see for example: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/blog.interfacevision.com\/design\/design-visual-progarmming-languages-snapshots\/"
                            },
                            {
                                "type": "text",
                                "text": "). So I feel that finding and designing the \"good one\" from start is quite hard and will most certainly miss essentials features. So I want to provide some core functionalities that are enough to build complete things but also let some other visual tools emerge from actual usages.\n\nThis idea is in fact at the core of my project."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1594279299.117300",
        "client_msg_id": "23c67236-8324-4d84-bcbe-e33946549766",
        "text": "In fact, \"visual representations of programming artifacts\" will be first class citizens in my programming environment, I guess in a similar way that functions are first class citizens in function oriented programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b077T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In fact, \"visual representations of programming artifacts\" will be first class citizens in my programming environment, I guess in a similar way that functions are first class citizens in function oriented programming."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1594280386.117700",
        "client_msg_id": "86a01ce6-dbcc-4f2c-9647-28bf536ef527",
        "text": "<@UCUSW7WVD> There is value in placing the extracted triples in the context of an ontology, thus facilitating richer queries and automatic reasoning about the code. It \"adds\" knowledge to the codebase in the same way that having knowledge of programming adds to one's understanding of a given piece of code.\n\nI think it would be quite interesting to combine the ideas in that article with the direction seen in Codeq: <https:\/\/blog.datomic.com\/2012\/10\/codeq.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q2SRe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " There is value in placing the extracted triples in the context of an ontology, thus facilitating richer queries and automatic reasoning about the code. It \"adds\" knowledge to the codebase in the same way that having knowledge of programming adds to one's understanding of a given piece of code.\n\nI think it would be quite interesting to combine the ideas in that article with the direction seen in Codeq: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.datomic.com\/2012\/10\/codeq.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "USJ9LD0E4"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1594280703.118000",
        "client_msg_id": "11f40a90-4806-4078-b400-ef039b32d72e",
        "text": "You might consider a graph database for storing the (ahem) graph?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uFs3B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You might consider a graph database for storing the (ahem) graph?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594282954.120300",
        "client_msg_id": "3DF08D3B-2596-437B-9A78-257547806C30",
        "text": "I really appreciate <@UE1JQM9HQ>’s:\n\n&gt; It’s interesting to note that it is written as an invitation to imagine a better world.\n&gt; \nBecause the two things we all seem to like most is (a) imagining a better world and (b) telling other people why their imagined version of a better world isn’t going to work. ;-)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ifm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really appreciate "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": "’s:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s interesting to note that it is written as an invitation to imagine a better world.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBecause the two things we all seem to like most is (a) imagining a better world and (b) telling other people why their imagined version of a better world isn’t going to work. ;-)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1594283395.123900",
        "edited": {
            "user": "UE1JQM9HQ",
            "ts": "1594283398.000000"
        },
        "client_msg_id": "d1e97509-c590-4163-83f5-fd6f2f9acf01",
        "text": "<@UCUSW7WVD> The representation itself does not add or remove any semantics, but once you see code as data, the semantics are added in the queries, visualizations you can do with that data. It is the act of formulating thought through those analysese that is the key.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1uET",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " The representation itself does not add or remove any semantics, but once you see code as data, the semantics are added in the queries, visualizations you can do with that data. It is the act of formulating thought through those analysese that is the key."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1594283860.129300",
        "client_msg_id": "bba1b802-3ccb-4591-b79a-25cc9eb2d840",
        "text": "Did you guys know about this one - <https:\/\/brython.info\/index.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594283860.129300",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1594373051.194900",
        "reply_users": [
            "UKP3B2J5D",
            "UPVBV34EL"
        ],
        "replies": [
            {
                "user": "UKP3B2J5D",
                "ts": "1594339775.189300"
            },
            {
                "user": "UPVBV34EL",
                "ts": "1594373051.194900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "Brython",
                "title_link": "https:\/\/brython.info\/index.html",
                "text": "Brython",
                "fallback": "Brython",
                "from_url": "https:\/\/brython.info\/index.html",
                "service_icon": "https:\/\/brython.info\/favicon.png",
                "service_name": "brython.info",
                "id": 1,
                "original_url": "https:\/\/brython.info\/index.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1gx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Did you guys know about this one - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/brython.info\/index.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594284474.136400",
        "client_msg_id": "4D48FE0A-D297-43D4-8C08-11F2F16205D7",
        "text": "I’m having a hard time resisting that urge to at least turn this into a 2-by-2, but ok… I’ll play by the rules.\n\nGiven that spectrum I guess I fall into the latter extreme, because I think the power that programming gives to programmers is to improve their own process and often through building their own tools (albeit “tool” here can have a much broader definition). If you can program, you can make computers do things that regular people can’t make them do. \n\nTo democratize access to that power, a great alternative to teaching everybody how to code is to instead make building things easier. And I still believe that is very much possible, because we currently live deep in just one specific branch of the solution space which was strongly influenced by the needs to not just create things, but to satisfy certain success metrics (revenue, popularity, engagement, etc.).\n\nThat’s why we can find so many promising ideas closer to the trunk of the tree in the papers of the 60-80s, when using computers was much closer to programming them, and when visions were mostly driven by imagination and less warped by specific incentives.\n\nThe most important reason for giving people the power to build their own tools instead of building them for them is that they know what they need best and I will never be as good as them to really understand what they really want or need. They might not understand it fully themselves. That’s why they need to build it themselves. They need to invent it themselves. They need to discover solutions on their own. And to do so, they need to have the power to do that. And that needs to be simpler than it is today.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oCe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m having a hard time resisting that urge to at least turn this into a 2-by-2, but ok… I’ll play by the rules.\n\nGiven that spectrum I guess I fall into the latter extreme, because I think the power that programming gives to programmers is to improve their own process and often through building their own tools (albeit “tool” here can have a much broader definition). If you can program, you can make computers do things that regular people can’t make them do. \n\nTo democratize access to that power, a great alternative to teaching everybody how to code is to instead make building things easier. And I still believe that is very much possible, because we currently live deep in just one specific branch of the solution space which was strongly influenced by the needs to not just create things, but to satisfy certain success metrics (revenue, popularity, engagement, etc.).\n\n"
                            },
                            {
                                "type": "text",
                                "text": "That’s why we can find so many promising ideas closer to the trunk of the tree in the papers of the 60-80s, when using computers was much closer to programming them, and when visions were mostly driven by imagination and less warped by specific incentives.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "The most important reason for giving people the power to build their own tools instead of building them for them is that they know what they need best and I will never be as good as them to really understand what they really want or need. They might not understand it fully themselves. That’s why they need to build it themselves. They need to invent it themselves. They need to discover solutions on their own. And to do so, they need to have the power to do that. And that needs to be simpler than it is today."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "U013ZLJARC7"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL",
                    "UAVCC2X70"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1594284660.136600",
        "client_msg_id": "73abdcc8-f90d-4179-9a4b-61f3fe2de98c",
        "text": "I've been using BaseX recently and I was pleasantly surprised how nice XQuery 3.1 is to use. Since you are talking about storing expressions XML may be perfect for that. Who knows... you may even enjoy transforming your AST with XSLT  3.1 (although you don't need XSLT). <https:\/\/docs.basex.org\/wiki\/Main_Page>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3taW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been using BaseX recently and I was pleasantly surprised how nice XQuery 3.1 is to use. Since you are talking about storing expressions XML may be perfect for that. Who knows... you may even enjoy transforming your AST with XSLT  3.1 (although you don't need XSLT). "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.basex.org\/wiki\/Main_Page"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1594285475.136800",
        "client_msg_id": "533dfbcd-6619-4d1d-835f-f2169fbeb419",
        "text": "Some of the ideas on that blog post reminded me of existing projects:\n• Queries over a code base: <https:\/\/www.ndepend.com\/features\/cqlinq#CQL>\n• Addressability of code: <https:\/\/www.unisonweb.org\/docs\/tour>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "service_name": "NDepend",
                "title": "Code Rule and Code Query over LINQ (CQLinq)",
                "title_link": "https:\/\/www.ndepend.com\/features\/cqlinq#CQL",
                "text": "NDepend has more than 150 default code rules to check against best practices and CQLinq for custom code queries.",
                "fallback": "NDepend: Code Rule and Code Query over LINQ (CQLinq)",
                "from_url": "https:\/\/www.ndepend.com\/features\/cqlinq#CQL",
                "service_icon": "https:\/\/www.ndepend.com\/assets\/img\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.ndepend.com\/features\/cqlinq#CQL"
            },
            {
                "title": "A tour of Unison",
                "title_link": "https:\/\/www.unisonweb.org\/docs\/tour",
                "text": "A tour of Unison and its codebase management tool",
                "fallback": "A tour of Unison",
                "from_url": "https:\/\/www.unisonweb.org\/docs\/tour",
                "service_name": "unisonweb.org",
                "id": 2,
                "original_url": "https:\/\/www.unisonweb.org\/docs\/tour"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p9v=M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some of the ideas on that blog post reminded me of existing projects:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Queries over a code base: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.ndepend.com\/features\/cqlinq#CQL"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Addressability of code: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.unisonweb.org\/docs\/tour"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UKP3B2J5D"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1594285721.137200",
        "client_msg_id": "356a1ff3-3bb4-4969-87af-996eb2e9e581",
        "text": "Also came across this tiny ontology in teh past... I think it is a student project but who knows, may be useful if you decide to actually explore the RDF idea further: <https:\/\/fno.io\/spec\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TnC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also came across this tiny ontology in teh past... I think it is a student project but who knows, may be useful if you decide to actually explore the RDF idea further: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/fno.io\/spec\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016LEA3J1H",
        "type": "message",
        "ts": "1594299098.138300",
        "client_msg_id": "af7cd49f-3bf4-4264-90e3-a6cf8f0baeb2",
        "text": "<@ULK0Z4MPV> have you seen Materialize? <https:\/\/materialize.io\/> if you could represent your computation as a SQL query it would do what you want very efficiently and typed all the way through",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7082261f477c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-06\/1225163496802_7082261f477cd8a85548_72.jpg",
            "first_name": "Harry",
            "real_name": "Harry Brundage",
            "display_name": "Harry Brundage",
            "team": "T5TCAFTA9",
            "name": "harry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "attachments": [
            {
                "service_name": "Materialize",
                "title": "Homepage",
                "title_link": "https:\/\/materialize.io\/",
                "text": "A Streaming Database for Real-Time Applications",
                "fallback": "Materialize: Homepage",
                "image_url": "https:\/\/materialize.io\/wp-content\/uploads\/2020\/02\/Asset-3.png",
                "from_url": "https:\/\/materialize.io\/",
                "image_width": 677,
                "image_height": 250,
                "image_bytes": 140831,
                "service_icon": "https:\/\/materialize.io\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/materialize.io\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X0=Ab",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULK0Z4MPV"
                            },
                            {
                                "type": "text",
                                "text": " have you seen Materialize? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/materialize.io\/"
                            },
                            {
                                "type": "text",
                                "text": " if you could represent your computation as a SQL query it would do what you want very efficiently and typed all the way through"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL5AX4G2H",
        "type": "message",
        "ts": "1594305000.145100",
        "text": "This week in code faster. Unlike last week, my post did not go viral. What a difference! Not viral means ~500 views, viral means 18k (36x!). Beginner tutorials have much better virality because of their wider appeal, and there's some luck involved. However, there are some ideas about jq I want to write about to finish up my \"mastering jq\" series. After this, I'll try writing some basic tutorials to various unix commands (sed, xargs, grep, etc.) and see if other people find them more valuable. It's a lot more fun to write about advanced techniques, but as JZ said, \"If skills sold, truth be told, I'd probably be lyrically Talib Kweli. Truthfully I want to rhyme like Common Sense (but I did 5 mil). I ain't been rhyming like Common since\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b05739c44158",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-12-05\/1552783044467_b05739c44158d860f3bd_72.png",
            "first_name": "",
            "real_name": "Tyler Adams",
            "display_name": "Tyler Adams",
            "team": "T5TCAFTA9",
            "name": "coppero1237",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "czE2H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This week in code faster. Unlike last week, my post did not go viral. What a difference! Not viral means ~500 views, viral means 18k (36x!). Beginner tutorials have much better virality because of their wider appeal, and there's some luck involved. However, there are some ideas about jq I want to write about to finish up my \"mastering jq\" series. After this, I'll try writing some basic tutorials to various unix commands (sed, xargs, grep, etc.) and see if other people find them more valuable. It's a lot more fun to write about advanced techniques, but as JZ said, \"If skills sold, truth be told, I'd probably be lyrically Talib Kweli. Truthfully I want to rhyme like Common Sense (but I did 5 mil). I ain't been rhyming like Common since\""
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594305313.149000",
        "client_msg_id": "5E0AFBE3-88D0-4101-A89B-DA0B284C1892",
        "text": "one thing i’d like to see in visual programming paradigms is using an object-oriented heuristic: if you have a bunch of identifiers that start or end with the same word (eg xReducer, yReducer or ICommand, IUser), in OOP it should probably be a type. in visual programming it should probably be an affordance, like a color, shape, symbol, or some combination",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "reply_count": 15,
        "reply_users_count": 5,
        "latest_reply": "1594504872.251000",
        "reply_users": [
            "ULK0Z4MPV",
            "UKP3B2J5D",
            "U0139HUPMQ9",
            "UHWC9PXBL",
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "ULK0Z4MPV",
                "ts": "1594306752.156800"
            },
            {
                "user": "UKP3B2J5D",
                "ts": "1594307646.159900"
            },
            {
                "user": "U0139HUPMQ9",
                "ts": "1594312359.160700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1594318929.164900"
            },
            {
                "user": "UKP3B2J5D",
                "ts": "1594327115.171600"
            },
            {
                "user": "UKP3B2J5D",
                "ts": "1594327284.175800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1594329319.179300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1594329332.179500"
            },
            {
                "user": "UKP3B2J5D",
                "ts": "1594332736.184300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1594333314.184500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1594366160.194100"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1594386836.198800"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1594449531.215200"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1594504815.250800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1594504872.251000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xEl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "one thing i’d like to see in visual programming paradigms is using an object-oriented heuristic: if you have a bunch of identifiers that start or end with the same word (eg xReducer, yReducer or ICommand, IUser), in OOP it should probably be a type. in visual programming it should probably be an affordance, like a color, shape, symbol, or some combination"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULK0Z4MPV",
        "type": "message",
        "ts": "1594305401.149100",
        "client_msg_id": "3a63e869-bed8-4b70-832f-d885785880ca",
        "text": "<@U013ZLJARC7> I was thinking a graph database but all the relationships are stored in the formula string as well. Perhaps I could split the formula into a ast and store that but that feels a little absurd.\n\n<@UN9SCH5RD> Thanks, will take a look.\n\n<@U016LEA3J1H> Interesting approach. Will look into it!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "84fdccb39d9b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-07\/1111736156419_84fdccb39d9b31c2626b_72.jpg",
            "first_name": "",
            "real_name": "Ryan King",
            "display_name": "Ryan King",
            "team": "T5TCAFTA9",
            "name": "ryan.king1809",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eCnS4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " I was thinking a graph database but all the relationships are stored in the formula string as well. Perhaps I could split the formula into a ast and store that but that feels a little absurd.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " Thanks, will take a look.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U016LEA3J1H"
                            },
                            {
                                "type": "text",
                                "text": " Interesting approach. Will look into it!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594305652.154500",
        "client_msg_id": "772872CC-25FF-4867-AE6C-EB863D7651CA",
        "text": "i’m trying to build the latter but i’m trying to make it explicitly feel like the opposite side, where the problem domain is the transformation of data over time. hard to describe with words but i’ll give it a shot:\n\nif your tools let you describe and transform structured data, and they can take unstructured data and turn it into data, and you describe those transformations and build the tool in the same data format, then you should be able to use the tool on itself to make the tool look like your domain",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G6x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i’m trying to build the latter but i’m trying to make it explicitly feel like the opposite side, where the problem domain is the transformation of data over time. hard to describe with words but i’ll give it a shot:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "if your tools let you describe and transform structured data, and they can take unstructured data and turn it into data, and you describe those transformations and build the tool in the same data format, then you should be able to use the tool on itself to make the tool look like your domain"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594306507.156500",
        "client_msg_id": "88A31BDC-D853-4DBA-943B-420E113D0188",
        "text": "like, you start by putting some specific piece of data into, idk, a form? and then you extract the stuff that changes, describe how it changes, and then repeat until you have your model of the domain",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7NI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like, you start by putting some specific piece of data into, idk, a form? and then you extract the stuff that changes, describe how it changes, and then repeat until you have your model of the domain"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULK0Z4MPV",
        "type": "message",
        "ts": "1594306752.156800",
        "client_msg_id": "b48f210c-145f-4648-b063-aee8faed01f9",
        "text": "Reminds me of zachtronics games <http:\/\/www.zachtronics.com\/opus-magnum\/>\n\nThere's also something interesting about being able to see your code move and execute. It makes it really easy to spot failures in logic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "84fdccb39d9b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-07\/1111736156419_84fdccb39d9b31c2626b_72.jpg",
            "first_name": "",
            "real_name": "Ryan King",
            "display_name": "Ryan King",
            "team": "T5TCAFTA9",
            "name": "ryan.king1809",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JqczW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me of zachtronics games "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.zachtronics.com\/opus-magnum\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere's also something interesting about being able to see your code move and execute. It makes it really easy to spot failures in logic."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sparkling_heart",
                "users": [
                    "U016LEA3J1H"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1594307646.159900",
        "edited": {
            "user": "UKP3B2J5D",
            "ts": "1594308093.000000"
        },
        "client_msg_id": "C2BE28BB-A010-4E26-87DD-757E008ADE46",
        "text": "Hm I think this is a good idea but I worry it would get out of hand quickly. \nAnother example of an affordance would be that if it’s a commutative operation the symbol has to be symmetric etc. There are probably more rules like this - also similar to linting rules where class names are capitalised. Functions are lowercase etc",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kre+2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hm I think this is a good idea but I worry it would get out of hand quickly. \nAnother example of an affordance would be that if it’s a commutative operation the symbol has to be symmetric etc. There are probably more rules like this - also similar to linting rules where class names are capitalised. Functions are lowercase etc"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U0139HUPMQ9",
        "type": "message",
        "ts": "1594312359.160700",
        "edited": {
            "user": "U0139HUPMQ9",
            "ts": "1594312421.000000"
        },
        "client_msg_id": "3600dad1-50d5-4ba6-8bc8-f713b1ab647a",
        "text": "I really like that <@ULK0Z4MPV>. being able to see the code move and execute is also the core idea behind Philip Guo's Python Tutor (<http:\/\/www.pythontutor.com|link> for those who are unfamiliar with it)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3dec956efe5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3dec956efe594149cbf027145d37aa47.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Sverrir",
            "real_name": "Sverrir Thorgeirsson",
            "display_name": "Sverrir Thorgeirsson",
            "team": "T5TCAFTA9",
            "name": "sverrir.thorgeirsson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mT7GO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like that "
                            },
                            {
                                "type": "user",
                                "user_id": "ULK0Z4MPV"
                            },
                            {
                                "type": "text",
                                "text": ". being able to see the code move and execute is also the core idea behind Philip Guo's Python Tutor ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.pythontutor.com",
                                "text": "link"
                            },
                            {
                                "type": "text",
                                "text": " for those who are unfamiliar with it)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "ULK0Z4MPV",
                    "UHWC9PXBL",
                    "UKP3B2J5D"
                ],
                "count": 3
            },
            {
                "name": "100",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1594313366.161000",
        "client_msg_id": "e10df99a-336c-469f-aa76-b81f286cf4d5",
        "text": "Ah, I think I misunderstood the situation! It seemed to me that you might have multiple pieces of code in different places that referenced one another, in which case you'd want some link between a node in one AST to a node in another AST to keep track of dependencies between \"code blocks\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WEB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, I think I misunderstood the situation! It seemed to me that you might have multiple pieces of code in different places that referenced one another, in which case you'd want some link between a node in one AST to a node in another AST to keep track of dependencies between \"code blocks\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1594313897.161700",
        "client_msg_id": "65BD8009-65FA-49CD-9F46-53AAB6FB462C",
        "text": "If you insist on an external database then Neo4j is a lot of fun the two-way relationships are very useful when you’re crawling your graph all different directions. There in my design spec but I actually haven’t needed to use them yet. It’s a very powerful data structure and illuminates most and use cases that would otherwise call for a relational database",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xXF+r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you insist on an external database then Neo4j is a lot of fun the two-way relationships are very useful when you’re crawling your graph all different directions. There in my design spec but I actually haven’t needed to use them yet. It’s a very powerful data structure and illuminates most and use cases that would otherwise call for a relational database"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULK0Z4MPV",
        "type": "message",
        "ts": "1594317837.164200",
        "client_msg_id": "a2b86bde-dc01-4e91-aa63-beaa94b4e9df",
        "text": "Yes, that could definitely be beneficial, thanks! I'll have to develop better understanding of what jobs are required from the database and client to reach the best solution (I also need the graph on the client).\n\nI'm thinking mongo might be the simplest solution for the time being - it's easy to learn and will remove the constraints I'm experiencing with postgres. And once the app is further developed I can reassess if a graph database will be more beneficial, I think it's too early to know right now.\n\nThanks for all your advice, it's been really helpful :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "84fdccb39d9b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-07\/1111736156419_84fdccb39d9b31c2626b_72.jpg",
            "first_name": "",
            "real_name": "Ryan King",
            "display_name": "Ryan King",
            "team": "T5TCAFTA9",
            "name": "ryan.king1809",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZQk\/2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, that could definitely be beneficial, thanks! I'll have to develop better understanding of what jobs are required from the database and client to reach the best solution (I also need the graph on the client).\n\nI'm thinking mongo might be the simplest solution for the time being - it's easy to learn and will remove the constraints I'm experiencing with postgres. And once the app is further developed I can reassess if a graph database will be more beneficial, I think it's too early to know right now.\n\nThanks for all your advice, it's been really helpful :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594318929.164900",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1594328840.000000"
        },
        "client_msg_id": "cd913824-d194-4bec-b560-e13ec99a1904",
        "text": "<@UKP3B2J5D> i think you’re right about it getting out of hand if the system isn’t carefully designed. there are a few ways to combine things that might make such a system more robust to change. For example, in the case of a data structure, if you have visual primitives that match your data primitives, you could potentially combine those visual primitives in the same way you combine the semantic primitives. i think it’d also be important to start with something smaller than, say, java.\n\nAt a minimum, we’re doing our best to keep all this complexity in our heads using naming things for our existing systems, which work ok (for a sufficiently cynical definition of “ok”)\n\nOn the other hand, we track a lot of visual primitives in everyday life. In the common case with languages like english that are made up of letters, cognitive studies show that we tend to read words sort of like individual gylphs (wihch is why you can raed wrods werhe the ltetrs are jmuebld according to Many Memes). and with experts using systems, like airline pilots, mathematicians, and carpenters, people seem to have a facility for remembering thousands of things provided that they have a context where theyre using them often. Or even in games—for example, most hearthstone players have all of the cards and their effects memorized by picture just as a side effect of playing the game. more so for magic the gathering, where the smallest set of allowed cards for tournament play is usually around 2,700",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GVs\/0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKP3B2J5D"
                            },
                            {
                                "type": "text",
                                "text": " i think you’re right about it getting out of hand if the system isn’t carefully designed. there are a few ways to combine things that might make such a system more robust to change. For example, in the case of a data structure, if you have visual primitives that match your data primitives, you could potentially combine those visual primitives in the same way you combine the semantic primitives. i think it’d also be important to start with something smaller than, say, java.\n\nAt a minimum, we’re doing our best to keep all this complexity in our heads using naming things for our existing systems, which work ok (for a sufficiently cynical definition of “ok”)\n\nOn the other hand, we track a lot of visual primitives in everyday life. In the common case with languages like english that are made up of letters, cognitive studies show that we tend to read words sort of like individual gylphs (wihch is why you can raed wrods werhe the ltetrs are jmuebld according to Many Memes). and with experts using systems, like airline pilots, mathematicians, and carpenters, people seem to have a facility for remembering thousands of things provided that they have a context where theyre using them often. Or even in games—for example, most hearthstone players have all of the cards and their effects memorized by picture just as a side effect of playing the game. more so for magic the gathering, where the smallest set of allowed cards for tournament play is usually around 2,700"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594320047.165200",
        "client_msg_id": "fcbfe591-0f43-40b1-9d6d-94beabb87223",
        "text": "<@UJ6LDMMN0>\n\n&gt; One important aspect of what I want to build, is the possibility for the users to define their own visual representations for their programming artifacts. Of course the programming environment will come with some visual semantics as building blocks or general tools, but I would like to allow anybody to add new one\nWhen the user defines a new visual representation, is that like defining a new datatype or function, or is it more like defining a new paradigm or means of evaluation — new semantics — like imperative, FP, stack-based, CSP, eager-vs-lazy, curried, etc.?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yfzgP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJ6LDMMN0"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One important aspect of what I want to build, is the possibility for the users to define their own visual representations for their programming artifacts. Of course the programming environment will come with some visual semantics as building blocks or general tools, but I would like to allow anybody to add new one"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhen the user defines a new visual representation, is that like defining a new datatype or function, or is it more like defining a new paradigm or means of evaluation — new semantics — like imperative, FP, stack-based, CSP, eager-vs-lazy, curried, etc.?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594320744.165400",
        "client_msg_id": "96a966fb-304e-4120-bf20-a9914daefe17",
        "text": "Based on the responses so far (thanks!) I think I underspecified the last category. I was hoping the examples would make it clear, but in the cold light of morning yadda yadda.\n\nAs I said in the reply to Nicolas, I'm interested in thoughts\/work at the paradigms &amp; semantics level. Tools that are designed to be a scaffold for language (or \"programming system\", though I dislike the term) experimentation. As a node-and-wire example, it'd be an environment that may include nodes and wires, and some execution strategy that covers what to do with those nodes and wires, but that doesn't expect you to stick with that execution strategy. You can (and are encouraged to) define what it means to be a node or an edge — to turn <http:\/\/puredata.info|Pure Data> into <http:\/\/joshuahhh.com\/projects\/pane\/|PANE>. You can decide that there are no edges.\n\nWhen someone like Rich Hickey <https:\/\/clojure.org\/about\/history|creates> a Clojure or a Datomic, this is the level that he's thinking at: What semantics should Clojure have, and why? I'm interested in tools that are designed to support working at this level. I don't know what to call them, or how to even frame them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D=XNS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Based on the responses so far (thanks!) I think I underspecified the last category. I was hoping the examples would make it clear, but in the cold light of morning yadda yadda.\n\nAs I said in the reply to Nicolas, I'm interested in thoughts\/work at the paradigms & semantics level. Tools that are designed to be a scaffold for language (or \"programming system\", though I dislike the term) experimentation. As a node-and-wire example, it'd be an environment that may include nodes and wires, and some execution strategy that covers what to do with those nodes and wires, but that doesn't expect you to stick with that execution strategy. You can (and are encouraged to) define what it means to be a node or an edge — to turn "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/puredata.info",
                                "text": "Pure Data"
                            },
                            {
                                "type": "text",
                                "text": " into "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/joshuahhh.com\/projects\/pane\/",
                                "text": "PANE"
                            },
                            {
                                "type": "text",
                                "text": ". You can decide that there are no edges.\n\nWhen someone like Rich Hickey "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/clojure.org\/about\/history",
                                "text": "creates"
                            },
                            {
                                "type": "text",
                                "text": " a Clojure or a Datomic, this is the level that he's thinking at: What semantics should Clojure have, and why? I'm interested in tools that are designed to support working at this level. I don't know what to call them, or how to even frame them."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1594323540.165800",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1594323547.000000"
        },
        "client_msg_id": "e573e9fb-35a7-481f-9377-453788931bd2",
        "text": "Ivan, it is exactly what I have in mind and what I want to build: an environment that provides tools to allow the definition of visual representations and how these representations are used to produced a behavior. Even if it can stay at the \"new datatype or function\" definition level, the real plus is to allow the user to tell what to do with the information in the visual representation.\n\nSo, one can define some nodes and wires representation for a build system, where rounded boxes defines files, squared boxes for bash building rules and links for dependencies, and that this produces a `Makefile`. Someone else might use something similar but to produce a `.gitlab-ci.yml` file. And a third one will have the rules in something else than bash (maybe another visual?) and that it is plugged directly to a \"live\" customed building system (maybe a serverless infra).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UFBd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ivan, it is exactly what I have in mind and what I want to build: an environment that provides tools to allow the definition of visual representations and how these representations are used to produced a behavior. Even if it can stay at the \"new datatype or function\" definition level, the real plus is to allow the user to tell what to do with the information in the visual representation.\n\nSo, one can define some nodes and wires representation for a build system, where rounded boxes defines files, squared boxes for bash building rules and links for dependencies, and that this produces a "
                            },
                            {
                                "type": "text",
                                "text": "Makefile",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Someone else might use something similar but to produce a "
                            },
                            {
                                "type": "text",
                                "text": ".gitlab-ci.yml",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " file. And a third one will have the rules in something else than bash (maybe another visual?) and that it is plugged directly to a \"live\" customed building system (maybe a serverless infra)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1594326695.166800",
        "client_msg_id": "1E243DA4-EE9D-4E30-A3F0-3A31BD0143D8",
        "text": "Also when you are asking about Database is you kind a need to specify what language your programming in because not every database has bindings for every language, and also some languages have concepts and data types which are not storable in many databases. It becomes a gigantic pain in the ass when you are having to encode and decode constantly when moving to and from the database. I would call this in impedance mismatch, and it’s one of the reasons I put the database inside the language in Beads because I have data types that don’t exist and other systems such as extended arithmetic, and a bookean that has four states. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eXp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also when you are asking about Database is you kind a need to specify what language your programming in because not every database has bindings for every language, and also some languages have concepts and data types which are not storable in many databases. It becomes a gigantic pain in the ass when you are having to encode and decode constantly when moving to and from the database. I would call this in impedance mismatch, and it’s one of the reasons I put the database inside the language in Beads because I have data types that don’t exist and other systems such as extended arithmetic, and a bookean that has four states. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1594327115.171600",
        "client_msg_id": "C9277B55-A8D8-4094-BFC2-36CE3B1C4615",
        "text": "<@UHWC9PXBL> Yup, totally. I think that’s why text is so powerful. Each word becomes a unit - has an associated sound, conceptually a thing. Like the example you just so elegantly described - it means there is redundancy and we can error correct to get the information back out even when it has been distorted. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L+qjc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " Yup, totally. I think that’s why text is so powerful. Each word becomes a unit - has an associated sound, conceptually a thing. Like the example you just so elegantly described - it means there is redundancy and we can error correct to get the information back out even when it has been distorted. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594327121.171800",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1594327964.000000"
        },
        "client_msg_id": "b3202c31-fa30-44c8-a25f-7fbef031c20f",
        "text": "If I understand it correctly, that's all stuff you could do with a programming language like C or Java, right? In your system, the programmer defines some data or a function and binds it to a certain graphic (\"rounded boxes defines files, squared boxes for bash building rules\"), which is akin to binding symbols\/identifiers to functions or data in a text PL, and then the programer decides which of those graphics to invoke in various contexts and at various times (\"links for dependencies\") much like writing the main() function. That means what you're designing will be a peer to a traditional general purpose programming languages, whereas most visual languages currently aren't even designed to be that powerful.\n\nBut what you can't do _within_ C or Java is change their semantics. You can't change the way code is executed, not without changing the compiler\/interpreter (at which point, you're no longer making a typical C or Java program that'd work with any C compiler or JVM). You can't turn C into a lazy evaluated language. At best, you can use C to create a new language that is lazy evaluated.\n\nAn example in a hypothetical visual language where code is tree-structured would be: can you, working entirely within the language, decide whether execution is \"pushed\" from the root node down, reevaluating every node as it goes, or whether execution is \"pulled\", starting from a leaf and evaluating back up to the root?\n\nAnother example — a visual programming environment in which you can define the \"grammar\" and how it's parsed. So you could build an execution strategy that makes use of color, or that makes use of proximity, or that makes use of the fineness of detail. You aren't saying \"round boxes represent files\", but rather \"roundness of corners is a semantic detail, so whenever a corner is rounded, here's how to interpret that\". For instance, you could say that shapes should be evaluated in order of roundness: circles come first, roundrects second, and boxes last.\n\nAnother example — a node-and-wire environment where you can control whether edges simply associate something on one end with something on the other end (as like a function call), or mutably remove a value from storage on one side and insert it into storage on the other side (as like an inbox\/outbox), or are themselves mutable storage (as like a queue).\n\nI think what you've described is a big improvement on what currently exists. But it doesn't feel like it fits the (admittedly, _very_ poorly defined) region of concept space I'm trying to map out. I wish I had better theoretical PL chops so I could know what, if any, terminology to use here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GiW96",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If I understand it correctly, that's all stuff you could do with a programming language like C or Java, right? In your system, the programmer defines some data or a function and binds it to a certain graphic (\"rounded boxes defines files, squared boxes for bash building rules\"), which is akin to binding symbols\/identifiers to functions or data in a text PL, and then the programer decides which of those graphics to invoke in various contexts and at various times (\"links for dependencies\") much like writing the main() function. That means what you're designing will be a peer to a traditional general purpose programming languages, whereas most visual languages currently aren't even designed to be that powerful.\n\nBut what you can't do "
                            },
                            {
                                "type": "text",
                                "text": "within",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " C or Java is change their semantics. You can't change the way code is executed, not without changing the compiler\/interpreter (at which point, you're no longer making a typical C or Java program that'd work with any C compiler or JVM). You can't turn C into a lazy evaluated language. At best, you can use C to create a new language that is lazy evaluated.\n\nAn example in a hypothetical visual language where code is tree-structured would be: can you, working entirely within the language, decide whether execution is \"pushed\" from the root node down, reevaluating every node as it goes, or whether execution is \"pulled\", starting from a leaf and evaluating back up to the root?\n\nAnother example — a visual programming environment in which you can define the \"grammar\" and how it's parsed. So you could build an execution strategy that makes use of color, or that makes use of proximity, or that makes use of the fineness of detail. You aren't saying \"round boxes represent files\", but rather \"roundness of corners is a semantic detail, so whenever a corner is rounded, here's how to interpret that\". For instance, you could say that shapes should be evaluated in order of roundness: circles come first, roundrects second, and boxes last.\n\nAnother example — a node-and-wire environment where you can control whether edges simply associate something on one end with something on the other end (as like a function call), or mutably remove a value from storage on one side and insert it into storage on the other side (as like an inbox\/outbox), or are themselves mutable storage (as like a queue).\n\nI think what you've described is a big improvement on what currently exists. But it doesn't feel like it fits the (admittedly, "
                            },
                            {
                                "type": "text",
                                "text": "very",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " poorly defined) region of concept space I'm trying to map out. I wish I had better theoretical PL chops so I could know what, if any, terminology to use here."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1594327284.175800",
        "edited": {
            "user": "UKP3B2J5D",
            "ts": "1594327601.000000"
        },
        "client_msg_id": "71C89023-C218-4D85-9913-945A84B07B1F",
        "text": "And about visual primitives it’s interesting that memory systems use things like a memory palace. I think the key trick is making information more interesting and redundant - can’t just be a bunch of unrelated symbols on a screen. So maybe text isn’t that powerful :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kFg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And about visual primitives it’s interesting that memory systems use things like a memory palace. I think the key trick is making information more interesting and redundant - can’t just be a bunch of unrelated symbols on a screen. So maybe text isn’t that powerful "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594328099.177200",
        "client_msg_id": "B50BD82E-EBE3-44BB-B337-4D7A00DBB578",
        "text": "i don’t know if there are specific terms for that but it’s exactly what VPRI was working on",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3rbX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i don’t know if there are specific terms for that but it’s exactly what VPRI was working on"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1594328614.177700",
        "client_msg_id": "dcafa6b1-9526-4e01-b501-751ad6b671de",
        "text": "First, I must say that as I haven't yet actually worked on all this, I have not a precise vision of how this will work, and maybe the examples are not very well chosen\/realistic\/etc.\nBut the idea is really to try to give the maximum opportunities to users to define some visual representations and what they means in terms of behaviors. So ultimately, all your examples are really good illustrations of the kind of things I would like to allow the users to do. I agree, my examples are too simple: only mapping visuals to text languages, I definitely want to go further!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JWGXU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "First, I must say that as I haven't yet actually worked on all this, I have not a precise vision of how this will work, and maybe the examples are not very well chosen\/realistic\/etc.\nBut the idea is really to try to give the maximum opportunities to users to define some visual representations and what they means in terms of behaviors. So ultimately, all your examples are really good illustrations of the kind of things I would like to allow the users to do. I agree, my examples are too simple: only mapping visuals to text languages, I definitely want to go further!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594328665.178000",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1594333370.000000"
        },
        "client_msg_id": "cdaddd84-a087-46fc-939f-6cbfd88ff7cb",
        "text": "link spam (none of these are visual, unfortunately):\n• open, extensible composition models: <http:\/\/www.vpri.org\/pdf\/tr2011002_oecm.pdf>\n• open, extensible object models: <https:\/\/www.piumarta.com\/software\/cola\/objmodel2.pdf>\n• the reflective language Black by Kenichi Asai: <http:\/\/pllab.is.ocha.ac.jp\/~asai\/Black\/>   \n•         some pretty cool video content on this subject by Nada Amin: <https:\/\/www.youtube.com\/watch?v=SrKj4hYic5A>\n•         another one on towers of interpreters: <https:\/\/www.youtube.com\/watch?v=Ywy_eSzCLi8>\n• red\/rebol programming language (this is not well documented. if anyone wants to go on a hunt i’m looking for study partners): <https:\/\/www.red-lang.org\/>\n•        in particular: its weird binding methodology <https:\/\/en.wikibooks.org\/wiki\/Rebol_Programming\/Advanced\/Bindology> (rebol and red are very similar)\n• the kernel programming language: <https:\/\/web.cs.wpi.edu\/~jshutt\/kernel.html>\n• the io programming language: <https:\/\/iolanguage.org\/>\n• the ioke programming language: <https:\/\/ioke.org\/>\n• the factor programming language: <https:\/\/factorcode.org\/>\n•       especially the “parsing words” section here: <https:\/\/andreaferretti.github.io\/factor-tutorial\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BneG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "link spam (none of these are visual, unfortunately):\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "open, extensible composition models: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/www.vpri.org\/pdf\/tr2011002_oecm.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "open, extensible object models: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.piumarta.com\/software\/cola\/objmodel2.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the reflective language Black by Kenichi Asai: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/pllab.is.ocha.ac.jp\/~asai\/Black\/"
                                    },
                                    {
                                        "type": "text",
                                        "text": "   "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "        some pretty cool video content on this subject by Nada Amin: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.youtube.com\/watch?v=SrKj4hYic5A"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "        another one on towers of interpreters: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.youtube.com\/watch?v=Ywy_eSzCLi8"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "red\/rebol programming language (this is not well documented. if anyone wants to go on a hunt i’m looking for study partners): "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.red-lang.org\/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "       in particular: its weird binding methodology "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/en.wikibooks.org\/wiki\/Rebol_Programming\/Advanced\/Bindology"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (rebol and red are very similar)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the kernel programming language: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/web.cs.wpi.edu\/~jshutt\/kernel.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the io programming language: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/iolanguage.org\/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the ioke programming language: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/ioke.org\/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the factor programming language: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/factorcode.org\/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "      especially the “parsing words” section here: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/andreaferretti.github.io\/factor-tutorial\/"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0",
                    "UAVCC2X70"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594328925.178700",
        "client_msg_id": "0203641b-17e5-4319-908e-09b5eee03063",
        "text": "<@UC2A2ARPT> this area is a particular obsession of mine, and I suspect it may require a visual representation of some primitives to do with the barest stuff computation\/interpretation\/semantics are made out of—stuff like transformation, parsing, term rewriting, replacement, storage, etc",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o4f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " this area is a particular obsession of mine, and I suspect it may require a visual representation of some primitives to do with the barest stuff computation\/interpretation\/semantics are made out of—stuff like transformation, parsing, term rewriting, replacement, storage, etc"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594329032.178900",
        "client_msg_id": "4fe85de4-a797-4a59-931a-c9e9cab49203",
        "text": "incidentally, i’m trying to figure out a good visual representation for lists like the one i just dropped in here—anyone have any ideas? i don’t know what to call them… bundles?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rEIx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "incidentally, i’m trying to figure out a good visual representation for lists like the one i just dropped in here—anyone have any ideas? i don’t know what to call them… bundles?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594329319.179300",
        "client_msg_id": "37fdef9b-1917-410c-841b-d56192818f3c",
        "text": "now im thinking that… if data has a “default” visual display, and you start with example data, and things like “user profile” are displayed visually somewhere… you may just be able to get away with reusing the visual design from the interface you want to display as the default symbol for that data structure…? and the buttons or dials or whatever for the actions",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z7CgR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "now im thinking that… if data has a “default” visual display, and you start with example data, and things like “user profile” are displayed visually somewhere… you may just be able to get away with reusing the visual design from the interface you want to display as the default symbol for that data structure…? and the buttons or dials or whatever for the actions"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594329332.179500",
        "client_msg_id": "d4bbf36c-c7f6-465f-9918-0524deb9c2b6",
        "text": "seems like a big stretch, but the type you could train your system to make",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q3u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "seems like a big stretch, but the type you could train your system to make"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1594332736.184300",
        "client_msg_id": "CFF93ADF-6B02-4D8D-9AD4-C1409D849ED6",
        "text": "Not sure I understand you but there are things that are better edited visually and others that text is more suited for. Data structures are static and can easily be visualised, actions less so. I suspect that’s a key part of the problem",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ef0N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure I understand you but there are things that are better edited visually and others that text is more suited for. Data structures are static and can easily be visualised, actions less so. I suspect that’s a key part of the problem"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594333314.184500",
        "client_msg_id": "3da085eb-47e2-4ed8-838c-b079ff8688ec",
        "text": "hm. but most actions can be visualized as a transformation from one piece of data to another is what im saying (i think)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ymbN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hm. but most actions can be visualized as a transformation from one piece of data to another is what im saying (i think)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594334928.184900",
        "client_msg_id": "e5e5f855-87d2-434d-89a0-1116122dab61",
        "text": "&gt; trying to figure out a good visual representation [...] i don’t know what to call them\nThis dissonance is delightful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q4\/Kb",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "trying to figure out a good visual representation [...] i don’t know what to call them"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis dissonance is delightful."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594337039.185300",
        "client_msg_id": "88d3b826-478a-49cd-bf85-55b100bef752",
        "text": "&gt; lists like the one i just dropped in here\nWhich list? The \"link spam\", or the \"stuff like transformation...\"?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T07hm",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "lists like the one i just dropped in here"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhich list? The \"link spam\", or the \"stuff like transformation...\"?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594337232.186200",
        "client_msg_id": "D84535E9-E069-49CC-BA60-27F4C5BCEC69",
        "text": "“link spam”—and dissonance is the house i live in, baby",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ub6Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“link spam”—and dissonance is the house i live in, baby"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594337301.188000",
        "client_msg_id": "98142222-01DD-4337-84C5-E10BFCADF183",
        "text": "stuff like little packages of information with a few references and some comments—i often find myself sending them on various messaging platforms and the form feels wrong. plus messages are functionally ephemeral",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lx2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "stuff like little packages of information with a few references and some comments—i often find myself sending them on various messaging platforms and the form feels wrong. plus messages are functionally ephemeral"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1594338052.188200",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1594338070.000000"
        },
        "client_msg_id": "6d730c93-926b-48ca-8936-62cbd266b5cf",
        "text": "Not sure if I'm getting it right, but I don't think these are programming 'tools' as much as they are 'programming material'.\n\nThese could allow a fair bit of diversity in not just what kinds of tools emerge but what kinds of paradigms emerge as well. The main thing is whatever is built on top can be mapped back into the 'material view' where you just look at the built system through a view showing 'blobs of the original material'.\n\nWould you say Unix is such material - (tends to be flexible in terms of what the static structures and dynamic processes mean). Unix with byte files and OS processes provides some structure for static\/dynamic structures but within that we have a wide variety of programming paradigms.\n\nAnother example maybe could be apparatus? (<http:\/\/aprt.us\/>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IVL=5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if I'm getting it right, but I don't think these are programming 'tools' as much as they are 'programming material'.\n\nThese could allow a fair bit of diversity in not just what kinds of tools emerge but what kinds of paradigms emerge as well. The main thing is whatever is built on top can be mapped back into the 'material view' where you just look at the built system through a view showing 'blobs of the original material'.\n\nWould you say Unix is such material - (tends to be flexible in terms of what the static structures and dynamic processes mean). Unix with byte files and OS processes provides some structure for static\/dynamic structures but within that we have a wide variety of programming paradigms.\n\nAnother example maybe could be apparatus? ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/aprt.us\/"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594339192.188500",
        "client_msg_id": "c1e831c0-0493-441d-bc2f-21c130819eeb",
        "text": "Yeah, I think \"programming material\" is a good hand-wave to throw into the dance we've got going.\n\n&gt; The main thing is whatever is built on top can be mapped back into the 'material view' where you just look at the built system through a view showing 'blobs of the original material'.\nI mean, that'd be cool, but it depends what one's goals are. That's why I'm curious to see what folks here are doing that might fit this jello mold (as in a mold made of jello) — what rationale might one have for wanting to force _so much_ responsibility onto the user?\n\nYeah, Unix probably counts as something like this, in that it's a \"thing that sits under my compiler and generally doesn't force my compiler into a particular paradigm\". But on the other hand, it's not exactly like you are building your language paradigms out of the pieces unix provides. Unix is just there to facilitate reading, writing, and executing. So in that sense, it might even be too far to that latter extreme of the spectrum.\n\nI think the VPRI connection was the best fit, so far, for what I have in mind. So — who here is taking another crack at that chestnut?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Coq=t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I think \"programming material\" is a good hand-wave to throw into the dance we've got going.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The main thing is whatever is built on top can be mapped back into the 'material view' where you just look at the built system through a view showing 'blobs of the original material'."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI mean, that'd be cool, but it depends what one's goals are. That's why I'm curious to see what folks here are doing that might fit this jello mold (as in a mold made of jello) — what rationale might one have for wanting to force "
                            },
                            {
                                "type": "text",
                                "text": "so much",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " responsibility onto the user?\n\nYeah, Unix probably counts as something like this, in that it's a \"thing that sits under my compiler and generally doesn't force my compiler into a particular paradigm\". But on the other hand, it's not exactly like you are building your language paradigms out of the pieces unix provides. Unix is just there to facilitate reading, writing, and executing. So in that sense, it might even be too far to that latter extreme of the spectrum.\n\nI think the VPRI connection was the best fit, so far, for what I have in mind. So — who here is taking another crack at that chestnut?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1594339575.188700",
        "client_msg_id": "dbc77503-112c-470b-91e9-d8df84d0b6ff",
        "text": "OK I got a couple of more terms that might be of interest: Language Workbench and Language oriented programming: <https:\/\/en.wikipedia.org\/wiki\/Language_workbench>\n(you said Racket and Racket is an example on page, so..)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "344\/C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OK I got a couple of more terms that might be of interest: Language Workbench and Language oriented programming: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Language_workbench"
                            },
                            {
                                "type": "text",
                                "text": "\n(you said Racket and Racket is an example on page, so..)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UAVCC2X70"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1594339775.189300",
        "client_msg_id": "5E092880-E0CD-407F-B2D4-ED1D1B8D0EC5",
        "text": "Interesting. Hadn’t heard of it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594283860.129300",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T72",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting. Hadn’t heard of it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594341054.189800",
        "client_msg_id": "63e67671-c72d-453b-ba0b-5f2003d153d8",
        "text": "ah, i found a better link for Red: <https:\/\/www.red-lang.org\/2013\/11\/041-introducing-parse.html#:~:text=It%20is%20an%20embedded%20DSL,implementing%20embedded%20and%20external%20DSLs>. the parse dialect is really where it starts to shine IMO",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "title": "0.4.1: Introducing Parse",
                "title_link": "https:\/\/www.red-lang.org\/2013\/11\/041-introducing-parse.html#:~:text=It%20is%20an%20embedded%20DSL,implementing%20embedded%20and%20external%20DSLs",
                "text": "One of the greatest feature of the  Rebol language has always been its parsing engine, simply called Parse. It is an amazing piece of des...",
                "fallback": "0.4.1: Introducing Parse",
                "from_url": "https:\/\/www.red-lang.org\/2013\/11\/041-introducing-parse.html#:~:text=It%20is%20an%20embedded%20DSL,implementing%20embedded%20and%20external%20DSLs",
                "service_icon": "https:\/\/www.red-lang.org\/favicon.ico",
                "service_name": "red-lang.org",
                "id": 1,
                "original_url": "https:\/\/www.red-lang.org\/2013\/11\/041-introducing-parse.html#:~:text=It%20is%20an%20embedded%20DSL,implementing%20embedded%20and%20external%20DSLs"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8TO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ah, i found a better link for Red: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.red-lang.org\/2013\/11\/041-introducing-parse.html#:~:text=It%20is%20an%20embedded%20DSL,implementing%20embedded%20and%20external%20DSLs"
                            },
                            {
                                "type": "text",
                                "text": ". the parse dialect is really where it starts to shine IMO"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594341234.190100",
        "client_msg_id": "f6d87292-5460-4069-9989-9ec0788e8193",
        "text": "dynamic dialect development (again underdocumented): <https:\/\/gist.github.com\/dockimbel\/7830815>\ncant believe ive only found this site just now—it looks very promising: <https:\/\/ungaretti.gitbooks.io\/red-language-notebook\/content\/parse.html>\na pretty good overview of some of the weirdness that lets parse be so adaptable: <http:\/\/blog.hostilefork.com\/why-rebol-red-parse-cool\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "title": "philosophy : Why Rebol, Red, and the Parse dialect are Cool",
                "title_link": "http:\/\/blog.hostilefork.com\/why-rebol-red-parse-cool\/",
                "text": "Author: HostileFork, Title: Why Rebol, Red, and the Parse dialect are Cool, Date: 5-Dec-2013, Length: 1993 words",
                "fallback": "philosophy : Why Rebol, Red, and the Parse dialect are Cool",
                "from_url": "http:\/\/blog.hostilefork.com\/why-rebol-red-parse-cool\/",
                "service_icon": "http:\/\/blog.hostilefork.com\/favicon.ico",
                "service_name": "blog.hostilefork.com",
                "id": 1,
                "original_url": "http:\/\/blog.hostilefork.com\/why-rebol-red-parse-cool\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U3Ta",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "dynamic dialect development (again underdocumented): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/dockimbel\/7830815"
                            },
                            {
                                "type": "text",
                                "text": "\ncant believe ive only found this site just now—it looks very promising: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ungaretti.gitbooks.io\/red-language-notebook\/content\/parse.html"
                            },
                            {
                                "type": "text",
                                "text": "\na pretty good overview of some of the weirdness that lets parse be so adaptable: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/blog.hostilefork.com\/why-rebol-red-parse-cool\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1594342918.190900",
        "client_msg_id": "8177147f-63b5-4164-9b73-3d3fbb54e4f8",
        "text": "I've been using semanticolor for the past few days, and I don't dislike it, so I'll probably keep using it. I look forward to offering some deeper n=1 self-evaluation the next time this subject comes up :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lpQx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been using semanticolor for the past few days, and I don't dislike it, so I'll probably keep using it. I look forward to offering some deeper n=1 self-evaluation the next time this subject comes up :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0139HUPMQ9"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1594343984.191600",
        "client_msg_id": "D54F5F9B-6A2E-475E-A488-F3D40AC6FD46",
        "text": "Looks relevant to this group - <http:\/\/shape-of-code.coding-guidelines.com\/2020\/06\/30\/beta-evidence-based-software-engineering-book\/|http:\/\/shape-of-code.coding-guidelines.com\/2020\/06\/30\/beta-evidence-based-software-engineering-book\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594343984.191600",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1594619829.333500",
        "reply_users": [
            "UFLN9JFRT",
            "UKP3B2J5D"
        ],
        "replies": [
            {
                "user": "UFLN9JFRT",
                "ts": "1594353057.193100"
            },
            {
                "user": "UKP3B2J5D",
                "ts": "1594375533.196100"
            },
            {
                "user": "UFLN9JFRT",
                "ts": "1594619829.333500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KMP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks relevant to this group - "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/shape-of-code.coding-guidelines.com\/2020\/06\/30\/beta-evidence-based-software-engineering-book\/",
                                "text": "http:\/\/shape-of-code.coding-guidelines.com\/2020\/06\/30\/beta-evidence-based-software-engineering-book\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UH85W1ML1",
                    "UHWC9PXBL",
                    "UFLN9JFRT",
                    "U01661S9F34",
                    "U013ZLJARC7"
                ],
                "count": 6
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1594353057.193100",
        "client_msg_id": "827517F5-EEC4-4F60-A8E4-08A3499B8EB5",
        "text": "A great but also long read. Any parts of this stand out to you in particular?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594343984.191600",
        "parent_user_id": "UKP3B2J5D",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iJH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A great but also long read. Any parts of this stand out to you in particular?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1594361293.193900",
        "client_msg_id": "6ba5ef70-c6b3-404a-8da3-d4e2fa6bc0fe",
        "text": "I also like a lot \"programming material\". It conveys the good meaning: some things that can be used\/assembled\/combined for programming, without being to precise about its origin which can exist a priori or that can be set up on need.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zZQn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also like a lot \"programming material\". It conveys the good meaning: some things that can be used\/assembled\/combined for programming, without being to precise about its origin which can exist a priori or that can be set up on need."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]