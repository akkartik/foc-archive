[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1666610156.380539",
        "client_msg_id": "f35a3948-94e3-4eec-8e70-43f8c2d7ad11",
        "text": "Making Systems Explainable — VISSOFT 2022 Keynote\n\nWhat makes software systems explainable?\n\nAs we develop and maintain software, we have questions to ask about the code, but piecing together the answers remains hard.\n\nThe main interface the classical IDE offers is a text editor for the source code. Code, documentation, and the running system are disconnected. In this keynote presentation, we will show how software systems can be made explainable with the help of three interacting technologies:\n\n(i) live notebooks that can be used to create narratives that link documentation, source code, and running applications\n\n(ii) example methods that not only perform tests, but produce live examples that can be used within narratives, to explain use cases, scenarios and features, and\n\n(iii) a moldable inspector that can be easily extended with live custom views to answer domain-specific questions about software systems.\n\nWith the help of running examples we will show how these technologies work together to provide a radically different kind of development experience.\n\n<https:\/\/www.youtube.com\/watch?v=jJhfTUSDlR0>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=jJhfTUSDlR0",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/jJhfTUSDlR0\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/jJhfTUSDlR0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Making Systems Explainable — VISSOFT 2022 Keynote\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=jJhfTUSDlR0",
                "fallback": "YouTube Video: Making Systems Explainable — VISSOFT 2022 Keynote",
                "title": "Making Systems Explainable — VISSOFT 2022 Keynote",
                "title_link": "https:\/\/www.youtube.com\/watch?v=jJhfTUSDlR0",
                "author_name": "Glamorous Toolkit",
                "author_link": "https:\/\/www.youtube.com\/channel\/UClLZHVq_-2D2-iI4rA2O8Ug",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aBGeR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Making Systems Explainable — VISSOFT 2022 Keynote\n\nWhat makes software systems explainable?\n\nAs we develop and maintain software, we have questions to ask about the code, but piecing together the answers remains hard.\n\nThe main interface the classical IDE offers is a text editor for the source code. Code, documentation, and the running system are disconnected. In this keynote presentation, we will show how software systems can be made explainable with the help of three interacting technologies:\n\n(i) live notebooks that can be used to create narratives that link documentation, source code, and running applications\n\n(ii) example methods that not only perform tests, but produce live examples that can be used within narratives, to explain use cases, scenarios and features, and\n\n(iii) a moldable inspector that can be easily extended with live custom views to answer domain-specific questions about software systems.\n\nWith the help of running examples we will show how these technologies work together to provide a radically different kind of development experience.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=jJhfTUSDlR0"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U02MXPT5UDC",
                    "U013ZLJARC7",
                    "U03B14DUZSA"
                ],
                "count": 3
            },
            {
                "name": "eyes",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    }
]