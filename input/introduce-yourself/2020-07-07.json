[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1594114480.403100",
        "client_msg_id": "8f099837-b8a3-428c-b731-818d01ea337a",
        "text": "Welcome! Your project sounds interesting. I see a big advantage in this type of code generation from templates, compared to something like Lisp macros, in everything being explicit. Code generation is one step, running (or compiling) it is another one, and the intermediate code is fully inspectable and modifiable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594066417.401000",
        "parent_user_id": "U016HU16BS6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eZqTk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Welcome! Your project sounds interesting. I see a big advantage in this type of code generation from templates, compared to something like Lisp macros, in everything being explicit. Code generation is one step, running (or compiling) it is another one, and the intermediate code is fully inspectable and modifiable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1594119827.408600",
        "client_msg_id": "0A9423D1-4165-456B-B9E3-7EC7339C5A1C",
        "text": "When building prototypes, I find the best language and platform for that is always what you feel most comfortable and fluent with. If you want to or not, great prototypes will be built several times over as you learn, even if you don’t actively restart development but gradually change things over time, so there will be plenty of opportunities to consider other languages and platforms later. Thinking too much about scaling or reach or popularity at the very early prototype stage is probably causing more harm than it helps. The only things that count in the beginning are that you know how to implement the next step of your vision, and that you enjoy doing it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593438241.373600",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Mj9G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When building prototypes, I find the best language and platform for that is always what you feel most comfortable and fluent with. If you want to or not, great prototypes will be built several times over as you learn, even if you don’t actively restart development but gradually change things over time, so there will be plenty of opportunities to consider other languages and platforms later. Thinking too much about scaling or reach or popularity at the very early prototype stage is probably causing more harm than it helps. The only things that count in the beginning are that you know how to implement the next step of your vision, and that you enjoy doing it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594132286.414000",
        "client_msg_id": "5C650F98-82DD-4247-9B26-199665714430",
        "text": "hi jeff! you might want to check out\n• the red programming language\/rebol—takes code as data way crazy far. the docs are scattered and tough to navigate through but i’ve been looking for anyone else interested in the project\n• fexpr-friendly lisps, like newLISP and picolisp \nwriting on fexprs in general:\n• <http:\/\/fexpr.blogspot.com\/2011\/04\/fexpr.html?m=1|http:\/\/fexpr.blogspot.com\/2011\/04\/fexpr.html?m=1>\n• <http:\/\/www.dalnefre.com\/wp\/2011\/11\/fexpr-the-ultimate-lambda\/|http:\/\/www.dalnefre.com\/wp\/2011\/11\/fexpr-the-ultimate-lambda\/>\nother weird languages:\n• io by <@ULM3U6275> <https:\/\/iolanguage.org\/|https:\/\/iolanguage.org\/>\n• ioke: <https:\/\/ioke.org\/|https:\/\/ioke.org\/>\n• factor: <https:\/\/www.factorcode.org\/|https:\/\/www.factorcode.org\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594066417.401000",
        "parent_user_id": "U016HU16BS6",
        "attachments": [
            {
                "title": "Fexpr",
                "title_link": "http:\/\/fexpr.blogspot.com\/2011\/04\/fexpr.html?m=1",
                "text": "Fexpr is a noun.  It's pronounced FEKSper .  A fexpr is a procedure that acts on the syntax of its operands, rather than on the values dete...",
                "fallback": "Fexpr",
                "from_url": "http:\/\/fexpr.blogspot.com\/2011\/04\/fexpr.html?m=1",
                "service_icon": "http:\/\/fexpr.blogspot.com\/favicon.ico",
                "service_name": "fexpr.blogspot.com",
                "id": 1,
                "original_url": "http:\/\/fexpr.blogspot.com\/2011\/04\/fexpr.html?m=1"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QNgkp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hi jeff! you might want to check out\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the red programming language\/rebol—takes code as data way crazy far. the docs are scattered and tough to navigate through but i’ve been looking for anyone else interested in the project"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "fexpr-friendly lisps, like newLISP and picolisp "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nwriting on fexprs in general:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http:\/\/fexpr.blogspot.com\/2011\/04\/fexpr.html?m=1",
                                        "text": "http:\/\/fexpr.blogspot.com\/2011\/04\/fexpr.html?m=1"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http:\/\/www.dalnefre.com\/wp\/2011\/11\/fexpr-the-ultimate-lambda\/",
                                        "text": "http:\/\/www.dalnefre.com\/wp\/2011\/11\/fexpr-the-ultimate-lambda\/"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "other weird languages:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "io by "
                                    },
                                    {
                                        "type": "user",
                                        "user_id": "ULM3U6275"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/iolanguage.org\/",
                                        "text": "https:\/\/iolanguage.org\/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "ioke: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/ioke.org\/",
                                        "text": "https:\/\/ioke.org\/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "factor: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.factorcode.org\/",
                                        "text": "https:\/\/www.factorcode.org\/"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U016HU16BS6",
        "type": "message",
        "ts": "1594142319.414700",
        "client_msg_id": "ca58b922-ea6f-461a-8ced-30430dd515e3",
        "text": "Yes Garth, red\/rebol I'm very familiar with, and the code it produces is surprisingly efficient. Unfortunately any time I would use red I actually end up writing ansi C faster, so I never got far in using it for real projects. Are there any example projects or use cases you think really make it shine?\n\nfexprs I still struggle to have a practical understanding of what this \"explicit evaluation\" as opposed to good ole lambda does for day-to-day programming rather than language creation. Need to play with kernel etc more",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g60f575d6ad9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/60f575d6ad9d2a8c5656f7637fff1fba.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "Jeff",
            "real_name": "Jeff Mickey",
            "display_name": "codemac",
            "team": "T5TCAFTA9",
            "name": "j",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594066417.401000",
        "parent_user_id": "U016HU16BS6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HLrOH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes Garth, red\/rebol I'm very familiar with, and the code it produces is surprisingly efficient. Unfortunately any time I would use red I actually end up writing ansi C faster, so I never got far in using it for real projects. Are there any example projects or use cases you think really make it shine?\n\nfexprs I still struggle to have a practical understanding of what this \"explicit evaluation\" as opposed to good ole lambda does for day-to-day programming rather than language creation. Need to play with kernel etc more"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1594142447.415000",
        "client_msg_id": "f630fdca-a515-4e52-af19-cd960291a34f",
        "text": "I built a fexpr-based Lisp a few years ago: <http:\/\/akkartik.name\/post\/wart>. It's more dynamic than any other Lisp (including Kernel) by some small margin, and slower than any other Lisp by a large margin. So feel free to ask me questions!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594066417.401000",
        "parent_user_id": "U016HU16BS6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BmRL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I built a fexpr-based Lisp a few years ago: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/wart"
                            },
                            {
                                "type": "text",
                                "text": ". It's more dynamic than any other Lisp (including Kernel) by some small margin, and slower than any other Lisp by a large margin. So feel free to ask me questions!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016HU16BS6",
        "type": "message",
        "ts": "1594143347.415200",
        "client_msg_id": "806f09d0-2e5b-404d-ae84-4beab53de129",
        "text": "oh yes I've read through wart because of your fascinating layers approach to code organization!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g60f575d6ad9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/60f575d6ad9d2a8c5656f7637fff1fba.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "Jeff",
            "real_name": "Jeff Mickey",
            "display_name": "codemac",
            "team": "T5TCAFTA9",
            "name": "j",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594066417.401000",
        "parent_user_id": "U016HU16BS6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s7r=a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh yes I've read through wart because of your fascinating layers approach to code organization!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1594143388.415400",
        "client_msg_id": "7fa09701-2f2a-4d7e-9884-a170e7be9dcf",
        "text": "Great. Yeah, happy to chat about the language itself and not just the implementation techniques.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594066417.401000",
        "parent_user_id": "U016HU16BS6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KSvl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great. Yeah, happy to chat about the language itself and not just the implementation techniques."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594143698.415600",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1594143754.000000"
        },
        "client_msg_id": "2556e700-c925-4491-b35f-8d8dbeb94457",
        "text": "I’m not super experienced enough with red yet to make any recommendations, but I love the evaluation model. Kernel stuff is usually really hard to read. My understanding of fexprs in fexpr-based languages is that instead of evaluating things by default (e.g. with arguments to a function turning into the terminal result of their expressions), you have to explicitly call eval. so `vau` in kernel (if I’m remembering correctly) and `do`  in red, you begin the actual evaluation of a program in its environment. the short-cut way I think about it is that instead of having a `quote` operator that freezes default evaluation of expressions, you have its inverse: a kind of `eval` operator that actually does computation. please correct me if im wrong about that",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594066417.401000",
        "parent_user_id": "U016HU16BS6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Inq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m not super experienced enough with red yet to make any recommendations, but I love the evaluation model. Kernel stuff is usually really hard to read. My understanding of fexprs in fexpr-based languages is that instead of evaluating things by default (e.g. with arguments to a function turning into the terminal result of their expressions), you have to explicitly call eval. so "
                            },
                            {
                                "type": "text",
                                "text": "vau",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in kernel (if I’m remembering correctly) and "
                            },
                            {
                                "type": "text",
                                "text": "do",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  in red, you begin the actual evaluation of a program in its environment. the short-cut way I think about it is that instead of having a "
                            },
                            {
                                "type": "text",
                                "text": "quote",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " operator that freezes default evaluation of expressions, you have its inverse: a kind of "
                            },
                            {
                                "type": "text",
                                "text": "eval",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " operator that actually does computation. please correct me if im wrong about that"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594143835.416000",
        "client_msg_id": "30d214db-09d2-42c7-bb92-37801d4b496b",
        "text": "<@UCUSW7WVD> I *love* this:\n&gt; Used tastefully, taking out parens can make code markedly more readable. My heuristic is to skip parens when I want to highlight side-effects and control-flow, and to insert them when I want to indicate functional computation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594066417.401000",
        "parent_user_id": "U016HU16BS6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Qm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I "
                            },
                            {
                                "type": "text",
                                "text": "love",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " this:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Used tastefully, taking out parens can make code markedly more readable. My heuristic is to skip parens when I want to highlight side-effects and control-flow, and to insert them when I want to indicate functional computation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1594144103.416200",
        "client_msg_id": "6f245870-7650-48fe-b072-8afc900d21c9",
        "text": "also jeff <http:\/\/arclanguage.org\/item?id=16378> is kartik elaborating on hacker news about a novel way to preserve apply for macros",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594066417.401000",
        "parent_user_id": "U016HU16BS6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XzLqa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also jeff "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/arclanguage.org\/item?id=16378"
                            },
                            {
                                "type": "text",
                                "text": " is kartik elaborating on hacker news about a novel way to preserve apply for macros"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1594149618.416500",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1594149691.000000"
        },
        "client_msg_id": "b5e7bbd6-bb6f-4eec-a236-c012e7f27447",
        "text": "That approach only works because Wart relies on quasiquote. Macros that construct code manually using `list` or `cons` don't benefit. This is a concrete way in which Kernel's avoidance of quoting is harmful, IMO. Kernel's obsessed with hygiene. I just don't think hygiene is very important. We all make mistakes sometimes. Hygiene is in the realm of mistakes newbies make and quickly learn to stop making. It's not in the same category as memory leaks to require GC-like infrastructure to protect programmers from.\n\nMore generally, any symbol can be overloaded in Wart. Core punctuation like quote and quasiquote\/unquote cannot. I found that not giving them symbolic names really helped make that distinction clear. Apply is called `@` and also cannot be overloaded.\n\nAlso, <@U016HU16BS6>, Wart used _Let over Lambda_'s idea of automatic gensyms. If you use variables starting with a `$` in Wart macros, they get replaced automatically with unique variables at macroexpansion time. Extremely useful. Of course `$` could also not be overloaded or used in symbols.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594066417.401000",
        "parent_user_id": "U016HU16BS6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kme",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That approach only works because Wart relies on quasiquote. Macros that construct code manually using "
                            },
                            {
                                "type": "text",
                                "text": "list",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "cons",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " don't benefit. This is a concrete way in which Kernel's avoidance of quoting is harmful, IMO. Kernel's obsessed with hygiene. I just don't think hygiene is very important. We all make mistakes sometimes. Hygiene is in the realm of mistakes newbies make and quickly learn to stop making. It's not in the same category as memory leaks to require GC-like infrastructure to protect programmers from.\n\nMore generally, any symbol can be overloaded in Wart. Core punctuation like quote and quasiquote\/unquote cannot. I found that not giving them symbolic names really helped make that distinction clear. Apply is called "
                            },
                            {
                                "type": "text",
                                "text": "@",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and also cannot be overloaded.\n\nAlso, "
                            },
                            {
                                "type": "user",
                                "user_id": "U016HU16BS6"
                            },
                            {
                                "type": "text",
                                "text": ", Wart used "
                            },
                            {
                                "type": "text",
                                "text": "Let over Lambda",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "'s idea of automatic gensyms. If you use variables starting with a "
                            },
                            {
                                "type": "text",
                                "text": "$",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in Wart macros, they get replaced automatically with unique variables at macroexpansion time. Extremely useful. Of course "
                            },
                            {
                                "type": "text",
                                "text": "$",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " could also not be overloaded or used in symbols."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]