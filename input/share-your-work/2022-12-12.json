[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1670847926.804909",
        "client_msg_id": "e6ec1ce8-6391-4553-9df5-a616483e6c1a",
        "text": "<https:\/\/raw.githubusercontent.com\/guitarvydas\/drawware\/dev\/sourcecodehelloworld.png>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1670362232.776479",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/raw.githubusercontent.com\/guitarvydas\/drawware\/dev\/sourcecodehelloworld.png",
                "image_url": "https:\/\/raw.githubusercontent.com\/guitarvydas\/drawware\/dev\/sourcecodehelloworld.png",
                "image_width": 715,
                "image_height": 416,
                "image_bytes": 73444,
                "id": 1,
                "original_url": "https:\/\/raw.githubusercontent.com\/guitarvydas\/drawware\/dev\/sourcecodehelloworld.png",
                "fallback": "715x416px image"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=5Ri",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/raw.githubusercontent.com\/guitarvydas\/drawware\/dev\/sourcecodehelloworld.png"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1670847958.542229",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1670851444.000000"
        },
        "client_msg_id": "3be9901d-054d-456f-9011-d19a0a9dca4f",
        "text": "Thank you all, for your comments!  I find the insightful criticism to be quite helpful.\n\nHoping to clarify some points:\n\n• IMO The Ground Truth is Programming, not Code.\n• IMO, change, even big change, is possible, especially in a young discipline like this.  We are witnessing big change right now - the conversion of gasoline-powered automobiles to electric-powered automobiles.  The enormous infrastructure for supplying gasoline is being replaced.  The figurehead for this huge change believes in “First Principles Thinking” [<https:\/\/fs.blog\/first-principles\/>].   Counter-arguments against big change might include: \n• The fact that electric cars still have 4 wheels and still have offset steering wheels (instead of centered steering sticks as in the first automobile) \n• The fact that the change-over from gas to electric is being facilitated by the existence of hybrid cars.  \n• Computer keyboards are still QWERTY.  \n\tIMO, change is driven by perceived orders-of-magnitude improvement (in process? ... in what?).  It remains incumbent on me to explain why I think that it is possible to improve on programming, noting that hardware has improved, and, noting that end-user apps have improved, while maintaining the assertion that programming languages have not improved proportionally.\n• PEG blurs the line between characters in a Scanner vs. tokens in a Parser.  IMO this is important and may lead to change.\n• IMO, snipping ALL dependencies is important and may lead to change.  Hence, this long response to an issue in an experimental code repo. To my eyes even simple`f(x)` causes several kinds of dependencies that are ripe for snipping.\n• SVG.  This is the simplest (albeit useless) example of SVG as a “programming language” that I could imagine.  There’s more, and this is but a hint.  This useless example transpiles a diagram to running Python code. The live code is at <https:\/\/github.com\/guitarvydas\/drawware|drawware>.\n<https:\/\/github.com\/guitarvydas\/drawware\/blob\/dev\/sourcecodehelloworld.png?raw=true>\n\t\n```&lt;html&gt;\n  &lt;body&gt;\n    \n    &lt;h1&gt;My first SVG&lt;\/h1&gt;\n    \n    &lt;svg&gt;\n      &lt;g id='myfunc'&gt;\n        &lt;rect x=\"20\" y=\"0\" width=\"280\" height=\"130\" rx=\"19.5\" ry=\"19.5\" fill=\"none\" stroke=\"black\"\/&gt;\n        &lt;text x=\"120\" y=\"19\"&gt;myfunc&lt;\/text&gt;\n\n        &lt;g&gt;\n          &lt;rect x=\"60\" y=\"40\" width=\"200\" height=\"60\" fill=\"#f8cecc\" stroke=\"#b85450\"\/&gt;\n          &lt;text x=\"70\" y=\"64\"&gt;print ('Hello ', end='')&lt;\/text&gt;\n          &lt;text x=\"70\" y=\"84\"&gt;print ('World')&lt;\/text&gt;\n        &lt;\/g&gt;\n        \n      &lt;\/g&gt;\n    &lt;\/svg&gt;\n    \n  &lt;\/body&gt;\n&lt;\/html&gt;```\nthe Ohm-JS grammar that I used is:\n```CodeDrawing {\n  Main = \"&lt;html&gt;\" \"&lt;body&gt;\" H1 Drawing \"&lt;\/body&gt;\" \"&lt;\/html&gt;\"\n  H1 = \"&lt;h1&gt;\" stuff \"&lt;\/h1&gt;\"\n\n  Drawing = \"&lt;svg\" stuff \"&gt;\" CodeContainer \"&lt;\/svg&gt;\"\n  \n  CodeContainer = \"&lt;g\" FunctionName \"&gt;\" Boundary Title CodeBlock \"&lt;\/g&gt;\"\n  \n  Boundary = \"&lt;rect\" stuff \"\/&gt;\"\n  Title = \"&lt;text\" stuff \"&gt;\" name \"&lt;\/text&gt;\"\n  CodeBlock = \"&lt;g&gt;\" RedRect Text+ \"&lt;\/g&gt;\"\n  RedRect = \"&lt;rect\" (~AttrRed any)* AttrRed stuff \"\/&gt;\"\n\n  FunctionName = \"id=\" sq name sq\n  Text = \"&lt;text\" stuff \"&gt;\" stuff \"&lt;\/text&gt;\"\n  AttrRed = \"fill=\" dq \"#f8cecc\" dq\n\n  stuff = notElementChar+\n  notElementChar = ~\"&lt;\" ~\"&gt;\" ~\"\/&gt;\" any\n  name = letter alnum*\n  sq = \"'\"\n  dq = \"\\\"\"\n}```\nAnd my personal notation (“Fab”) that completes the transpiler is:\n```CodeDrawing {\n  Main [khtml kbody H1 Drawing kbodyend khtmlend] = ‛«Drawing»'\n  H1 [kh1 stuff kh1end] = ‛«kh1»«stuff»«kh1end»'\n\n  Drawing [ksvg CodeContainer ksvgend] = ‛«CodeContainer»'\n  \n  CodeContainer [kgroup FunctionName k Boundary Title CodeBlock kgroupend] = ‛def «FunctionName» ():«CodeBlock»\n«FunctionName» ()'\n  \n  Boundary [krect stuff kend] = ‛«krect»«stuff»«kend»'\n  Title [ktext stuff k name ktextend] = ‛«ktext»«stuff»«k»«name»«ktextend»'\n  CodeBlock [kgroup RedRect Texts+ kgroupend] = ‛\\n(-«Texts»-)'\n  RedRect [krect cs* AttrRed stuff kend] = ‛«krect»«cs»«AttrRed»«stuff»«kend»'\n\n  FunctionName [kid sq1 name sq2] = ‛«name»'\n  Text [ktext stuff kend stuff2 ktextend] = ‛\\n«stuff2»'\n  AttrRed [kfill dq kred dq2] = ‛«kfill»«dq»«kred»«dq2»'\n\n  stuff [cs+] = ‛«cs»'\n  notElementChar [c] = ‛«c»'\n  name [c1 cs*] = ‛«c1»«cs»'\n  sq  [c] = ‛«c»'\n  dq  [c] = ‛«c»'\n}```\nThe generated Python code (from the diagram) is:\n```def myfunc ():\n\n  print ('Hello ', end='')\n  print ('World')\nmyfunc ()```\n\nFYI - Fab transpiles to JavaScript code that can be used in conjunction with Ohm-JS.  I got tired of writing JavaScript, so I built an SCN (nano-DSL) for myself.\n\nI’ve chosen not to include the generated JavaScript code in this thread, but have pushed a working transpiler to the github listed above.\n\n[pardon the cave-man HTML, but I don’t know enough about building web pages, and, clearly, need help]\n\n31:50~ “In a ‘real’ Computer Science, the best languages of an era should serve as ’assembly code” for the next generation of expression.\n<https:\/\/www.youtube.com\/watch?v=fhOHn9TClXY&amp;t=859s>\nAlan Kay",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1670362232.776479",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/fs.blog\/first-principles\/",
                "ts": 1523280399,
                "image_url": "https:\/\/149664534.v2.pressablecdn.com\/wp-content\/uploads\/2018\/04\/First-principles.png",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 47664,
                "service_icon": "https:\/\/149664534.v2.pressablecdn.com\/wp-content\/uploads\/2015\/06\/cropped-farnamstreet-300x300.png",
                "id": 1,
                "original_url": "https:\/\/fs.blog\/first-principles\/",
                "fallback": "Farnam Street: First Principles: The Building Blocks of True Knowledge - Farnam Street",
                "text": "First Principles tinking breaks down true understanding into building blocks we can reassemble. It turns out most of us don’t know as much as we think we do.",
                "title": "First Principles: The Building Blocks of True Knowledge - Farnam Street",
                "title_link": "https:\/\/fs.blog\/first-principles\/",
                "service_name": "Farnam Street",
                "fields": [
                    {
                        "value": "Farnam Street",
                        "title": "Written by",
                        "short": true
                    },
                    {
                        "value": "21 minutes",
                        "title": "Est. reading time",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hy=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you all, for your comments!  I find the insightful criticism to be quite helpful.\n\nHoping to clarify some points:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "IMO The Ground Truth is Programming, not Code."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "IMO, change, even big change, is possible, especially in a young discipline like this.  We are witnessing big change right now - the conversion of gasoline-powered automobiles to electric-powered automobiles.  The enormous infrastructure for supplying gasoline is being replaced.  The figurehead for this huge change believes in “First Principles Thinking” ["
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/fs.blog\/first-principles\/"
                                    },
                                    {
                                        "type": "text",
                                        "text": "].   Counter-arguments against big change might include: "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The fact that electric cars still have 4 wheels and still have offset steering wheels (instead of centered steering sticks as in the first automobile) "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The fact that the change-over from gas to electric is being facilitated by the existence of hybrid cars.  "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Computer keyboards are still QWERTY.  "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\tIMO, change is driven by perceived orders-of-magnitude improvement (in process? ... in what?).  It remains incumbent on me to explain why I think that it is possible to improve on programming, noting that hardware has improved, and, noting that end-user apps have improved, while maintaining the assertion that programming languages have not improved proportionally.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "PEG blurs the line between characters in a Scanner vs. tokens in a Parser.  IMO this is important and may lead to change."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "IMO, snipping ALL dependencies is important and may lead to change.  Hence, this long response to an issue in an experimental code repo. To my eyes even simple`f(x)` causes several kinds of dependencies that are ripe for snipping."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "SVG.  This is the simplest (albeit useless) example of SVG as a “programming language” that I could imagine.  There’s more, and this is but a hint.  This useless example transpiles a diagram to running Python code. The live code is at "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/guitarvydas\/drawware",
                                        "text": "drawware"
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/guitarvydas\/drawware\/blob\/dev\/sourcecodehelloworld.png?raw=true"
                            },
                            {
                                "type": "text",
                                "text": "\n\t\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "<html>\n  <body>\n    \n    <h1>My first SVG<\/h1>\n    \n    <svg>\n      <g id='myfunc'>\n        <rect x=\"20\" y=\"0\" width=\"280\" height=\"130\" rx=\"19.5\" ry=\"19.5\" fill=\"none\" stroke=\"black\"\/>\n        <text x=\"120\" y=\"19\">myfunc<\/text>\n\n        <g>\n          <rect x=\"60\" y=\"40\" width=\"200\" height=\"60\" fill=\"#f8cecc\" stroke=\"#b85450\"\/>\n          <text x=\"70\" y=\"64\">print ('Hello ', end='')<\/text>\n          <text x=\"70\" y=\"84\">print ('World')<\/text>\n        <\/g>\n        \n      <\/g>\n    <\/svg>\n    \n  <\/body>\n<\/html>"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nthe Ohm-JS grammar that I used is:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "CodeDrawing {\n  Main = \"<html>\" \"<body>\" H1 Drawing \"<\/body>\" \"<\/html>\"\n  H1 = \"<h1>\" stuff \"<\/h1>\"\n\n  Drawing = \"<svg\" stuff \">\" CodeContainer \"<\/svg>\"\n  \n  CodeContainer = \"<g\" FunctionName \">\" Boundary Title CodeBlock \"<\/g>\"\n  \n  Boundary = \"<rect\" stuff \"\/>\"\n  Title = \"<text\" stuff \">\" name \"<\/text>\"\n  CodeBlock = \"<g>\" RedRect Text+ \"<\/g>\"\n  RedRect = \"<rect\" (~AttrRed any)* AttrRed stuff \"\/>\"\n\n  FunctionName = \"id=\" sq name sq\n  Text = \"<text\" stuff \">\" stuff \"<\/text>\"\n  AttrRed = \"fill=\" dq \"#f8cecc\" dq\n\n  stuff = notElementChar+\n  notElementChar = ~\"<\" ~\">\" ~\"\/>\" any\n  name = letter alnum*\n  sq = \"'\"\n  dq = \"\\\"\"\n}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAnd my personal notation (“Fab”) that completes the transpiler is:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "CodeDrawing {\n  Main [khtml kbody H1 Drawing kbodyend khtmlend] = ‛«Drawing»'\n  H1 [kh1 stuff kh1end] = ‛«kh1»«stuff»«kh1end»'\n\n  Drawing [ksvg CodeContainer ksvgend] = ‛«CodeContainer»'\n  \n  CodeContainer [kgroup FunctionName k Boundary Title CodeBlock kgroupend] = ‛def «FunctionName» ():«CodeBlock»\n«FunctionName» ()'\n  \n  Boundary [krect stuff kend] = ‛«krect»«stuff»«kend»'\n  Title [ktext stuff k name ktextend] = ‛«ktext»«stuff»«k»«name»«ktextend»'\n  CodeBlock [kgroup RedRect Texts+ kgroupend] = ‛\\n(-«Texts»-)'\n  RedRect [krect cs* AttrRed stuff kend] = ‛«krect»«cs»«AttrRed»«stuff»«kend»'\n\n  FunctionName [kid sq1 name sq2] = ‛«name»'\n  Text [ktext stuff kend stuff2 ktextend] = ‛\\n«stuff2»'\n  AttrRed [kfill dq kred dq2] = ‛«kfill»«dq»«kred»«dq2»'\n\n  stuff [cs+] = ‛«cs»'\n  notElementChar [c] = ‛«c»'\n  name [c1 cs*] = ‛«c1»«cs»'\n  sq  [c] = ‛«c»'\n  dq  [c] = ‛«c»'\n}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe generated Python code (from the diagram) is:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "def myfunc ():\n\n  print ('Hello ', end='')\n  print ('World')\nmyfunc ()"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nFYI - Fab transpiles to JavaScript code that can be used in conjunction with Ohm-JS.  I got tired of writing JavaScript, so I built an SCN (nano-DSL) for myself.\n\nI’ve chosen not to include the generated JavaScript code in this thread, but have pushed a working transpiler to the github listed above.\n\n[pardon the cave-man HTML, but I don’t know enough about building web pages, and, clearly, need help]\n\n31:50~ “In a ‘real’ Computer Science, the best languages of an era should serve as ’assembly code” for the next generation of expression.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=fhOHn9TClXY&t=859s"
                            },
                            {
                                "type": "text",
                                "text": "\nAlan Kay"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1670867882.919139",
        "client_msg_id": "4704ca8f-4532-4d09-b93f-16f501dbc0e3",
        "text": "Thanks <@UGWUJUZHT> ! My understanding of your examples is that you use SVG primitives as the tokens of your language. Interesting idea!\n\nAs for your comments on change, I'd use the gas-&gt;electric transition for cars as a perfect example for small-step evolution. You change the engine and energy source, but little else. In particular, all the infrastructure for using cars, i.e. roads, parking lots, garages, etc. remains the same, and allows a co-existence of old and new cars. A tech analogue would be the \"rewrite it in rust\" campaign.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1670362232.776479",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4QQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " ! My understanding of your examples is that you use SVG primitives as the tokens of your language. Interesting idea!\n\nAs for your comments on change, I'd use the gas->electric transition for cars as a perfect example for small-step evolution. You change the engine and energy source, but little else. In particular, all the infrastructure for using cars, i.e. roads, parking lots, garages, etc. remains the same, and allows a co-existence of old and new cars. A tech analogue would be the \"rewrite it in rust\" campaign."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03LMRE6MQE",
        "type": "message",
        "ts": "1670871910.514339",
        "client_msg_id": "4a7904a2-472e-42be-972a-ea1877fa701c",
        "text": "I made a video to keep track of all the choices I have been considering while designing an effect system for my language <https:\/\/vimeo.com\/780465787>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ea29e26e919b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-06-23\/3708469439522_ea29e26e919bc202feb6_72.png",
            "first_name": "Peter",
            "real_name": "Peter Saxton",
            "display_name": "Peter Saxton",
            "team": "T5TCAFTA9",
            "name": "peterhsaxton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/vimeo.com\/780465787",
                "video_html": "<iframe src=\"https:\/\/player.vimeo.com\/video\/780465787?h=c6bd076faa&amp;autoplay=1&amp;app_id=122963\" width=\"400\" height=\"225\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen title=\"Week 50\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "thumb_url": "https:\/\/i.vimeocdn.com\/video\/1566610250-cbbd2931f6baabc8d3f0e7362aa1f8a3cec21f14ad6bb1be86668ba73c23bfc0-d_295x166",
                "thumb_width": 295,
                "thumb_height": 166,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/vimeo.png",
                "id": 1,
                "original_url": "https:\/\/vimeo.com\/780465787",
                "fallback": "Vimeo Video: Week 50",
                "title": "Week 50",
                "title_link": "https:\/\/vimeo.com\/780465787",
                "author_name": "crowdhailer",
                "author_link": "https:\/\/vimeo.com\/crowdhailer",
                "service_name": "Vimeo",
                "service_url": "https:\/\/vimeo.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F1QH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I made a video to keep track of all the choices I have been considering while designing an effect system for my language "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/vimeo.com\/780465787"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF6RLAL7J",
        "type": "message",
        "ts": "1670917604.498519",
        "client_msg_id": "175f7462-824f-405f-99bd-1b9b869eda53",
        "text": "write-up of the end-user-programmable UI-builder I researched &amp; prototyped for Glide: <https:\/\/www.glideapps.com\/research\/code-components>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfede74ebb05",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fede74ebb05f68b74971bfc332857f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Szymon Kaliski",
            "display_name": "szymon_k",
            "team": "T5TCAFTA9",
            "name": "hi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1670917604.498519",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1671218650.596089",
        "reply_users": [
            "U04AMUSGPPE"
        ],
        "replies": [
            {
                "user": "U04AMUSGPPE",
                "ts": "1671218650.596089"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/www.glideapps.com\/research\/code-components",
                "image_url": "https:\/\/glideapps.com\/images\/research\/reusuable-code-components-cover.png",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 258538,
                "service_icon": "https:\/\/www.glideapps.com\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.glideapps.com\/research\/code-components",
                "fallback": "Reusable Code Components for Glide",
                "text": "Glide creates apps &amp; websites based on Google Sheets, Excel, or Airtable. Pick a spreadsheet or Airtable base, customize your app, then share it with anyone. Start today for free!",
                "title": "Reusable Code Components for Glide",
                "title_link": "https:\/\/www.glideapps.com\/research\/code-components",
                "service_name": "glideapps.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cgo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "write-up of the end-user-programmable UI-builder I researched & prototyped for Glide: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.glideapps.com\/research\/code-components"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7",
                    "UC2A2ARPT",
                    "U03TX2GT080",
                    "U04AMUSGPPE"
                ],
                "count": 4
            }
        ]
    }
]