[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1613549010.199500",
        "client_msg_id": "cb0ea619-b129-4c99-a201-561bbc5ec38f",
        "text": "<@UCGAK10LS> In the end, everything that's Turing complete is equivalent. But the UX is very different. The particularity of term rewriting as compared to more popular functional computation frameworks is that it focuses in terms, which represent data and function applications, over rules, which represent the transformations done by the functions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J0cGv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " In the end, everything that's Turing complete is equivalent. But the UX is very different. The particularity of term rewriting as compared to more popular functional computation frameworks is that it focuses in terms, which represent data and function applications, over rules, which represent the transformations done by the functions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613550266.200800",
        "client_msg_id": "C35E308D-EEA2-48C1-BCB9-15E5D5683C5F",
        "text": "Yeah sure. I guess term rewriting might be a useful way to phrase the semantics for the purposes of explanation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "crH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah sure. I guess term rewriting might be a useful way to phrase the semantics for the purposes of explanation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN06QADNV",
        "type": "message",
        "ts": "1613550720.201000",
        "client_msg_id": "b8d8bf7a-61ab-420d-99e1-653d7197d9b9",
        "text": "Hi Nick - have you looked at `implicit` s in Scala? It allows code quite similar to the example `let y = f`  if `f` or its parameter is marked as `implicit` . `implicit` can be used at the value and at the type level. At the value level - they are mostly used to reduce boilerplate; for example; passing around a db connection throughout the callstack could be done by marking it as an implicit parameter; and then not having to explicitly pass it on a function invocation.\nAt the type level - it is used to support a number of the advanced Scala language features.\n\nI would say its a very actively used feature of the language. Scala has a new major release coming  in which a number of the lessons learned from Scala 2 are being used to refine some areas of the language design and `implicts` are getting quite a bit of a rework; so could be an interesting case study.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g96c2c97e5ed",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/96c2c97e5edea550b6935e656f64204c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Brent",
            "display_name": "Brent",
            "team": "T5TCAFTA9",
            "name": "brentgracey",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g4=Ht",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi Nick - have you looked at "
                            },
                            {
                                "type": "text",
                                "text": "implicit",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " s in Scala? It allows code quite similar to the example "
                            },
                            {
                                "type": "text",
                                "text": "let y = f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  if "
                            },
                            {
                                "type": "text",
                                "text": "f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or its parameter is marked as "
                            },
                            {
                                "type": "text",
                                "text": "implicit",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . "
                            },
                            {
                                "type": "text",
                                "text": "implicit",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " can be used at the value and at the type level. At the value level - they are mostly used to reduce boilerplate; for example; passing around a db connection throughout the callstack could be done by marking it as an implicit parameter; and then not having to explicitly pass it on a function invocation.\nAt the type level - it is used to support a number of the advanced Scala language features.\n\nI would say its a very actively used feature of the language. Scala has a new major release coming  in which a number of the lessons learned from Scala 2 are being used to refine some areas of the language design and "
                            },
                            {
                                "type": "text",
                                "text": "implicts",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are getting quite a bit of a rework; so could be an interesting case study."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613551020.204200",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1613551155.000000"
        },
        "client_msg_id": "BD17BE3F-7538-4BC5-9BCC-EFA40037E086",
        "text": "Yup! I’m broadly familiar with Scala implicits (but of course, thanks for suggesting :slightly_smiling_face:). I put them in the same bucket as “type classes”, which I mentioned in my original post. Is there some benefit of Scala implicits which you think may not exist in my proposal? (Ignoring the type stuff). Implicits otherwise seem like a much more complicated means to achieve the same thing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7xY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yup! I’m broadly familiar with Scala implicits (but of course, thanks for suggesting "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "). I put them in the same bucket as “type classes”, which I mentioned in my original post. Is there some benefit of Scala implicits which you think may not exist in my proposal? (Ignoring the type stuff). Implicits otherwise seem like a much more complicated means to achieve the same thing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613551448.206300",
        "client_msg_id": "24BFA985-F3F3-4347-91BC-D05950065D4E",
        "text": "It might be worth investigating the problems Scala users face using implicits, of course. Some of the problems may translate to this proposal.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vWuPs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It might be worth investigating the problems Scala users face using implicits, of course. Some of the problems may translate to this proposal."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN06QADNV",
        "type": "message",
        "ts": "1613551463.206500",
        "client_msg_id": "1bcf7046-0ea4-4ab2-9ab7-b601a522371d",
        "text": "There does seem to be quite a bit of overlap between the two ideas.\nBuilding type classes is one of the main ways implicits are used in scala; and as you say comes with a fair amount of complexity.\nBut it is also possible to use implicts without creating type classes. As a prototyping idea - you could mark all parameters as implicit - and then have the reduced boilerplate on the function invocation; and it would also be a way to explore how often implicit resolution issues start coming up (obv that would be limited to Scala's resolution rules; but could still be an interesting worked example)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g96c2c97e5ed",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/96c2c97e5edea550b6935e656f64204c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Brent",
            "display_name": "Brent",
            "team": "T5TCAFTA9",
            "name": "brentgracey",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vzE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There does seem to be quite a bit of overlap between the two ideas.\nBuilding type classes is one of the main ways implicits are used in scala; and as you say comes with a fair amount of complexity.\nBut it is also possible to use implicts without creating type classes. As a prototyping idea - you could mark all parameters as implicit - and then have the reduced boilerplate on the function invocation; and it would also be a way to explore how often implicit resolution issues start coming up (obv that would be limited to Scala's resolution rules; but could still be an interesting worked example)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613551538.207000",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1613551662.000000"
        },
        "client_msg_id": "D6183E3D-ABD6-4490-AA21-B3AE7D3A1CCF",
        "text": "Good idea :slightly_smiling_face:. I’ll have a play around with it!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LaN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good idea "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". I’ll have a play around with it!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN06QADNV",
        "type": "message",
        "ts": "1613551893.207300",
        "client_msg_id": "30f27593-9bbb-483c-bed2-88326541e54b",
        "text": "Scala 3 is also adding \"implicit functions\" - so as you say; could be a area to draw \"lessons from the trenches\" and possibly even some extra inspiration from as well.\n<https:\/\/www.scala-lang.org\/blog\/2016\/12\/07\/implicit-function-types.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g96c2c97e5ed",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/96c2c97e5edea550b6935e656f64204c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Brent",
            "display_name": "Brent",
            "team": "T5TCAFTA9",
            "name": "brentgracey",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3y4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Scala 3 is also adding \"implicit functions\" - so as you say; could be a area to draw \"lessons from the trenches\" and possibly even some extra inspiration from as well.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.scala-lang.org\/blog\/2016\/12\/07\/implicit-function-types.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1613558709.208400",
        "client_msg_id": "b5bb7eac-75d5-488a-b58a-cc4ea33b6cd6",
        "text": "Question about how compilers work\n\nIs it possible to generate example source code from an AST node and its corresponding lexer rules?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "reply_count": 19,
        "reply_users_count": 4,
        "latest_reply": "1613628956.244000",
        "reply_users": [
            "UNCP67JSK",
            "UDQKHNP51",
            "UN06QADNV",
            "U01661S9F34"
        ],
        "replies": [
            {
                "user": "UNCP67JSK",
                "ts": "1613558761.209000"
            },
            {
                "user": "UNCP67JSK",
                "ts": "1613558890.211200"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613558994.213700"
            },
            {
                "user": "UNCP67JSK",
                "ts": "1613558996.213900"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613559017.214200"
            },
            {
                "user": "UNCP67JSK",
                "ts": "1613559048.215000"
            },
            {
                "user": "UNCP67JSK",
                "ts": "1613559283.220700"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613559368.222700"
            },
            {
                "user": "UNCP67JSK",
                "ts": "1613559434.224400"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613559501.224600"
            },
            {
                "user": "UNCP67JSK",
                "ts": "1613559547.225600"
            },
            {
                "user": "UNCP67JSK",
                "ts": "1613559626.226700"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613559688.227400"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613559770.229400"
            },
            {
                "user": "UN06QADNV",
                "ts": "1613568197.230900"
            },
            {
                "user": "UNCP67JSK",
                "ts": "1613569077.241500"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613569299.241800"
            },
            {
                "user": "U01661S9F34",
                "ts": "1613605209.243100"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613628956.244000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d0v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Question about how compilers work\n\nIs it possible to generate example source code from an AST node and its corresponding lexer rules?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1613558761.209000",
        "edited": {
            "user": "UNCP67JSK",
            "ts": "1613558815.000000"
        },
        "client_msg_id": "9F623BB4-06A2-4559-83B5-1514374ACB9A",
        "text": "That's partly how some linters and transpilers work!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qYn2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's partly how some linters and transpilers work!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1613558890.211200",
        "client_msg_id": "0BCAAFDF-BF13-4665-98DB-36D82E7369E0",
        "text": "Eg. babel for js parses the modern js into ast, modifies the ast, and then writes back to compatible js source code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WSqkM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Eg. babel for js parses the modern js into ast, modifies the ast, and then writes back to compatible js source code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1613558994.213700",
        "client_msg_id": "2ec1f99f-fb60-425e-ab9d-4c839a22b6e2",
        "text": "oh, yes. that makes sense. can you think of a project whose source code is easier to study?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XK2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh, yes. that makes sense. can you think of a project whose source code is easier to study?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1613558996.213900",
        "client_msg_id": "99BAA4FA-400B-4341-BA1B-DB2C7A4EA6BF",
        "text": "You can quite easily write your own babel plugins, that could eg. replace strings and numbers with random values.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cDv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can quite easily write your own babel plugins, that could eg. replace strings and numbers with random values."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1613559017.214200",
        "client_msg_id": "f05d5b88-912d-442b-b208-4984d3c914ae",
        "text": "I guess I’ll look at babel since you mentioned it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iSpd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess I’ll look at babel since you mentioned it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1613559048.215000",
        "client_msg_id": "36489734-3F10-4042-8A95-7EB03A127F1F",
        "text": "Let me know how it goes!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/4KqW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let me know how it goes!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1613559283.220700",
        "client_msg_id": "B2CE8D88-3322-4BB1-A469-0CCA9AE940D7",
        "text": "Would be neat to look through multiple asts containing eg. the same function, and extrapolating how you may use it from those examples, ie. similar to how some NLP algos relate words with nearby words, giving it the ability to generate sentences that sound sound, but with the added benefit of the ast; that the code will parse correctly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tk\/X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would be neat to look through multiple asts containing eg. the same function, and extrapolating how you may use it from those examples, ie. similar to how some NLP algos relate words with nearby words, giving it the ability to generate sentences that sound sound, but with the added benefit of the ast; that the code will parse correctly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1613559368.222700",
        "client_msg_id": "da89a223-904d-489f-8f86-30f69bf05a78",
        "text": "yes, that would be nicer since, in that case, the code is actually more meaningful",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9g\/5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yes, that would be nicer since, in that case, the code is actually more meaningful"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1613559434.224400",
        "client_msg_id": "06166618-5DF4-49F7-9CE7-CF28567F1F22",
        "text": "Was recently thinking about something similar; how you could autogen UI from data, given meta info of eg. how often + in what context a user would like to access it, and partly what components goes together with each other and what kind of data.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=PTT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Was recently thinking about something similar; how you could autogen UI from data, given meta info of eg. how often + in what context a user would like to access it, and partly what components goes together with each other and what kind of data."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1613559501.224600",
        "client_msg_id": "ad65f3a4-7a4d-47b1-b600-9463d137990d",
        "text": "the use case I have in mind is a quick reference for a language. this would serve as an easy reminder for the syntax of a specific AST node",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cg9D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the use case I have in mind is a quick reference for a language. this would serve as an easy reminder for the syntax of a specific AST node"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1613559547.225600",
        "client_msg_id": "435C0A0C-F181-4814-9D79-004971ECD895",
        "text": "Niiice! Context dependent <http:\/\/learnxinyminutes.com|learnxinyminutes.com>!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LKB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Niiice! Context dependent "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/learnxinyminutes.com",
                                "text": "learnxinyminutes.com"
                            },
                            {
                                "type": "text",
                                "text": "!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1613559626.226700",
        "edited": {
            "user": "UNCP67JSK",
            "ts": "1613559860.000000"
        },
        "client_msg_id": "FECAC488-3643-4E66-8596-BCD3EE84A281",
        "text": "Extremely useful to not have to visit eg <http:\/\/fuckingblocksyntax.com|http:\/\/fuckingblocksyntax.com> every other minute XD Usually much easier to \"get it\" by looking at a bunch of closely similar examples, than reading long syntax definitions; at least initially to get going.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FZn56",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Extremely useful to not have to visit eg "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/fuckingblocksyntax.com",
                                "text": "http:\/\/fuckingblocksyntax.com"
                            },
                            {
                                "type": "text",
                                "text": " every other minute XD Usually much easier to \"get it\" by looking at a bunch of closely similar examples, than reading long syntax definitions; at least initially to get going."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "U016VUZGUUQ",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1613559688.227400",
        "edited": {
            "user": "UDQKHNP51",
            "ts": "1613559694.000000"
        },
        "client_msg_id": "789e777b-8e55-4b96-8fa3-88ce1f3287ad",
        "text": "yes. learnxinyminutes is a source of inspiration",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T3d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yes. learnxinyminutes is a source of inspiration"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1613559770.229400",
        "client_msg_id": "20c1cac9-5ce5-4b57-b0a6-12898f4148cd",
        "text": "btw, your idea about autogening UI also crossed my mind. to generate a UI that would make you enter a valid AST node",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rc8x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "btw, your idea about autogening UI also crossed my mind. to generate a UI that would make you enter a valid AST node"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1613561764.230100",
        "client_msg_id": "7d065cdf-a972-4573-92e5-d99e07efd7ea",
        "text": "It does indeed sound a little like implicit arguments. As well as Scala you could compare with Agda and Idris.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vh4BZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It does indeed sound a little like implicit arguments. As well as Scala you could compare with Agda and Idris."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1613561816.230300",
        "client_msg_id": "b6d8c554-ff52-44ee-b06c-c6de7de3185e",
        "text": "I've come to think of implicitness as being \"term inference\" by analogy with type inference.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZPi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've come to think of implicitness as being \"term inference\" by analogy with type inference."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "star-struck",
                "users": [
                    "UBKNXPBAB"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1613562110.230500",
        "edited": {
            "user": "UF71PR58X",
            "ts": "1613562138.000000"
        },
        "client_msg_id": "9b06d8a9-d1d9-4b80-b472-ca6f4b4e3f2c",
        "text": "All the languages I know of which have implicit arguments require both the argument positions and the corresponding definitions to be annotated in some way . This has been bothering me for a while because it seems to confuse inference\/elaboration with type signatures, and I've been wondering how a language might look if these annotations were taken out of signatures (everything is just an argument) and either indicated somewhere else, or alternatively the compiler just tries to infer as much as it possibly can given all in-scope definitions ... you could approximate this is scala by having a bunch of definitions where _everything_ is marked as implicit.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jrx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All the languages I know of which have implicit arguments require both the argument positions and the corresponding definitions to be annotated in some way . This has been bothering me for a while because it seems to confuse inference\/elaboration with type signatures, and I've been wondering how a language might look if these annotations were taken out of signatures (everything is just an argument) and either indicated somewhere else, or alternatively the compiler just tries to infer as much as it possibly can given all in-scope definitions ... you could approximate this is scala by having a bunch of definitions where "
                            },
                            {
                                "type": "text",
                                "text": "everything",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is marked as implicit."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN06QADNV",
        "type": "message",
        "ts": "1613568197.230900",
        "client_msg_id": "60a61b74-201c-44d8-9fdb-51f23d8defa0",
        "text": "<https:\/\/svelte.dev\/> describes itself as \"a _compile step_ that happens when you build your app\" ... and is all about generating UI code; so perhaps that's somewhat relevant to your generating a UI ideas?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g96c2c97e5ed",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/96c2c97e5edea550b6935e656f64204c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Brent",
            "display_name": "Brent",
            "team": "T5TCAFTA9",
            "name": "brentgracey",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "attachments": [
            {
                "title": "Svelte",
                "title_link": "https:\/\/svelte.dev\/",
                "text": "Cybernetically enhanced web apps",
                "fallback": "Svelte",
                "image_url": "https:\/\/svelte.dev\/images\/twitter-card.png",
                "from_url": "https:\/\/svelte.dev\/",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 3381,
                "service_icon": "https:\/\/svelte.dev\/favicon.ico",
                "service_name": "svelte.dev",
                "id": 1,
                "original_url": "https:\/\/svelte.dev\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rAv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/svelte.dev\/"
                            },
                            {
                                "type": "text",
                                "text": " describes itself as \"a "
                            },
                            {
                                "type": "text",
                                "text": "compile step",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that happens when you build your app\" ... and is all about generating UI code; so perhaps that's somewhat relevant to your generating a UI ideas?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UNCP67JSK",
        "thread_ts": "1613558709.208400",
        "root": {
            "user": "UDQKHNP51",
            "type": "message",
            "ts": "1613558709.208400",
            "client_msg_id": "b5bb7eac-75d5-488a-b58a-cc4ea33b6cd6",
            "text": "Question about how compilers work\n\nIs it possible to generate example source code from an AST node and its corresponding lexer rules?",
            "team": "T5TCAFTA9",
            "thread_ts": "1613558709.208400",
            "reply_count": 19,
            "reply_users_count": 4,
            "latest_reply": "1613628956.244000",
            "reply_users": [
                "UNCP67JSK",
                "UDQKHNP51",
                "UN06QADNV",
                "U01661S9F34"
            ],
            "replies": [
                {
                    "user": "UNCP67JSK",
                    "ts": "1613558761.209000"
                },
                {
                    "user": "UNCP67JSK",
                    "ts": "1613558890.211200"
                },
                {
                    "user": "UDQKHNP51",
                    "ts": "1613558994.213700"
                },
                {
                    "user": "UNCP67JSK",
                    "ts": "1613558996.213900"
                },
                {
                    "user": "UDQKHNP51",
                    "ts": "1613559017.214200"
                },
                {
                    "user": "UNCP67JSK",
                    "ts": "1613559048.215000"
                },
                {
                    "user": "UNCP67JSK",
                    "ts": "1613559283.220700"
                },
                {
                    "user": "UDQKHNP51",
                    "ts": "1613559368.222700"
                },
                {
                    "user": "UNCP67JSK",
                    "ts": "1613559434.224400"
                },
                {
                    "user": "UDQKHNP51",
                    "ts": "1613559501.224600"
                },
                {
                    "user": "UNCP67JSK",
                    "ts": "1613559547.225600"
                },
                {
                    "user": "UNCP67JSK",
                    "ts": "1613559626.226700"
                },
                {
                    "user": "UDQKHNP51",
                    "ts": "1613559688.227400"
                },
                {
                    "user": "UDQKHNP51",
                    "ts": "1613559770.229400"
                },
                {
                    "user": "UN06QADNV",
                    "ts": "1613568197.230900"
                },
                {
                    "user": "UNCP67JSK",
                    "ts": "1613569077.241500"
                },
                {
                    "user": "UDQKHNP51",
                    "ts": "1613569299.241800"
                },
                {
                    "user": "U01661S9F34",
                    "ts": "1613605209.243100"
                },
                {
                    "user": "UDQKHNP51",
                    "ts": "1613628956.244000"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "d0v",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Question about how compilers work\n\nIs it possible to generate example source code from an AST node and its corresponding lexer rules?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1613569077.241500",
        "client_msg_id": "F5F7B555-148D-4391-88C8-E010539B5ADE",
        "text": "It is :) Looking to go one step deeper with a custom realtime offline first decentralized graph database with binary data streaming using wasm with rust, builtin, created from a structural declarative language, supporting new UI paradigm(s) (infinite non-euclidean zoom + scroll canvas\/space with fluid structure, vs the status quo of plain documents) (see webgpu), while being fully editable and having powerful action history for free, etc etc",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yv4th",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is :) Looking to go one step deeper with a custom realtime offline first decentralized graph database with binary data streaming using wasm with rust, builtin, created from a structural declarative language, supporting new UI paradigm(s) (infinite non-euclidean zoom + scroll canvas\/space with fluid structure, vs the status quo of plain documents) (see webgpu), while being fully editable and having powerful action history for free, etc etc"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1613569299.241800",
        "client_msg_id": "c001f0e4-7e23-40f1-9cae-4d674229e3a0",
        "text": "I don’t know enough about svelte to tell\n\nI realize that what I’m thinking about is basically a modal editor. I’ll have to think if what I have in mind is actually practical",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nEO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don’t know enough about svelte to tell\n\nI realize that what I’m thinking about is basically a modal editor. I’ll have to think if what I have in mind is actually practical"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1613570290.242400",
        "client_msg_id": "bda1374d-495d-4c81-827b-03de3777fe53",
        "text": "I'll add to the others that this gives me dynamic scope vibes, though possibly with a dash of unification if you choose logic-programming semantics for filling in the missing values through inference?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4xpu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll add to the others that this gives me dynamic scope vibes, though possibly with a dash of unification if you choose logic-programming semantics for filling in the missing values through inference?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1613573176.242700",
        "client_msg_id": "af3f673e-7b2c-4b3a-b00e-031bf0d0a5d6",
        "text": "Implicits effectively _do_ encode logic programming semantics. In Agda and Idris that's an explicit aim (term inference is basically proof search). Scala is the same but somewhat accidentally.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jhl=X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Implicits effectively "
                            },
                            {
                                "type": "text",
                                "text": "do",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " encode logic programming semantics. In Agda and Idris that's an explicit aim (term inference is basically proof search). Scala is the same but somewhat accidentally."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1613605209.243100",
        "client_msg_id": "06165afc-58dc-4bf5-9240-be1808140864",
        "text": "IDK if you are looking for the more \"formal\" side of this but,\nI'm reminded of these projects that I had at the bottom of my bookmarks:\n<https:\/\/baturin.org\/tools\/bnfgen\/>\n<https:\/\/lcamtuf.coredump.cx\/afl\/>\nThis kind of technique is used in fuzz testing quite a bit.\nIf you think about formal FSM\/Automata theory, the normal way we use a FSM is to feed a string and see if it gets the end state (that's what a parser does).\nYou can also run a FSM in reverse to generate random strings from the grammar. The algorithm is usually something like: Start at the starting state, pick a random node, spit out the string that would match that node, pick the next random node, continue until you get to the finish state.\nTypically you have a way to backtrack out if you end up in an invalid node. Invalid nodes represent parse errors, so you would fail with an error if you were just reading some user input, but since you are generating your own string, the program can rewind out of the bad state.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "47UdY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "IDK if you are looking for the more \"formal\" side of this but,\nI'm reminded of these projects that I had at the bottom of my bookmarks:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/baturin.org\/tools\/bnfgen\/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lcamtuf.coredump.cx\/afl\/"
                            },
                            {
                                "type": "text",
                                "text": "\nThis kind of technique is used in fuzz testing quite a bit.\nIf you think about formal FSM\/Automata theory, the normal way we use a FSM is to feed a string and see if it gets the end state (that's what a parser does).\nYou can also run a FSM in reverse to generate random strings from the grammar. The algorithm is usually something like: Start at the starting state, pick a random node, spit out the string that would match that node, pick the next random node, continue until you get to the finish state.\nTypically you have a way to backtrack out if you end up in an invalid node. Invalid nodes represent parse errors, so you would fail with an error if you were just reading some user input, but since you are generating your own string, the program can rewind out of the bad state."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613609273.243400",
        "client_msg_id": "82572ba1-cab1-4bd0-95f4-a67a8c7c0ad4",
        "text": "Interesting! I need to think more about the possible similarity to logic programming (which is already inspiring me in other ways :slightly_smiling_face:)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zbils",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting! I need to think more about the possible similarity to logic programming (which is already inspiring me in other ways "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1613628956.244000",
        "client_msg_id": "7be798a8-4f19-4bb5-8e19-f3ddcd5f619b",
        "text": "thanks, Ray. I’ll look into them. I’ve heard of Automata Theory, but I don’t know more about it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ZWw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks, Ray. I’ll look into them. I’ve heard of Automata Theory, but I don’t know more about it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1613629318.245700",
        "client_msg_id": "ec9afc78-8b5c-43b3-ba9d-c5b26f114b73",
        "text": "does anyone know of a knowledge management tool (Tiddlywiki, Roam) that allows you make linkable identifiers in code blocks?\n\nfor example, if I have this code\n```data Path a = Path Bool [PathSegment a] a```\nI want to make `PathSegment` linkable and have its definition in another tiddler\/block\/entry, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613629318.245700",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1613815722.022400",
        "reply_users": [
            "U013ZLJARC7",
            "UDQKHNP51",
            "UAVCC2X70",
            "UCUSW7WVD",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "U013ZLJARC7",
                "ts": "1613642646.246000"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613651178.246200"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1613716407.259700"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613749635.263100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1613751365.263300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1613787565.014400"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1613815722.022400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cy6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "does anyone know of a knowledge management tool (Tiddlywiki, Roam) that allows you make linkable identifiers in code blocks?\n\nfor example, if I have this code\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "data Path a = Path Bool [PathSegment a] a"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to make "
                            },
                            {
                                "type": "text",
                                "text": "PathSegment",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " linkable and have its definition in another tiddler\/block\/entry, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U016VUZGUUQ"
                ],
                "count": 1
            }
        ]
    }
]