[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1688985676.611329",
        "client_msg_id": "04503c1d-29e1-4363-ba22-cdfc4c237fe6",
        "text": "There is no apparent problem with your audio, but, if you want A quickie way to tweak spoken-word audio, I found these settings useful <https:\/\/publish.obsidian.md\/programmingsimplicity\/descript+audio\/2023-07-08-Descript+Audio>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688711810.122719",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "image_url": "https:\/\/ogimage.obsidian.md\/og-image.png?title=2023-07-08-Descript+Audio&description=%23%23+Improving+Your+Audio+Your+audio+sounds+fine.+But%2C+if+you+want+a+no-brainer%2C+quick-and-dirty+way+to+further+improve+your+audio+and+make+it+sound+%22more+present%22%2C+drop+your+video+into+Descript%2C+then+%E2%80%A6",
                "image_width": 1200,
                "image_height": 630,
                "image_bytes": 51078,
                "from_url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/descript+audio\/2023-07-08-Descript+Audio",
                "id": 1,
                "original_url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/descript+audio\/2023-07-08-Descript+Audio",
                "fallback": "2023-07-08-Descript Audio - Obsidian Publish",
                "text": "## Improving Your Audio Your audio sounds fine. But, if you want a no-brainer, quick-and-dirty way to further improve your audio and make it sound \"more present\", drop your video into Descript, then …",
                "title": "2023-07-08-Descript Audio - Obsidian Publish",
                "title_link": "https:\/\/publish.obsidian.md\/programmingsimplicity\/descript+audio\/2023-07-08-Descript+Audio",
                "service_name": "publish.obsidian.md"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hhm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is no apparent problem with your audio, but, if you want A quickie way to tweak spoken-word audio, I found these settings useful "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/descript+audio\/2023-07-08-Descript+Audio"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1688985807.395929",
        "client_msg_id": "93cbd26d-7a74-41fa-82f5-a05942e8e0ad",
        "text": "Paraphrasing, to see if I understand: an “app” is a Composition of boxes.  Some boxes contain previously-written code, some boxes contain newly-written code. New apps can be copy\/pasted (“forked”) from previous apps. Correct?\n\nFTR: You might wish to try a different UI - a hierarchy instead of an infinite canvas.  Say, no more than 7+-2 boxes on any one diagram.  Purple boxes are code, black boxes are containers.  Purple boxes contain Lua (or whatever).  Black boxes can contain purple boxes or more black boxes.  You can drill down into black boxes to show their contents - if you want to, but you are not forced to do so. In my opinion, the UI problem with an infinite canvas is apparent at, say, 15:11.  The editor shows a bunch of generic code on the left which, IMO, should simply be elided into a single black box. [“Black” boxes are something visually appealing and not distracting (maybe empty boxes with a faded, coloured border???) ].  My brain wants to ignore the boxes on the left, since I trust that that code already works and isn’t being tweaked for this particular fork.  But, I can’t - visually - ignore the left side, since I am forced to look at it.  I -can- pan to the right side thereby eliding the left side, but, at first it’s not obvious that I want to do that.  I have to understand what’s there before I know what I want to look at and what I want to elide.  The designer of a new app simply wants to copy\/paste (“fork”) a previously working\/tested app and to treat the previous code as a black box.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688711810.122719",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vv7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Paraphrasing, to see if I understand: an “app” is a Composition of boxes.  Some boxes contain previously-written code, some boxes contain newly-written code. New apps can be copy\/pasted (“forked”) from previous apps. Correct?\n\nFTR: You might wish to try a different UI - a hierarchy instead of an infinite canvas.  Say, no more than 7+-2 boxes on any one diagram.  Purple boxes are code, black boxes are containers.  Purple boxes contain Lua (or whatever).  Black boxes can contain purple boxes or more black boxes.  You can drill down into black boxes to show their contents - if you want to, but you are not forced to do so. In my opinion, the UI problem with an infinite canvas is apparent at, say, 15:11.  The editor shows a bunch of generic code on the left which, IMO, should simply be elided into a single black box. [“Black” boxes are something visually appealing and not distracting (maybe empty boxes with a faded, coloured border???) ].  My brain wants to ignore the boxes on the left, since I trust that that code already works and isn’t being tweaked for this particular fork.  But, I can’t - visually - ignore the left side, since I am forced to look at it.  I -can- pan to the right side thereby eliding the left side, but, at first it’s not obvious that I want to do that.  I have to understand what’s there before I know what I want to look at and what I want to elide.  The designer of a new app simply wants to copy\/paste (“fork”) a previously working\/tested app and to treat the previous code as a black box."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1688992186.783879",
        "client_msg_id": "E69F33AC-0FD1-4B72-A00E-6A81F7526699",
        "text": "Solidjs is fairly popular and is built entirely around signals. <https:\/\/www.solidjs.com|https:\/\/www.solidjs.com>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688951860.173829",
        "parent_user_id": "U05G29UQHKK",
        "attachments": [
            {
                "image_url": "https:\/\/www.solidjs.com\/og.jpg",
                "image_width": 1200,
                "image_height": 627,
                "image_bytes": 30879,
                "from_url": "https:\/\/www.solidjs.com\/",
                "service_icon": "https:\/\/www.solidjs.com\/img\/favicons\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.solidjs.com",
                "fallback": "SolidJS",
                "text": "Solid is a purely reactive library. It was designed from the ground up with a reactive core. It's influenced by reactive principles developed by previous libraries.",
                "title": "SolidJS",
                "title_link": "https:\/\/www.solidjs.com\/",
                "service_name": "solidjs.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ve0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Solidjs is fairly popular and is built entirely around signals. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.solidjs.com",
                                "text": "https:\/\/www.solidjs.com"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688992530.519679",
        "edited": {
            "user": "U05G29UQHKK",
            "ts": "1688992617.000000"
        },
        "client_msg_id": "c2c7670a-bc5d-4588-bf6a-6eeb7cdf8580",
        "text": "<@U03R0B9U1GD> yeah David's work is great, I toyed with making my own signals first but couldn't crack the dependency problem. When I read `capture.ts` my jaw hit the floor! Such an elegant way to do it. I was afraid I'd find Proxy usage but not at all!\n\nI visited Steve in the office when we were in London last year and he was talking about what I now know is signia, seemed really excited about it, but I couldn't grasp the concept at the time. Glad I got to revisit and appreciate it, it's fun to use.\n\n<@UEBG0NPDK> I checked out Solid a while back but bounced off for some reason, I can't remember why. I'll read their docs again. Part of what I'm curious about is why the need for a compile step, why JSX syntax, etc. I'm curious to see if the needs which drove those features emerge in my own little experiment.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688951860.173829",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KBKD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03R0B9U1GD"
                            },
                            {
                                "type": "text",
                                "text": " yeah David's work is great, I toyed with making my own signals first but couldn't crack the dependency problem. When I read "
                            },
                            {
                                "type": "text",
                                "text": "capture.ts",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " my jaw hit the floor! Such an elegant way to do it. I was afraid I'd find Proxy usage but not at all!\n\nI visited Steve in the office when we were in London last year and he was talking about what I now know is signia, seemed really excited about it, but I couldn't grasp the concept at the time. Glad I got to revisit and appreciate it, it's fun to use.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " I checked out Solid a while back but bounced off for some reason, I can't remember why. I'll read their docs again. Part of what I'm curious about is why the need for a compile step, why JSX syntax, etc. I'm curious to see if the needs which drove those features emerge in my own little experiment."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03R0B9U1GD",
                    "U05PRFSG069"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688993031.792219",
        "client_msg_id": "d03cc95c-9982-4f3f-9bde-a92ecd3183d9",
        "text": "From a scan of their tutorials it was probably the magic that bothered me about Solid, like how computed signals are plain functions. Perhaps in practice it feels natural, but I have a strong preference for more native-feeling code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688951860.173829",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H3yJR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From a scan of their tutorials it was probably the magic that bothered me about Solid, like how computed signals are plain functions. Perhaps in practice it feels natural, but I have a strong preference for more native-feeling code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1689009561.963379",
        "client_msg_id": "910a394a-f067-40b6-9631-f9fae7276104",
        "text": "I haven't read this paper, so these comments are based purely on the podcast.\n\nMany of the problems you discussed remind me of Ted Nelson's concept of Cybercrud from page 8 of Computer Lib.\n<https:\/\/archive.org\/details\/ted-nelson-computer-lib-dream-machine\/page\/n7\/mode\/1up|https:\/\/archive.org\/details\/ted-nelson-computer-lib-dream-machine\/page\/n7\/mode\/1up>\n\nNelson does not discuss legalism as one of the causes of Cybercrud, but I think this fits into his thinking nicely.\n\nMany of these problems are less of an issue in environments that blur the line between programmer and user, like Smalltalk, Emacs, Unix shell scripting, Lisp machines, and Basic interpreters. Once a user has learned a certain number of programmy features in the environment, they have the ability to tweak things like tests and conditions that are restricting them in a legalistic manner.\n\nIt seems to me that these really become issues in situations like purchasing items or airline tickets that involve running someone else's code on someone else's servers that manages someone else's resources and assets.\n\nProblems involving someone else's code running on your stuff, like in a car or a thermostat, aren't really that much different from the problems that have always been caused by non-free software running on your computer, and disrespecting your freedom. I think the solution to these injustices is to share the link <https:\/\/www.gnu.org\/philosophy\/philosophy.html|https:\/\/www.gnu.org\/philosophy\/philosophy.html> with everyone you can every time it is relevant to the conversation. (See what I did there?)\n\nCorporations will only respect our freedom when enough consumers demand it that it's the only way to be profitable.\n\nSaying the program means what it does sounds a lot like operational semantics to me.\n<https:\/\/en.m.wikipedia.org\/wiki\/Operational_semantics|https:\/\/en.m.wikipedia.org\/wiki\/Operational_semantics>\nI'm not sure whether or not this means that operational semantics might be a useful tool in helping to avoid the pitfalls of legalism in software.\n\nThe concept of an immediate speech act versus a delayed speech act reminds me of direct mode (\"print 7\") versus indirect mode (\"10 print 7\") in a Basic interpreter with line numbers. I'm not sure if this matters to the core discussion, but it's always fascinating to see more parallels between natural languages and programming languages.\n\nThere is a standards body for French.\n<https:\/\/en.m.wikipedia.org\/wiki\/Acad%C3%A9mie_Fran%C3%A7aise|https:\/\/en.m.wikipedia.org\/wiki\/Acad%C3%A9mie_Fran%C3%A7aise>\n\nThere's also a mirror image of this legalistic phenomenon that does not involve computers at all. As society becomes more populous and institutions become more legalistic, we reduce the role of human wisdom in decision making even when there are no computers involved. Barry Schwartz has a wonderful TED talk about this.\n<https:\/\/youtu.be\/VYu0kMCxFEE|https:\/\/youtu.be\/VYu0kMCxFEE>\n\nIt occurs to me that the legalistic behavior of software is behind a large number of security holes. If you walk up to a CFO, and show him that there is an obscure way of combining and interpreting company policies to conclude that he should give you all of their money, he will tell you to take a hike. If you do the same thing to a computer, it will give you all of its money.\n\nSlightly off topic, but I think part of the reason why coding rules and methodologies are so popular among managers is a popular delusion that good coding rules and methodologies can make up for working with less competent programmers. Many managers want to be able to hire less skilled programmers, both to save money and to make programmers more interchangeable, and they somehow think that they can still create good products with bad programmers if they just use the right process.\n<https:\/\/wiki.c2.com\/?PlugCompatibleInterchangeableEngineers|https:\/\/wiki.c2.com\/?PlugCompatibleInterchangeableEngineers>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fN0lZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't read this paper, so these comments are based purely on the podcast.\n\nMany of the problems you discussed remind me of Ted Nelson's concept of Cybercrud from page 8 of Computer Lib.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/archive.org\/details\/ted-nelson-computer-lib-dream-machine\/page\/n7\/mode\/1up",
                                "text": "https:\/\/archive.org\/details\/ted-nelson-computer-lib-dream-machine\/page\/n7\/mode\/1up"
                            },
                            {
                                "type": "text",
                                "text": "\n\nNelson does not discuss legalism as one of the causes of Cybercrud, but I think this fits into his thinking nicely.\n\nMany of these problems are less of an issue in environments that blur the line between programmer and user, like Smalltalk, Emacs, Unix shell scripting, Lisp machines, and Basic interpreters. Once a user has learned a certain number of programmy features in the environment, they have the ability to tweak things like tests and conditions that are restricting them in a legalistic manner.\n\nIt seems to me that these really become issues in situations like purchasing items or airline tickets that involve running someone else's code on someone else's servers that manages someone else's resources and assets.\n\nProblems involving someone else's code running on your stuff, like in a car or a thermostat, aren't really that much different from the problems that have always been caused by non-free software running on your computer, and disrespecting your freedom. I think the solution to these injustices is to share the link "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.gnu.org\/philosophy\/philosophy.html",
                                "text": "https:\/\/www.gnu.org\/philosophy\/philosophy.html"
                            },
                            {
                                "type": "text",
                                "text": " with everyone you can every time it is relevant to the conversation. (See what I did there?)\n\nCorporations will only respect our freedom when enough consumers demand it that it's the only way to be profitable.\n\nSaying the program means what it does sounds a lot like operational semantics to me.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Operational_semantics",
                                "text": "https:\/\/en.m.wikipedia.org\/wiki\/Operational_semantics"
                            },
                            {
                                "type": "text",
                                "text": "\nI'm not sure whether or not this means that operational semantics might be a useful tool in helping to avoid the pitfalls of legalism in software.\n\nThe concept of an immediate speech act versus a delayed speech act reminds me of direct mode (\"print 7\") versus indirect mode (\"10 print 7\") in a Basic interpreter with line numbers. I'm not sure if this matters to the core discussion, but it's always fascinating to see more parallels between natural languages and programming languages.\n\nThere is a standards body for French.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Acad%C3%A9mie_Fran%C3%A7aise",
                                "text": "https:\/\/en.m.wikipedia.org\/wiki\/Acad%C3%A9mie_Fran%C3%A7aise"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere's also a mirror image of this legalistic phenomenon that does not involve computers at all. As society becomes more populous and institutions become more legalistic, we reduce the role of human wisdom in decision making even when there are no computers involved. Barry Schwartz has a wonderful TED talk about this.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/VYu0kMCxFEE",
                                "text": "https:\/\/youtu.be\/VYu0kMCxFEE"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt occurs to me that the legalistic behavior of software is behind a large number of security holes. If you walk up to a CFO, and show him that there is an obscure way of combining and interpreting company policies to conclude that he should give you all of their money, he will tell you to take a hike. If you do the same thing to a computer, it will give you all of its money.\n\nSlightly off topic, but I think part of the reason why coding rules and methodologies are so popular among managers is a popular delusion that good coding rules and methodologies can make up for working with less competent programmers. Many managers want to be able to hire less skilled programmers, both to save money and to make programmers more interchangeable, and they somehow think that they can still create good products with bad programmers if they just use the right process.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.c2.com\/?PlugCompatibleInterchangeableEngineers",
                                "text": "https:\/\/wiki.c2.com\/?PlugCompatibleInterchangeableEngineers"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "U03R0B9U1GD",
                    "U017TE5R09M"
                ],
                "count": 2
            }
        ]
    }
]