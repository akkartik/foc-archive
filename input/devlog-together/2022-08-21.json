[
    {
        "text": "I've managed to render a flow using raw webgl and my own visual webassembly compiler.. in the screenshot you see the visualization in webgl on the top-right.. this is the visualization of the flow that you can see in the regular editor that I already have. Basically the flow is rendering itself. \nAlthough it lacks a lot of visual elements from the canvas\/dom renderer (bezier curves , different node shapes and even the node-type names are not shown yet). You can't interact with it yet, except for being able to navigate in 3d using mouse and keyboard. It does have basic shadows and lighting, although I am not yet sure if I'll keep that in. For now I am happy with the progress. I just wish I had more time to spend on this. ",
        "files": [
            {
                "id": "F03UVF6UWMP",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U0123H7JRDM",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lfH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've managed to render a flow using raw webgl and my own visual webassembly compiler.. in the screenshot you see the visualization in webgl on the top-right.. this is the visualization of the flow that you can see in the regular editor that I already have. Basically the flow is rendering itself. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Although it lacks a lot of visual elements from the canvas\/dom renderer (bezier curves , different node shapes and even the node-type names are not shown yet). You can't interact with it yet, except for being able to navigate in 3d using mouse and keyboard. It does have basic shadows and lighting, although I am not yet sure if I'll keep that in. For now I am happy with the progress. I just wish I had more time to spend on this. "
                            }
                        ]
                    }
                ]
            }
        ],
        "subtype": "thread_broadcast",
        "root": {
            "text": "Hi, I have been working on adding statemachines to the node and wire interface that I am building.. The current state of the statemachine and the execution path of the flow are updated live when you interact with the flow\/form-nodes. Yesterday I improved updating the execution path in combination with the OnStateChange nodes so that the path is cleared when a OnStateChange node is not triggered because of its expected state is not the current state of the statemachine.",
            "files": [
                {
                    "id": "F03TAQGGULQ",
                    "mode": "hidden_by_limit"
                }
            ],
            "upload": false,
            "user": "U0123H7JRDM",
            "display_as_bot": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "7aG",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Hi, I have been working on adding statemachines to the node and wire interface that I am building.. The current state of the statemachine and the execution path of the flow are updated live when you interact with the flow\/form-nodes. Yesterday I improved updating the execution path in combination with the OnStateChange nodes so that the path is cleared when a OnStateChange node is not triggered because of its expected state is not the current state of the statemachine."
                                }
                            ]
                        }
                    ]
                }
            ],
            "type": "message",
            "ts": "1659770611.122139",
            "client_msg_id": "544EF16C-B518-4319-9379-22FB247DA364",
            "thread_ts": "1659770611.122139",
            "reply_count": 27,
            "reply_users_count": 4,
            "latest_reply": "1663169507.664369",
            "reply_users": [
                "U0123H7JRDM",
                "UJZS8UUJV",
                "UA14TGLTC",
                "UE6EFEPTQ"
            ],
            "replies": [
                {
                    "user": "U0123H7JRDM",
                    "ts": "1659774381.369359"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1659781642.170619"
                },
                {
                    "user": "UJZS8UUJV",
                    "ts": "1659810814.708749"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1659812114.377379"
                },
                {
                    "user": "UJZS8UUJV",
                    "ts": "1660332026.901479"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1660467565.939059"
                },
                {
                    "user": "UJZS8UUJV",
                    "ts": "1660784294.200749"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1661070502.991379"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1661601314.119379"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1661601453.540839"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1661602713.424159"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1662822789.389829"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1662994394.313109"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1662996511.169769"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1663105936.938509"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1663167719.284389"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1663168219.110329"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1663168687.999749"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1663168733.081009"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1663168798.664389"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1663168857.148279"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1663168963.666049"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1663169077.059619"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1663169206.820909"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1663169321.975639"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1663169452.540519"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1663169507.664369"
                }
            ],
            "is_locked": false,
            "subscribed": false
        },
        "type": "message",
        "ts": "1661070502.991379",
        "client_msg_id": "C370A9BC-5182-4696-89A1-935B2D1134FA",
        "thread_ts": "1659770611.122139",
        "parent_user_id": "U0123H7JRDM",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U036TFVAWJD",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1661085055.346119",
        "client_msg_id": "d8c9a442-942e-42fe-a218-7de560f28dc8",
        "text": "It would be fun to show the values floating by the code (think Lighttable) when you click on one of the game screens :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VRo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It would be fun to show the values floating by the code (think Lighttable) when you click on one of the game screens "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661095643.287179",
        "client_msg_id": "0475c155-5575-4215-b802-7b96b9c426fa",
        "text": "Heh, I have to keep resisting the temptation to insert debug prints into my renderer. It's all right there in the logs! :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KzM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Heh, I have to keep resisting the temptation to insert debug prints into my renderer. It's all right there in the logs! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "<@U013ZLJARC7> I never considered that!\n\nAfter a few minutes of thinking about it, how do you like this approach instead? Trying to follow Edward Tufte, poorly. I could show the velocity numbers inside the image as well, once I've had enough sleep to position them at the head of the \"arrow\".\n\nBasically my thinking is that any integration between the panes is more code for the tool to manage. Offloading the visualization responsibilities to each codebase will hopefully keep the tool simpler over time.\n\nI still don't have a clear articulation though of what I need a tool for and what responsibilities to offload. First cut: anything involving a single point in time is the client codebase's responsibility, while the tool is responsible for aggregation. Even there, though, I could imagine managing some window of history in the codebase and having each frame show a looping animation of the nearby trajectory. And it would be a lot less code in the codebase than in the tool.",
        "files": [
            {
                "id": "F03UH8TA4GJ",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W83XE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " I never considered that!\n\nAfter a few minutes of thinking about it, how do you like this approach instead? Trying to follow Edward Tufte, poorly. I could show the velocity numbers inside the image as well, once I've had enough sleep to position them at the head of the \"arrow\".\n\nBasically my thinking is that any integration between the panes is more code for the tool to manage. Offloading the visualization responsibilities to each codebase will hopefully keep the tool simpler over time.\n\nI still don't have a clear articulation though of what I need a tool for and what responsibilities to offload. First cut: anything involving a single point in time is the client codebase's responsibility, while the tool is responsible for aggregation. Even there, though, I could imagine managing some window of history in the codebase and having each frame show a looping animation of the nearby trajectory. And it would be a lot less code in the codebase than in the tool."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1661096824.088489",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1661096953.000000"
        },
        "client_msg_id": "5cc91f1e-ed33-4cfa-86bc-97fe98ab2357",
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661110085.079019",
        "client_msg_id": "40b16dfa-dd9c-4fb4-ad80-18977d8e9353",
        "text": "&gt;  what I need a tool for and what responsibilities to offload\nOne thing I would use it for is exploring new large code bases. A lot of time spent there is just figuring out things like \"If I call this function, what other functions does it call and in what situations.\" Or, how are these entities related, like \"does a Foo always have a Bar\". As this code executes, how many Bars does this Foo have on average. I see it as a way to provide active documentation. Even a custom debugger of sorts, where the user maintains debugging code making it easy to spin up a debugging session. Kind of like how react has a custom react debugger, it would be cool to be able to have that but specific to your app.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "udGR",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " what I need a tool for and what responsibilities to offload"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thing I would use it for is exploring new large code bases. A lot of time spent there is just figuring out things like \"If I call this function, what other functions does it call and in what situations.\" Or, how are these entities related, like \"does a Foo always have a Bar\". As this code executes, how many Bars does this Foo have on average. I see it as a way to provide active documentation. Even a custom debugger of sorts, where the user maintains debugging code making it easy to spin up a debugging session. Kind of like how react has a custom react debugger, it would be cool to be able to have that but specific to your app."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1661121610.895199",
        "client_msg_id": "17f80f91-f359-4c15-af31-b795bde9f62a",
        "text": "I ended up using a list to represent relative ordering between nodes. You can see it printed in the console. Basically, the position in that list is what determines vertical ordering of siblings in the graph. Every graph edit then needs to update this list as well. So adding a new child do node `A` means you find `A` in the list and insert the new node after it. Deleting nodes removes from the order list, etc.\n\nA huge benefit of this is now I can support adding nodes in between others, whereas previously they would be added to the bottom of the set of siblings. Eg the `between 1 and 2` node is added with the shortcut to add a sibling.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcd02882a83b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cd02882a83b643d0f595c605d960c28f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Scott",
            "real_name": "Scott Antipa",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottantipa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661032755.413189",
        "parent_user_id": "U02LHNW0VLP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uj8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I ended up using a list to represent relative ordering between nodes. You can see it printed in the console. Basically, the position in that list is what determines vertical ordering of siblings in the graph. Every graph edit then needs to update this list as well. So adding a new child do node "
                            },
                            {
                                "type": "text",
                                "text": "A",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " means you find "
                            },
                            {
                                "type": "text",
                                "text": "A",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the list and insert the new node after it. Deleting nodes removes from the order list, etc.\n\nA huge benefit of this is now I can support adding nodes in between others, whereas previously they would be added to the bottom of the set of siblings. Eg the "
                            },
                            {
                                "type": "text",
                                "text": "between 1 and 2",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " node is added with the shortcut to add a sibling."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "",
        "files": [
            {
                "id": "F03UHH2GSFM",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": true,
        "user": "U02LHNW0VLP",
        "display_as_bot": false,
        "type": "message",
        "ts": "1661121623.353919",
        "client_msg_id": "88eb018f-df90-44fa-8bd5-72dffa834afc",
        "thread_ts": "1661032755.413189",
        "parent_user_id": "U02LHNW0VLP"
    },
    {
        "text": "I'm going to stop monopolizing the channel, but here's the final demo.\n\nI've also published the repo: <https:\/\/codeberg.org\/akkartik\/spokecone.love>\n\nThings to notice in the demo:\n• The client program logs section headers following a specific convention.\n• The editor recognizes the convention to associate log lines with nested sections. Sections are collapsed by default, but you can click on them to expand.\n• Clicking on a log line takes you to the line of code that generated it.",
        "files": [
            {
                "id": "F03UHJZJ46P",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aX0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm going to stop monopolizing the channel, but here's the final demo.\n\nI've also published the repo: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/codeberg.org\/akkartik\/spokecone.love"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThings to notice in the demo:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The client program logs section headers following a specific convention."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The editor recognizes the convention to associate log lines with nested sections. Sections are collapsed by default, but you can click on them to expand."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Clicking on a log line takes you to the line of code that generated it."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1661125144.408239",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1661125340.000000"
        },
        "client_msg_id": "0a9d2800-e2a9-4c23-8f0a-061118c269e4",
        "thread_ts": "1660759262.517909",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U02LHNW0VLP"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    }
]