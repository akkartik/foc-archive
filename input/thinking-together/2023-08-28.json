[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1693209305.409639",
        "client_msg_id": "791d355f-6b8e-4a38-b099-68405d7f0e8d",
        "text": "I typically use pencil and paper as a “tool for thought” during the design of… almost anything. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EUh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I typically use pencil and paper as a “tool for thought” during the design of… almost anything. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            },
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT",
                    "UA14TGLTC",
                    "U03R0B9U1GD",
                    "U017TE5R09M",
                    "U023V63MF6V"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1693231453.379599",
        "edited": {
            "user": "U03LJBR6THT",
            "ts": "1693231493.000000"
        },
        "client_msg_id": "b78d7be6-73fe-4268-a3ea-8aa81c05bbdc",
        "text": "For some time I've thought that type systems are essentially ad-hoc logic languages. So.. why not use a full on logic language (prolog or something) to statically analyze your codebase instead of keep patching onto a type system, it appears to me that logic languages are simpler &amp; more expressive than most type systems. I'm starting to work on this for my language, and creating a logic language in efforts to also understand logic programming better.\n\nAnother advantage I can think of is that if a the logic language is expressive enough to type even the most advanced languages as well as the weakest, it could be used as a shared interface between languages to understand at least parts of each others type systems, as well as be a tool for user extension for additional static analysis specific to their project.\n\nI'm basically thinking something like this.\n```# here's a sample program in my (object oriented) language\nfn add(a, b) = a + b\nadd(1, 2)```\ngenerated logic program in pseudo syntax (`#A` is a pattern to check value is type of `A`, `?a` is like prolog's `A`, `{...}`  is map literal.)\n```-- preloaded facts\nlookup(#Number, :+, {args: [#Number, #Number], ret: #Number}).\n\n-- program\nadd(?a, ?b, ?ret) :- lookup(?a, :+, {args: [?a, ?b], ret: ?ret}).\n?- add(1, 2, ?_).```\nThe specifics of my logic language is likely flawed, but I'm curious about the general idea of using a fully-fledged logic language to generate a program in &amp; run instead of generated a typed AST and running ad-hoc type systems.\n\nMy question is, what are people's thoughts on this? Any previous work in this area? Any obvious flaws?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693231453.379599",
        "reply_count": 21,
        "reply_users_count": 6,
        "latest_reply": "1693885865.326769",
        "reply_users": [
            "UGWUJUZHT",
            "U03LJBR6THT",
            "UKJGU23KP",
            "UJBAJNFLK",
            "UA14TGLTC",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UGWUJUZHT",
                "ts": "1693234670.939129"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1693235859.178129"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1693239230.709679"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1693248699.166509"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1693248848.074799"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1693249907.454979"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1693250132.454309"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1693252545.445969"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1693286528.265149"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1693292544.844609"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1693368096.745299"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1693386172.210129"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1693404191.962399"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1693404713.585669"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1693405020.997229"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1693421682.938769"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1693542230.321329"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1693579300.272649"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1693579885.040729"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1693847276.616809"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1693885865.326769"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3r4s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For some time I've thought that type systems are essentially ad-hoc logic languages. So.. why not use a full on logic language (prolog or something) to statically analyze your codebase instead of keep patching onto a type system, it appears to me that logic languages are simpler & more expressive than most type systems. I'm starting to work on this for my language, and creating a logic language in efforts to also understand logic programming better.\n\nAnother advantage I can think of is that if a the logic language is expressive enough to type even the most advanced languages as well as the weakest, it could be used as a shared interface between languages to understand at least parts of each others type systems, as well as be a tool for user extension for additional static analysis specific to their project.\n\nI'm basically thinking something like this.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# here's a sample program in my (object oriented) language\nfn add(a, b) = a + b\nadd(1, 2)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "generated logic program in pseudo syntax ("
                            },
                            {
                                "type": "text",
                                "text": "#A",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a pattern to check value is type of "
                            },
                            {
                                "type": "text",
                                "text": "A",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "?a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is like prolog's "
                            },
                            {
                                "type": "text",
                                "text": "A",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "{...}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  is map literal.)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "-- preloaded facts\nlookup(#Number, :+, {args: [#Number, #Number], ret: #Number}).\n\n-- program\nadd(?a, ?b, ?ret) :- lookup(?a, :+, {args: [?a, ?b], ret: ?ret}).\n?- add(1, 2, ?_)."
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe specifics of my logic language is likely flawed, but I'm curious about the general idea of using a fully-fledged logic language to generate a program in & run instead of generated a typed AST and running ad-hoc type systems.\n\nMy question is, what are people's thoughts on this? Any previous work in this area? Any obvious flaws?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            },
            {
                "name": "hushed",
                "users": [
                    "U05597GCDDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1693233321.418509",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1693234791.000000"
        },
        "client_msg_id": "ca6f05d1-f907-4bb6-a9d4-81fdd6884882",
        "text": "…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q9c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PLUUKU94",
        "type": "message",
        "ts": "1693234087.357479",
        "edited": {
            "user": "U05PLUUKU94",
            "ts": "1693314440.000000"
        },
        "client_msg_id": "b276b2bd-6300-4acf-9d16-c5651aed9655",
        "text": "I might be missing context here but the fact that type systems are logic languages should be uncontroversial given that that's what the Curry Howard Correspondence is about. Though I'm not very well read I think that using \"complete\" generic logic languages\/solver (as a component) in solving type equations ought to be well trodden ground, my first thought went to <https:\/\/github.com\/rust-lang\/chalk|https:\/\/github.com\/rust-lang\/chalk> as one example. I'd be looking at what one might give up doing so as the reason why it doesn't happen more: speed? guaranteed termination? good error messages?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7de65488df4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7de65488df4f37cc64ca4a628a1e08bf.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0012-72.png",
            "first_name": "Martin",
            "real_name": "Martin Sandin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "msandin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693234087.357479",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1693234370.728389",
        "reply_users": [
            "U03LJBR6THT"
        ],
        "replies": [
            {
                "user": "U03LJBR6THT",
                "ts": "1693234292.300919"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1693234370.728389"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "992wf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I might be missing context here but the fact that type systems are logic languages should be uncontroversial given that that's what the Curry Howard Correspondence is about. Though I'm not very well read I think that using \"complete\" generic logic languages\/solver (as a component) in solving type equations ought to be well trodden ground, my first thought went to "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/rust-lang\/chalk",
                                "text": "https:\/\/github.com\/rust-lang\/chalk"
                            },
                            {
                                "type": "text",
                                "text": " as one example. I'd be looking at what one might give up doing so as the reason why it doesn't happen more: speed? guaranteed termination? good error messages?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1693234292.300919",
        "client_msg_id": "4845484c-51f9-4428-a939-0477f12da97d",
        "text": "I do think something like prolog might not be fit for it as the error messages seem poor, but it feels like a solvable problem - something like a stack trace instead of the \"no\" that prolog can give.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693234087.357479",
        "parent_user_id": "U05PLUUKU94",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J\/7Ri",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do think something like prolog might not be fit for it as the error messages seem poor, but it feels like a solvable problem - something like a stack trace instead of the \"no\" that prolog can give."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1693234370.728389",
        "client_msg_id": "341bef78-e9ad-4902-b7bb-ee5c64b1f37a",
        "text": "chalk looks pretty cool, thanks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693234087.357479",
        "parent_user_id": "U05PLUUKU94",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g=y6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "chalk looks pretty cool, thanks."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U05PLUUKU94"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1693234378.983779",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1693234427.000000"
        },
        "client_msg_id": "64059C1C-00CB-488C-9564-6483E85B39C6",
        "text": "Quick reminder — <https:\/\/futureofcoding.org\/member-handbook|please post replies as threaded replies>. Thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693234378.983779",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1693234776.022069",
        "reply_users": [
            "UGWUJUZHT"
        ],
        "replies": [
            {
                "user": "UGWUJUZHT",
                "ts": "1693234776.022069"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+SqB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Quick reminder — "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/member-handbook",
                                "text": "please post replies as threaded replies"
                            },
                            {
                                "type": "text",
                                "text": ". Thanks!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UMQ6LR9NZ",
                    "U03LJBR6THT",
                    "U05PLUUKU94",
                    "U016VUZGUUQ",
                    "U03R0B9U1GD",
                    "UJFN50C00"
                ],
                "count": 6
            },
            {
                "name": "thread",
                "users": [
                    "U02QC0PPER3",
                    "U05PRFSG069",
                    "UML4ZEKDK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1693234670.939129",
        "client_msg_id": "7b72941c-7fb2-4618-9169-f94c6b1c8751",
        "text": "Massive agreement. Wish: I wish that type-checking was built BESIDE languages instead of INSIDE-OF languages.  Observation: While sitting through a reading of PLFA (Agda) [with CompSci Cabal], I developed the distinct feeling that I was looking at 2 languages, one for programming a type system, and, one for programming an implementation (an after-thought in Agda, IMO) ; to me, “Dependent Types” is just more-programming-language-constructs for a type language (DT adds parameters) ; Agda, et al, seems to be inching towards the re-discovery that type systems can be \/ should be programmed.  The benefit of Relational Languages (PROLOG, miniKanren, etc). is that they specify “what is wanted” (relations) instead of “how to create steps for achieving what is wanted” (3GLs like Python, Rust, Haskell, etc.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693231453.379599",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hv5Jq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Massive agreement. Wish: I wish that type-checking was built BESIDE languages instead of INSIDE-OF languages.  Observation: While sitting through a reading of PLFA (Agda) [with CompSci Cabal], I developed the distinct feeling that I was looking at 2 languages, one for programming a type system, and, one for programming an implementation (an after-thought in Agda, IMO) ; to me, “Dependent Types” is just more-programming-language-constructs for a type language (DT adds parameters) ; Agda, et al, seems to be inching towards the re-discovery that type systems can be \/ should be programmed.  The benefit of Relational Languages (PROLOG, miniKanren, etc). is that they specify “what is wanted” (relations) instead of “how to create steps for achieving what is wanted” (3GLs like Python, Rust, Haskell, etc.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1693234776.022069",
        "client_msg_id": "967c33bd-133f-43de-ad25-1fa59c776330",
        "text": "My fault, yet again.  Where’s Jef Raskin when you need him?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693234378.983779",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AxP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My fault, yet again.  Where’s Jef Raskin when you need him?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1693235859.178129",
        "edited": {
            "user": "U03LJBR6THT",
            "ts": "1693235995.000000"
        },
        "client_msg_id": "55a9908e-9ddd-40ae-bd54-7c475e6d311e",
        "text": "To me type systems are in the awkward position of trying to squeeze into an existing language (get out of the way), but also be powerful enough to express complex things like DSLs.\n\nType systems have to all sorts of optimizations to make unification manageable or querying the codebase.\n\nWhere it seems to me that these are solved problems - databases.\n\nI imagine such a logic system that learns from the many decades of high performance databases, could be very fast (think indexes, query caching, materialized views etc.).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693231453.379599",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MhJb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To me type systems are in the awkward position of trying to squeeze into an existing language (get out of the way), but also be powerful enough to express complex things like DSLs.\n\nType systems have to all sorts of optimizations to make unification manageable or querying the codebase.\n\nWhere it seems to me that these are solved problems - databases.\n\nI imagine such a logic system that learns from the many decades of high performance databases, could be very fast (think indexes, query caching, materialized views etc.)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1693239230.709679",
        "client_msg_id": "E25CF027-1FE9-4C3C-8B63-FF1F0F655718",
        "text": "Rust embeds a datalog system in its type checker for borrow checking, if I’m not mistaken. <https:\/\/github.com\/rust-lang\/datafrog|https:\/\/github.com\/rust-lang\/datafrog>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693231453.379599",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BKb\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Rust embeds a datalog system in its type checker for borrow checking, if I’m not mistaken. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/rust-lang\/datafrog",
                                "text": "https:\/\/github.com\/rust-lang\/datafrog"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U03LJBR6THT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1693241119.883579",
        "client_msg_id": "22f3bdfd-ba59-48e6-8894-40ad6c6643b7",
        "text": "A one minute interaction with a digital product at 60FP on an HD RGB screen flows through a creative\/generative space of 125,241,246,351,360,000 pixel variations.\n\nWe need spaceships to explore this space, but we got rectangles with drag handles instead.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693241119.883579",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1693244498.771159",
        "reply_users": [
            "U03GBV8B58V"
        ],
        "replies": [
            {
                "user": "U03GBV8B58V",
                "ts": "1693244498.771159"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "83Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A one minute interaction with a digital product at 60FP on an HD RGB screen flows through a creative\/generative space of 125,241,246,351,360,000 pixel variations.\n\nWe need spaceships to explore this space, but we got rectangles with drag handles instead."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "white_square_button",
                "users": [
                    "U02B6FQKZK8"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1693241844.727769",
        "edited": {
            "user": "UMQ6LR9NZ",
            "ts": "1693241926.000000"
        },
        "client_msg_id": "0161c5e8-3a37-4a3e-b714-0eb4e21257b2",
        "text": "A question for ya’ll doing thinking on future of coding things:\n\nWhen\/if you think about the accessibility (read here as “a11y”) of the future of coding do you consider accessibility as an attribute of the folks using your thing (e.g. a need) or an attribute of your design (e.g. a feature)?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693241844.727769",
        "reply_count": 14,
        "reply_users_count": 5,
        "latest_reply": "1693510913.235389",
        "reply_users": [
            "UMQ6LR9NZ",
            "U02B6FQKZK8",
            "UCUSW7WVD",
            "U013ZLJARC7",
            "U03DNFDFYDA"
        ],
        "replies": [
            {
                "user": "UMQ6LR9NZ",
                "ts": "1693242095.191999"
            },
            {
                "user": "U02B6FQKZK8",
                "ts": "1693243981.149299"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1693248061.438079"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1693274641.763249"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1693382569.318889"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1693393329.954329"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1693393996.359419"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1693394145.239599"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1693394387.137899"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1693394682.032379"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1693394711.208019"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1693416754.607769"
            },
            {
                "user": "U02B6FQKZK8",
                "ts": "1693507682.325009"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1693510913.235389"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "99NW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A question for ya’ll doing thinking on future of coding things:\n\nWhen\/if you think about the accessibility (read here as “a11y”) of the future of coding do you consider accessibility as an attribute of the folks using your thing (e.g. a need) or an attribute of your design (e.g. a feature)?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1693242095.191999",
        "client_msg_id": "7853d0d7-e304-4819-8d4e-faeb34d99c5f",
        "text": "follow up question: does that distinction matter?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693241844.727769",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5mtl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "follow up question: does that distinction matter?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02B6FQKZK8",
        "type": "message",
        "ts": "1693243981.149299",
        "client_msg_id": "5E09FB49-2A4C-4B7A-B9FE-A4A25F5E2613",
        "text": "I think there's actually a trichotomy on that term that is worth exploring:\n\n1) There's the industry standard, like \"a11y\", which I would say is basically always great to have correctly implemented on any production app; generally if the tool can be consistently navigated\/manipulated keyboard-only and readable by assistive technology, it is a good sign the UI architecture is sound;\n\n2) There's the interpretation you mentioned that would be designing with a particular user need in mind, like for instance, one can literally blindfold  himself and optimize the tool for that particular usage context; that would quite surely make the tool \"more accessible\"; also, clearly great powers lie within optimizing for all human senses;\n\n3) There's a third, quite literal, interpretation of \"accessibility\", as simply \"having access at all to something\". I personally have used that in the context of \"live\/visual programming can make technology more accessible\", even simply because of ease of use, and mobile, etc. for instance.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "16df1f0f2f03",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-08-16\/2387476364451_16df1f0f2f036c730a6f_72.jpg",
            "first_name": "Samuel",
            "real_name": "Samuel Timbó",
            "display_name": "Samuel Timbó",
            "team": "T5TCAFTA9",
            "name": "samuelmtimbo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693241844.727769",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NNlz+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think there's actually a trichotomy on that term that is worth exploring:\n\n1) There's the industry standard, like \"a11y\", which I would say is basically always great to have correctly implemented on any production app; generally if the tool can be consistently navigated\/manipulated keyboard-only and readable by assistive technology"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " it is a good sign the UI architecture is sound;\n\n2) There's the interpretation you mentioned that would be designing with a particular user need in mind"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " like for instance"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " one can literally blindfold  himself and optimize the tool for that particular usage context; that would quite surely make the tool \"more accessible\"; also, clearly great powers lie within optimizing for all human senses;\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "3) There's a third, quite literal, interpretation of \"accessibility\", as simply \"having access at all to something\". I personally have used that in the context of \"live\/visual programming can make technology more accessible\", even simply because of ease of use, and mobile, etc. for instance."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1693244498.771159",
        "client_msg_id": "786a291c-4df0-4ed7-b1c5-904aefcd8e8e",
        "text": "Spaceships to explore pixels in products:\n\nScrubbing controls to cycle through:\n- Different localizations side-by-side\n- Data distributions that break layouts\n- Theme variations that cause issues\n- Screen sizes\n\nThese spaces are largely unexplored today only through manual means.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693241119.883579",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KYUYl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Spaceships to explore pixels in products:\n\nScrubbing controls to cycle through:\n- Different localizations side-by-side\n- Data distributions that break layouts\n- Theme variations that cause issues\n- Screen sizes\n\nThese spaces are largely unexplored today only through manual means."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1693248061.438079",
        "client_msg_id": "3aa24a62-2d30-4c71-bdd0-18138ddeb205",
        "text": "I like that break down a lot!\n\nSort of 3 facets of one thing, but all different. I’m imagining a <https:\/\/en.wikipedia.org\/wiki\/Radar_chart|radar chart> mapping them, now!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693241844.727769",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZPd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like that break down a lot!\n\nSort of 3 facets of one thing, but all different. I’m imagining a "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Radar_chart",
                                "text": "radar chart"
                            },
                            {
                                "type": "text",
                                "text": " mapping them, now!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1693248699.166509",
        "client_msg_id": "8e5e96c7-e78e-4af7-93d9-3906f08e2884",
        "text": "The only example of a language with a \"sidecar\" type checker is Shen (<https:\/\/shenlanguage.org\/>). It's a Lisp that includes a logic engine (roughly Prolog with lispy syntax), which is used to implement the type checker that can be turned on and off as preferred. And the type checker is just another Shen program, so nothing (except the effort) prevents you from substituting your own.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693231453.379599",
        "parent_user_id": "U03LJBR6THT",
        "attachments": [
            {
                "from_url": "https:\/\/shenlanguage.org\/",
                "id": 1,
                "original_url": "https:\/\/shenlanguage.org\/",
                "fallback": "The Shen Group",
                "text": "Shen Programming Language",
                "title": "The Shen Group",
                "title_link": "https:\/\/shenlanguage.org\/",
                "service_name": "shenlanguage.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LVWp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The only example of a language with a \"sidecar\" type checker is Shen ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/shenlanguage.org\/"
                            },
                            {
                                "type": "text",
                                "text": "). It's a Lisp that includes a logic engine (roughly Prolog with lispy syntax), which is used to implement the type checker that can be turned on and off as preferred. And the type checker is just another Shen program, so nothing (except the effort) prevents you from substituting your own."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U03LJBR6THT",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "U059ULNS2MQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1693248848.074799",
        "client_msg_id": "b267f16c-45d4-4ccd-98d2-2c2a5fba3298",
        "text": "I'd also love to see static checkers outside of languages, allowing multiple checkers and in particular domain-specific ones. Ideally, I'd build my own checker as my understanding of my problem domain evolves.\n\nI somewhat suspect that the traditional tight integration of type systems and languages comes from the benefit that type checking brings to optimization.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693231453.379599",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "clSP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd also love to see static checkers outside of languages, allowing multiple checkers and in particular domain-specific ones. Ideally, I'd build my own checker as my understanding of my problem domain evolves.\n\nI somewhat suspect that the traditional tight integration of type systems and languages comes from the benefit that type checking brings to optimization."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT",
                    "UGWUJUZHT",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1693249907.454979",
        "client_msg_id": "e1a8c34e-7e93-4574-a1f6-1034c0839627",
        "text": "Yea adding project specific rules was the original inspiration that got me thinking beyond conventional type systems.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693231453.379599",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K9l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yea adding project specific rules was the original inspiration that got me thinking beyond conventional type systems."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1693250132.454309",
        "client_msg_id": "0377fa90-5d62-4999-a18b-a149d7c081ea",
        "text": "linters can work, but its duplicating all the work of the original type system, and usually don't even do proper type checking... and they usually have their own build step etc.\n\nWhat if my additional rules could be understood by a common LSP-like system?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693231453.379599",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SNUx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "linters can work, but its duplicating all the work of the original type system, and usually don't even do proper type checking... and they usually have their own build step etc.\n\nWhat if my additional rules could be understood by a common LSP-like system?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1693252545.445969",
        "client_msg_id": "40a2a5fd-98bb-44e7-9042-3219668e9880",
        "text": "&gt; I somewhat suspect that the traditional tight integration of type systems and languages comes from the benefit that type checking brings to optimization.\nThere's no reason why the database generated from the logic language can't stick around to be queried for optimizations, right?\n\nOne thing that I imagine will require some work is interpreting errors (no answers found) for the results of running these programs. I'm imagining when this logic program runs it'll have to keep track of which queries \/ predicates succeeded &amp; which didn't - and something to make something like a stacktrace, maybe even track that in a logic db that can also be queried to emit domain specific (nice) error messages.\n\nI think the big idea is having a database that contains really detailed statically analyzed facts which can be used to check correctness, do optimizations, or even help with automated refactoring tools. So it might not even need to be 1 logic language, but a shared database system which all the logic languages can speak &amp; store facts &amp; query from.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693231453.379599",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/Vz",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I somewhat suspect that the traditional tight integration of type systems and languages comes from the benefit that type checking brings to optimization."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's no reason why the database generated from the logic language can't stick around to be queried for optimizations, right?\n\nOne thing that I imagine will require some work is interpreting errors (no answers found) for the results of running these programs. I'm imagining when this logic program runs it'll have to keep track of which queries \/ predicates succeeded & which didn't - and something to make something like a stacktrace, maybe even track that in a logic db that can also be queried to emit domain specific (nice) error messages.\n\nI think the big idea is having a database that contains really detailed statically analyzed facts which can be used to check correctness, do optimizations, or even help with automated refactoring tools. So it might not even need to be 1 logic language, but a shared database system which all the logic languages can speak & store facts & query from."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1693263206.843589",
        "client_msg_id": "76239969-3a59-4949-996e-d5bf91bcee25",
        "text": "I disagree with Feldman’s conclusion in <https:\/\/www.youtube.com\/watch?v=6YbK8o9rZf>.  At about 36:00, he repeats a tired fallacy and uses it as a basis for his conclusion.  Contrary to what is commonly believed, Smalltalk Message-Passing is not the same as Message-Passing in distributed systems.  There is a huge difference between synchronous Message-Passing and asynchronous Message-Passing.  The over-use of synchronous Message-Passing begs for Accidental Complexity (aka ad-hoc workarounds, aka make-work, aka epicycles).  Smalltalk’s synchronous Message-Passing is just function-calling using a case-on-type dispatch mechanism using  named parameters. I believe that the phrase “Message Passing” should be only used for describing asynchronous message passing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NT9o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I disagree with Feldman’s conclusion in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=6YbK8o9rZf"
                            },
                            {
                                "type": "text",
                                "text": ".  At about 36:00, he repeats a tired fallacy and uses it as a basis for his conclusion.  Contrary to what is commonly believed, Smalltalk Message-Passing is not the same as Message-Passing in distributed systems.  There is a huge difference between synchronous Message-Passing and asynchronous Message-Passing.  The over-use of synchronous Message-Passing begs for Accidental Complexity (aka ad-hoc workarounds, aka make-work, aka epicycles).  Smalltalk’s synchronous Message-Passing is just function-calling using a case-on-type dispatch mechanism using  named parameters. I believe that the phrase “Message Passing” should be only used for describing asynchronous message passing."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1693273918.613659",
        "client_msg_id": "8217c22f-2b9c-4efb-95a5-93acb1258d04",
        "text": "<@UGWUJUZHT> Is your point that Smalltalk is more complex than distributed computing because it's sync? Or that it's simpler?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YqkN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " Is your point that Smalltalk is more complex than distributed computing because it's sync? Or that it's simpler?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT",
                    "U03R0B9U1GD"
                ],
                "count": 2
            },
            {
                "name": "thinking_face",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1693274641.763249",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1693353813.000000"
        },
        "client_msg_id": "b31ed627-383b-4e24-998e-90881077ff87",
        "text": "This seems like one of those many places where a noun obscures where an adjective would clarify. Tools are for folks, folks have abilities. How accessible a tool is for someone depends on fit. Not very satisfying, but at least phrasing it this way is in principle answerable in a concrete case. But \"this tool has accessibility\"? Or \"this tool is for accessibility people\"? Neither seems like a meaningful statement.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693241844.727769",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rnn\/Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This seems like one of those many places where a noun obscures where an adjective would clarify. Tools are for folks, folks have abilities. How accessible a tool is for someone depends on fit. Not very satisfying, but at least phrasing it this way is in principle answerable in a concrete case. But \"this tool has accessibility\"? Or \"this tool is for accessibility people\"? Neither seems like a meaningful statement."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0245E9RB2B",
                    "U013ZLJARC7",
                    "U05M5A8E0NT"
                ],
                "count": 3
            },
            {
                "name": "100",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "pixel-chickadee",
                "users": [
                    "UMQ6LR9NZ",
                    "U05RSHWCDFT"
                ],
                "count": 2
            },
            {
                "name": "ribbit",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1693286291.439419",
        "client_msg_id": "f68f1585-8201-4a93-a12c-db7c17a2ee75",
        "text": "I suspect that the confusion comes from (1) Smallltalk and its jargon being older than most of today's widely known technology and (2) most people who talk about Smalltalk having only a superficial knowledge of it. But fundamentally, the common language notion of \"sending a message\" does not imply \"and wait for a reply\", so Smalltalk's use of the term is not helpful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ls+jN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suspect that the confusion comes from (1) Smallltalk and its jargon being older than most of today's widely known technology and (2) most people who talk about Smalltalk having only a superficial knowledge of it. But fundamentally, the common language notion of \"sending a message\" does not imply \"and wait for a reply\", so Smalltalk's use of the term is not helpful."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U03R0B9U1GD",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1693286528.265149",
        "client_msg_id": "354889c7-d881-48d1-9690-cffbfc2b2826",
        "text": "&gt;  There's no reason why the database generated from the logic language can't stick around to be queried for optimizations, right?\nTechnically, no. Socially, it means that the generation of important information is no longer under control of the compiler writer, and even language designer. They would have to cooperate with the users of their language and tool, and negotiate protocols for information exchange. It's more convenient to be a dictator.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1693231453.379599",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YT6Y7",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " There's no reason why the database generated from the logic language can't stick around to be queried for optimizations, right?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Technically, no. Socially, it means that the generation of important information is no longer under control of the compiler writer, and even language designer. They would have to cooperate with the users of their language and tool, and negotiate protocols for information exchange. It's more convenient to be a dictator."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            }
        ]
    }
]