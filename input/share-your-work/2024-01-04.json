[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1704355942.042079",
        "client_msg_id": "06cb0aa1-1a7f-4a10-b367-9ddf86e11ad1",
        "text": "I did a lot of cooking yesterday, which gave me the time to finish this long episode :slightly_smiling_face:\n\nI had read the paper a while ago, and liked it overall. I saw the criticism directed specifically at academic CS, and PL research in particular. It is, after all, a paper written by an academic and published in an academic journal. So it was interesting to hear how it is interpreted by... may I call you \"software practitioners\", to avoid the labels under discussion elsewhere?\n\nOne aspect that takes a lot of room in the paper and in the episode is the PL research focus on correctness and mathematical rigor. Neither the paper nor the episode points to the historical roots of this focus. When CS emerged as an academic discipline in the 1960s and 1970s, computers were rare, expensive, and available to few specialists. The dominating applications at the time were the \"COBOL branch\" (banks, insurances, ...) and the \"Fortran branch\" (science and engineering). In both branches, correctness is very important and mostly well-defined. The interface between computation and the messy real world is handled by humans. That changed in the following decades, as computers became commodities accessible to everyone, and were increasingly used to process sensorial data and control physical devices, in direct contact with the messy real world.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FCcSE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I did a lot of cooking yesterday, which gave me the time to finish this long episode "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI had read the paper a while ago, and liked it overall. I saw the criticism directed specifically at academic CS, and PL research in particular. It is, after all, a paper written by an academic and published in an academic journal. So it was interesting to hear how it is interpreted by... may I call you \"software practitioners\", to avoid the labels under discussion elsewhere?\n\nOne aspect that takes a lot of room in the paper and in the episode is the PL research focus on correctness and mathematical rigor. Neither the paper nor the episode points to the historical roots of this focus. When CS emerged as an academic discipline in the 1960s and 1970s, computers were rare, expensive, and available to few specialists. The dominating applications at the time were the \"COBOL branch\" (banks, insurances, ...) and the \"Fortran branch\" (science and engineering). In both branches, correctness is very important and mostly well-defined. The interface between computation and the messy real world is handled by humans. That changed in the following decades, as computers became commodities accessible to everyone, and were increasingly used to process sensorial data and control physical devices, in direct contact with the messy real world."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U03R0B9U1GD",
                    "U85HCL7JP",
                    "UC2A2ARPT",
                    "U06BZTE8Q3B"
                ],
                "count": 4
            },
            {
                "name": "eyes",
                "users": [
                    "U017TE5R09M"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1704385213.395399",
        "client_msg_id": "ca0b4b48-1c53-4cca-bfe8-56ba661b62ae",
        "text": "If you do write up that post that would be awesome!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WgoKb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you do write up that post that would be awesome!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Cool! I really like screens too. I also like this mathematical modeling of screens! I like the idea to model screens as a group. I have been trying out some models related to the following model: screens as a category: the objects are screens and the arrows mean \"contains\".",
        "files": [
            {
                "id": "F06C275PT7Z",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F06CK729SJY",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U05M5A8E0NT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uoivV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool! I really like screens too. I also like this mathematical modeling of screens! I like the idea to model screens as a group. I have been trying out some models related to the following model: screens as a category: the objects are screens and the arrows mean \"contains\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1704389118.658819",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704389140.000000"
        },
        "client_msg_id": "abbca5e2-4733-45d8-af52-ac00f8213b47",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1704389195.880639",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704390176.000000"
        },
        "client_msg_id": "bcc2133d-e102-4622-9817-03c278f54edb",
        "text": "I originally thought about this model when I was using it to solve some puzzles in \"Patrick's Parabox\" which also involves some recursive box stuff :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3b2f7aa271ab",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-15\/5729371230167_3b2f7aa271abae44baef_72.jpg",
            "first_name": "Elliot",
            "real_name": "Elliot",
            "display_name": "Elliot",
            "team": "T5TCAFTA9",
            "name": "vez",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q8\/G3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I originally thought about this model when I was using it to solve some puzzles in \"Patrick's Parabox\" which also involves some recursive box stuff "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1704389263.636049",
        "client_msg_id": "16066359-deb8-4b48-94bb-a3fb292cf589",
        "text": "<https:\/\/marianoguerra.org\/msite\/human-server-protocol\/|Don't strip the meaning away from your runtime>: Exploring extending programming languages to include descriptions in the domain of the problem and solution\n\nSpoiler alert: interactive example inside :slightly_smiling_face:\n\nFirst draft, feedback welcome!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704389263.636049",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1704710925.818249",
        "reply_users": [
            "U03LJBR6THT",
            "UMV4B97GT",
            "UJBAJNFLK",
            "U0669J3HJJJ"
        ],
        "replies": [
            {
                "user": "U03LJBR6THT",
                "ts": "1704389517.694569"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1704431173.816249"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1704442442.099289"
            },
            {
                "user": "U0669J3HJJJ",
                "ts": "1704710925.818249"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https:\/\/marianoguerra.org\/msite\/human-server-protocol\/img\/site-image.jpg",
                "image_width": 1502,
                "image_height": 797,
                "image_bytes": 79551,
                "from_url": "https:\/\/marianoguerra.org\/msite\/human-server-protocol\/",
                "service_icon": "https:\/\/marianoguerra.org\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/marianoguerra.org\/msite\/human-server-protocol\/",
                "fallback": "Don't strip the meaning away from your runtime",
                "text": "Exploring extending programming languages to include descriptions in the domain of the problem and solution",
                "title": "Don't strip the meaning away from your runtime",
                "title_link": "https:\/\/marianoguerra.org\/msite\/human-server-protocol\/",
                "service_name": "marianoguerra.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eS+ws",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/marianoguerra.org\/msite\/human-server-protocol\/",
                                "text": "Don't strip the meaning away from your runtime"
                            },
                            {
                                "type": "text",
                                "text": ": Exploring extending programming languages to include descriptions in the domain of the problem and solution\n\nSpoiler alert: interactive example inside "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFirst draft, feedback welcome!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "the_horns",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U0123H7JRDM",
                    "U05UK5T7LPP",
                    "UD3AK9JRF",
                    "U02U0AS3J49",
                    "UMV4B97GT",
                    "UJBAJNFLK",
                    "U0669J3HJJJ"
                ],
                "count": 8
            },
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1704389410.919749",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704389464.000000"
        },
        "client_msg_id": "84c7ed15-1efa-4598-99fc-a21729359532",
        "text": "You can turn this category into a groupoid by adding in an inverse arrow for every \"contains\" arrow. The inverse arrows mean \"contained by\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3b2f7aa271ab",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-15\/5729371230167_3b2f7aa271abae44baef_72.jpg",
            "first_name": "Elliot",
            "real_name": "Elliot",
            "display_name": "Elliot",
            "team": "T5TCAFTA9",
            "name": "vez",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "38EwN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can turn this category into a groupoid by adding in an inverse arrow for every \"contains\" arrow. The inverse arrows mean \"contained by\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1704389517.694569",
        "client_msg_id": "608ff743-a9c1-4ea9-8a1b-97f9c3657bff",
        "text": "damn, this is really cool!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704389263.636049",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uz+4G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "damn, this is really cool!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1704389743.164229",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704390191.000000"
        },
        "client_msg_id": "b48c5406-b748-4eb8-b39a-29ee344c3849",
        "text": "The spatial relationships between screens is a functor from this category (or groupoid) to spatial transformations like Affine Transformations (Although <@U03R0B9U1GD> told me that screens actually uses a different type of spatial transformation).\n\nThe functor is really just saying \"write down a specific transformation next to each arrow\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3b2f7aa271ab",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-15\/5729371230167_3b2f7aa271abae44baef_72.jpg",
            "first_name": "Elliot",
            "real_name": "Elliot",
            "display_name": "Elliot",
            "team": "T5TCAFTA9",
            "name": "vez",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DAKme",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The spatial relationships between screens is a functor from this category (or groupoid) to spatial transformations like Affine Transformations (Although "
                            },
                            {
                                "type": "user",
                                "user_id": "U03R0B9U1GD"
                            },
                            {
                                "type": "text",
                                "text": " told me that screens actually uses a different type of spatial transformation).\n\nThe functor is really just saying \"write down a specific transformation next to each arrow\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "",
        "files": [
            {
                "id": "F06C29Y3GT1",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U05M5A8E0NT",
        "display_as_bot": false,
        "type": "message",
        "ts": "1704390022.195949",
        "client_msg_id": "96aac4b6-f481-44b3-a891-c54d2628d8ee",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1704390798.776629",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704390830.000000"
        },
        "client_msg_id": "3559f45b-1aff-404a-976a-338ca1ee4863",
        "text": "IRT your axioms: I have trouble understanding 2 and 4. I can't figure out how to interpret (A -> B)A. I guess it would be \"The copy of A from A to B\" based on your paragraph above the axioms, but I'm not sure what that means.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3b2f7aa271ab",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-15\/5729371230167_3b2f7aa271abae44baef_72.jpg",
            "first_name": "Elliot",
            "real_name": "Elliot",
            "display_name": "Elliot",
            "team": "T5TCAFTA9",
            "name": "vez",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eItKC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "IRT your axioms: I have trouble understanding 2 and 4. I can't figure out how to interpret (A -> B)A. I guess it would be \"The copy of A from A to B\" based on your paragraph above the axioms, but I'm not sure what that means."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1704413844.540969",
        "client_msg_id": "c2c3bf69-1800-4afd-ad0b-7357bb10ab43",
        "text": "I think axiom 2 is hard to picture because in the expression (A-&gt;B)C you normally think of C as lying inside A. But in the case of (A-&gt;B)A, where C is A, C is no longer strictly inside A, since it coincides with A.    Maybe a better way to think of it is to let C vary in size and shape inside A, and let it \"tend to A\", making the size shape and position approach that of A. Then in the limit as C approaches A in size shape and position, the copy (A-&gt;B)C approaches B in size shape and position. Then if copying is a continuous function we are justified in inferring (A-&gt;B)A=B. Sorry for the math-speak.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SZBJl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think axiom 2 is hard to picture because in the expression (A->B)C you normally think of C as lying inside A. But in the case of (A->B)A, where C is A, C is no longer strictly inside A, since it coincides with A.    Maybe a better way to think of it is to let C vary in size and shape inside A, and let it \"tend to A\", making the size shape and position approach that of A. Then in the limit as C approaches A in size shape and position, the copy (A->B)C approaches B in size shape and position. Then if copying is a continuous function we are justified in inferring (A->B)A=B. Sorry for the math-speak."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Some diagrams will probably help. This is what (A-&gt;B)C looks like in the normal case when C is inside A:",
        "files": [
            {
                "id": "F06D7DYL9HN",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RsIge",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some diagrams will probably help. This is what (A->B)C looks like in the normal case when C is inside A:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1704413999.032539",
        "client_msg_id": "65e1a7eb-b93a-488d-ab31-039f2a4ffccc",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "text": "Then when C=A, this is the mental image I have for axiom 2:",
        "files": [
            {
                "id": "F06CFP3EFAR",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PBHDy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Then when C=A, this is the mental image I have for axiom 2:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1704414488.950119",
        "client_msg_id": "cd469f99-054a-49ec-81cc-4a5bb87e3e6b",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1704414661.414389",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704414679.000000"
        },
        "client_msg_id": "c2335bec-dcb3-448b-8c5d-f9fdfd66fff3",
        "text": "Ah I see! It is maybe quite different than how I've been thinking about things! Can you share how you came up with these axioms? It's starting to make sense but I'm wondering what your intuition was when you were making them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3b2f7aa271ab",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-15\/5729371230167_3b2f7aa271abae44baef_72.jpg",
            "first_name": "Elliot",
            "real_name": "Elliot",
            "display_name": "Elliot",
            "team": "T5TCAFTA9",
            "name": "vez",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kh\/o1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah I see! It is maybe quite different than how I've been thinking about things! Can you share how you came up with these axioms? It's starting to make sense but I'm wondering what your intuition was when you were making them."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFPRPSA4S"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "we have done something similar in SplootCode (we refer to them as runtime annotations :slightly_smiling_face:\n\n<https:\/\/app.splootcode.io\/shared\/mattia\/for-loops-example\/EPdLhGOx7p1SbPDIDisgbfpV>",
        "files": [
            {
                "id": "F06CY10CN0Z",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UMV4B97GT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ipvfC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we have done something similar in SplootCode (we refer to them as runtime annotations "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/app.splootcode.io\/shared\/mattia\/for-loops-example\/EPdLhGOx7p1SbPDIDisgbfpV"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1704431173.816249",
        "client_msg_id": "cea2a43e-50d5-40b4-870d-3f40f3ff2cad",
        "thread_ts": "1704389263.636049",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7",
                    "UBN9AFS0N",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "text": "Oh, that question is so open ended, I love it but I'm really stumped on how to answer it! There is a lot of context I haven't shared, but much of it would be only marginally useful. Maybe I can say this though. A key component of the system I am trying to build are one way live copies. These copies would not only reflect the contents of their source but also the 'behavior' at their source. For instance in the image below the arrows indicate that we are copying from X to Y, from A to C, and from C to B. Then from the point of view of X, we are effectively copying from A to B, so this should be reflected in their copies in Y. One way to ensure this is to also formally copy C from X to Y, even though C isn't inside X, and ensure we copy from (X->Y)A to (X->Y)C, and from (X->Y)C to (X->Y)B. This was my motivation for considering all copies (A->B)C even if C isn't in A.  This example also illustrates how my model really only answers how to name the different copies, and not how it is carried out in practice.\n\nI don't know if that is all useful to you, but I'm curious, in your implementation of screens is everything two way copies (plus transforms), or are there one way copies too? Is this the difference taking the category as is or making it into a groupoid first makes?",
        "files": [
            {
                "id": "F06CKDWK0LT",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1hA6D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, that question is so open ended, I love it but I'm really stumped on how to answer it! There is a lot of context I haven't shared, but much of it would be only marginally useful. Maybe I can say this though. A key component of the system I am trying to build are one way live copies. These copies would not only reflect the contents of their source but also the 'behavior' at their source. For instance in the image below the arrows indicate that we are copying from X to Y, from A to C, and from C to B. Then from the point of view of X, we are effectively copying from A to B, so this should be reflected in their copies in Y. One way to ensure this is to also formally copy C from X to Y, even though C isn't inside X, and ensure we copy from (X->Y)A to (X->Y)C, and from (X->Y)C to (X->Y)B. This was my motivation for considering all copies (A->B)C even if C isn't in A.  This example also illustrates how my model really only answers how to name the different copies, and not how it is carried out in practice.\n\nI don't know if that is all useful to you, but I'm curious, in your implementation of screens is everything two way copies (plus transforms), or are there one way copies too? Is this the difference taking the category as is or making it into a groupoid first makes?"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1704436238.745949",
        "edited": {
            "user": "UFPRPSA4S",
            "ts": "1704437724.000000"
        },
        "client_msg_id": "a6612c0e-f042-46eb-a6e4-4ca29586757a",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1704436312.827949",
        "client_msg_id": "46f055e0-003e-480b-ae00-1f978331546f",
        "text": "also, how have I never heard of Patricks Parabox before?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T8WtF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also, how have I never heard of Patricks Parabox before?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]