[
    {
        "user": "UNGNT3BKR",
        "type": "message",
        "ts": "1582878168.018200",
        "client_msg_id": "42eb5d2f-a4b3-4f3a-ac93-8db33e73e39b",
        "text": "yup. Kakoune has a popup that appears when it detects that the file is changed on disk, you can see in the integration that I added a book that blo cks the process for 10ms and then rereads the file. This way I prevent that popup from appearing, keeping visual continuity and preventing an inhumanely fast user from making a change ;) But the magic number for timinig is meh, because in rare cases the popup does appear currently.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f5598145b9e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-20\/844081492646_f5598145b9e31ad2c4bd_72.jpg",
            "first_name": "Sol",
            "real_name": "Sol Bekic",
            "display_name": "s-ol",
            "team": "T5TCAFTA9",
            "name": "machinemail_slack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1582737045.011100",
        "parent_user_id": "UNGNT3BKR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AawZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yup. Kakoune has a popup that appears when it detects that the file is changed on disk, you can see in the integration that I added a book that blo cks the process for 10ms and then rereads the file. This way I prevent that popup from appearing, keeping visual continuity and preventing an inhumanely fast user from making a change ;) But the magic number for timinig is meh, because in rare cases the popup does appear currently."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNGNT3BKR",
        "type": "message",
        "ts": "1582884888.018500",
        "text": "<@UCUSW7WVD>: I made some slight changes to the benefits section (and capitalization :wink:). Does this clarify your questions earlier?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f5598145b9e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-20\/844081492646_f5598145b9e31ad2c4bd_72.jpg",
            "first_name": "Sol",
            "real_name": "Sol Bekic",
            "display_name": "s-ol",
            "team": "T5TCAFTA9",
            "name": "machinemail_slack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1582737045.011100",
        "parent_user_id": "UNGNT3BKR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bXB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": ": I made some slight changes to the benefits section (and capitalization "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": "). Does this clarify your questions earlier?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE3KC0VK6",
        "type": "message",
        "ts": "1582960401.024900",
        "client_msg_id": "A1FB0F70-B22E-4E91-A00E-EBCCF2311BD6",
        "text": "I'd love to read more about metaprogramming  and dynamism here because those are what seem to separate this from data flow + time. What else can happen at every evaltime, and why that is powerful would help me because the data flow systems I'm familiar with require transformation of code via a black box compiler.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2aabe3b15ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/42aabe3b15ad406ed4237abd473bd55f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Thomas Ballinger",
            "display_name": "ballingt",
            "team": "T5TCAFTA9",
            "name": "me1542",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1582737045.011100",
        "parent_user_id": "UNGNT3BKR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g\/L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd love to read more about metaprogramming  and dynamism here because those are what seem to separate this from data flow + time. What else can happen at every evaltime, and why that is powerful would help me because the data flow systems I'm familiar with require transformation of code via a black box compiler."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE3KC0VK6",
        "type": "message",
        "ts": "1582960498.027200",
        "edited": {
            "user": "UE3KC0VK6",
            "ts": "1582960514.000000"
        },
        "client_msg_id": "AA2AD17F-2B2B-453C-9C10-FA3BD372991F",
        "text": "(I'm thinking of Observable, which compiles JavaScript to build the expression tree. This sounds more powerful, and I want to understand how.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2aabe3b15ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/42aabe3b15ad406ed4237abd473bd55f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Thomas Ballinger",
            "display_name": "ballingt",
            "team": "T5TCAFTA9",
            "name": "me1542",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1582737045.011100",
        "parent_user_id": "UNGNT3BKR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AZnk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I'm thinking of Observable, which compiles JavaScript to build the expression tree. This sounds more powerful, and I want to understand how.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1582960707.027500",
        "client_msg_id": "9b2b1f9b-1db8-414c-804f-b66c7a9130ba",
        "text": "One minor PR, <@UNGNT3BKR>:\n\n```diff --git a\/root\/research\/alivecoding\/text$markdown+sidenotes.md b\/root\/research\/alivecoding\/text$markdown+sidenotes.md\nindex 0ba9c62..ce40193 100644\n--- a\/root\/research\/alivecoding\/text$markdown+sidenotes.md\n+++ b\/root\/research\/alivecoding\/text$markdown+sidenotes.md\n@@ -1,5 +1,5 @@\n # alivecoding: &lt;mmm-embed wrap=\"raw\" facet=\"description\"&gt;&lt;\/mmm-embed&gt;\n-Peristant expressions are an approach to livecoding that unifies direct\n+Persistent expressions are an approach to livecoding that unifies direct\n manipulation of a dataflow engine with a textual representation and\n lisp-based programming language.```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1582737045.011100",
        "parent_user_id": "UNGNT3BKR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Ucj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One minor PR, "
                            },
                            {
                                "type": "user",
                                "user_id": "UNGNT3BKR"
                            },
                            {
                                "type": "text",
                                "text": ":\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "diff --git a\/root\/research\/alivecoding\/text$markdown+sidenotes.md b\/root\/research\/alivecoding\/text$markdown+sidenotes.md\nindex 0ba9c62..ce40193 100644\n--- a\/root\/research\/alivecoding\/text$markdown+sidenotes.md\n+++ b\/root\/research\/alivecoding\/text$markdown+sidenotes.md\n@@ -1,5 +1,5 @@\n # alivecoding: <mmm-embed wrap=\"raw\" facet=\"description\"><\/mmm-embed>\n-Peristant expressions are an approach to livecoding that unifies direct\n+Persistent expressions are an approach to livecoding that unifies direct\n manipulation of a dataflow engine with a textual representation and\n lisp-based programming language."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]