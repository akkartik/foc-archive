[
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1707990252.450959",
        "client_msg_id": "0fc53ad5-fb58-4573-be05-2f322381a408",
        "text": "Video for same paper^: <https:\/\/youtu.be\/tD17PEGxPCI?si=BaVr5nAbAFRf2o5y|https:\/\/youtu.be\/tD17PEGxPCI?si=BaVr5nAbAFRf2o5y>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1706212534.780349",
        "parent_user_id": "U02QC0PPER3",
        "attachments": [
            {
                "from_url": "https:\/\/youtu.be\/tD17PEGxPCI?si=BaVr5nAbAFRf2o5y",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/tD17PEGxPCI\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/tD17PEGxPCI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"[Onward!] A Language Based on Two Relations between Symbols\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/youtu.be\/tD17PEGxPCI?si=BaVr5nAbAFRf2o5y",
                "fallback": "YouTube Video: [Onward!] A Language Based on Two Relations between Symbols",
                "title": "[Onward!] A Language Based on Two Relations between Symbols",
                "title_link": "https:\/\/youtu.be\/tD17PEGxPCI?si=BaVr5nAbAFRf2o5y",
                "author_name": "ACM SIGPLAN",
                "author_link": "https:\/\/www.youtube.com\/@acmsigplan",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M3nhp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Video for same paper^: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/tD17PEGxPCI?si=BaVr5nAbAFRf2o5y",
                                "text": "https:\/\/youtu.be\/tD17PEGxPCI?si=BaVr5nAbAFRf2o5y"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U02AWE3JWAD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1708019997.452569",
        "client_msg_id": "bdd6dad2-0a86-4c83-a98f-8d729c97aa69",
        "text": "I would enjoy learning more details about why and how this works under the hood. Details \/ links \/ discussion.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707955724.023229",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WP+P8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would enjoy learning more details about why and how this works under the hood. Details \/ links \/ discussion."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1708028624.869109",
        "client_msg_id": "09ED5969-4868-444D-9B8D-4639C21B4652",
        "text": "I would also enjoy this. I haven't seen any other related publications about this project.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707955724.023229",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bYajI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would also enjoy this. I haven't seen any other related publications about this project."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "I suggest that we discuss and try to reverse-engineer.\n\nAllow me to begin with an opening salvo. Comments & push-back expected.\n\nIf I think only of an MVI (Minimum Viable Implementation - ignore all concerns for \"efficiency\"), I see something fairly simple:\n\nBasically, the REPL (the slider) clears the IDE state, peels one frame-state out of the frame-state array (database, whatever) and loads that state into the IDE, re-rendering the game window and the editor window. Re-loading the source code can use git-like technology. Re-loading the display list and the debugger state means pasting binary data. If you convert the binary data to text, you can use git here, too.\n\nIf you own the code for the debugger, the game display engine and the editor engine, then it shouldn't be a problem to ensure that they all use data that is wholly contained in some convenient state location(s) that can be serialized and deserialized to a database.  Modern dev machines are fast and memory-endowed, so there is no reason to optimize this stuff until proven guilty.",
        "files": [
            {
                "id": "F06K1D55TNZ",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UGWUJUZHT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vRz9i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suggest that we discuss and try to reverse-engineer.\n\nAllow me to begin with an opening salvo. Comments & push-back expected.\n\nIf I think only of an MVI (Minimum Viable Implementation - ignore all concerns for \"efficiency\"), I see something fairly simple:\n\nBasically, the REPL (the slider) clears the IDE state, peels one frame-state out of the frame-state array (database, whatever) and loads that state into the IDE, re-rendering the game window and the editor window. Re-loading the source code can use git-like technology. Re-loading the display list and the debugger state means pasting binary data. If you convert the binary data to text, you can use git here, too.\n\nIf you own the code for the debugger, the game display engine and the editor engine, then it shouldn't be a problem to ensure that they all use data that is wholly contained in some convenient state location(s) that can be serialized and deserialized to a database.  Modern dev machines are fast and memory-endowed, so there is no reason to optimize this stuff until proven guilty."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1708055330.507049",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1708055404.000000"
        },
        "client_msg_id": "3a86c99b-0dec-46d0-ab92-a9d753b05e45",
        "thread_ts": "1707955724.023229",
        "parent_user_id": "UC2A2ARPT"
    }
]