[
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1536044749.000100",
        "client_msg_id": "bd1e73c8-3d79-4378-92a6-e7f8aeebede1",
        "text": "completely forgot about ipfs, it looks so good. Thanks <@UAL7940NM>!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1536006302.000100",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AHo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "completely forgot about ipfs, it looks so good. Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UAL7940NM"
                            },
                            {
                                "type": "text",
                                "text": "!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1536072633.000100",
        "client_msg_id": "FD11AAA2-B8E5-4445-AF68-683E58E6D408",
        "text": "<!everyone> if you’re in NY this month, go vote on when you’d like the next meetup to be in the <#CBC968C1M|in-new-york> channel",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CJ8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "broadcast",
                                "range": "everyone"
                            },
                            {
                                "type": "text",
                                "text": " if you’re in NY this month, go vote on when you’d like the next meetup to be in the "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CBC968C1M"
                            },
                            {
                                "type": "text",
                                "text": " channel"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U7PH857FB"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U7C7B75R6",
        "type": "message",
        "ts": "1536104636.000100",
        "edited": {
            "user": "U7C7B75R6",
            "ts": "1536105468.000000"
        },
        "client_msg_id": "319947ab-a534-436f-92ea-1148e7d65780",
        "text": "<@U8A5MS6R1>: I agree that being able to split graph to subgraphs (files) is still useful.\nAbout tuple\/list model (I stick with list for now on):\n\nTraditionally graphs are tough as nodes and edges. Usually, edges are at least labeled so that you can separate different relations and nodes can also have data. To me, this kind model can be thought of as Node = Map&lt;Label, Node&gt;. Also, you have incoming edges but I leave that out just for simplicity.\n\nOne idea forward is that you have to have data also in edges. I am not a fan of this idea since it smells like XML-attributes: metadata is always simple string:string key-value pair whether data actually fit or not. And if we allow complex data for edges =&gt; edges can now have edges... and are kind of nodes? What that even mean? In RDF world they do this but the mental model is toward general subject-predicate-object tuples instead of hard node\/edge distinction.\n\nSo we maybe won't want to introduce two different things that can have data. At least let's try to survive with only one.\n\nEdge-labeled graphs are fine but can it be made simpler? Another way of separating relations is to use position instead of name like we do in function calls. Then our graph become simply Node = Node[] which I think is the simplest possible meaningful graph. Is it positional\/list based better than named\/map based graph? Don't know, those have some different characteristic.\n\nList graph has a nice spreadsheet like property when you can basically just write your data in without having to concern about semantics. It somewhat simpler in a sense that you can just give string instead of being rejected \"You have to give 'first-name' but just 'name' was found.\".\n\nLists are also very atom like composition which can represent nicely other compositions. List and tuples are the same from a data perspective. Difference lives only on expectation or type level.\n\n-\"List\" list is an arbitrary length of homogenous things.\n-Tuple is a fixed size of heterogeneous things.\n\nMaps can be represented as a nested list. Actually two ways, at first I thought this is miss feature but different representations express nicely different intention.\n\nDynamic style map:\n[ [k1, v1], [k2, v2], ... ]\n\nStatic style map where key list can be shared as \"type\":\n[ [k1, k2, ...], [v1, v2, ...] ]\n\nPersonal opinion is that expressing a list or tuple with a map is not as elegant. But these are more like different sides of the coin and maybe UI can expose one kind of view while having another model under the hood.\n\nAnother way of thinking: the data knows itself that it is HTML dom VS somebody is offering data to HTML renderer, therefore, it should be treated as HTML dom. If the data doesn't have to know what it is, it can be anything where it matches... even though it can happen by accident.\n\nI haven't much to say about hashes. Referencing require some sort of identity. It would be nice to have some serializable non-memory position related identity. GUIDs and hashes can do the job well. Hashes could bring benefits (and challenges) of value referencing but that's not my main focus currently.\n\n\n\n<@U5STGTB3J>: Definedly hunting those \"atoms of data\". Can you open that “What exactly do the nodes and edges represent?” a bit?\n\nWe can probably create quite a nice visualization and editing experience just for dummy graph with some pattern matching for common structures etc. Additional semantic while important is a bit out of scope like it should belong to the next layer? Like there are multiple vocabularies on top of generic RDF concept.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1534675466.000100",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lEg8E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": ": I agree that being able to split graph to subgraphs (files) is still useful.\nAbout tuple\/list model (I stick with list for now on):\n\nTraditionally graphs are tough as nodes and edges. Usually, edges are at least labeled so that you can separate different relations and nodes can also have data. To me, this kind model can be thought of as Node = Map<Label, Node>. Also, you have incoming edges but I leave that out just for simplicity.\n\nOne idea forward is that you have to have data also in edges. I am not a fan of this idea since it smells like XML-attributes: metadata is always simple string:string key-value pair whether data actually fit or not. And if we allow complex data for edges => edges can now have edges... and are kind of nodes? What that even mean? In RDF world they do this but the mental model is toward general subject-predicate-object tuples instead of hard node\/edge distinction.\n\nSo we maybe won't want to introduce two different things that can have data. At least let's try to survive with only one.\n\nEdge-labeled graphs are fine but can it be made simpler? Another way of separating relations is to use position instead of name like we do in function calls. Then our graph become simply Node = Node[] which I think is the simplest possible meaningful graph. Is it positional\/list based better than named\/map based graph? Don't know, those have some different characteristic.\n\nList graph has a nice spreadsheet like property when you can basically just write your data in without having to concern about semantics. It somewhat simpler in a sense that you can just give string instead of being rejected \"You have to give 'first-name' but just 'name' was found.\".\n\nLists are also very atom like composition which can represent nicely other compositions. List and tuples are the same from a data perspective. Difference lives only on expectation or type level.\n\n-\"List\" list is an arbitrary length of homogenous things.\n-Tuple is a fixed size of heterogeneous things.\n\nMaps can be represented as a nested list. Actually two ways, at first I thought this is miss feature but different representations express nicely different intention.\n\nDynamic style map:\n[ [k1, v1], [k2, v2], ... ]\n\nStatic style map where key list can be shared as \"type\":\n[ [k1, k2, ...], [v1, v2, ...] ]\n\nPersonal opinion is that expressing a list or tuple with a map is not as elegant. But these are more like different sides of the coin and maybe UI can expose one kind of view while having another model under the hood.\n\nAnother way of thinking: the data knows itself that it is HTML dom VS somebody is offering data to HTML renderer, therefore, it should be treated as HTML dom. If the data doesn't have to know what it is, it can be anything where it matches... even though it can happen by accident.\n\nI haven't much to say about hashes. Referencing require some sort of identity. It would be nice to have some serializable non-memory position related identity. GUIDs and hashes can do the job well. Hashes could bring benefits (and challenges) of value referencing but that's not my main focus currently.\n\n\n\n\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": ": Definedly hunting those \"atoms of data\". Can you open that “What exactly do the nodes and edges represent?” a bit?\n\nWe can probably create quite a nice visualization and editing experience just for dummy graph with some pattern matching for common structures etc. Additional semantic while important is a bit out of scope like it should belong to the next layer? Like there are multiple vocabularies on top of generic RDF concept."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1536122046.000100",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1536122610.000000"
        },
        "client_msg_id": "d99180c9-c729-4dbc-93cf-422c301cad7d",
        "text": "<@U5STGTB3J> - excellent question! The way I was approaching it back when I was thinking about it is that we are replacing 'encoding as bytes' with 'encoding as graphs' and also 'filesystems, databases, DVCS' also with 'graphs' - i.e. using the same graph both 'in the small' and 'in the large'. (BTW, these are early, unfinished ideas and I'm not pursuing this line presently). The nodes and edges would be just user defined 'symbols' at the lowest level. Users would define sets of these symbols and define schemas that specify valid graphs structures (e.g. 'a node of Canvas type can point to nodes of Shape'). Lets call a set of related symbols an rules a 'vocabulary'. I imagine there would be some core vocabularies with symbols such as 'contains', 'new-version-of', 'property' etc. - these are the common relationships that occur across various domains (ontology languages could be used as inspiration). Users would build structures for their purpose using mixed vocabularies (hopefully using much of the core vocabulary, so the common relationships would be visible to the system). At the higher levels I imagine nodes would represent composite objects such as images, canvases, functions, programs etc. and from these would 'hang' clusters that form the lower level structures. At even higher level nodes would represent collections of these media objects (here 'property' edges could represent the 'names in a namespace'). The core vocabularies would be used both in the small and in the large, but would eventually map to the lower level (~bytes) in different ways - e.g. a subgraph could be broken up and encoded as a distributed cluster of byte chunks, or as a single chunk. All nodes\/edges would have enough metadata that we can trace them to the vocabulary definitions (also stored as nodes in this graph), which might also contain programs or functions that can operate on them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1534675466.000100",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8bkY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " - excellent question! The way I was approaching it back when I was thinking about it is that we are replacing 'encoding as bytes' with 'encoding as graphs' and also 'filesystems, databases, DVCS' also with 'graphs' - i.e. using the same graph both 'in the small' and 'in the large'. (BTW, these are early, unfinished ideas and I'm not pursuing this line presently). The nodes and edges would be just user defined 'symbols' at the lowest level. Users would define sets of these symbols and define schemas that specify valid graphs structures (e.g. 'a node of Canvas type can point to nodes of Shape'). Lets call a set of related symbols an rules a 'vocabulary'. I imagine there would be some core vocabularies with symbols such as 'contains', 'new-version-of', 'property' etc. - these are the common relationships that occur across various domains (ontology languages could be used as inspiration). Users would build structures for their purpose using mixed vocabularies (hopefully using much of the core vocabulary, so the common relationships would be visible to the system). At the higher levels I imagine nodes would represent composite objects such as images, canvases, functions, programs etc. and from these would 'hang' clusters that form the lower level structures. At even higher level nodes would represent collections of these media objects (here 'property' edges could represent the 'names in a namespace'). The core vocabularies would be used both in the small and in the large, but would eventually map to the lower level (~bytes) in different ways - e.g. a subgraph could be broken up and encoded as a distributed cluster of byte chunks, or as a single chunk. All nodes\/edges would have enough metadata that we can trace them to the vocabulary definitions (also stored as nodes in this graph), which might also contain programs or functions that can operate on them."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]