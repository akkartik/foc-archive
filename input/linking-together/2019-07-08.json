[
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1562599921.205100",
        "client_msg_id": "f5cf7837-a1a1-40a8-995d-9a5cd322f979",
        "text": "Yeah structural vs nominal seems to only apply for composite user defined types. Primitive types are.. both? Interfaces do seem like one possible way to decouple the domain aspects from the machine representation aspects, but as you say, often use the machine types across the interface boundary.\n&gt; What if we required types within interfaces to only be other interfaces?\nThis is somwhat the thing I'm looking for. Maybe it's possible as a design pattern. I feel this idea needs to be provided by the system. One key aspect would be the definition of the 'mapping' between the domain types and the machine types. If this was powerful there's no reason to always clump domain structs together in memory. Perhaps it's also possible have multiple possible underlying representations used in different scenarios for the same domain types and have the system be aware of this mapping. Higher level logic could be written against the domain data model only and optimizations would be defined only in the mappings\/hints to machine types.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P=B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah structural vs nominal seems to only apply for composite user defined types. Primitive types are.. both? Interfaces do seem like one possible way to decouple the domain aspects from the machine representation aspects, but as you say, often use the machine types across the interface boundary."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What if we required types within interfaces to only be other interfaces?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is somwhat the thing I'm looking for. Maybe it's possible as a design pattern. I feel this idea needs to be provided by the system. One key aspect would be the definition of the 'mapping' between the domain types and the machine types. If this was powerful there's no reason to always clump domain structs together in memory. Perhaps it's also possible have multiple possible underlying representations used in different scenarios for the same domain types and have the system be aware of this mapping. Higher level logic could be written against the domain data model only and optimizations would be defined only in the mappings\/hints to machine types."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1562612339.205900",
        "edited": {
            "user": "UC6997THT",
            "ts": "1562640600.000000"
        },
        "client_msg_id": "86a32c2a-e6a1-489f-b2b2-6e8d3f468f57",
        "text": "Don't know if this is future of programming related or not but stumbled on this today. It does things that seem related like it has an input box that helps type math formulas, you can generate sliders for any variable and you can animate those sliders\n\n<https:\/\/www.desmos.com>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "Desmos.com",
                "title": "Desmos | Beautiful, Free Math",
                "title_link": "https:\/\/www.desmos.com\/",
                "text": "Explore math with <http:\/\/desmos.com|desmos.com>, a free online graphing calculator",
                "fallback": "Desmos.com: Desmos | Beautiful, Free Math",
                "from_url": "https:\/\/www.desmos.com\/",
                "thumb_url": "https:\/\/s3.amazonaws.com\/desmos\/img\/calc_thumb.png",
                "thumb_width": 140,
                "thumb_height": 140,
                "service_icon": "https:\/\/www.desmos.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.desmos.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BxtvE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Don't know if this is future of programming related or not but stumbled on this today. It does things that seem related like it has an input box that helps type math formulas, you can generate sliders for any variable and you can animate those sliders\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.desmos.com"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]