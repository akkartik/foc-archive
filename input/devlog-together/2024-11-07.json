[
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1730992507.154859",
        "client_msg_id": "7B2CF634-2985-4CAA-B27F-CE05E8215EDB",
        "text": "Nah, I haven’t heard of it. I’m curious, though. Bookmarked.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1730953735.107499",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7SzbO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nah, I haven’t heard of it. I’m curious, though. Bookmarked"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "Hi all :wave:.\n\nI've started a project to try out some of the ideas I've had regarding markdown and writing.\n\nThe perspective I'm coming from is that I've found it difficult to write technical articles. Especially ones containing code examples. The _cut-n-paste_ nature of building such articles usually results in some files missing, broken code or incorrect output.\n\nI've had a bad habit of not sharing what i'm doing, so this time I want to share baby-steps i'm making with the project. It's very barebones. I've got the first feature (if you permit) working, so the below video demonstrates includable blocks.",
        "files": [
            {
                "id": "F07VDR65QPN",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U06DZDM8C93",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WQjv\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi all "
                            },
                            {
                                "type": "emoji",
                                "name": "wave",
                                "unicode": "1f44b"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nI've started a project to try out some of the ideas I've had regarding markdown and writing.\n\nThe perspective I'm coming from is that I've found it difficult to write technical articles. Especially ones containing code examples. The "
                            },
                            {
                                "type": "text",
                                "text": "cut-n-paste",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " nature of building such articles usually results in some files missing, broken code or incorrect output.\n\nI've had a bad habit of not sharing what i'm doing, so this time I want to share baby-steps i'm making with the project. It's very barebones. I've got the first feature (if you permit) working, so the below video demonstrates includable blocks."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1730998562.873049",
        "client_msg_id": "39b6adf2-f1b5-412c-b9fb-603c4b9c5d66",
        "thread_ts": "1730998562.873049",
        "reply_count": 8,
        "reply_users_count": 3,
        "latest_reply": "1731015566.322689",
        "reply_users": [
            "UCUSW7WVD",
            "U06DZDM8C93",
            "U04S5LF5C7R"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1730999795.677659"
            },
            {
                "user": "U06DZDM8C93",
                "ts": "1731001618.901699"
            },
            {
                "user": "U06DZDM8C93",
                "ts": "1731001654.682279"
            },
            {
                "user": "U04S5LF5C7R",
                "ts": "1731009644.794489"
            },
            {
                "user": "U06DZDM8C93",
                "ts": "1731012155.903849"
            },
            {
                "user": "U06DZDM8C93",
                "ts": "1731012603.695309"
            },
            {
                "user": "U04S5LF5C7R",
                "ts": "1731012645.994129"
            },
            {
                "user": "U06DZDM8C93",
                "ts": "1731015566.322689"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U04S5LF5C7R",
                    "UJBAJNFLK",
                    "UFEQUBNNT",
                    "U0296ACR13M"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1730999795.677659",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1730999882.000000"
        },
        "client_msg_id": "22453aff-49f6-43a1-b49f-9a3686d45165",
        "text": "This is great! Elements of Block Protocol and Literate Programming combined together in a new and interesting way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1730998562.873049",
        "parent_user_id": "U06DZDM8C93",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QN838",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is great! Elements of Block Protocol and Literate Programming combined together in a new and interesting way."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U06DZDM8C93"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U06DZDM8C93",
        "type": "message",
        "ts": "1731001618.901699",
        "client_msg_id": "f58d4fb3-ee96-4313-b7a8-f5942202b21d",
        "text": "Literate programming is definitely one source of inspiration! This is a form of \"within-document tangling\". Next is treating filenames and ID's interchangeably so that files can be included.\n\nThere are some interesting graph problems in that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "251479b6efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-01-16\/6476846237061_251479b6efa899c8f296_72.png",
            "first_name": "Pietu",
            "real_name": "Pietu",
            "display_name": "Pietu",
            "team": "T5TCAFTA9",
            "name": "pietu.roisko",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1730998562.873049",
        "parent_user_id": "U06DZDM8C93",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R9r9x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Literate programming is definitely one source of inspiration! This is a form of \"within-document tangling\". Next is treating filenames and ID's interchangeably so that files can be included.\n\nThere are some interesting graph problems in that."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U04S5LF5C7R"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U06DZDM8C93",
        "type": "message",
        "ts": "1731001654.682279",
        "client_msg_id": "87ca3739-4e00-436c-b738-f021feb1127a",
        "text": "Oh, and the project lives here <https:\/\/github.com\/gamgi\/murkdown|on github> if anyone is interested in the source. There is quite a lot of it compared to what it does so far...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "251479b6efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-01-16\/6476846237061_251479b6efa899c8f296_72.png",
            "first_name": "Pietu",
            "real_name": "Pietu",
            "display_name": "Pietu",
            "team": "T5TCAFTA9",
            "name": "pietu.roisko",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1730998562.873049",
        "parent_user_id": "U06DZDM8C93",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ar2An",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, and the project lives here "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/gamgi\/murkdown",
                                "text": "on github"
                            },
                            {
                                "type": "text",
                                "text": " if anyone is interested in the source. There is quite a lot of it compared to what it does so far..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04S5LF5C7R",
        "type": "message",
        "ts": "1731009644.794489",
        "client_msg_id": "ae2889c9-530e-44c9-bc3c-b7ffcddb31d2",
        "text": "Beautiful! You built something I <https:\/\/clj.social\/@albertzak\/113416288696737948|dreamed of a few days ago>. Loving the natural and terse `...` syntax for placing snippets, and the simple piggybacking onto md's image tag. Why is your code in blockquotes though instead of triple-backticks? Very interested to see how you approach file tangling. Filesystem-to-editor unidirectional inclusions will probably be easier than the other way round. Do you think bidirectional editor&lt;&gt;filesystem tangling would be possible at all? Maybe tracking modification timestamps?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g71ea8fa9b3a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/71ea8fa9b3a4ffb02c8ab88256ebb749.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Albert",
            "real_name": "Albert Zak",
            "display_name": "Albert Zak",
            "team": "T5TCAFTA9",
            "name": "me1844",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1730998562.873049",
        "parent_user_id": "U06DZDM8C93",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "En72o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Beautiful! You built something I "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/clj.social\/@albertzak\/113416288696737948",
                                "text": "dreamed of a few days ago"
                            },
                            {
                                "type": "text",
                                "text": ". Loving the natural and terse "
                            },
                            {
                                "type": "text",
                                "text": "...",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax for placing snippets, and the simple piggybacking onto md's image tag. Why is your code in blockquotes though instead of triple-backticks? Very interested to see how you approach file tangling. Filesystem-to-editor unidirectional inclusions will probably be easier than the other way round. Do you think bidirectional editor<>filesystem tangling would be possible at all? Maybe tracking modification timestamps?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06DZDM8C93",
        "type": "message",
        "ts": "1731012155.903849",
        "client_msg_id": "423e2625-2948-46f4-9c2d-e85513494d5e",
        "text": "&gt; and the simple piggybacking onto md's image tag.\nThere's some level of depth in this one which i'll expand upon. The original inspiration (unspiration) was that GitHub added support for a syntax like this <https:\/\/github.com\/orgs\/community\/discussions\/16925|some time ago>. This was how the syntax got started.\n\nIn fact, one of the goals is to be <https:\/\/github.com\/gamgi\/murkdown\/blob\/main\/tests\/markdown\/simple.in\/file.md?plain=1|superficially markdown-compatible>. I.e. headings, lists, even \"NOTE\" blocks should be valid both in this project and on GitHub....\n\n&gt; Why is your code in blockquotes though instead of triple-backticks?\n...but that's where the superficial compatibility with markdown ends.\n\nThis project is a playground for a few ideas i've had. One of them is related fascination over languages that don't have explicit \"start\" and \"end\" tags or fences (backticks). Hence, one of my explicit goals was to get to something that won't need me to use closing tags (i'll have to write design goals down some day).\n\nIt's a fun challenge! However, like you immediately noticed, using `&gt;` is janky. The future solution to this is three-fold:\n\n• First, a block can be started by <https:\/\/github.com\/gamgi\/murkdown\/blob\/ecb2fce4efae69c46b2a79bc2efae4e82be0ceda\/src\/lib\/parser_grammar.pest#L27|one of many characters>. Blocks are generalizations of what markdown calls \"lists\", \"headings\" and \"blockquotes\". That means, lists are blocks (of semantic type `LIST`, and so on.\n• Second, supporting Markdown's \"original\" syntax of two-space indentation for starting a (code) block, which would make the current example almost \"normal\".\n• Third, i have something i call \"sections\" that are allowed on the root level. Hopefully i'll get to demo those in a few weeks.\n&gt; Very interested to see how you approach file tangling. Filesystem-to-editor unidirectional inclusions will probably be easier than the other way round. Do you think bidirectional editor&lt;&gt;filesystem tangling would be possible at all?\nI have some initial parts of this in my design, but the devil is in the details. It's one thing to support \"a\" editor, and another to support \"any\" editor. What you see on the video is an editor in the browser. I'll focus on that for now, but following filesystem events would be cool.\n\nI've approached the architecture like a build system. There's an internal graph of tasks (think: load, parse, render) that should allow for both tangling (writing out) to filesystem, as well as loading in (weaving).\n\nLoading already works somewhat, but working with graphs is tricky, and we'll see what's possible.\n\n&gt; Maybe tracking modification timestamps?\nThis is definitely one key piece in there. Not sure what else, tracking syscalls?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "251479b6efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-01-16\/6476846237061_251479b6efa899c8f296_72.png",
            "first_name": "Pietu",
            "real_name": "Pietu",
            "display_name": "Pietu",
            "team": "T5TCAFTA9",
            "name": "pietu.roisko",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1730998562.873049",
        "parent_user_id": "U06DZDM8C93",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mf8mw",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and the simple piggybacking onto md's image tag."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's some level of depth in this one which i'll expand upon. The original inspiration (unspiration) was that GitHub added support for a syntax like this "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/orgs\/community\/discussions\/16925",
                                "text": "some time ago"
                            },
                            {
                                "type": "text",
                                "text": ". This was how the syntax got started.\n\nIn fact, one of the goals is to be "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/gamgi\/murkdown\/blob\/main\/tests\/markdown\/simple.in\/file.md?plain=1",
                                "text": "superficially markdown-compatible"
                            },
                            {
                                "type": "text",
                                "text": ". I.e. headings, lists, even \"NOTE\" blocks should be valid both in this project and on GitHub....\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why is your code in blockquotes though instead of triple-backticks?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...but that's where the superficial compatibility with markdown ends.\n\nThis project is a playground for a few ideas i've had. One of them is related fascination over languages that don't have explicit \"start\" and \"end\" tags or fences (backticks). Hence, one of my explicit goals was to get to something that won't need me to use closing tags (i'll have to write design goals down some day).\n\nIt's a fun challenge! However, like you immediately noticed, using "
                            },
                            {
                                "type": "text",
                                "text": ">",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is janky. The future solution to this is three-fold:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "First, a block can be started by "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/gamgi\/murkdown\/blob\/ecb2fce4efae69c46b2a79bc2efae4e82be0ceda\/src\/lib\/parser_grammar.pest#L27",
                                        "text": "one of many characters"
                                    },
                                    {
                                        "type": "text",
                                        "text": ". Blocks are generalizations of what markdown calls \"lists\", \"headings\" and \"blockquotes\". That means, lists are blocks (of semantic type "
                                    },
                                    {
                                        "type": "text",
                                        "text": "LIST",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", and so on."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Second, supporting Markdown's \"original\" syntax of two-space indentation for starting a (code) block, which would make the current example almost \"normal\"."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Third, i have something i call \"sections\" that are allowed on the root level. Hopefully i'll get to demo those in a few weeks."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interested to see how you approach file tangling. Filesystem-to-editor unidirectional inclusions will probably be easier than the other way round. Do you think bidirectional editor<>filesystem tangling would be possible at all?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have some initial parts of this in my design, but the devil is in the details. It's one thing to support \"a\" editor, and another to support \"any\" editor. What you see on the video is an editor in the browser. I'll focus on that for now, but following filesystem events would be cool.\n\nI've approached the architecture like a build system. There's an internal graph of tasks (think: load, parse, render) that should allow for both tangling (writing out) to filesystem, as well as loading in (weaving).\n\nLoading already works somewhat, but working with graphs is tricky, and we'll see what's possible.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe tracking modification timestamps?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is definitely one key piece in there. Not sure what else, tracking syscalls?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "U04S5LF5C7R"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "U04S5LF5C7R"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "One more fun thing is how to compose many includes in one place, here's what works already:",
        "files": [
            {
                "id": "F07VCHTLJ9Z",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U06DZDM8C93",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "woLQH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One more fun thing is how to compose many includes in one place, here's what works already:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1731012603.695309",
        "client_msg_id": "f573fc52-c5ea-4dfc-aadd-3bbe3b4556d5",
        "thread_ts": "1730998562.873049",
        "parent_user_id": "U06DZDM8C93",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U04S5LF5C7R"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04S5LF5C7R",
        "type": "message",
        "ts": "1731012645.994129",
        "client_msg_id": "e1b392c7-0abe-46c2-a092-6afcdceff4fe",
        "text": "Thank you for your thorough reply. Super excited follow your progress on this. Can you say more about why you wish to avoid explicit end markers?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g71ea8fa9b3a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/71ea8fa9b3a4ffb02c8ab88256ebb749.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Albert",
            "real_name": "Albert Zak",
            "display_name": "Albert Zak",
            "team": "T5TCAFTA9",
            "name": "me1844",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1730998562.873049",
        "parent_user_id": "U06DZDM8C93",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Mhjw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for your thorough reply. Super excited follow your progress on this. Can you say more about why you wish to avoid explicit end markers?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06DZDM8C93",
        "type": "message",
        "ts": "1731015566.322689",
        "client_msg_id": "065d959a-2436-4f18-a790-b786460fb866",
        "text": "&gt; Can you say more about why you wish to avoid explicit end markers\nFor fun mostly! But also, because I spent some time thinking too deep about what why Python chose to use indentation for scoping. There are some interesting properties, if you do \"what python did\" but for a markup language.\n\nFor example, there can not be \"too many right parentheses\".\n\nThis is useful, if you do collaborative editing. Consider what happens when someone writes `&lt;div&gt;` in a collaborative html document. All lines after it are potentially affected, until a `&lt;\/div&gt;` is added (some time later). So someone editing content at the begining of a document can break a document for someone editing the end. Using a no fences, or \"line-based\" or \"indentation based\" language alleviates some of these issues, at least in naive cases.\n\n...But mostly for fun!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "251479b6efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-01-16\/6476846237061_251479b6efa899c8f296_72.png",
            "first_name": "Pietu",
            "real_name": "Pietu",
            "display_name": "Pietu",
            "team": "T5TCAFTA9",
            "name": "pietu.roisko",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1730998562.873049",
        "parent_user_id": "U06DZDM8C93",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kft4q",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can you say more about why you wish to avoid explicit end markers"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For fun mostly! But also, because I spent some time thinking too deep about what why Python chose to use indentation for scoping. There are some interesting properties, if you do \"what python did\" but for a markup language.\n\nFor example, there can not be \"too many right parentheses\".\n\nThis is useful, if you do collaborative editing. Consider what happens when someone writes "
                            },
                            {
                                "type": "text",
                                "text": "<div>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in a collaborative html document. All lines after it are potentially affected, until a "
                            },
                            {
                                "type": "text",
                                "text": "<\/div>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is added (some time later). So someone editing content at the begining of a document can break a document for someone editing the end. Using a no fences, or \"line-based\" or \"indentation based\" language alleviates some of these issues, at least in naive cases.\n\n...But mostly for fun!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U04S5LF5C7R"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1731024111.715479",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1731024159.000000"
        },
        "client_msg_id": "737b96ac-fff8-4a22-b1a6-d242a4ded690",
        "text": "I have gotten annoyed by timezone calculations <https:\/\/futureofcoding.slack.com\/archives\/C01932BJGE8\/p1731005785976349|for hopefully the final time>. Here's a static html page you can download and save locally to roughly compare times in different timezones (just hours; you're on your own for minutes)\n\n• <https:\/\/akkartik.name\/tz.html|without daylight savings time>\n• <https:\/\/akkartik.name\/tz-dst.html|with daylight savings time>\nThe way I'm naively imagining using this:\n• Scroll to the timezone you know the time in.\n• Click on the nearest hour.\n• It'll highlight that column all over the page.\n• Scroll or find the timezone you care about.\n    ◦ If you're not in a whole-number timezone (Hello India), you'll need to do some additional mental arithmetic by comparing nearby rows.\nRight now you need to know if you're currently in Daylight Savings Time. Which is often beyond me, but I'm not yet sure what to do about that..\n\nInspired by <https:\/\/worrydream.com\/MagicInk\/|Bret Victor>, but of course <https:\/\/infiniteundo.com\/post\/25509354022\/more-falsehoods-programmers-believe-about-time|the inevitable mistakes> are all mine.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mw30d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have gotten annoyed by timezone calculations "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C01932BJGE8\/p1731005785976349",
                                "text": "for hopefully the final time"
                            },
                            {
                                "type": "text",
                                "text": ". Here's a static html page you can download and save locally to roughly compare times in different timezones (just hours; you're on your own for minutes)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/akkartik.name\/tz.html",
                                        "text": "without daylight savings time"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/akkartik.name\/tz-dst.html",
                                        "text": "with daylight savings time"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe way I'm naively imagining using this:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Scroll to the timezone you know the time in."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Click on the nearest hour."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "It'll highlight that column all over the page."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Scroll or find the timezone you care about."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If you're not in a whole-number timezone (Hello India), you'll need to do some additional mental arithmetic by comparing nearby rows."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nRight now you need to know if you're currently in Daylight Savings Time. Which is often beyond me, but I'm not yet sure what to do about that..\n\nInspired by "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/worrydream.com\/MagicInk\/",
                                "text": "Bret Victor"
                            },
                            {
                                "type": "text",
                                "text": ", but of course "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/infiniteundo.com\/post\/25509354022\/more-falsehoods-programmers-believe-about-time",
                                "text": "the inevitable mistakes"
                            },
                            {
                                "type": "text",
                                "text": " are all mine."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U0123H7JRDM",
                    "U06LQ54LB1R",
                    "U03C0DRJB8B",
                    "UJBAJNFLK",
                    "U06DZDM8C93"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1731031200.188769",
        "client_msg_id": "67985911-54b6-4d56-a73a-7591a5f42699",
        "text": "Lately I've felt a lot of \"big feelings” — pain, yearning, confusion, frustration, desire — about computer programming.\n\nI can't quite explain how I feel. Certainly can't write it down. Most definitely not in brief.\n\nSo I did the only thing that comes naturally: felt my way through it, out loud, exploratively.\n\nTitles are hard, so it's called \"Live as in Alive”, perhaps glancing sideways at the recent d-d-discourse about live programming vs live coding.\n\n#40 —&gt; <https:\/\/ivanish.ca\/hest-podcast\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731031200.188769",
        "reply_count": 11,
        "reply_users_count": 5,
        "latest_reply": "1735972678.103579",
        "reply_users": [
            "U02U0AS3J49",
            "UC2A2ARPT",
            "U0123H7JRDM",
            "UGWUJUZHT",
            "U0768BNPTEY"
        ],
        "replies": [
            {
                "user": "U02U0AS3J49",
                "ts": "1731042745.781229"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1731042980.390749"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1731052697.085859"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1731054304.823309"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1731087170.315099"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1731318648.638499"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1731340000.986849"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1731375712.701959"
            },
            {
                "user": "U0768BNPTEY",
                "ts": "1735933956.295599"
            },
            {
                "user": "U0768BNPTEY",
                "ts": "1735940227.599789"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1735972678.103579"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mHTdc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lately I've felt a lot of \"big feelings” — pain, yearning, confusion, frustration, desire — about computer programming.\n\nI can't quite explain how I feel. Certainly can't write it down. Most definitely not in brief.\n\nSo I did the only thing that comes naturally: felt my way through it, out loud, exploratively.\n\nTitles are hard, so it's called \"Live as in Alive”, perhaps glancing sideways at the recent d-d-discourse about live programming vs live coding.\n\n#40 —> "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ivanish.ca\/hest-podcast\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U0123H7JRDM",
                    "U06LQ54LB1R"
                ],
                "count": 3
            },
            {
                "name": "guitar",
                "users": [
                    "U02U0AS3J49",
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "tada",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1731042745.781229",
        "client_msg_id": "7444c2d6-71aa-4215-8bb7-2144067633ad",
        "text": "That's a very helpful explanation of the why of hest, actually. I think I get it now, in a way that I didn't get it before. You don't want to rewind like scrubbing a video, for example. You want to sort of tilt the world, changing the direction of gravity's pull, and have the river of computation pour back up the hill. Because hell yeah.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731031200.188769",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PFR0a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's a very helpful explanation of the why of hest, actually. I think I get it now, in a way that I didn't get it before. You don't want to rewind like scrubbing a video, for example. You want to sort of tilt the world, changing the direction of gravity's pull, and have the river of computation pour back up the hill. Because hell yeah."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1731042980.390749",
        "client_msg_id": "17F28E8C-1AF9-4B75-8673-ADE9262821A7",
        "text": "Yes. It's not taking you back to an earlier state, it's executing things in reverse. And if you changed the data manually, executing in reverse takes you to a state you hadn't been in before.\n\nJust to double-check — did you listen to episode 40, or 38?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731031200.188769",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uPrac",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes. It's not taking you back to an earlier state, it's executing things in reverse. And if you changed the data manually, executing in reverse takes you to a state you hadn't been in before"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nJust to double-check — did you listen to episode 40, or 38?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1731052697.085859",
        "client_msg_id": "ba2037aa-e113-4f6f-8a25-c02d65386fb1",
        "text": "You could do some kinds of logic programming by designing molecules with two different types of binding sites, where each binding site has a graph diagram that represents a logical clause, variables on all binding sites are connected, you throw copies of these molecules into a solution,  catalyse a query molecule type to do backward chaining, catalyse a fact molecule type to do forward chaining, catalyse a rule molecule type to do middle-out chaining, and agitate the solution so catalyzed molecules will be attracted to and bind to other molecules with a graph diagram that unifies on the opposite binding type. As you agitate, you get a preview of the new molecules being formed. When you remove or run out of catalyst, any newly formed molecules with empty binding sites dissolve, and the remaining new molecules represent answers to your query. \"Stable model constrained answer set chemistry.\" :sweat_smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1731031200.188769",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/IyOw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You could do some kinds of logic programming by designing molecules with two different types of binding sites, where each binding site has a graph diagram that represents a logical clause, variables on all binding sites are connected, you throw copies of these molecules into a solution,  catalyse a query molecule type to do backward chaining, catalyse a fact molecule type to do forward chaining, catalyse a rule molecule type to do middle-out chaining, and agitate the solution so catalyzed molecules will be attracted to and bind to other molecules with a graph diagram that unifies on the opposite binding type. As you agitate, you get a preview of the new molecules being formed. When you remove or run out of catalyst, any newly formed molecules with empty binding sites dissolve, and the remaining new molecules represent answers to your query. \"Stable model constrained answer set chemistry.\" "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]