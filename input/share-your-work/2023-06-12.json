[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1686556106.609139",
        "client_msg_id": "3c4c5f99-af17-4b1e-a034-967f34ad64f6",
        "text": "Observation: On a revisit, it seemed to me that fork-ing is related to prototypal inheritance.  ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1684822359.324859",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LMT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Observation: On a revisit, it seemed to me that fork-ing is related to prototypal inheritance.  ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1686560474.211199",
        "client_msg_id": "90bbe8b5-d3f0-404c-bfea-9ee01dde854f",
        "text": "Python provides some access, but Python stack frames are hardly first-class objects. For comparison: in Pharo, you can serialize a stack frame object, then deserialize it elsewhere and do some debugging.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1686506303.145839",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gsw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Python provides some access, but Python stack frames are hardly first-class objects. For comparison: in Pharo, you can serialize a stack frame object, then deserialize it elsewhere and do some debugging."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1686583287.395149",
        "client_msg_id": "f44ac2c8-8d81-4612-ad4d-07179f53835b",
        "text": "That has legs! Does the thought lead anywhere further for you?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1684822359.324859",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wULm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That has legs! Does the thought lead anywhere further for you?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01U19ECZTJ",
        "type": "message",
        "ts": "1686591251.099979",
        "client_msg_id": "1bea6eb8-b985-4db3-a8ee-19464c5bc855",
        "text": "Not my main work, but a fun little programming project that's relevant in a number of ways, despite apparently being more about the Past of Coding, than the Future.\nI wrote a small (&lt;500 lines of code) BASIC to JS compiler, that lets me run the programs from the class book _101 BASIC Computer Games_ from 1978. It's interesting for two reasons I think: 1. for those who want to learn about languages and compilers, this provides a very simple example 2. philosophically, I think BASIC really exemplifies the Worse is Better approach outlined by  Richard Gabriel and covered in a FOC podcast. It is a terrible language in many ways, but it was small enough to be stored in a 4k ROM and be used to to useful things on an early microcomputer with only 4k of RAM. If we had waited for machines with enough memory to run Lisp, Smalltalk or Algol, the microcomputer revolution would have been delayed by a decade or more. Source: <https:\/\/github.com\/kgrgreer\/foam3\/tree\/429f2fd2b4cef0e37996a4c4ad35cdf5f83a8b97\/src\/foam\/demos\/basic>\nOnline version: <https:\/\/codepen.io\/kgr\/details\/yLQyLjR>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d80d37c53cd4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-05\/1929520000754_d80d37c53cd4ee3c8f5f_72.png",
            "first_name": "",
            "real_name": "Kevin Greer",
            "display_name": "Kevin Greer",
            "team": "T5TCAFTA9",
            "name": "kgrgreer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1686591251.099979",
        "reply_count": 8,
        "reply_users_count": 3,
        "latest_reply": "1689593586.640089",
        "reply_users": [
            "UJBAJNFLK",
            "U01U19ECZTJ",
            "U017TE5R09M"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1686633055.474599"
            },
            {
                "user": "U01U19ECZTJ",
                "ts": "1686660302.809199"
            },
            {
                "user": "U01U19ECZTJ",
                "ts": "1686662457.633589"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1686675450.994589"
            },
            {
                "user": "U017TE5R09M",
                "ts": "1686856133.139529"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1686901008.174409"
            },
            {
                "user": "U017TE5R09M",
                "ts": "1689419523.499129"
            },
            {
                "user": "U01U19ECZTJ",
                "ts": "1689593586.640089"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/codepen.io\/kgr\/details\/yLQyLjR",
                "id": 1,
                "original_url": "https:\/\/codepen.io\/kgr\/details\/yLQyLjR",
                "fallback": "CodePen: BASIC to JS Compiler",
                "text": "A BASIC to JS compiler that lets you compile classic programs written in the BASIC programming language to JS and then run them in your browser. To us...",
                "title": "BASIC to JS Compiler",
                "title_link": "https:\/\/codepen.io\/kgr\/details\/yLQyLjR",
                "service_name": "CodePen"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tjSm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not my main work, but a fun little programming project that's relevant in a number of ways, despite apparently being more about the Past of Coding, than the Future.\nI wrote a small (<500 lines of code) BASIC to JS compiler, that lets me run the programs from the class book _101 BASIC Computer Games_ from 1978. It's interesting for two reasons I think: 1. for those who want to learn about languages and compilers, this provides a very simple example 2. philosophically, I think BASIC really exemplifies the Worse is Better approach outlined by  Richard Gabriel and covered in a FOC podcast. It is a terrible language in many ways, but it was small enough to be stored in a 4k ROM and be used to to useful things on an early microcomputer with only 4k of RAM. If we had waited for machines with enough memory to run Lisp, Smalltalk or Algol, the microcomputer revolution would have been delayed by a decade or more. Source: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/kgrgreer\/foam3\/tree\/429f2fd2b4cef0e37996a4c4ad35cdf5f83a8b97\/src\/foam\/demos\/basic"
                            },
                            {
                                "type": "text",
                                "text": "\nOnline version: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/codepen.io\/kgr\/details\/yLQyLjR"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U013ZLJARC7",
                    "U0123H7JRDM",
                    "U02U0AS3J49",
                    "UJBAJNFLK",
                    "UMQ6LR9NZ",
                    "U017TE5R09M"
                ],
                "count": 7
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1686609847.615899",
        "client_msg_id": "7d9eb281-4ff0-4ea6-945b-48d896979cb9",
        "text": "FWIW - oh-oh, here are some further thoughts when I allowed myself to riff on these ideas.  Did I get these ideas from your talk or did I simply think “oh yeah”?  Unclear.\n<https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-06-11-Fork>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1684822359.324859",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "from_url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-06-11-Fork",
                "id": 1,
                "original_url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-06-11-Fork",
                "fallback": "2023-06-11-Fork - Obsidian Publish",
                "text": "1. Fork-ing is specialization. 2. Forking is easier using Composition instead of Inheritance 3. Composition is easier if you use black boxes, then shuffle the black boxes around and re-wire them 4. B…",
                "title": "2023-06-11-Fork - Obsidian Publish",
                "title_link": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-06-11-Fork",
                "service_name": "publish.obsidian.md"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cge9g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW - oh-oh, here are some further thoughts when I allowed myself to riff on these ideas.  Did I get these ideas from your talk or did I simply think “oh yeah”?  Unclear.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-06-11-Fork"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UMQ6LR9NZ"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1686633055.474599",
        "client_msg_id": "118f81c8-ac45-410d-94d5-dc3a8ccaa5e0",
        "text": "&gt; If we had waited for machines with enough memory to run Lisp, Smalltalk or Algol, the microcomputer revolution would have been delayed by a decade or more.\nBy my personal tastes, the best language for early microcomputers would have been Forth. It was around by then, but maybe not known widely enough. Or maybe someone decided it was too weird for ordinary people. There was one home computer model based on Forth (the <https:\/\/en.wikipedia.org\/wiki\/Jupiter_Ace|Jupiter Ace>), which was not much of a commercial success, but it also appeared too late - BASIC was already everywhere.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1686591251.099979",
        "parent_user_id": "U01U19ECZTJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "scr",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If we had waited for machines with enough memory to run Lisp, Smalltalk or Algol, the microcomputer revolution would have been delayed by a decade or more."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By my personal tastes, the best language for early microcomputers would have been Forth. It was around by then, but maybe not known widely enough. Or maybe someone decided it was too weird for ordinary people. There was one home computer model based on Forth (the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Jupiter_Ace",
                                "text": "Jupiter Ace"
                            },
                            {
                                "type": "text",
                                "text": "), which was not much of a commercial success, but it also appeared too late - BASIC was already everywhere."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1686638508.367649",
        "client_msg_id": "2da9b3d7-5f51-488a-88ce-67893e1de0a7",
        "text": "Thinking of Scheme, continuations have the same flavor as lambda in that they capture something and then put it in a black box.  I came to respect the Scheme Report for steering clear of features requiring implementations to be dynamic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1686506303.145839",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ritbG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking of Scheme, continuations have the same flavor as lambda in that they capture something and then put it in a black box.  I came to respect the Scheme Report for steering clear of features requiring implementations to be dynamic."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]