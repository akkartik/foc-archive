[
    {
        "text": "Hi, I have been working on adding statemachines to the node and wire interface that I am building.. The current state of the statemachine and the execution path of the flow are updated live when you interact with the flow\/form-nodes. Yesterday I improved updating the execution path in combination with the OnStateChange nodes so that the path is cleared when a OnStateChange node is not triggered because of its expected state is not the current state of the statemachine.",
        "files": [
            {
                "id": "F03TAQGGULQ",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U0123H7JRDM",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7aG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, I have been working on adding statemachines to the node and wire interface that I am building.. The current state of the statemachine and the execution path of the flow are updated live when you interact with the flow\/form-nodes. Yesterday I improved updating the execution path in combination with the OnStateChange nodes so that the path is cleared when a OnStateChange node is not triggered because of its expected state is not the current state of the statemachine."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1659770611.122139",
        "client_msg_id": "544EF16C-B518-4319-9379-22FB247DA364",
        "thread_ts": "1659770611.122139",
        "reply_count": 27,
        "reply_users_count": 4,
        "latest_reply": "1663169507.664369",
        "reply_users": [
            "U0123H7JRDM",
            "UJZS8UUJV",
            "UA14TGLTC",
            "UE6EFEPTQ"
        ],
        "replies": [
            {
                "user": "U0123H7JRDM",
                "ts": "1659774381.369359"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1659781642.170619"
            },
            {
                "user": "UJZS8UUJV",
                "ts": "1659810814.708749"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1659812114.377379"
            },
            {
                "user": "UJZS8UUJV",
                "ts": "1660332026.901479"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1660467565.939059"
            },
            {
                "user": "UJZS8UUJV",
                "ts": "1660784294.200749"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1661070502.991379"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1661601314.119379"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1661601453.540839"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1661602713.424159"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1662822789.389829"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1662994394.313109"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1662996511.169769"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1663105936.938509"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1663167719.284389"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1663168219.110329"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1663168687.999749"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1663168733.081009"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1663168798.664389"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1663168857.148279"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1663168963.666049"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1663169077.059619"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1663169206.820909"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1663169321.975639"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1663169452.540519"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1663169507.664369"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "U013HU44GLS",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1659774381.369359",
        "edited": {
            "user": "U0123H7JRDM",
            "ts": "1659780841.000000"
        },
        "client_msg_id": "E2583B19-1466-4847-ABE5-68ED95E00E13",
        "text": "I hope to find some time to make a video soon to better show how things work.. I'll try to explain it in text here: the statemachine definition is shown on the left. The states are the boxes with only a border and the current state is the blue box. The event\/messages to trigger a state transition are defined by the boxes with a grey background. \nThe flows on the right side use this statemachine: the flow on the top right handles storing the current state in a cookie but also initialises the statemachine with the stored state when the flow is loaded. \nA special node \"OnStateChange\" responds to statemachine changes... you can define the state that a OnStateChange node reponds to and trigger the output flow. \nIn this example the statemachine shows the behavior of a lightswitch which can have 3 states: off, on and max.. the lightswitch can be put in \"max-mode\" only when the lightswitch is on. This is visualized by the image in the form-node. The buttons in the form-node also respond to the currentstate. \nCurrently there's only support for 1 statemachine per flow, which is far too limiting offcourse, so I am going to change that soon.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659770611.122139",
        "parent_user_id": "U0123H7JRDM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TZcm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hope to find some time to make a video soon to better show how things work.. I'll try to explain it in text here: the statemachine definition is shown on the left. The states are the boxes with only a border and the current state is the blue box. The event\/messages to trigger a state transition are defined by the boxes with a grey background. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "The flows on the right side use this statemachine: the flow on the top right handles storing the current state in a cookie but also initialises the statemachine with the stored state when the flow is loaded. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "A special node \"OnStateChange\" responds to statemachine changes... you can define the state that a OnStateChange node reponds to and trigger the output flow. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "In this example the statemachine shows the behavior of a lightswitch which can have 3 states: off, on and max.. the lightswitch can be put in \"max-mode\" only when the lightswitch is on. This is visualized by the image in the form-node. The buttons in the form-node also respond to the currentstate. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Currently there's only support for 1 statemachine per flow, which is far too limiting offcourse, so I am going to change that soon."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1659781642.170619",
        "client_msg_id": "DE732732-EE9B-4A87-84FF-5FED570B8E5F",
        "text": "I notice that my current rendering method using html5 canvas with dom elements on top is getting really to its limits.. at some near point in the future I will need to rewrite the rendering and handle the UI elements differently .. I am thinking of an approach where I use only svg together with a floating propert editor (which will only be visible when a node is selected or hovered). Another approach would be pure webgl, although the complexity of that is a lot bigger then using pure svg. I hope to find the time to experiment with both.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659770611.122139",
        "parent_user_id": "U0123H7JRDM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FBM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I notice that my current rendering method using html5 canvas with dom elements on top is getting really to its limits.. at some near point in the future I will need to rewrite the rendering and handle the UI elements differently .. I am thinking of an approach where I use only svg together with a floating propert editor (which will only be visible when a node is selected or hovered). Another approach would be pure webgl, although the complexity of that is a lot bigger then using pure svg. I hope to find the time to experiment with both."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJZS8UUJV",
        "type": "message",
        "ts": "1659810814.708749",
        "client_msg_id": "2214b0ed-21f8-417c-844c-b7516120e6f5",
        "text": "Is this correct? The two graph views on the right are editable, and the state machine view on the left is derived from them.\n\nGood luck reworking the rendering. Using pure webgl or svg sounds like it could burn a lot of time though, is there some reason you don’t want to use a higher level library?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g62b260c347a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/962b260c347a11e19b0fdce4a97a5d49.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Luke",
            "real_name": "Luke Persola",
            "display_name": "Luke Persola",
            "team": "T5TCAFTA9",
            "name": "lukepersola",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659770611.122139",
        "parent_user_id": "U0123H7JRDM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ylE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is this correct? The two graph views on the right are editable, and the state machine view on the left is derived from them.\n\nGood luck reworking the rendering. Using pure webgl or svg sounds like it could burn a lot of time though, is there some reason you don’t want to use a higher level library?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1659812114.377379",
        "edited": {
            "user": "U0123H7JRDM",
            "ts": "1659812152.000000"
        },
        "client_msg_id": "B17C62CD-AC6A-49C6-B371-55EA8BD3D22C",
        "text": "All is editable and nodes can be placed anywhere, it's a 2d infinite canvas. I have put the different graphs into sections to make the functionality more clear (hopefully). The different node-types can have constraints so that for example you cannot connect a State-node to something that is not meaningful.\n\nCurrently I use react and react-konva as higher-level libraries, but I have to connect to the direct DOM-elements and konva-canvas elements to gain performance. I know that react and react-three-fiber can be very fast (also from pure development perspective not just performance). But I also want to try to and minimize the dependencies, so that would be my main reason for not using higher level libraries. Although loosing react would be painful I think. Something like tldraw uses react as well. I'll first start to do some experiments anyway before I ditch my current rendering solution and start using a different rendering solution. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659770611.122139",
        "parent_user_id": "U0123H7JRDM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ByA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All is editable and nodes can be placed anywhere, it's a 2d infinite canvas. I have put the different graphs into sections to make the functionality more clear (hopefully). The different node-types can have constraints so that for example you cannot connect a State-node to something that is not meaningful."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nCurrently I use react and react-konva as higher-level libraries, but I have to connect to the direct DOM-elements and konva-canvas elements to gain performance. I know that react and react-three-fiber can be very fast (also from pure development perspective not just performance). But I also want to try to and minimize the dependencies, so that would be my main reason for not using higher level libraries. Although loosing react would be painful I think. Something like tldraw uses react as well. I'll first start to do some experiments anyway before I ditch my current rendering solution and start using a different rendering solution. "
                            }
                        ]
                    }
                ]
            }
        ]
    }
]