[
    {
        "user": "U03LMRE6MQE",
        "type": "message",
        "ts": "1742045142.752909",
        "client_msg_id": "181bb8b2-d2d4-43fd-b93b-244095a404d6",
        "text": "&gt;  The only tricky part in designing modern REPLs seems to be figuring out how to keep things flexible while still working with strongly-typed, functional programming languages\nCan you expand on this point? What do you want a strongly typed language to give you in a repl environment?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ea29e26e919b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-06-23\/3708469439522_ea29e26e919bc202feb6_72.png",
            "first_name": "Peter",
            "real_name": "Peter Saxton",
            "display_name": "Peter Saxton",
            "team": "T5TCAFTA9",
            "name": "peterhsaxton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1741605348.018929",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BBTRR",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " The only tricky part in designing modern REPLs seems to be figuring out how to keep things flexible while still working with strongly-typed, functional programming languages"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nCan you expand on this point? What do you want a strongly typed language to give you in a repl environment?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1742055115.950369",
        "client_msg_id": "abbc9a64-08ec-4e8c-8eb9-dd52e965cba1",
        "text": "I can _try_ to expand on this point :-). Please ask some more, if interested. <https:\/\/programmingsimplicity.substack.com\/p\/on-repls?r=1egdky>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1741605348.018929",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/programmingsimplicity.substack.com\/p\/on-repls?r=1egdky",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9bf28261-3dbc-4931-99f3-57bb47beeb02%2Fapple-touch-icon-57x57.png",
                "thumb_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d69eba9-d5d3-4387-a046-9b881b00bd45_131x131.png",
                "thumb_width": 131,
                "thumb_height": 131,
                "id": 1,
                "original_url": "https:\/\/programmingsimplicity.substack.com\/p\/on-repls?r=1egdky",
                "fallback": "On REPLs",
                "text": "2025-03-15",
                "title": "On REPLs",
                "title_link": "https:\/\/programmingsimplicity.substack.com\/p\/on-repls?r=1egdky",
                "service_name": "programmingsimplicity.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I\/2P2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can "
                            },
                            {
                                "type": "text",
                                "text": "try",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to expand on this point :-). Please ask some more, if interested. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/programmingsimplicity.substack.com\/p\/on-repls?r=1egdky"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1742067259.375729",
        "client_msg_id": "a9d9fdc9-5b1a-4efb-8b89-187cc326f4da",
        "text": "<@UGWUJUZHT> I agree with you that type checkers ought to be add-on tools rather than part of a language. And I'd want my type checker to be moldable as well. But I have only once seen this approach implemented, in <https:\/\/shenlanguage.org\/|Shen>, which is far from a mainstream language. Are you aware of other attempts to do this?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1741605348.018929",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/shenlanguage.org\/",
                "id": 1,
                "original_url": "https:\/\/shenlanguage.org\/",
                "fallback": "The Shen Group",
                "text": "Shen Programming Language",
                "title": "The Shen Group",
                "title_link": "https:\/\/shenlanguage.org\/",
                "service_name": "shenlanguage.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zY5X2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " I agree with you that type checkers ought to be add-on tools rather than part of a language. And I'd want my type checker to be moldable as well. But I have only once seen this approach implemented, in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/shenlanguage.org\/",
                                "text": "Shen"
                            },
                            {
                                "type": "text",
                                "text": ", which is far from a mainstream language. Are you aware of other attempts to do this?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1742096636.964039",
        "client_msg_id": "95230559-7fa5-474a-8f8f-30a73feabba6",
        "text": "Rhetorical question?: how would your programming workflow change if you deeply believed that creating SCNs was cheap and easy? Perl leaned heavily on REGEX. REGEX was once thought to be hoary and problematic. Perl made it accessible. New kinds of things were invented when Perl started being widely used. T2t is “better” than REGEX, because t2t makes it easy to deal with patterns containing recursive nesting. CFGs, like YACC, make it possible to parse recursively nested text, but, CFGs need painful, full specification of too much detail. If you had a way to specify pattern-matching using tiny DSLs that didn’t cost a lot of time to build, how would your workflow change? ['t2t' leans heavily on PEG and esp. OhmJS] [SCN === Solution Centric Notation, essentially a nano-DSL, I think of Richard Feynman breaking away from mathematical\/Gutenberg notation and inventing and using Feynman diagrams. Language affects thought, notation affects thought].",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742096636.964039",
        "reply_count": 18,
        "reply_users_count": 5,
        "latest_reply": "1745002221.698389",
        "reply_users": [
            "UJBAJNFLK",
            "UGWUJUZHT",
            "U013ZLJARC7",
            "U05PY5AQCA2",
            "U07BD7U4S4R"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1742113397.187839"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1742116641.157319"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1742135996.165019"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1742139442.732509"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1742162362.400849"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1742212230.110659"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1742212444.815339"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1742222712.875809"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1742261105.085899"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1742261228.607929"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1742261347.509669"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1742281588.151989"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1742286358.341989"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1742300380.368299"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1742300694.531479"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1742301781.772859"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1742302234.342029"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1745002221.698389"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MGeO0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Rhetorical question?: how would your programming workflow change if you deeply believed that creating SCNs was cheap and easy? Perl leaned heavily on REGEX. REGEX was once thought to be hoary and problematic. Perl made it accessible. New kinds of things were invented when Perl started being widely used. T2t is “better” than REGEX, because t2t makes it easy to deal with patterns containing recursive nesting. CFGs, like YACC, make it possible to parse recursively nested text, but, CFGs need painful, full specification of too much detail. If you had a way to specify pattern-matching using tiny DSLs that didn’t cost a lot of time to build, how would your workflow change? ['t2t' leans heavily on PEG and esp. OhmJS] [SCN === Solution Centric Notation, essentially a nano-DSL, I think of Richard Feynman breaking away from mathematical\/Gutenberg notation and inventing and using Feynman diagrams. Language affects thought, notation affects thought]."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]