[
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1624709563.023400",
        "client_msg_id": "9542e9fb-cf29-47f5-8a45-0e57a099a215",
        "text": "Thanks <@UCUSW7WVD> I’ve looked at FRP in the past, in relation to Tidal Cycles which was heavily influenced by it, IIRC. I’ll take another look.\nIn my current node implementation (for the demos you've seen before), I have 2 distinct types of 'pin'\n• Simple data: (bool, int, double, etc.)  Currently these are always 'inputs'; but I don't technically have a limitation on them being outputs too.\n• Flow Data - a generic representation of data flowing around the graph.  \nFlow data is effectively vectors of simple data types.  For example, 2 audio waves would be represented as:\n    ◦ [float, float, float....]\n    ◦ [float, float, float...]\nIn my graph, this means that playing a 3-note chord on an input instrument (for the audio case), may well result in several types of flow data running around the graph, typically containing 3 arrays of data, each array being a single 'frame' of audio; say 512 samples.   Important point - this is output\/input on a single 'flow' pin, and contains 3 unique 'channels' of 512 float samples:\nFlowData\n{\n     map&lt;int, vector&lt;float&gt;&gt; channels;\n}\nIt is up to the application to determine what 'Flow' data actually means; but the important point is that the graph is evaluated based on finding the output flow and walking back into the graph to satisfy the data flow through it; by finding dependencies and walking back through the graph to fulfil them before computing each node.\n\nThe tricky part is something like an 'Adder' node.  Suppose it wants to take in 2 numbers and produce a result.  In my system, currently, that means that a node outputting a number must convert it to a 1-dimension flow data to output it.  Then the Adder node can read the flow data and extract the number.  This means that you could effectively add 2 arrays of numbers in one compute step in the adder; or multiple entries.  You could also, in theory route 2 seperate flow sources to the same target and multiplex them on arrival.\n\nBut I'm still thinking about if it is appropriate to enforce this transform of scalar values to flow data when outputting from a node, and how this feels to the user.  There is a certain uniformity I like if all data flowing through the graph is represented the same way; but then what if you output from a node 3 streams of numbers in the flow data, but the user hooks that up to a single input number in a node.    Which to pick?  Or is that just an illegal operation?  Is a single-entry flow data valid, but a multi entry not?  Essentially the implicit transforms from simple to flow look like:\n\n[Scalar -&gt; FlowData[Scalar Array, size 1]]                                  Example: output=1.0 input=vector&lt;float&gt;{1.0}\n[FlowData[..] -&gt; Scalar] (only if flow data is dimension 1?)      Example: output=vector&lt;float&gt;{1.0} input=1.0\n[FlowData, FlowData -&gt; FlowData]                                           Example: input=2 * flow data, output=muxed flow data.\n\nThere are technical reasons why I like this design, and flexibility reasons; it accomodates the parallel data flow model which works well for audio\/graphics.  It is easy to evaluate the graph, and for the user to reason the direction of evaluation.  What it gives up is the simple ability to wire simple scalar values to simple scalar values directly; that operation is allowed by under the covers it is effectively a conversion.\nIn the UI\/demo I am trying to hint at this by having flow data pins sit on the outside of nodes, and conversion from flow data to number be shown as an arrow inside the node next to the number in question.  As well as having arrows for flow data direction.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eE9kq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I’ve looked at FRP in the past, in relation to Tidal Cycles which was heavily influenced by it, IIRC. I’ll take another look.\nIn my current node implementation (for the demos you've seen before), I have 2 distinct types of 'pin'\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Simple data: (bool, int, double, etc.)  Currently these are always 'inputs'; but I don't technically have a limitation on them being outputs too."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Flow Data - a generic representation of data flowing around the graph.  "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nFlow data is effectively vectors of simple data types.  For example, 2 audio waves would be represented as:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "[float, float, float....]"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "[float, float, float...]"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn my graph, this means that playing a 3-note chord on an input instrument (for the audio case), may well result in several types of flow data running around the graph, typically containing 3 arrays of data, each array being a single 'frame' of audio; say 512 samples.   Important point - this is output\/input on a single 'flow' pin, and contains 3 unique 'channels' of 512 float samples:\nFlowData\n{\n     map<int, vector<float>> channels;\n}\nIt is up to the application to determine what 'Flow' data actually means; but the important point is that the graph is evaluated based on finding the output flow and walking back into the graph to satisfy the data flow through it; by finding dependencies and walking back through the graph to fulfil them before computing each node.\n\nThe tricky part is something like an 'Adder' node.  Suppose it wants to take in 2 numbers and produce a result.  In my system, currently, that means that a node outputting a number must convert it to a 1-dimension flow data to output it.  Then the Adder node can read the flow data and extract the number.  This means that you could effectively add 2 arrays of numbers in one compute step in the adder; or multiple entries.  You could also, in theory route 2 seperate flow sources to the same target and multiplex them on arrival.\n\nBut I'm still thinking about if it is appropriate to enforce this transform of scalar values to flow data when outputting from a node, and how this feels to the user.  There is a certain uniformity I like if all data flowing through the graph is represented the same way; but then what if you output from a node 3 streams of numbers in the flow data, but the user hooks that up to a single input number in a node.    Which to pick?  Or is that just an illegal operation?  Is a single-entry flow data valid, but a multi entry not?  Essentially the implicit transforms from simple to flow look like:\n\n[Scalar -> FlowData[Scalar Array, size 1]]                                  Example: output=1.0 input=vector<float>{1.0}\n[FlowData[..] -> Scalar] (only if flow data is dimension 1?)      Example: output=vector<float>{1.0} input=1.0\n[FlowData, FlowData -> FlowData]                                           Example: input=2 * flow data, output=muxed flow data.\n\nThere are technical reasons why I like this design, and flexibility reasons; it accomodates the parallel data flow model which works well for audio\/graphics.  It is easy to evaluate the graph, and for the user to reason the direction of evaluation.  What it gives up is the simple ability to wire simple scalar values to simple scalar values directly; that operation is allowed by under the covers it is effectively a conversion.\nIn the UI\/demo I am trying to hint at this by having flow data pins sit on the outside of nodes, and conversion from flow data to number be shown as an arrow inside the node next to the number in question.  As well as having arrows for flow data direction."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Here's a diagram I did; this is actually how some of the synth currently works.  Forgive my handwriting :wink:",
        "files": [
            {
                "id": "F026ZL0P256",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UUQ2EQW21",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sTEG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a diagram I did; this is actually how some of the synth currently works.  Forgive my handwriting "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1624709659.023600",
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1624709821.023800",
        "client_msg_id": "002f54e6-19ba-4daf-b7b2-c075b0756591",
        "text": "Oh, and I didn't find much of David Barbour's writing; a shame the blog is down.  I'm a member of lines community too; some good stuff on there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BX49",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, and I didn't find much of David Barbour's writing; a shame the blog is down.  I'm a member of lines community too; some good stuff on there."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]