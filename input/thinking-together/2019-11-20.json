[
    {
        "user": "UNGNT3BKR",
        "type": "message",
        "ts": "1574240264.084800",
        "client_msg_id": "1657efbd-b532-4dfd-b784-79dc43b7e2fa",
        "text": "will the lightning talks be recorded?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f5598145b9e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-20\/844081492646_f5598145b9e31ad2c4bd_72.jpg",
            "first_name": "Sol",
            "real_name": "Sol Bekic",
            "display_name": "s-ol",
            "team": "T5TCAFTA9",
            "name": "machinemail_slack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572895346.110200",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "90T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "will the lightning talks be recorded?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1574267815.085000",
        "client_msg_id": "fb091450-fe2b-41b9-92be-551d75a8a982",
        "text": "Yes the plan is to record, unless the presenters think otherwise. I can see an argument for not recording (first time to try this experiment, after all)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572895346.110200",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ftz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes the plan is to record, unless the presenters think otherwise. I can see an argument for not recording (first time to try this experiment, after all)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1574267830.085200",
        "client_msg_id": "2e268eaa-622d-4f27-826a-d4b1fac78af8",
        "text": "I don't have a strong preference either way",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572895346.110200",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G\/Ww",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't have a strong preference either way"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1574270201.085400",
        "client_msg_id": "ea1f6f60-dc61-4780-93fd-54d2e49a5697",
        "text": "The main difference I see is Dark provides a language, an editor and a runtime with a database - all integrated so e.g. the editor can display runtime and database info. It is also hosted so you don't have to run the servers.\n\nUnison is mainly a language and runtime, you use any text editor and some unison tooling but code is stored in the file system. I'm not sure how you actually operate the runtime. Do you run it on one machine or multiple? How do you point it to the code you want to run, etc. - I believe this stuff is still not fleshed out. I also don't think it has a database, but I'm not sure.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574140155.008400",
        "parent_user_id": "UKQT95T1V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EGW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The main difference I see is Dark provides a language, an editor and a runtime with a database - all integrated so e.g. the editor can display runtime and database info. It is also hosted so you don't have to run the servers.\n\nUnison is mainly a language and runtime, you use any text editor and some unison tooling but code is stored in the file system. I'm not sure how you actually operate the runtime. Do you run it on one machine or multiple? How do you point it to the code you want to run, etc. - I believe this stuff is still not fleshed out. I also don't think it has a database, but I'm not sure."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1574278538.085600",
        "client_msg_id": "93221d1d-8e3e-4b67-b767-bf9e73ea61fe",
        "text": "On the topic of vertical integration and complexity, I wrote an article about this a while ago which was a lot of fun to write (so I hope it's the same for reading!). \"A Dream of Simplicity: Scientific Computing on Turing Machines\" <https:\/\/hal.archives-ouvertes.fr\/hal-02117720>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574100925.005200",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "title": "A Dream of Simplicity: Scientific Computing on Turing Machines",
                "title_link": "https:\/\/hal.archives-ouvertes.fr\/hal-02117720",
                "text": "Frustrated by another failed software installation? Wondering why you can't reproduce your colleagues' computations? This story will tell you why. It won't magically solve your problems, but it does point out a glimpse of hope for the future. It's one of those days in the life of a computational scientist. Your desktop computer is busy updating its operating system and doesn't have any time left for you. The installation of your favorite simulation software on the new supercomputer doesn't advance beyond an error message extending over 500 lines. And your data analysis hasn't made much progress either: the results change when you use more or fewer processors, which doesn't look right. You already asked Siri for advice, but as so often is the case, that conversation led absolutely nowhere. Computers are complex, frustrating machines. If only we could have simple ones that just did what we tell them to do! Maybe it's a good idea to go back to the basics. Ever heard of Turing machines? They were invented in 1937 by Alan Turing, 1 and they're as simple as computers can get. No keyboard, no screen, no hard disk-no operating system either, nor any voices pestering you. You write your instructions on a tape, put the tape into the machine, and push a button. The machine starts working, moving the tape back and forth. When it stops, you take out the tape again and read off the result. Computing couldn't be simpler! Turing invented the machine that was later named after him as a purely theoretical concept. There wasn't much real computing hardware available back then, but people eventually built physical realizations (<http:\/\/www.legoturingmachine.org\/lego-turing-machine|www.legoturingmachine.org\/lego-turing-machine>, <http:\/\/aturingmachine.com>, and",
                "fallback": "A Dream of Simplicity: Scientific Computing on Turing Machines",
                "from_url": "https:\/\/hal.archives-ouvertes.fr\/hal-02117720",
                "service_name": "hal.archives-ouvertes.fr",
                "id": 1,
                "original_url": "https:\/\/hal.archives-ouvertes.fr\/hal-02117720"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Tx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On the topic of vertical integration and complexity, I wrote an article about this a while ago which was a lot of fun to write (so I hope it's the same for reading!). \"A Dream of Simplicity: Scientific Computing on Turing Machines\" "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hal.archives-ouvertes.fr\/hal-02117720"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1574278750.085900",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1574278773.000000"
        },
        "client_msg_id": "4e3f5cbe-5bc7-4de6-8435-e3b31638d7bb",
        "text": "The Web browser is an interesting case. Web standards are organically grown and committee-approved complexity. If you want to redesign computing from scratch, with less accidental complexity, you might well decide to redesign the Web as well and get rid of all the cruft. But then, so much information is available exclusively via this mess of standards that it can also be considered a part of the \"real world\" mess, and thus essential complexity.\n\"First we shape our tools and then our tools shape us.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574100925.005200",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OCNjc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Web browser is an interesting case. Web standards are organically grown and committee-approved complexity. If you want to redesign computing from scratch, with less accidental complexity, you might well decide to redesign the Web as well and get rid of all the cruft. But then, so much information is available exclusively via this mess of standards that it can also be considered a part of the \"real world\" mess, and thus essential complexity.\n\"First we shape our tools and then our tools shape us.\""
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1574284112.086300",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1574284365.000000"
        },
        "client_msg_id": "bb6eb09d-56d8-4274-970d-6785759be7fa",
        "text": "And even standards evolve and — although backwards compatibility is often considered for newer iterations of such standards — every now and then incompatible changes are introduced and the expectation is that indeed everything will be upgraded eventually. Of course, neither does that ever happen for 100% of all content, nor does anybody seriously argue to just stop inventing new and better things in hope of replacing old and worse ones. That's the continuum we operate in and our own tough design decision of what to break and when to break it.\n\nAnd this is a fundamental issue all over our industry: floppy disk\/optical drives\/networking\/streaming, serial and parallel ports\/USB-A\/USB-C, VGA\/HDMI\/USB-C, x68 architecture (still supports 8086 instructions). win32\/MFC\/.net\/UWP, Carbon\/Cocoa, Obj-C\/Swift, HTML\/XHTML\/HTML5, etc.\n\nWhat's interesting is that in surprisingly many cases these transitions are absolutely unfathomable before the new technology appears, then totally never happening when a new technology is presented as a potential successor, then grudgingly adopted through forcing mechanisms or because of market dynamics, and then absolutely obvious and logical looking back.\n\nI cannot think of another industry with such a schizophrenic obsession for both preserving the status quo and radically changing it at the same time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574100925.005200",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mkt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And even standards evolve and — although backwards compatibility is often considered for newer iterations of such standards — every now and then incompatible changes are introduced and the expectation is that indeed everything will be upgraded eventually. Of course, neither does that ever happen for 100% of all content, nor does anybody seriously argue to just stop inventing new and better things in hope of replacing old and worse ones. That's the continuum we operate in and our own tough design decision of what to break and when to break it.\n\nAnd this is a fundamental issue all over our industry: floppy disk\/optical drives\/networking\/streaming, serial and parallel ports\/USB-A\/USB-C, VGA\/HDMI\/USB-C, x68 architecture (still supports 8086 instructions). win32\/MFC\/.net\/UWP, Carbon\/Cocoa, Obj-C\/Swift, HTML\/XHTML\/HTML5, etc.\n\nWhat's interesting is that in surprisingly many cases these transitions are absolutely unfathomable before the new technology appears, then totally never happening when a new technology is presented as a potential successor, then grudgingly adopted through forcing mechanisms or because of market dynamics, and then absolutely obvious and logical looking back.\n\nI cannot think of another industry with such a schizophrenic obsession for both preserving the status quo and radically changing it at the same time."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1574285825.086600",
        "client_msg_id": "5d1cda9a-21bf-4ff6-b9ad-c20360389946",
        "text": "I wonder if at some fundamental level the kinds of things new standards do is similar to old standards. (e.g. all cpus are 'equivalent' to a Turing machine). And if we are able to define the standards by mapping them to the same thing then moving to newer ones is 'automatic' to a large degree.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574100925.005200",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Obc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder if at some fundamental level the kinds of things new standards do is similar to old standards. (e.g. all cpus are 'equivalent' to a Turing machine). And if we are able to define the standards by mapping them to the same thing then moving to newer ones is 'automatic' to a large degree."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1574287534.086900",
        "client_msg_id": "b03d1380-ac3b-4303-9d6f-30d45276356c",
        "text": "Nice writeup <@UJBAJNFLK>! Still reading through it. Particularly agree with:\n\n&gt;  composition  really  is at  the  heart of most  of  our  frustrations  with computer\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574100925.005200",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ia4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice writeup "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": "! Still reading through it. Particularly agree with:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " composition  really  is at  the  heart of most  of  our  frustrations  with computer"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1574295815.087400",
        "client_msg_id": "f2545e3c-e205-4050-8457-9b3e3d054af1",
        "text": "<https:\/\/blog.acolyer.org\/2019\/11\/20\/local-first-software\/> (on HN right now)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574295815.087400",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1576732055.000800",
        "reply_users": [
            "UKQT95T1V"
        ],
        "replies": [
            {
                "user": "UKQT95T1V",
                "ts": "1576732055.000800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "the morning paper",
                "service_url": "http:\/\/blog.acolyer.org",
                "title": "Local-first software: you own your data, in spite of the cloud",
                "title_link": "https:\/\/blog.acolyer.org\/2019\/11\/20\/local-first-software\/",
                "author_name": "adriancolyer",
                "author_link": "https:\/\/blog.acolyer.org\/author\/adriancolyer\/",
                "thumb_url": "https:\/\/adriancolyer.files.wordpress.com\/2019\/11\/localfirst-table-1.jpeg?w=640&fit=200%2C150",
                "thumb_width": 200,
                "thumb_height": 117,
                "text": "Local-first software: you own your data, in spite of the cloud Kleppmann et al., Onward! &rsquo;19\nWatch out! If you start reading this paper you could be lost for hours following all the interesting links and ideas, and end up even more dissatisfied than you already are with the state of software today. You might also be inspired to help work towards a better future. I&rsquo;m all in :).\nThe rock or the hard place?\nOn the one-hand we have &lsquo;cloud apps&rsquo; which make it easy to access our work from multiple devices and to collaborate online with others (e.g. Google Docs, Trello, &hellip;). On the other hand we have good old-fashioned native apps that you install on your operating system (a dying breed? See e.g. Brendan Burns&rsquo; recent tweet). Somewhere in the middle, but not-quite perfect, are online (browser-based) apps with offline support.\nThe primary issue with cloud apps (the SaaS model) is ownership of the data.\nUnfortunately, cloud apps are problematic in this regard. Although they let you access your data anywhere, all data access must go via the server, and you can only do the things that the server will let you do. In a sense, you don&rsquo;t have full ownership of that data&mdash; the cloud provider does.\nServices do get shut down1, or pricing may change to your disadvantage, or the features evolve in a way you don&rsquo;t like and there&rsquo;s no way to keep using an older version.\nWith a traditional OS app2 you have much more control over the data (the files on your file system at least, which if you&rsquo;re lucky might even be in an open format). But you have other problems, such as easy access across all of your devices, and the ability to collaborate with others.\nLocal-first software ideals\nThe authors coin the phrase &ldquo;local-first software&rdquo; to describe software that retains the ownership properties of old-fashioned applications, with the sharing and collaboration properties of cloud applications.\nIn local-first applications&hellip; we treat the copy of the data on your local device &mdash; your laptop, tablet, or phone &mdash; as the primary copy. Servers still exist, but they hold secondary copies of your data in order to assist with access from multiple devices. As we shall see, this change in perspective has profound implications&hellip;\nGreat local-first software should have seven key properties.\nIt should be fast. We don&rsquo;t want to make round-trips to a server to interact with the application. Operations can be handled by reading and writing to the local file system, with data synchronisation happening in the background.\nIt should work across multiple devices. Local-first apps keep their data in local storage on each device, but the data is also synchronised across all the devices on which a user works.\nIt should work without a network. This follows from reading and writing to the local file system, with data synchronisation happening in the background when a connection is available. That connection could be peer-to-peer across devices, and doesn&rsquo;t have to be over the Internet.\nIt should support collaboration. &ldquo;In local-first apps, our ideal is to support real-time collaboration that is on par with the best cloud apps today, or better. Achieving this goal is one of the biggest challenges in realizing local-first software, but we believe it is possible.&ldquo;\nIt should support data access for all time. On one level you get this if you retain a copy of the original application (and an environment capable of executing it). Even better is if the local app using open \/ long lasting file formats. See e.g. the Library of Congress recommended archival formats.\nIt should be secure and private by default. &ldquo;Local-first apps can use end-to-end encryption so that any servers that store a copy of your files only hold encrypted data they cannot read.&rdquo;\nIt should give the user full ownership and control of their data. &ldquo;&hellip;we mean ownership in the sense of user agency, autonomy, and control over data. You should be able to copy and modify data in any way, write down any thought, and no company should restrict what you are allowed to do.&ldquo;\nHow close can we get today?\nSection 3 in the paper shows how a variety of different apps\/technologies stack up against the local-first ideals.\n\nThe combination of Git and GitHub gets closest, but nothing meets the bar across the board.\n&hellip; we speculate that web apps will never be able to provide all the local-first properties we are looking for, due to the fundamental thin-client nature of the platform. By choosing to build a web app, you are choosing the path of data belonging to you and your company, not to your users.\nMobile apps that use local storage combined with a backend service such as Firebase and its Cloud Firestore take us closer to the local-first ideal, depending on the way the local data is treated by the application. CouchDB also gets an honourable mention in this part of the paper, only being let down by the difficulty of getting application-level conflict resolution right.\nCRDTs to the rescue?\nWe have found some technologies that appear to be promising foundations for local-first ideals. Most notably the family of distributed systems algorithms called Conflict-free Replicated Data Types (CRDTs)&hellip; the special thing about them is that they are multi-user from the ground up&hellip; CRDTs have some similarity to version control systems like Git, except that they operate on richer data types than text files.\nWhile most industrial usage of CRDTs has been in server-centric computing, the Ink &amp; Switch research lab have been exploring how to build collaborative local-first client applications built on top of CRDTs. One of the fruits of this work is an open-source JavaScript CDRT implementation called Automerge which brings CRDT-style merge operations to JSON documents. Used in conjunction with the dat:\/\/ networking stack the result is Hypermerge.\nJust as packet switching was an enabling technology for the Internet and the web, or as capacitive touchscreens were an enabling technology for smart phones, so we think CRDTs may be the foundation for collaborative software that gives users full ownership of their data.\nThe brave new world\nThe authors built three (fairly advanced) prototypes using this CRDT stack: a Trello clone called Trellis, a collaborative drawing program, and a &lsquo;mixed-media workspace&rsquo; called PushPin (Evernote meets Pinterest&hellip;).\nIf you have 2 minutes and 10 seconds available, it&rsquo;s well worth watching this short video showing Trellis in action. It really brings the vision to life.\nIn section 4.2.4 of the paper the authors share a number of their learnings from building these systems:\nCRDT technology works &ndash; the Automerge library did a great job and was easy to use.\nThe user experience with offline work is splendid.\nCRDTs combine well with reactive programming to give a good developer experience. &ldquo;The result of [this combination] was that all of our prototypes realized real-time collaboration and full offline capability with little effort from the application developer.&rdquo;\nIn practice, conflicts are not as significant a problem as we feared. Conflicts are mitigated on two levels: first, Automerge tracks changes at a fine-grained level, and second, &ldquo;users have an intuitive sense of human collaboration and avoid creating conflicts with their collaborators.&rdquo;\nVisualising document history is important (see the Trellis video!).\nURLs are a good mechanism for sharing\nCloud servers still have their place for discovery, backup, and burst compute.\nSome challenges:\nIt can be hard to reason about how data moves between peers.\nCRDTs accumulate a large change history, which creates performance problems. (This is an issue with state-based CRDTs, as opposed to operation-based CRDTs).\nPerformance and memory\/disk usage quickly became a problem because CRDTs store all hist…",
                "fallback": "the morning paper Link: Local-first software: you own your data, in spite of the&nbsp;cloud",
                "from_url": "https:\/\/blog.acolyer.org\/2019\/11\/20\/local-first-software\/",
                "service_icon": "https:\/\/secure.gravatar.com\/blavatar\/09326a066a08237015d6b84f026d36ae?s=114",
                "id": 1,
                "original_url": "https:\/\/blog.acolyer.org\/2019\/11\/20\/local-first-software\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D5mX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/blog.acolyer.org\/2019\/11\/20\/local-first-software\/"
                            },
                            {
                                "type": "text",
                                "text": " (on HN right now)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36",
                    "UA14TGLTC",
                    "UJVEPCVT6",
                    "UE1JQM9HQ",
                    "UPVBV34EL",
                    "UJ6LDMMN0",
                    "UJBAJNFLK",
                    "UHWC9PXBL",
                    "UPHDH2F0C",
                    "UML4ZEKDK"
                ],
                "count": 10
            },
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    }
]