[
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1597350856.012300",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1597366770.000000"
        },
        "client_msg_id": "C294616A-FA8D-4AA3-8067-54BCA5FB2878",
        "text": "in my continued quest to sin myself directly into hell with my side project, i realized that i wanted to have a member of an array replace itself as the result of a method call, and the natural way to do that seemed to be something like having the last line of the method be `this = newObject`. that’s impossible in javascript—`this` is immutable and i’m not even sure how you’d update all the references in a coherent way (although i’m pretty sure it would make sense if you were doing enough pointer indirection). does anyone know of any cursed programming systems that let you do that kind of thing? i think there’s kind of an analogy in terms of replacing a server at a certain domain—all the hyperlinks stay pointing right at your new object",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597350856.012300",
        "reply_count": 8,
        "reply_users_count": 7,
        "latest_reply": "1597375958.025000",
        "reply_users": [
            "UEBG0NPDK",
            "UJN1TAYEQ",
            "U016VUZGUUQ",
            "UBN9AFS0N",
            "UC2A2ARPT",
            "UHWC9PXBL",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UEBG0NPDK",
                "ts": "1597351206.012500"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1597352156.012700"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1597352235.012900"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1597352819.013100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1597354031.013700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1597355212.023600"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1597355224.024100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1597375958.025000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DLr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in my continued quest to sin myself directly into hell with my side project, i realized that i wanted to have a member of an array replace itself as the result of a method call, and the natural way to do that seemed to be something like having the last line of the method be "
                            },
                            {
                                "type": "text",
                                "text": "this = newObject",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". that’s impossible in javascript—"
                            },
                            {
                                "type": "text",
                                "text": "this",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is immutable and i’m not even sure how you’d update all the references in a coherent way (although i’m pretty sure it would make sense if you were doing enough pointer indirection). does anyone know of any cursed programming systems that let you do that kind of thing? i think there’s kind of an analogy in terms of replacing a server at a certain domain—all the hyperlinks stay pointing right at your new object"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1597351206.012500",
        "client_msg_id": "f9d17d8a-55cd-4452-bb37-af007c8b5eae",
        "text": "You want pointers rather than references. You’d then change what’s at the pointer’s location, while leaving the pointer as is.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vw8LK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You want pointers rather than references. You’d then change what’s at the pointer’s location, while leaving the pointer as is."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1597352156.012700",
        "client_msg_id": "e4979d4f-0932-42d2-82cf-eacd041d3695",
        "text": "In C++ you write `*this = newObject;`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "crA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In C++ you write "
                            },
                            {
                                "type": "text",
                                "text": "*this = newObject;",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1597352235.012900",
        "client_msg_id": "d7900213-8d47-4dab-ba45-371e6d4f8cf0",
        "text": "In JS, can you just delete all existing fields on this and update with your new object? It's probably possible to do similar things in Python, as long as your remember to update the prototype, class, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H4T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In JS, can you just delete all existing fields on this and update with your new object? It's probably possible to do similar things in Python, as long as your remember to update the prototype, class, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1597352819.013100",
        "client_msg_id": "597c8005-b72d-42b7-bfca-48c035d74151",
        "text": "<https:\/\/gbracha.blogspot.com\/2009\/07\/miracle-of-become.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL",
        "attachments": [
            {
                "title": "The Miracle of become:",
                "title_link": "https:\/\/gbracha.blogspot.com\/2009\/07\/miracle-of-become.html",
                "text": "One of Smalltalk’s most unique and powerful features is also one of the least known outside the Smalltalk community. It’s a little method ca...",
                "fallback": "The Miracle of become:",
                "from_url": "https:\/\/gbracha.blogspot.com\/2009\/07\/miracle-of-become.html",
                "service_icon": "https:\/\/gbracha.blogspot.com\/favicon.ico",
                "service_name": "gbracha.blogspot.com",
                "id": 1,
                "original_url": "https:\/\/gbracha.blogspot.com\/2009\/07\/miracle-of-become.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zvxM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/gbracha.blogspot.com\/2009\/07\/miracle-of-become.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UML4ZEKDK",
                    "UA14TGLTC"
                ],
                "count": 4
            },
            {
                "name": "bangbang",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1597354031.013700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1597354603.000000"
        },
        "client_msg_id": "421deaf3-3ee2-40c2-8f42-ab3920753e9d",
        "text": "You thinking something like `Array.prototype.map` but that mutates the array rather than returning a new array?\n\nOr are you thinking something like... `arr[x] = fn(arr[x])`, but where the function somehow knows about the array so that you can just call it like `fn(arr[x])` and it takes care of updating the array?\n\nOr are you basically asking for `become:`? Your domain \/ hyperlink example makes it seem like that's what you're after, and in this case the fact that arrays are involved is irrelevant.\n\nLet me know what you want the calling context to look like, and I'll see if I have anything in one of my dustier tomes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y57K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You thinking something like "
                            },
                            {
                                "type": "text",
                                "text": "Array.prototype.map",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but that mutates the array rather than returning a new array?\n\nOr are you thinking something like... "
                            },
                            {
                                "type": "text",
                                "text": "arr[x] = fn(arr[x])",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but where the function somehow knows about the array so that you can just call it like "
                            },
                            {
                                "type": "text",
                                "text": "fn(arr[x])",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and it takes care of updating the array?\n\nOr are you basically asking for "
                            },
                            {
                                "type": "text",
                                "text": "become:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Your domain \/ hyperlink example makes it seem like that's what you're after, and in this case the fact that arrays are involved is irrelevant.\n\nLet me know what you want the calling context to look like, and I'll see if I have anything in one of my dustier tomes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1597355212.023600",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1597357941.000000"
        },
        "client_msg_id": "C7E958DE-6B3B-4355-B149-7F00BE42376B",
        "text": "<@UC2A2ARPT> it’s more like `become` , i think.\n\nspecifically i’m experimenting with going all out on the idea of message networks (making up this vocab as i go along)—so instead of `map` or `cata`, i’m seeing if i can do stuff like have arrays “broadcast” messages to their children recursively. something like:\n\n`Array.prototype.broadcast = function(message) {\nthis.map(i =&gt; i.broadcast? i.broadcast(message) : i[message]())\n}`\n\nso ideally the objects in an array would update themselves in-place without having to reassign at the array-level\/parent-level abstraction, if that makes sense\n\nturns out my mental model of references as “pointers with extras” was wrong lmao—thank you <@UEBG0NPDK> \n\n<@UBN9AFS0N> this is gold i had never heard of `become` before thank you",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sgw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " it’s more like "
                            },
                            {
                                "type": "text",
                                "text": "become",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , i think.\n\nspecifically i’m experimenting with going all out on the idea of message networks (making up this vocab as i go along)—so instead of "
                            },
                            {
                                "type": "text",
                                "text": "map",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "cata",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", i’m seeing if i can do stuff like have arrays “broadcast” messages to their children recursively. something like:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Array.prototype.broadcast = function(message) {\nthis.map(i => i.broadcast? i.broadcast(message) : i[message]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")\n}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nso ideally the objects in an array would update themselves in-place without having to reassign at the array-level\/parent-level abstraction, if that makes sense\n\nturns out my mental model of references as “pointers with extras” was wrong lmao—thank you "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " \n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " this is gold i had never heard of "
                            },
                            {
                                "type": "text",
                                "text": "become",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " before thank you"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1597355224.024100",
        "client_msg_id": "2E1D831A-C72E-4719-A5FC-045708B9799F",
        "text": "sorry the formatting is screwy i’m on my phone",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D7IS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "sorry the formatting is screwy i’m on my phone"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1597375958.025000",
        "client_msg_id": "2234c211-bf7c-4560-8639-d14eb8715e82",
        "text": "Thanks <@UBN9AFS0N>.  I came here to mention `become:`.  Works well for state machines.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lLl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": ".  I came here to mention "
                            },
                            {
                                "type": "text",
                                "text": "become:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  Works well for state machines."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]