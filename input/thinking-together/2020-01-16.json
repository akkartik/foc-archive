[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1579165094.235900",
        "client_msg_id": "a58e8277-ee66-4514-8e62-c32d20b70dc2",
        "text": "<@UMYKGHYBA> <@USJ899UUD> <@UEQ6M68H0> <@UGMH4H202> could you reply here or send me a DM with a link you would like me to use to link to your profile\/personal page\/twitter account when I mention you in the newsletter?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579165094.235900",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1579169781.237000",
        "reply_users": [
            "UMYKGHYBA",
            "USJ899UUD"
        ],
        "replies": [
            {
                "user": "UMYKGHYBA",
                "ts": "1579165196.236000"
            },
            {
                "user": "USJ899UUD",
                "ts": "1579169781.237000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dC2F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMYKGHYBA"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "USJ899UUD"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UGMH4H202"
                            },
                            {
                                "type": "text",
                                "text": " could you reply here or send me a DM with a link you would like me to use to link to your profile\/personal page\/twitter account when I mention you in the newsletter?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMYKGHYBA",
        "type": "message",
        "ts": "1579165196.236000",
        "client_msg_id": "e0a97fbe-381e-45b9-a98f-391b3db7b2a4",
        "text": "<https:\/\/twitter.com\/mdubakov>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "33a7d80f0969",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-03\/746668776704_33a7d80f09696604a6f4_72.jpg",
            "first_name": "Michael",
            "real_name": "Michael Dubakov",
            "display_name": "Michael Dubakov",
            "team": "T5TCAFTA9",
            "name": "michael172",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579165094.235900",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "title": "Michael Dubakov (@mdubakov) | Twitter",
                "title_link": "https:\/\/twitter.com\/mdubakov",
                "text": "The latest Tweets from Michael Dubakov (@mdubakov). Founder at @fibery_io. Tweet about product management, systems, software development and business. Minsk, Belarus",
                "fallback": "Michael Dubakov (@mdubakov) | Twitter",
                "from_url": "https:\/\/twitter.com\/mdubakov",
                "service_icon": "https:\/\/abs.twimg.com\/icons\/apple-touch-icon-192x192.png",
                "service_name": "twitter.com",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/mdubakov"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0aZcs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/mdubakov"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-4",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1579165228.236300",
        "client_msg_id": "b07108e2-d71d-4db3-87a7-bc6b002ba070",
        "text": "Hi Ivan can you tell a bit why you think it is great?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579117463.201200",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1O1w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi Ivan can you tell a bit why you think it is great?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFZFETUH1",
        "type": "message",
        "ts": "1579169591.236800",
        "client_msg_id": "259a6736-81f1-4ac0-98be-53f18bc7dbcb",
        "text": "The biggest use case for dhall is kubernetes: <https:\/\/github.com\/dhall-lang\/dhall-kubernetes> Kubernetes configs tend to get really large and repetitive. Here, Dhall's strenghts lie: Lambda abstractions allow you to not repeat yourself and static types guarantee you're not mixing something up.\n\nUnfortunately it's hard to know the exact usecases, as I've mostly heard of companies using it internally. There are some open-source usecases, but you could argue they're the 'nerdy' ones: the now de-facto standard package manager for purescript, spago, uses dhall for configuration (dependencies, package sets): <https:\/\/github.com\/dhall-lang\/dhall-kubernetes>, from a usecase perspective it would be possible to replace nix's expression language with dhall, although that is not practical at all anymore. There exists a dhall-to-nix translator, though: <https:\/\/github.com\/dhall-lang\/dhall-haskell\/tree\/master\/dhall-nix>. And if you want, before haskell cabal's 'common stanzas' were implemented, you could get rid of duplication in your .cabal files via writing your config in dhall and converting it with dhall-to-cabal: <https:\/\/github.com\/dhall-lang\/dhall-to-cabal>\n\nI have to admit, I'm interested in dhall mostly because I'm nerdy as well :wink: I really like the language design, it's clean, minimal, but powerful. However, Dhalls creator, Gabriel Gonzales is well aware of us 'nerds' (he uses the \"Crossing the Chasm\"-vocabulary and calls these early-adopters) and instead tries to think deeply about what satisfies 'mainstream programmers' in contrast to us nerds.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga72dfb84ee3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a72dfb84ee31009c2810f7f590d4ff8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Philipp Kr√ºger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "philipp.krueger1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579084874.196600",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aIfd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The biggest use case for dhall is kubernetes: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/dhall-lang\/dhall-kubernetes"
                            },
                            {
                                "type": "text",
                                "text": " Kubernetes configs tend to get really large and repetitive. Here, Dhall's strenghts lie: Lambda abstractions allow you to not repeat yourself and static types guarantee you're not mixing something up.\n\nUnfortunately it's hard to know the exact usecases, as I've mostly heard of companies using it internally. There are some open-source usecases, but you could argue they're the 'nerdy' ones: the now de-facto standard package manager for purescript, spago, uses dhall for configuration (dependencies, package sets): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/dhall-lang\/dhall-kubernetes"
                            },
                            {
                                "type": "text",
                                "text": ", from a usecase perspective it would be possible to replace nix's expression language with dhall, although that is not practical at all anymore. There exists a dhall-to-nix translator, though: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/dhall-lang\/dhall-haskell\/tree\/master\/dhall-nix"
                            },
                            {
                                "type": "text",
                                "text": ". And if you want, before haskell cabal's 'common stanzas' were implemented, you could get rid of duplication in your .cabal files via writing your config in dhall and converting it with dhall-to-cabal: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/dhall-lang\/dhall-to-cabal"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI have to admit, I'm interested in dhall mostly because I'm nerdy as well "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": " I really like the language design, it's clean, minimal, but powerful. However, Dhalls creator, Gabriel Gonzales is well aware of us 'nerds' (he uses the \"Crossing the Chasm\"-vocabulary and calls these early-adopters) and instead tries to think deeply about what satisfies 'mainstream programmers' in contrast to us nerds."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "nerd_face",
                "users": [
                    "UD3AK9JRF"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "USJ899UUD",
        "type": "message",
        "ts": "1579169781.237000",
        "client_msg_id": "ad01c8a6-fe5a-4f1d-835e-4fc5c862a7d0",
        "text": "<https:\/\/twitter.com\/Westoncb>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacd8b29c5cd",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acd8b29c5cd9153ba8f87532661ce874.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "westoncb",
            "display_name": "westoncb",
            "team": "T5TCAFTA9",
            "name": "westoncb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579165094.235900",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "title": "Weston Beecroft (@Westoncb) | Twitter",
                "title_link": "https:\/\/twitter.com\/Westoncb",
                "text": "The latest Tweets from Weston Beecroft (@Westoncb). Building some weird software at <https:\/\/t.co\/pwAk8DGBA0> | Here to constrain the design space and inflate your res cogitans. Tucson, AZ",
                "fallback": "Weston Beecroft (@Westoncb) | Twitter",
                "from_url": "https:\/\/twitter.com\/Westoncb",
                "service_icon": "https:\/\/abs.twimg.com\/icons\/apple-touch-icon-192x192.png",
                "service_name": "twitter.com",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/Westoncb"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "37P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/Westoncb"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-4",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1579192184.238000",
        "client_msg_id": "3fc4860f-45a3-4af0-b2ba-d890402716f2",
        "text": "Visual Calculations in the Shape Machine\n&gt; What does it mean to have a new modeling software for design that allows scientists, engineers and designers to specify their actions by drawing shapes rather than by writing scripts? What is the difference between a shape you see and the way it is currently recorded in the database of your computer? What does it mean to program with shapes?\n<https:\/\/shape.design.gatech.edu\/Machine\/index2.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tOTtr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Visual Calculations in the Shape Machine\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does it mean to have a new modeling software for design that allows scientists, engineers and designers to specify their actions by drawing shapes rather than by writing scripts? What is the difference between a shape you see and the way it is currently recorded in the database of your computer? What does it mean to program with shapes?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/shape.design.gatech.edu\/Machine\/index2.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "alien",
                "users": [
                    "UJN1TAYEQ"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1579197125.238100",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1579197337.000000"
        },
        "client_msg_id": "105d9978-9c8a-457c-a205-078fe5af80c9",
        "text": "I was in my early teens at the time of the Netscape saga, so looking back at the events transpiring then and relating them to my personal experience of the early web was a powerful stab of nostalgia.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579117463.201200",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pjbzw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was in my early teens at the time of the Netscape saga, so looking back at the events transpiring then and relating them to my personal experience of the early web was a powerful stab of nostalgia."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1579197204.238300",
        "client_msg_id": "98fe5477-524b-436d-a956-d07e97af90d9",
        "text": "I've heard the Netscape story from a few different places. I liked this documentary because it made the events seem more concrete. Other recounts, like the (excellent) Internet History Podcast, felt a little more detached and encyclopedic rather than personal and immediate.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579117463.201200",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PsnZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've heard the Netscape story from a few different places. I liked this documentary because it made the events seem more concrete. Other recounts, like the (excellent) Internet History Podcast, felt a little more detached and encyclopedic rather than personal and immediate."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1579197247.238500",
        "client_msg_id": "abbb7323-cbec-401a-85d2-946051973c36",
        "text": "Watching this documentary, I could imagine myself being there. I've gone through similar things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579117463.201200",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Laxc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Watching this documentary, I could imagine myself being there. I've gone through similar things."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1579197293.238700",
        "client_msg_id": "604d9b8e-fdee-4901-aad0-4c4a263e4675",
        "text": "So not \"great\" in the sense of (umm) Waiting for Godot or Black Saint &amp; The Sinner Lady, but \"great\" in the sense of _hell yeah_.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579117463.201200",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G5kxn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So not \"great\" in the sense of (umm) Waiting for Godot or Black Saint & The Sinner Lady, but \"great\" in the sense of "
                            },
                            {
                                "type": "text",
                                "text": "hell yeah",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1579206429.240000",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1579206518.000000"
        },
        "client_msg_id": "5c9fc680-cf44-4528-85bc-efb381a8c362",
        "text": "Cross-post from <#C5U3SEW6A|linking-together> because I believe it to be on-topic for FoC. The slack message has a good discussion thread going, too ‚Äî don't miss that.\n\n<https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1579153117205300>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1579153117205300",
                "fallback": "[January 15th, 2020 9:38 PM] ak: I just wrote <https:\/\/lobste.rs\/s\/6gzmym\/static_types_are_dangerously#c_9lzbuq>\n\nA couple of crazy ideas on types:\n\n1. The Right Way is for product types to be nominative and sum types to be structural.\n\n2. Maybe we need tags for product types as well? Then unify types on the names not of types but of their constituent tags, whether sums or products.\n\ne.g. `Foo` and `Bar` can be automatically coerced in:\n\n```type Foo = A int * B boolean\ntype Bar = A int * B boolean```",
                "ts": "1579153117.205300",
                "author_id": "UCUSW7WVD",
                "author_subname": "Kartik Agaram",
                "channel_id": "C5U3SEW6A",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "I just wrote <https:\/\/lobste.rs\/s\/6gzmym\/static_types_are_dangerously#c_9lzbuq>\n\nA couple of crazy ideas on types:\n\n1. The Right Way is for product types to be nominative and sum types to be structural.\n\n2. Maybe we need tags for product types as well? Then unify types on the names not of types but of their constituent tags, whether sums or products.\n\ne.g. `Foo` and `Bar` can be automatically coerced in:\n\n```type Foo = A int * B boolean\ntype Bar = A int * B boolean```",
                "author_name": "Kartik Agaram",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UCUSW7WVD",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1579153117205300",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nrB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cross-post from "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": " because I believe it to be on-topic for FoC. The slack message has a good discussion thread going, too ‚Äî don't miss that.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1579153117205300"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ",
                    "U7C7B75R6"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UG0EL18H3",
        "type": "message",
        "ts": "1579206966.240500",
        "client_msg_id": "c8eeec60-a312-4fe5-bacb-55ad08f1193d",
        "text": "I forgot to mention, it takes a fair bit of time to actually come up with principles, but it's such a worthwhile exercise. It took me about 6 months of very intense exploration\/research to come up with my \"mental models\" principle, but it's informed everything I've been working on since.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "25cc47143833",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-01\/702360681283_25cc471438337c72e600_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Rabl",
            "display_name": "crabl",
            "team": "T5TCAFTA9",
            "name": "chris.rabl",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "brL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I forgot to mention, it takes a fair bit of time to actually come up with principles, but it's such a worthwhile exercise. It took me about 6 months of very intense exploration\/research to come up with my \"mental models\" principle, but it's informed everything I've been working on since."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UG0EL18H3",
        "type": "message",
        "ts": "1579207093.240700",
        "client_msg_id": "452ec5e6-e360-4afa-bded-9d28057eebf0",
        "text": "The simplest way I've found is to just start with a statement about something you want to do that really resonates with you (e.g.: \"i want to make programming easier\") and keep asking \"why?\" over and over again. At the end of the chain of questioning, you will get to a principle.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "25cc47143833",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-01\/702360681283_25cc471438337c72e600_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Rabl",
            "display_name": "crabl",
            "team": "T5TCAFTA9",
            "name": "chris.rabl",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bbWk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The simplest way I've found is to just start with a statement about something you want to do that really resonates with you (e.g.: \"i want to make programming easier\") and keep asking \"why?\" over and over again. At the end of the chain of questioning, you will get to a principle."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1579208693.241900",
        "client_msg_id": "fc36c827-abd1-41ae-9f98-2649e4f93d21",
        "text": "<@UG0EL18H3> :thumbsup::skin-tone-3: that was something I learned in ThoughtWork",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jBuQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "thumbsup",
                                "unicode": "1f44d-1f3fc",
                                "skin_tone": 3
                            },
                            {
                                "type": "text",
                                "text": " that was something I learned in ThoughtWork"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UE6EFEPTQ",
        "thread_ts": "1578910495.160600",
        "root": {
            "user": "UE6EFEPTQ",
            "type": "message",
            "ts": "1578910495.160600",
            "client_msg_id": "e55a2997-3239-48f9-8d69-b65d3d9aef8c",
            "text": "Hi, fellow innovator (yes, you!). I'm interested in your driving principles for the work you do in the future of programming\/coding.\n\nFor example, \"state and i\/o are bad\/good\", \"text is bad\/good\", \"always allow explorable explanations\", \"programmer must always see the data changing when the code changes\", \"anything else Bret Victor thinks\", \"don't allow syntax errors\", \"programming is about modelling the world\", \"it's time to break the programmer|corporate|etc priesthood!!\", \"declarative not imperative\", \"eliminate accidental complexity\", \"flappy bird in 10 lines\"..\n\nWhat are the fundamental principles you always look to (and have always held to, looking back) when making any technical or design decision, even if only subconsciously?",
            "team": "T5TCAFTA9",
            "thread_ts": "1578910495.160600",
            "reply_count": 35,
            "reply_users_count": 12,
            "latest_reply": "1579211469.244000",
            "reply_users": [
                "UE6EFEPTQ",
                "UBN9AFS0N",
                "UKFNXF0F9",
                "UNBPP291C",
                "UKDM3GLAJ",
                "ULM3U6275",
                "UG0EL18H3",
                "UL3CJ7YKC",
                "U8A5MS6R1",
                "UMWF81HTP",
                "UHWC9PXBL",
                "U6KQ2S410"
            ],
            "replies": [
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1578910504.160700"
                },
                {
                    "user": "UBN9AFS0N",
                    "ts": "1578916572.161600"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1578917037.162100"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1578917050.162300"
                },
                {
                    "user": "UKFNXF0F9",
                    "ts": "1578917129.162500"
                },
                {
                    "user": "UNBPP291C",
                    "ts": "1578917133.162700"
                },
                {
                    "user": "UKFNXF0F9",
                    "ts": "1578917232.162900"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1578917612.163300"
                },
                {
                    "user": "UKFNXF0F9",
                    "ts": "1578918248.163700"
                },
                {
                    "user": "UKDM3GLAJ",
                    "ts": "1578933575.168000"
                },
                {
                    "user": "ULM3U6275",
                    "ts": "1578938609.170200"
                },
                {
                    "user": "UG0EL18H3",
                    "ts": "1578950104.178400"
                },
                {
                    "user": "UL3CJ7YKC",
                    "ts": "1578958189.181200"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1578962469.183500"
                },
                {
                    "user": "UMWF81HTP",
                    "ts": "1579000123.192500"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1579000559.192900"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1579000596.193100"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1579027404.193800"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1579028057.194500"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1579099281.197000"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1579099304.197200"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1579103631.197500"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1579136404.212200"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1579136594.214500"
                },
                {
                    "user": "UG0EL18H3",
                    "ts": "1579206966.240500"
                },
                {
                    "user": "UG0EL18H3",
                    "ts": "1579207093.240700"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1579208693.241900"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1579208697.242100"
                },
                {
                    "user": "U6KQ2S410",
                    "ts": "1579209478.242500"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1579209675.242700"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1579209787.242900"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1579209815.243100"
                },
                {
                    "user": "U6KQ2S410",
                    "ts": "1579210624.243400"
                },
                {
                    "user": "UBN9AFS0N",
                    "ts": "1579211356.243800"
                },
                {
                    "user": "UBN9AFS0N",
                    "ts": "1579211469.244000"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "KCo6k",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Hi, fellow innovator (yes, you!). I'm interested in your driving principles for the work you do in the future of programming\/coding.\n\nFor example, \"state and i\/o are bad\/good\", \"text is bad\/good\", \"always allow explorable explanations\", \"programmer must always see the data changing when the code changes\", \"anything else Bret Victor thinks\", \"don't allow syntax errors\", \"programming is about modelling the world\", \"it's time to break the programmer|corporate|etc priesthood!!\", \"declarative not imperative\", \"eliminate accidental complexity\", \"flappy bird in 10 lines\"..\n\nWhat are the fundamental principles you always look to (and have always held to, looking back) when making any technical or design decision, even if only subconsciously?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1579208697.242100",
        "client_msg_id": "9a0556ca-da86-4cad-a7f0-d07e2ce0cfc1",
        "text": "There's a lot of good discussion in this thread, so I'd like to \"bump\" it again in the main channel to get anyone that missed it the first time around. I won't say who I'm hoping will respond, but will \"bump\" them directly if they don't! :smile:",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oN0N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a lot of good discussion in this thread, so I'd like to \"bump\" it again in the main channel to get anyone that missed it the first time around. I won't say who I'm hoping will respond, but will \"bump\" them directly if they don't! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKASUGYL8"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U6KQ2S410",
        "type": "message",
        "ts": "1579209478.242500",
        "client_msg_id": "de3907ac-009d-4e08-9e6f-8c3827c7f3ef",
        "text": "My principle: minimize the reference manual. Think about precisely describing how your thing works. Design it to minimize the number of pages it takes to explain it, and minimize the prerequisites to understanding it (particularly mathematical sophistication). A consequence of this principle is that you should be writing the reference manual as you design.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e8f4c2151d2b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-09\/225308926294_e8f4c2151d2b70ebfae3_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Edwards",
            "display_name": "jonathoda",
            "team": "T5TCAFTA9",
            "name": "jonathoda",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Arh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My principle: minimize the reference manual. Think about precisely describing how your thing works. Design it to minimize the number of pages it takes to explain it, and minimize the prerequisites to understanding it (particularly mathematical sophistication). A consequence of this principle is that you should be writing the reference manual as you design."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1579209675.242700",
        "client_msg_id": "33144de8-7704-4a99-8ff8-a6a63ab49251",
        "text": "‚Üë Yay! You responded!!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b1p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "‚Üë Yay! You responded!!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1579209787.242900",
        "client_msg_id": "8c3082d8-97e4-41cf-ae7c-104a5c5c5ab1",
        "text": "An extreme version of that is \"README-Driven Development\": Write the README then make it so.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jKg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An extreme version of that is \"README-Driven Development\": Write the README then make it so."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1579209815.243100",
        "client_msg_id": "53f1ff85-5d80-44c0-bed4-c691803d166e",
        "text": "You only have _one_ principle? I'm surprised",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WfSc\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You only have "
                            },
                            {
                                "type": "text",
                                "text": "one",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " principle? I'm surprised"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6KQ2S410",
        "type": "message",
        "ts": "1579210624.243400",
        "client_msg_id": "03cd6b6f-86e8-4319-a251-6a8e236f59f4",
        "text": "You want principles? I got lots. Here is from the intro to Subtext:\n\nSubtext tries to be simple, transparent, and informal:\n1. Simple ‚Äî easy to learn and easy to use.\n2. Transparent ‚Äî the history of user interaction and program execution are visible in complete detail.\n3. Informal ‚Äî doesn‚Äôt require abstraction, premeditation, or mathematical\/computational thinking.\n\nSubtext rejects:\n1. Low level, high performance, or large scale software ‚Äî being extreme in any dimension.\n2. Requiring knowledge of existing software technology and practices beyond using a browser.\n3. Appealing to the tastes of professional programmers or computer scientists.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e8f4c2151d2b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-09\/225308926294_e8f4c2151d2b70ebfae3_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Edwards",
            "display_name": "jonathoda",
            "team": "T5TCAFTA9",
            "name": "jonathoda",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pnD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You want principles? I got lots. Here is from the intro to Subtext:\n\nSubtext tries to be simple, transparent, and informal:\n1. Simple ‚Äî easy to learn and easy to use.\n2. Transparent ‚Äî the history of user interaction and program execution are visible in complete detail.\n3. Informal ‚Äî doesn‚Äôt require abstraction, premeditation, or mathematical\/computational thinking.\n\nSubtext rejects:\n1. Low level, high performance, or large scale software ‚Äî being extreme in any dimension.\n2. Requiring knowledge of existing software technology and practices beyond using a browser.\n3. Appealing to the tastes of professional programmers or computer scientists."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            },
            {
                "name": "upside_down_face",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1579211356.243800",
        "client_msg_id": "d092cf01-44d9-4294-9aa5-d011aa916998",
        "text": "<@U6KQ2S410> I have a similar principle which is that if I'm giving a demo or explaning the thing and I have to stop to clarify something, next time I should do a change that doesn't require the clarification.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5H9yO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " I have a similar principle which is that if I'm giving a demo or explaning the thing and I have to stop to clarify something, next time I should do a change that doesn't require the clarification."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U6KQ2S410"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1579211469.244000",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1579214554.000000"
        },
        "client_msg_id": "64960491-e59c-414f-954b-10c77da74e18",
        "text": "a simpler rule is to check for superfluous steps in demos and think if I can remove them from the common path",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VX9LW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a simpler rule is to check for superfluous steps in demos and think if I can remove them from the common path"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1579212228.247100",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1579264889.000000"
        },
        "client_msg_id": "031286a3-9e6e-46a0-843c-b285243169e0",
        "text": "I've been reading back over <@U6KQ2S410>‚Äôs Tweets and realise that he's not copying them all over to here. Which is a shame as they're often very challenging, and challenge at the heart of what we're up to in this community.\n\nSo I may start to do that for him..\n\nHere are some of my favourite brain-\/belief-aches from Jonathan recently:\n\n<https:\/\/twitter.com\/jonathoda\/status\/1138881930399703041>\n<https:\/\/twitter.com\/jonathoda\/status\/1191324879708151814>\n<https:\/\/twitter.com\/jonathoda\/status\/1196533258315538435>\n<https:\/\/twitter.com\/jonathoda\/status\/1203011336197869569>\n<https:\/\/twitter.com\/jonathoda\/status\/1214598004625285121>\n<https:\/\/twitter.com\/jonathoda\/status\/1215628334475939845>\n<https:\/\/twitter.com\/jonathoda\/status\/1215655362986160130>\n<https:\/\/twitter.com\/jonathoda\/status\/1217884632009576448>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212228.247100",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1579350329.073500",
        "reply_users": [
            "U6KQ2S410",
            "UE6EFEPTQ",
            "UJN1TAYEQ",
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "U6KQ2S410",
                "ts": "1579212283.247200"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1579212300.247500"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1579221942.258600"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1579241041.002100"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1579350329.073500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=U5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been reading back over "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": "‚Äôs Tweets and realise that he's not copying them all over to here. Which is a shame as they're often very challenging, and challenge at the heart of what we're up to in this community.\n\nSo I may start to do that for him..\n\nHere are some of my favourite brain-\/belief-aches from Jonathan recently:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/jonathoda\/status\/1138881930399703041"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/jonathoda\/status\/1191324879708151814"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/jonathoda\/status\/1196533258315538435"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/jonathoda\/status\/1203011336197869569"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/jonathoda\/status\/1214598004625285121"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/jonathoda\/status\/1215628334475939845"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/jonathoda\/status\/1215655362986160130"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/jonathoda\/status\/1217884632009576448"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "grin",
                "users": [
                    "UKASUGYL8"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U6KQ2S410",
        "type": "message",
        "ts": "1579212283.247200",
        "client_msg_id": "3d99c9f6-20ae-427a-89aa-f132e81b2a2c",
        "text": "jonathoda as a service",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e8f4c2151d2b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-09\/225308926294_e8f4c2151d2b70ebfae3_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Edwards",
            "display_name": "jonathoda",
            "team": "T5TCAFTA9",
            "name": "jonathoda",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212228.247100",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cM0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "jonathoda as a service"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1579212300.247500",
        "client_msg_id": "42b7747c-4fcc-41dc-b012-9654b774fb69",
        "text": ":smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212228.247100",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oAN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1579212773.252900",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1579212831.000000"
        },
        "client_msg_id": "965710b7-4915-45ff-9383-13e102aa2f5a",
        "text": "On ‚Äúmissing‚Äù values, null and undefined aren‚Äôt the same as an empty string. For example, if there‚Äôs an object for a person‚Äôs name that has a middle name field, does empty string mean 1) ‚Äúwe know that this person has no middle name‚Äù, 2) ‚Äúwe don‚Äôt know‚Äù or 3) we haven‚Äôt yet been asked or tried to input this‚Äù? Another example is when you want an undefined attribute to inherit from some delegate. Empty string can‚Äôt serve this purpose because it may mean ‚Äúwe know this value is an empty string‚Äù instead of ‚Äúwe want this value to be inherited‚Äù.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "reply_count": 27,
        "reply_users_count": 8,
        "latest_reply": "1579470293.187200",
        "reply_users": [
            "UE6EFEPTQ",
            "UC2A2ARPT",
            "U8A5MS6R1",
            "UJN1TAYEQ",
            "ULM3U6275",
            "USJ899UUD",
            "U5STGTB3J",
            "U7C7B75R6"
        ],
        "replies": [
            {
                "user": "UE6EFEPTQ",
                "ts": "1579212996.255300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1579212998.255600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1579213041.255800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1579213108.256100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1579213234.256600"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1579221903.258400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1579222528.258800"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1579222571.259000"
            },
            {
                "user": "ULM3U6275",
                "ts": "1579223037.259300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1579224012.260100"
            },
            {
                "user": "ULM3U6275",
                "ts": "1579224838.260500"
            },
            {
                "user": "USJ899UUD",
                "ts": "1579232040.000500"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1579242253.020700"
            },
            {
                "user": "USJ899UUD",
                "ts": "1579248572.021600"
            },
            {
                "user": "USJ899UUD",
                "ts": "1579248892.021800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1579289862.025300"
            },
            {
                "user": "ULM3U6275",
                "ts": "1579297640.036300"
            },
            {
                "user": "USJ899UUD",
                "ts": "1579308068.040700"
            },
            {
                "user": "USJ899UUD",
                "ts": "1579308859.040900"
            },
            {
                "user": "USJ899UUD",
                "ts": "1579309098.041100"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1579353104.073800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1579389139.133800"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1579390039.134200"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1579463552.184800"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1579468936.185200"
            },
            {
                "user": "ULM3U6275",
                "ts": "1579469565.186900"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1579470293.187200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iazw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On ‚Äúmissing‚Äù values, null and undefined aren‚Äôt the same as an empty string. For example, if there‚Äôs an object for a person‚Äôs name that has a middle name field, does empty string mean 1) ‚Äúwe know that this person has no middle name‚Äù, 2) ‚Äúwe don‚Äôt know‚Äù or 3) we haven‚Äôt yet been asked or tried to input this‚Äù? Another example is when you want an undefined attribute to inherit from some delegate. Empty string can‚Äôt serve this purpose because it may mean ‚Äúwe know this value is an empty string‚Äù instead of ‚Äúwe want this value to be inherited‚Äù."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1579212996.255300",
        "client_msg_id": "f8f0c4ab-5ac9-4d2e-84e1-f44ee4a1ef50",
        "text": "the delegate thing isn't something covered in the Twitter thread AFAIR",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oQgq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the delegate thing isn't something covered in the Twitter thread AFAIR"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1579212998.255600",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1579213187.000000"
        },
        "client_msg_id": "b2469686-4ea3-4ea0-9403-d7b5b4d0ecfd",
        "text": "There was a good Rich Hickey talk about this a little over a year ago, if memory serves. He critiqued the use of Maybe in Haskell to represent something that either has a non-empty value, or does not have a value, for the reasons stated. Can't remember which talk, but I can probably look it up if there's interest.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TWu1\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There was a good Rich Hickey talk about this a little over a year ago, if memory serves. He critiqued the use of Maybe in Haskell to represent something that either has a non-empty value, or does not have a value, for the reasons stated. Can't remember which talk, but I can probably look it up if there's interest."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1579213041.255800",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1579213337.000000"
        },
        "client_msg_id": "2346c079-1c07-4970-94ea-5c04a11bba08",
        "text": "Unlike zero, which was invented very early in maths, how come we never needed the empty string until we started working with computers?\n\nThere could be one, two or fifty different reasons a value is missing - it depends on the problem domain. There is no universal understanding for how these reasons maps onto the empty string, null or any other undefined object that's provided.\n\nThe only right solution seems to be to have a domain specific enum for the missing reason, and use an empty string as the value.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tIto",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unlike zero, which was invented very early in maths, how come we never needed the empty string until we started working with computers?\n\nThere could be one, two or fifty different reasons a value is missing - it depends on the problem domain. There is no universal understanding for how these reasons maps onto the empty string, null or any other undefined object that's provided.\n\nThe only right solution seems to be to have a domain specific enum for the missing reason, and use an empty string as the value."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UCUSW7WVD",
                    "ULM3U6275",
                    "UNCP67JSK",
                    "UCKRZS3DZ"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1579213108.256100",
        "client_msg_id": "3fe7f412-0a38-4b35-b268-486b90f4fb95",
        "text": "I elaborate in this comment: <https:\/\/josjong.com\/2017\/10\/16\/null-vs-empty-strings-why-oracle-was-right-and-apple-is-not\/#comment-79>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "attachments": [
            {
                "service_name": "Jos Jong - The Future of Software Development",
                "service_url": "http:\/\/josjong.com",
                "title": "NULL vs Empty Strings ‚Äì Why Oracle Was Right and Apple Is¬†Not",
                "title_link": "https:\/\/josjong.com\/2017\/10\/16\/null-vs-empty-strings-why-oracle-was-right-and-apple-is-not\/#comment-79",
                "author_link": "https:\/\/josjong.com\/author\/",
                "thumb_url": "https:\/\/josjong.files.wordpress.com\/2017\/10\/toilet-rolls.jpg?w=1200&fit=200%2C150",
                "thumb_width": 200,
                "thumb_height": 112,
                "text": "Try it yourself: Google &ldquo;how to check for empty string.&rdquo; I got about 16 million results. How can something that seems so straightforward lead to so many questions and probably even more answers?\nThe solution differs by language, but most answers will look similar to this:\nif string != null and string.length() &gt; 0 {\n    ...\n}\nWhy can we not simply say?\nif string is filled {\n    ...\n}\n(pseudocode, forget about the exact syntax)\nIf you think the first form is good enough, just pick one of the answers for your favorite language and stick with it. If you&rsquo;re interested in the future of programming languages, as I am, read on.\nHopefully, your language of choice already supports some sort of shortcut to check for an empty string. But it probably still has two distinct representations for an empty string, which can confuse all of us from time to time:\nthe value null (maybe written as nil, none, etc.)\na string of length zero\nStrings are one of the most common data structures we pass around in our programs, so you would expect programming languages to have solved this &ldquo;&rdquo; versus null issue by now. Unfortunately, even newcomer Swift, although quite articulated about optional versus mandatory values, doesn&rsquo;t provide any solutions in this regard. Swift gives us optional values. But even if you define a Swift string to be optional you still have to deal with two representations for an empty string: either &ldquo;&rdquo; or nil. So you still have to check for both situations. Even worse, if you define a string to be mandatory it can still be empty!\nIf you think the distinction between a string of length zero and a null value has any significant meaning, please tweet or email me or write your real-world example below. Things are either present or they are not. A user will either enter a value in a given field or keep it empty. A function returns a result or it doesn&rsquo;t. A value in a database is either there or not. There&rsquo;s typically nothing in between.\nTime Waster\nWe can waste a lot&nbsp;of time on this issue:\nYou&rsquo;re never 100% sure what it is wise to return from a function in the case of no result.\nYou always have to check for both situations, just to be sure.\nYou can forget one of the two checks, resulting in unnecessary bugs.\nThe extra code obscures the pure intention of an empty or not-empty check.\nNot convinced? Check out: \nHistory\nLet&rsquo;s see how we got into this mess, because there is some history behind it.\nIn older programming languages like COBOL, strings were typically fixed sized. Coming from a world of punch cards and tapes, that made a lot of sense. However, because variable sized strings are more flexible, they eventually became the standard. Strings now had to be allocated on the heap. That&rsquo;s because variable sized values are inconvenient on the stack and impossible inside fixed record structures. From then on it became possible to represent an empty string by not allocating anything on the heap (null) in addition to the possibility of assigning zero characters (&ldquo;&rdquo;) to the string.\nObject-oriented programming languages eventually turned these allocated strings into objects, giving them methods to handle and manipulate their content. Compare that to other value types like integers, floats, and booleans, which were typically kept as native as possible. That&rsquo;s because making them into heap-allocated objects would mean a more-than-significant performance penalty.\nBelieve me, it is not intentional that we are stuck now with two representations for empty strings. It was just born out of technical necessity. That may be fine in a language like C. But hey, it is 2017 now &ndash; we can do better. Remember the trouble with ending strings using a &lsquo;\\0&rsquo; character. Exactly!\nWhy Strings are Values\nIn the theory of entities, attributes and relationships (EAR-modeling) entities and relationships are there to register facts. Values (assigned to attributes) play an entirely different role. While we can refer to entities using something like a record-ID, values reference from the model back to the outside world. To take some examples, a name can be a reference to a person, a date value refers to an abstract value on a calendar, and numbers refer to a virtual number scale. Given this definition, strings are also values (1). And therefore it makes sense to expect so-called value semantics for strings too.\nOf course, a string is a sequence of characters. And, you could argue, that makes them totally different from numbers. But remember that numbers are also sequences of symbols (digits in this case). The only difference is that we can fit most numbers within 32 of 64 bits. For that reason we don&rsquo;t need to allocate them in separate memory structures like we do with strings. But that is not an adequate reason to say that strings are not values.\nIt&rsquo;s interesting to compare the theoretical definition of values with the typical implementation of strings and integers in many popular programming languages.\n\nValues\/attributes (theory)\nIntegers\nStrings\nSharable\nNo\nNo\nYes, although we try to prevent this\nSupport for optionality\nYes\nNo, in many languages\nYes, but typically in two ways (&ldquo;&rdquo; and null)\nAssignment behavior\nValue itself is copied\nValue itself is copied\nDepending on the language\nComparison behavior (equals)\nValues are compared\nValues are compared\nDepending on the language and operator (equals(), ==, ===)\n&nbsp;\nThe last column says it all. Strings being wrapped as objects may have benefits, but it gives them &ldquo;entity&rdquo; behavior. And languages have been struggling with this for decades now. Hence the introduction of band-aid features like const, final, immutability, etc.\nThe fact that we have two ways of representing empty strings is even weirder when you consider that in some languages intrinsic values such as integers, floats, etc., cannot represent an empty value. That&rsquo;s why a lot of code uses value 0 or -1 to present an empty integer field, which, again, can lead to bugs because both could actually be valid values.\nThe Solution\nWe do not have to look far for solutions. Just two examples (sorry if I forgot your language of choice):\nThe Oracle VARCHAR2 type automatically converts every instance of &ldquo;&rdquo; into NULL. This guarantees that there is only one way an empty string can be represented.\nString classes in C++ typically cannot be NULL because their instances are not pointers by themselves.\nI can imagine a more conceptual approach toward strings and values in general. We can forbid const values like &ldquo;&rdquo; because they have no meaning. Isn&rsquo;t that the same as the fact that we cannot write integer constants with zero digits?\nIf you&rsquo;re developing a programming language, consider what fits your language style. But my main takeaways would be:\nUnderstand that strings are values just like integers, dates, etc.\nGo for value semantics, even if you like them to have object-like methods.\nPlease, please, prevent the situation of having two different values for empty strings.\nSupport optionality for every type of value (I would like to credit Swift for that)\nThe bottom line is to avoid too many technical considerations when designing a language. Let the compiler do the hard work.\nReferences\n1) Very long strings like the text of a document should maybe not be regarded as &ldquo;values.&rdquo; But that&rsquo;s a different subject.\nCredits\nR. Sato (@raysato), thanks for allowing me to use your 0 vs null&nbsp;photo.&nbsp;Some pictures are really worth a thousand words.",
                "fallback": "Jos Jong - The Future of Software Development Link: NULL vs Empty Strings &#8211; Why Oracle Was Right and Apple Is&nbsp;Not",
                "from_url": "https:\/\/josjong.com\/2017\/10\/16\/null-vs-empty-strings-why-oracle-was-right-and-apple-is-not\/#comment-79",
                "service_icon": "https:\/\/s2.wp.com\/i\/webclip.png",
                "id": 1,
                "original_url": "https:\/\/josjong.com\/2017\/10\/16\/null-vs-empty-strings-why-oracle-was-right-and-apple-is-not\/#comment-79"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ofN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I elaborate in this comment: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/josjong.com\/2017\/10\/16\/null-vs-empty-strings-why-oracle-was-right-and-apple-is-not\/#comment-79"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1579213234.256600",
        "client_msg_id": "b868de13-13fd-4142-990f-b7f6c2415cb3",
        "text": "This talk? <https:\/\/www.youtube.com\/watch?v=YR5WdGrpoug>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Maybe Not - Rich Hickey",
                "title_link": "https:\/\/www.youtube.com\/watch?v=YR5WdGrpoug",
                "author_name": "ClojureTV",
                "author_link": "https:\/\/www.youtube.com\/user\/ClojureTV",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/YR5WdGrpoug\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Maybe Not - Rich Hickey",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/YR5WdGrpoug?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=YR5WdGrpoug",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=YR5WdGrpoug"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x2g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This talk? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=YR5WdGrpoug"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1579221903.258400",
        "client_msg_id": "3b13736a-af07-400a-9f8b-46415b92902d",
        "text": "&gt; <@U8A5MS6R1> \"Unlike zero, which was invented very early in maths, how come we never needed the empty string until we started working with computers?\"\n?? The empty string was invented by mathematicians long before the first programmable computer was built. Axel Thue invented string rewriting systems in 1914, so the idea is at least that old.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/yaz",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " \"Unlike zero, which was invented very early in maths, how come we never needed the empty string until we started working with computers?\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "?? The empty string was invented by mathematicians long before the first programmable computer was built. Axel Thue invented string rewriting systems in 1914, so the idea is at least that old."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1579221942.258600",
        "client_msg_id": "0057e8e3-6f01-4250-80ed-4ea5bbf0c560",
        "text": "Cool. Okay, I want to work on \"yes code\" systems.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212228.247100",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZxC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool. Okay, I want to work on \"yes code\" systems."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1579222528.258800",
        "client_msg_id": "bb1c842d-0f4a-4a7c-b1f9-7dce5f0eb0c1",
        "text": "Sure. But compare 0 in mathematics to the empty string in text. We've had the notion of missing information but no actual literal form for it. Some countries you write 'NA' in forms, others you write '-' or maybe just scribble in margins about why something is blank.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ddiS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure. But compare 0 in mathematics to the empty string in text. We've had the notion of missing information but no actual literal form for it. Some countries you write 'NA' in forms, others you write '-' or maybe just scribble in margins about why something is blank."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1579222571.259000",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1579223010.000000"
        },
        "client_msg_id": "70931589-1204-40f8-a142-62c31d758b06",
        "text": "The best way to encode a missing value depends on the programming language.\n\nA `Maybe` type (or `Either` type) is the best solution, if you are using Haskell, because then your code is compatible with all of the Haskell infrastructure that supports the use of `Maybe` types, and you don't want to force other Haskell programmers to have to write glue code to interface with your non-idiomatic API.\n\nIf you are programming in Clojure, then Maybe types are not the best way to represent this concept. Clojure isn't Haskell. If you are using a Clojure map, then omitting a field from the map is a better way to indicate missing data. I think that Rich Hickey's talk is directed at Clojure programmers, not at Haskell programmers, in order to explain why you shouldn't blindly import Haskell idioms into Clojure, when Clojure has its own idioms.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gPE0T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The best way to encode a missing value depends on the programming language.\n\nA "
                            },
                            {
                                "type": "text",
                                "text": "Maybe",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " type (or "
                            },
                            {
                                "type": "text",
                                "text": "Either",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " type) is the best solution, if you are using Haskell, because then your code is compatible with all of the Haskell infrastructure that supports the use of "
                            },
                            {
                                "type": "text",
                                "text": "Maybe",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " types, and you don't want to force other Haskell programmers to have to write glue code to interface with your non-idiomatic API.\n\nIf you are programming in Clojure, then Maybe types are not the best way to represent this concept. Clojure isn't Haskell. If you are using a Clojure map, then omitting a field from the map is a better way to indicate missing data. I think that Rich Hickey's talk is directed at Clojure programmers, not at Haskell programmers, in order to explain why you shouldn't blindly import Haskell idioms into Clojure, when Clojure has its own idioms."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1579223037.259300",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1579224599.000000"
        },
        "client_msg_id": "094c513b-6697-4b9d-b11d-abf17dfdeb41",
        "text": "I feel this discussion points to how what we call values don‚Äôt include all the information we end up needing to track surrounding typical values. We need something more like slots with arbitrary attributes, a value being just one of them. Others might be things like: What‚Äôs the default value? What it‚Äôs type(s)? How should it get initialized? What are the valid set of, range of, or validator function for this value? Should we persist this value? Is it editable? What are it‚Äôs permissions? Do we own it or link to it? How should it be copied when needed? Should it be persisted? etc. These are properties of the slot, not the value it references.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Tm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel this discussion points to how what we call values don‚Äôt include all the information we end up needing to track surrounding typical values. We need something more like slots with arbitrary attributes, a value being just one of them. Others might be things like: What‚Äôs the default value? What it‚Äôs type(s)? How should it get initialized? What are the valid set of, range of, or validator function for this value? Should we persist this value? Is it editable? What are it‚Äôs permissions? Do we own it or link to it? How should it be copied when needed? Should it be persisted? etc. These are properties of the slot, not the value it references."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "USJ899UUD",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1579224012.260100",
        "client_msg_id": "e639452e-d6fb-4833-9a97-5731e41c2edc",
        "text": "Of course, now we're deep into the data-modelling bikeshed. Aren't those pieces of metadata just values in themselves? What if we care about the metadata of the metadata? Which systems have done a good job resolving this? RDF \/ semantic web? EAV[T]?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "29b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of course, now we're deep into the data-modelling bikeshed. Aren't those pieces of metadata just values in themselves? What if we care about the metadata of the metadata? Which systems have done a good job resolving this? RDF \/ semantic web? EAV[T]?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1579224838.260500",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1579225129.000000"
        },
        "client_msg_id": "afd76c5a-65d8-406c-be13-a8a33d156482",
        "text": "Right, though not necessarily meta in the class sense as these properties may be specific to the instance of the object which owns the value. My point is that it may not be appropriate to try to encode too much meta data (as we might be tempted to do with an empty string) into a value. Most languages and object systems lack abstractions around this, and end up scattering this meta info in difficult to work with ways throughout the code. Databases have similar problems.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fNF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right, though not necessarily meta in the class sense as these properties may be specific to the instance of the object which owns the value. My point is that it may not be appropriate to try to encode too much meta data (as we might be tempted to do with an empty string) into a value. Most languages and object systems lack abstractions around this, and end up scattering this meta info in difficult to work with ways throughout the code. Databases have similar problems."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1579231410.000200",
        "client_msg_id": "6bbf7b1d-c6ca-4619-9a99-3f9edd2648fb",
        "text": "Would folks here be interested in going to an FoC Demo Day at Strange Loop in Cleveland this October?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579121644.203400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mb=T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would folks here be interested in going to an FoC Demo Day at Strange Loop in Cleveland this October?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USJ899UUD",
        "type": "message",
        "ts": "1579232040.000500",
        "client_msg_id": "b6882af3-512b-45ba-ae51-b9a6c16c8fe0",
        "text": "Slots + attributes feels more like the right way of thinking about it than anything else I've come across.\n\nA variation: rather than using explicit attributes, there may be a system that understands the history and current state of slots: whether it's empty or full, whether it was always that way, how many times it has changed‚Äîwhatever. It tracks what's happening\/happened to slots.\n\nI think it's just shifting the problem into computation rather than data, so maybe not useful :slightly_smiling_face: But it's what I thought of after reading <@UC2A2ARPT>'s comment.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacd8b29c5cd",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acd8b29c5cd9153ba8f87532661ce874.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "westoncb",
            "display_name": "westoncb",
            "team": "T5TCAFTA9",
            "name": "westoncb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ecs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Slots + attributes feels more like the right way of thinking about it than anything else I've come across.\n\nA variation: rather than using explicit attributes, there may be a system that understands the history and current state of slots: whether it's empty or full, whether it was always that way, how many times it has changed‚Äîwhatever. It tracks what's happening\/happened to slots.\n\nI think it's just shifting the problem into computation rather than data, so maybe not useful "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " But it's what I thought of after reading "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "'s comment."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "Would you attend FoC Demo Day at Strange Loop in Cleveland in October?",
        "type": "message",
        "ts": "1579239299.000900",
        "edited": {
            "user": "B7205UT0R",
            "ts": "1580573688.000000"
        },
        "bot_id": "B7205UT0R",
        "thread_ts": "1579239299.000900",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1579399848.173600",
        "reply_users": [
            "UL3EE9WR1",
            "UE6EFEPTQ",
            "UK3LH8CF5",
            "ULM3U6275"
        ],
        "replies": [
            {
                "user": "UL3EE9WR1",
                "ts": "1579241189.003500"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1579251423.022600"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1579323442.057900"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1579348812.073300"
            },
            {
                "user": "UL3EE9WR1",
                "ts": "1579360398.074000"
            },
            {
                "user": "UL3EE9WR1",
                "ts": "1579360486.074200"
            },
            {
                "user": "ULM3U6275",
                "ts": "1579399848.173600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "section",
                "block_id": "poll-a1404cf4-c1da-4a2c-8d8d-e549e1eaff9d-title-and-menu",
                "text": {
                    "type": "mrkdwn",
                    "text": "*Would you attend FoC Demo Day at Strange Loop in Cleveland in October?*",
                    "verbatim": false
                },
                "accessory": {
                    "type": "overflow",
                    "action_id": "title-and-menu",
                    "options": [
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":information_source: View info",
                                "emoji": true
                            },
                            "value": "view_info"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":pushpin: Capture Decision from Poll",
                                "emoji": true
                            },
                            "value": "capture_decision_from_poll"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":x: Delete Poll",
                                "emoji": true
                            },
                            "value": "delete_poll"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":gear: Go to Settings",
                                "emoji": true
                            },
                            "value": "go_to_settings_from_poll",
                            "url": "https:\/\/simplepoll.rocks\/dashboard\/futureofcoding\/settings\/"
                        }
                    ]
                }
            },
            {
                "type": "section",
                "block_id": "poll-a1404cf4-c1da-4a2c-8d8d-e549e1eaff9d-vote-1",
                "text": {
                    "type": "mrkdwn",
                    "text": ":one: Yes, as attendee.    `2`\n<@UK3LH8CF5>, <@ULM3U6275>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-1",
                    "text": {
                        "type": "plain_text",
                        "text": ":one:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "section",
                "block_id": "poll-a1404cf4-c1da-4a2c-8d8d-e549e1eaff9d-vote-2",
                "text": {
                    "type": "mrkdwn",
                    "text": ":two: Yes, as speaker.    `1`\n<@UK3LH8CF5>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-2",
                    "text": {
                        "type": "plain_text",
                        "text": ":two:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "section",
                "block_id": "poll-a1404cf4-c1da-4a2c-8d8d-e549e1eaff9d-vote-3",
                "text": {
                    "type": "mrkdwn",
                    "text": ":three: Can't make it.    `10`\n<@UC2A2ARPT>, <@UJBAJNFLK>, <@U8A5MS6R1>, <@UMVH31ML3>, <@UA14TGLTC>, <@UBN9AFS0N>, <@UDRQ4V0CT>, <@URMEM88JG>, <@UML4ZEKDK>, <@UHWC9PXBL>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-3",
                    "text": {
                        "type": "plain_text",
                        "text": ":three:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "context",
                "block_id": "+bofQ",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": "Created by <@ULM3U6275> with \/poll",
                        "verbatim": false
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1579241041.002100",
        "client_msg_id": "93F12EBB-DE12-438A-8303-71CCDC6879C0",
        "text": "Cross-linking to this idea in <#CEXED56UR|administrivia>: \n<https:\/\/futureofcoding.slack.com\/archives\/CEXED56UR\/p1579240985018600|https:\/\/futureofcoding.slack.com\/archives\/CEXED56UR\/p1579240985018600>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212228.247100",
        "parent_user_id": "UE6EFEPTQ",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/CEXED56UR\/p1579240985018600",
                "fallback": "[January 16th, 2020 10:03 PM] stefanlesser: The Recurse Center has a ‚ÄúBlaggregator‚Äù ‚Äî a tool where you can register your blog‚Äôs RSS feed and then every new post will automatically be announced in a #blogging Zulip channel.\n<https:\/\/blaggregator.recurse.com\/about\/|https:\/\/blaggregator.recurse.com\/about\/>\n\n1. I think that would be great for us too so we can track and discuss blog posts of members here. I don‚Äôt know how to make that work but surely there must be some Slack app that can do this.\n2. That could be also interesting for automatically posting tweets here although I would like that to be a different channel to distinguish blog posts from tweets.",
                "ts": "1579240985.018600",
                "author_id": "U5STGTB3J",
                "author_subname": "Stefan Lesser",
                "channel_id": "CEXED56UR",
                "is_msg_unfurl": true,
                "text": "The Recurse Center has a ‚ÄúBlaggregator‚Äù ‚Äî a tool where you can register your blog‚Äôs RSS feed and then every new post will automatically be announced in a #blogging Zulip channel.\n<https:\/\/blaggregator.recurse.com\/about\/|https:\/\/blaggregator.recurse.com\/about\/>\n\n1. I think that would be great for us too so we can track and discuss blog posts of members here. I don‚Äôt know how to make that work but surely there must be some Slack app that can do this.\n2. That could be also interesting for automatically posting tweets here although I would like that to be a different channel to distinguish blog posts from tweets.",
                "author_name": "Stefan Lesser",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U5STGTB3J",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/CEXED56UR\/p1579240985018600",
                "footer": "Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z==",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cross-linking to this idea in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CEXED56UR"
                            },
                            {
                                "type": "text",
                                "text": ": \n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/CEXED56UR\/p1579240985018600",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/CEXED56UR\/p1579240985018600"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3EE9WR1",
        "type": "message",
        "ts": "1579241189.003500",
        "client_msg_id": "bf4ea749-db47-47d4-bc6f-b1f907b49079",
        "text": "Strange Loop is in St. Louis :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gb6b8c893530",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4b6b8c8935300db9089a9277d7e76a88.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Alex Miller",
            "display_name": "Alex Miller",
            "team": "T5TCAFTA9",
            "name": "alex678",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579239299.000900",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H+8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Strange Loop is in St. Louis "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1579242253.020700",
        "client_msg_id": "F623B902-5219-440C-8A71-1F6DE2A515EB",
        "text": "In programming we generally have an aversion to ambiguity and like everything to be well defined. That‚Äôs not surprising because whenever we have ambiguity, it usually leads to exceptions, crashes, undefined behavior, or hard to track down bugs.\n\nAs a consequence we came up with a solution: get rid of ambiguity. We introduced more specific types that make the formerly ambiguous cases explicit and\/or limit the possible values to those we know to work with only. We added type checkers that prevent us from compiling ambiguity into our programs.\n\nSo now, if your function needs two integers to work, it only works with integers. If you have a string ‚Äú5‚Äù and want to stick it in there, you‚Äôll need another function that‚Äôs been specifically designed to convert a string into an integer, which includes a ‚Äúnot possible‚Äù scenario and so you‚Äôre forced to deal with that scenario. That‚Äôs all great and clearly works better than what we had before.\n\nSometimes I wonder if that ‚Äúlet‚Äôs make everything more explicit‚Äù solution was maybe not the best one and we should‚Äôve thought more into the opposite direction, about how we can keep the ambiguity, but figure out better ways to deal with it.\n\nAfter all, humans deal with ambiguity quite well. If you read this post and you don‚Äôt know what ‚Äúambiguity‚Äú means, your comprehension process doesn‚Äôt crash and you can finish reading the whole post just fine. You‚Äôre even trying to make sense of what it could mean based on the context. Or you can look it up later and then it probably makes sense without you having to read the whole post again.\n\nI think this is also something that makes programming hard to learn ‚Äî we‚Äôre not used to having to make everything explicit. Most of the world works just fine with lots of ambiguity. Sure, sometimes that approach causes problems too, but look how far we got with it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WPQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In programming we generally have an aversion to ambiguity and like everything to be well defined. That‚Äôs not surprising because whenever we have ambiguity, it usually leads to exceptions, crashes, undefined behavior, or hard to track down bugs.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "As a consequence we came up with a solution: get rid of ambiguity. We introduced more specific types that make the formerly ambiguous cases explicit and\/or limit the possible values to those we know to work with only. We added type checkers that prevent us from compiling ambiguity into our programs.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "So now, if your function needs two integers to work, it only works with integers. If you have a string ‚Äú5‚Äù and want to stick it in there, you‚Äôll need another function that‚Äôs been specifically designed to convert a string into an integer, which includes a ‚Äúnot possible‚Äù scenario and so you‚Äôre forced to deal with that scenario. That‚Äôs all great and clearly works better than what we had before.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Sometimes I wonder if that ‚Äúlet‚Äôs make everything more explicit‚Äù solution was maybe not the best one and we should‚Äôve thought more into the opposite direction, about how we can keep the ambiguity, but figure out better ways to deal with it.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "After all, humans deal with ambiguity quite well. If you read this post and you don‚Äôt know what ‚Äúambiguity‚Äú means, your comprehension process doesn‚Äôt crash and you can finish reading the whole post just fine. You‚Äôre even trying to make sense of what it could mean based on the context. Or you can look it up later and then it probably makes sense without you having to read the whole post again.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "I think this is also something that makes programming hard to learn ‚Äî we‚Äôre not used to having to make everything explicit. Most of the world works just fine with lots of ambiguity. Sure, sometimes that approach causes problems too, but look how far we got with it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "USS2RKB7W",
        "type": "message",
        "ts": "1579243006.021200",
        "client_msg_id": "14ae77ce-bd8f-4535-857e-43c44acde86e",
        "text": ":wave: I‚Äôm here! What‚Äôd I miss?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5fc6754d063",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5fc6754d0638404f00fe93fb1d5a2917.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "",
            "real_name": "Johny Fia",
            "display_name": "Johny Fia",
            "team": "T5TCAFTA9",
            "name": "jf",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579243006.021200",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1579275891.023400",
        "reply_users": [
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1579275891.023400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U9\/CK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "wave",
                                "unicode": "1f44b"
                            },
                            {
                                "type": "text",
                                "text": " I‚Äôm here! What‚Äôd I miss?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]