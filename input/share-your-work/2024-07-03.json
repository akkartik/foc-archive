[
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1719992516.428029",
        "client_msg_id": "89B3C43F-3A76-40C6-9044-5C68C653253D",
        "text": "Is the LLM used to transform text input to function calls in your codebase that handle the alignment and layout of the visual flows?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719988023.569839",
        "parent_user_id": "U079PRQNZQD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IVqoe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is the LLM used to transform text input to function calls in your codebase that handle the alignment and layout of the visual flows?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1719998118.050199",
        "client_msg_id": "16291fdc-23c8-42ef-8cff-a43af6a050c1",
        "text": "<https:\/\/blog.information-superhighway.net\/data-is-code|This blog post> is also worth reading to understand the Forth philosophy.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719438405.632489",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/blog.information-superhighway.net\/data-is-code",
                "service_icon": "https:\/\/blog.information-superhighway.net\/favicon.ico",
                "thumb_url": "https:\/\/blog.information-superhighway.net\/img\/avatars\/b.png",
                "thumb_width": 512,
                "thumb_height": 512,
                "ts": 1588299872,
                "id": 1,
                "original_url": "https:\/\/blog.information-superhighway.net\/data-is-code",
                "fallback": "blog dot information dash superhighway dot net: Data is code — blog dot information dash superhighway dot net",
                "text": "I've been seriously writing Forth, with my homebrew Forth dialect, for about a year now, off and on, and I've noticed something interesti...",
                "title": "Data is code — blog dot information dash superhighway dot net",
                "title_link": "https:\/\/blog.information-superhighway.net\/data-is-code",
                "service_name": "blog dot information dash superhighway dot net",
                "fields": [
                    {
                        "value": "3,314",
                        "title": "Views",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4UlNI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/blog.information-superhighway.net\/data-is-code",
                                "text": "This blog post"
                            },
                            {
                                "type": "text",
                                "text": " is also worth reading to understand the Forth philosophy."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1719998589.258449",
        "client_msg_id": "c78aa15e-4eab-4765-8d85-ab9ef70862fd",
        "text": "<@UGWUJUZHT> Your subroutines-vs-functions discussion reminds me of Scheme. It has \"procedures\" rather than \"functions\", and the explanation I saw (don't remember where, but by Gerald Sussman) is exactly what you say.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719438405.632489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fBDt7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " Your subroutines-vs-functions discussion reminds me of Scheme. It has \"procedures\" rather than \"functions\", and the explanation I saw (don't remember where, but by Gerald Sussman) is exactly what you say."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1720008379.048789",
        "client_msg_id": "c8afe587-cbfa-4a51-9324-090e4a835a2b",
        "text": "ChatGPT says that SICP used the term \"subroutine\" in early editions of SICP. Does this sound like the place? <@UJBAJNFLK>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719438405.632489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h3GAy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ChatGPT says that SICP used the term \"subroutine\" in early editions of SICP. Does this sound like the place? "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U079PRQNZQD",
        "type": "message",
        "ts": "1720019393.386379",
        "client_msg_id": "CABFD46B-44B5-492B-A5B6-E91AEFBBBB48",
        "text": "Hi <@U0123H7JRDM>. The graphical data flow language is LabVIEW. I am using a bunch of behind-the-scenes API‘s to interact with the AST. There is still a lot more work to do for interacting with complex code. This demo was done using GPT-4o.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f8e9e1123d49",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-25\/7345443578225_f8e9e1123d49f08bf7e8_72.png",
            "first_name": "Jim",
            "real_name": "Jim Kring",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jim.kring",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719988023.569839",
        "parent_user_id": "U079PRQNZQD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ixulf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "U0123H7JRDM"
                            },
                            {
                                "type": "text",
                                "text": ". The graphical data flow language is LabVIEW. I am using a bunch of behind-the-scenes API‘s to interact with the AST. There is still a lot more work to do for interacting with complex code. This demo was done using GPT-4o."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1720021591.181699",
        "client_msg_id": "b14e794e-cc50-4dee-aa22-d17ee058d9c8",
        "text": "The current edition of SICP uses \"procedure\", like everyone else talking about Scheme. But I cannot find an explanation for this choice of term in SICP.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719438405.632489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FskBH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The current edition of SICP uses \"procedure\", like everyone else talking about Scheme. But I cannot find an explanation for this choice of term in SICP."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I've been building a sync framework that app developers can integrate, to securely sync state changes between clients. I call it DIPLOMATIC, after the concept of a diplomatic bag which travels through foreign territories, but protected against inspection. So far I've got a couple host implementations targeting Deno and Cloudflare (Workers + Durable Objects + D1), as well as client libraries to build web clients in React and CLI tools in Deno.\n\nThe attached video shows off a demo app that displays and updates a consistent status message across clients. It generates and stores a cryptographic seed (synced via the browser's password manager), queues status changes when offline or not connected to a host, then pushes queued changes when connected, and receives real-time updates using WebSockets.\n\nI've got some rough docs up at <https:\/\/diplomatic-docs.replit.app>, and a walkthrough of the demo app from the video at <https:\/\/diplomatic-docs.replit.app\/docs\/demos\/status.html>.\n\nThe backstory is that, for a while I've wanted to build a grand life-planning app, like a TODO list that can operate at the decade-level rather than the daily-level. But I kept running into these blocks:\na) I'll want to access it from phone and desktop, so it needs a sync solution,\nb) maintaining servers is a pain, and\nc) a life-planning tool will necessarily have personal info, so it shouldn't hang out in plaintext on someone else's computers.\n\nThese sorts of issues aren't unique to this tool. In fact, I think they're common enough to merit a general solution. The Web 2.0 client\/server model gave us easy software updates and access from multiple devices with consistent data. But we backslid by making all app data visible to the software provider and relying on them to maintain their servers. Mobile apps gave us the additional expectation that we could access our data while offline.\n\nI think there's a simple solution to get the best of all worlds, by encoding app state changes as objects (the Event Sourcing pattern), then encrypting those deltas and shipping them off to a server which relays to other clients, which then decrypt and apply the changes locally. With this architecture, the relay servers all have a standard interface (not application-specific), and they're blind to delta contents, so hosting becomes a commodity. This means companies could specialize in just running these hosts, giving application developers a secure backend without the maintenance burden. It also creates a standardized import\/export format for app state—the delta log, so you get a backup format for free.\n\nI'm only designing around single-user apps at the moment. Having a \"last-wins\" policy for conflicts makes things nice and simple..\n\nIf anyone knows of related work I should check out, has suggestions, wants to collaborate, ... let me know. The code is still a bit messy, but I'm planning to tidy that up and open the repo soon.",
        "files": [
            {
                "id": "F07AYQVR8HG",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UPDJV04FR",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UUSCY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been building a sync framework that app developers can integrate, to securely sync state changes between clients. I call it DIPLOMATIC, after the concept of a diplomatic bag which travels through foreign territories, but protected against inspection. So far I've got a couple host implementations targeting Deno and Cloudflare (Workers + Durable Objects + D1), as well as client libraries to build web clients in React and CLI tools in Deno.\n\nThe attached video shows off a demo app that displays and updates a consistent status message across clients. It generates and stores a cryptographic seed (synced via the browser's password manager), queues status changes when offline or not connected to a host, then pushes queued changes when connected, and receives real-time updates using WebSockets.\n\nI've got some rough docs up at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/diplomatic-docs.replit.app"
                            },
                            {
                                "type": "text",
                                "text": ", and a walkthrough of the demo app from the video at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/diplomatic-docs.replit.app\/docs\/demos\/status.html"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThe backstory is that, for a while I've wanted to build a grand life-planning app, like a TODO list that can operate at the decade-level rather than the daily-level. But I kept running into these blocks:\na) I'll want to access it from phone and desktop, so it needs a sync solution,\nb) maintaining servers is a pain, and\nc) a life-planning tool will necessarily have personal info, so it shouldn't hang out in plaintext on someone else's computers.\n\nThese sorts of issues aren't unique to this tool. In fact, I think they're common enough to merit a general solution. The Web 2.0 client\/server model gave us easy software updates and access from multiple devices with consistent data. But we backslid by making all app data visible to the software provider and relying on them to maintain their servers. Mobile apps gave us the additional expectation that we could access our data while offline.\n\nI think there's a simple solution to get the best of all worlds, by encoding app state changes as objects (the Event Sourcing pattern), then encrypting those deltas and shipping them off to a server which relays to other clients, which then decrypt and apply the changes locally. With this architecture, the relay servers all have a standard interface (not application-specific), and they're blind to delta contents, so hosting becomes a commodity. This means companies could specialize in just running these hosts, giving application developers a secure backend without the maintenance burden. It also creates a standardized import\/export format for app state—the delta log, so you get a backup format for free.\n\nI'm only designing around single-user apps at the moment. Having a \"last-wins\" policy for conflicts makes things nice and simple..\n\nIf anyone knows of related work I should check out, has suggestions, wants to collaborate, ... let me know. The code is still a bit messy, but I'm planning to tidy that up and open the repo soon."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1720039689.044269",
        "client_msg_id": "bd108ec2-5cdd-48da-a9b4-832b92b1397f",
        "thread_ts": "1720039689.044269",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1725010049.984709",
        "reply_users": [
            "U02QC0PPER3",
            "UPDJV04FR",
            "U05EREC3DCK",
            "UDRF3ALP4"
        ],
        "replies": [
            {
                "user": "U02QC0PPER3",
                "ts": "1720111704.809189"
            },
            {
                "user": "UPDJV04FR",
                "ts": "1720114048.386569"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1720446093.820859"
            },
            {
                "user": "UPDJV04FR",
                "ts": "1720453673.354699"
            },
            {
                "user": "U05EREC3DCK",
                "ts": "1722741137.400299"
            },
            {
                "user": "UPDJV04FR",
                "ts": "1722794238.144879"
            },
            {
                "user": "UDRF3ALP4",
                "ts": "1725010049.984709"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/diplomatic-docs.replit.app\/",
                "id": 1,
                "original_url": "https:\/\/diplomatic-docs.replit.app",
                "fallback": "DIPLOMATIC",
                "text": "Sync framework",
                "title": "DIPLOMATIC",
                "title_link": "https:\/\/diplomatic-docs.replit.app\/",
                "service_name": "diplomatic-docs.replit.app"
            },
            {
                "from_url": "https:\/\/diplomatic-docs.replit.app\/docs\/demos\/status.html",
                "id": 2,
                "original_url": "https:\/\/diplomatic-docs.replit.app\/docs\/demos\/status.html",
                "fallback": "STATUS | DIPLOMATIC",
                "text": "Sync framework",
                "title": "STATUS | DIPLOMATIC",
                "title_link": "https:\/\/diplomatic-docs.replit.app\/docs\/demos\/status.html",
                "service_name": "diplomatic-docs.replit.app"
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    }
]