[
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1550306151.004500",
        "client_msg_id": "7a328269-0906-4777-8f50-f2ef0d56bbe7",
        "text": "Agreed! Idyll is a very cool project that I've run across many times as well. Wonderful to have you here",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550269464.002800",
        "parent_user_id": "UG90V870D",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lIAS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed! Idyll is a very cool project that I've run across many times as well. Wonderful to have you here"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEG9ECNSU",
        "type": "message",
        "ts": "1550319737.004800",
        "client_msg_id": "adcd92ba-c0b1-4496-9328-22d650dd8112",
        "text": "+1, I love Idyll",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "55c4c311a568",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/507259080482_55c4c311a5688471f4f9_72.jpg",
            "first_name": "Nick",
            "real_name": "Nick Nikolov",
            "display_name": "Nick Nikolov",
            "team": "T5TCAFTA9",
            "name": "nick259",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550269464.002800",
        "parent_user_id": "UG90V870D",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PhqJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "+1, I love Idyll"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1550366974.005200",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1550380354.000000"
        },
        "client_msg_id": "f8a1463f-2d6d-4607-a537-56f5ec9bdbe7",
        "text": "\"1) expressing computation is a solved problem. We have Lambda calculus, Lisp-like functions, Smalltalk-like messages. These are fine. We don't need to worry about these.\"\n\nI'm not sure.... if it were a solved problem, couldn't we all agree about how to do it?\n\nEvery language seems to express even basic computation a little differently. What is 0x4000'0000 + 0x9000'0000? In some languages it's a syntax error, in some it's +0xD000'0000, in some -805'306'368, and in some you get a runtime exception. There are seemingly legitimate reasons why each language made the choice it did, and I don't think we've done a good job at standardizing any of the basic decisions that go into our languages. We certainly haven't specified things in a way that would make it practical to convert code between programming languages, and so everybody picks one language in which to write a library and if the language from which you'd like to use the library isn't the same language, you're sh*t out of luck.\n\nThat's why one of my big interests is on standardizing this stuff without belittling any of the popular semantic choices - I mean, it's easy for comp-sci types, for example, to say \"+0xD000'0000 is obviously the right answer, we just need our systems to use that as the answer\", but no, in reality -805'306'368 or an OverflowException might be a better answer in a particular situation.\n\n\"The second of these thoughts has me looking into logic programming in Prolog and Minikanren where we \"flatten\" our program into a sequence of facts and rules which can be added in more or less any order, leaving the inference engine running around drawing out the implications.\"\n\nMy thinking on this is that this is something I definitely want my programming environment to be *able* to do, but I think the Prolog lovers were mistaken in thinking that in the future all programming would basically be like Prolog programming. I believe there should be a programming language\/environment that lets you do *everything* fairly seamlessly - everything from low-level-but-very-fast hand-written vectorized code with mod-2^32 arithmetic, up to theorem proving and prolog-style stuff where the computer magically finds the solution for you (this code may also be fast, eventually, when the underlying algorithms are both optimized and use dynamic codegen). As a consequence I think that the foundation for such an environment must be somehow imperative in its nature, even though functional \/ declarative \/ constraint-based \/ domain-specific ways of programming would be preferred most of the time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543869198.036500",
        "parent_user_id": "UEKEQGB9C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tAVMo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"1) expressing computation is a solved problem. We have Lambda calculus, Lisp-like functions, Smalltalk-like messages. These are fine. We don't need to worry about these.\"\n\nI'm not sure.... if it were a solved problem, couldn't we all agree about how to do it?\n\nEvery language seems to express even basic computation a little differently. What is 0x4000'0000 + 0x9000'0000? In some languages it's a syntax error, in some it's +0xD000'0000, in some -805'306'368, and in some you get a runtime exception. There are seemingly legitimate reasons why each language made the choice it did, and I don't think we've done a good job at standardizing any of the basic decisions that go into our languages. We certainly haven't specified things in a way that would make it practical to convert code between programming languages, and so everybody picks one language in which to write a library and if the language from which you'd like to use the library isn't the same language, you're sh*t out of luck.\n\nThat's why one of my big interests is on standardizing this stuff without belittling any of the popular semantic choices - I mean, it's easy for comp-sci types, for example, to say \"+0xD000'0000 is obviously the right answer, we just need our systems to use that as the answer\", but no, in reality -805'306'368 or an OverflowException might be a better answer in a particular situation.\n\n\"The second of these thoughts has me looking into logic programming in Prolog and Minikanren where we \"flatten\" our program into a sequence of facts and rules which can be added in more or less any order, leaving the inference engine running around drawing out the implications.\"\n\nMy thinking on this is that this is something I definitely want my programming environment to be "
                            },
                            {
                                "type": "text",
                                "text": "able",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to do, but I think the Prolog lovers were mistaken in thinking that in the future all programming would basically be like Prolog programming. I believe there should be a programming language\/environment that lets you do "
                            },
                            {
                                "type": "text",
                                "text": "everything",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " fairly seamlessly - everything from low-level-but-very-fast hand-written vectorized code with mod-2^32 arithmetic, up to theorem proving and prolog-style stuff where the computer magically finds the solution for you (this code may also be fast, eventually, when the underlying algorithms are both optimized and use dynamic codegen). As a consequence I think that the foundation for such an environment must be somehow imperative in its nature, even though functional \/ declarative \/ constraint-based \/ domain-specific ways of programming would be preferred most of the time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1550368121.006600",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1557439518.000000"
        },
        "client_msg_id": "3bec85ff-b641-4b17-8303-092d43b0ceba",
        "text": "I’ve been dreaming of making some sort of “ultimate programming language” for over 15 years—but to my surprise, never found any like-minded folks until recently. I registered <http:\/\/loyc.net\/> in 2007 with the idea of making a democratically-extensible compiler with multiple input syntaxes; as time passed it morphed into a set of general ideas for language building. More concretely I wrote the C# parser generator LLLPG and the Lisp-inspired macro system it runs within (it's designed so that the same macro system could support any programming language, I just haven't had time to go beyond C#). But for this group the most relevant thing I've made is LESv2 and LESv3, two simple languages to represent universal syntax trees. I've worked a bit with Jonathan Van der Cruise who made Flame, a compiler-building framework for C#. I learned about Haxe just this year, but I've wanted to build something for several years that would let you write libraries targeting several languages at once. I think I could build something better than Haxe and Cito (Ć) - if only I had some funding and manpower. I’d also be interested in a system for bridging programming languages at run-time so they could communicate seamlessly. For now, I’m too busy at my new job to do anything, including hang out here! (truth be told it's a horrible job and I desperately wish to find something better.) I’ve been bursting with ideas for years and hate being unable to execute on them.\n\nLinks:\n• Loyc trees <http:\/\/loyc.net\/loyc-trees>\n• LES <http:\/\/loyc.net\/les> &lt;= Use this to prototype new programming languages\n• LLLPG <http:\/\/ecsharp.net\/lllpg>\n• LeMP <http:\/\/ecsharp.net\/lemp>\n• Flame <https:\/\/github.com\/jonathanvdc\/Flame>\n• Haxe <https:\/\/haxe.org>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550368121.006600",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1553211006.057700",
        "reply_users": [
            "UCKRZS3DZ",
            "UEQ6M68H0",
            "UF5PAGQQ4",
            "UD6EXQVM0"
        ],
        "replies": [
            {
                "user": "UCKRZS3DZ",
                "ts": "1550387608.017600"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1550398412.018200"
            },
            {
                "user": "UF5PAGQQ4",
                "ts": "1550403783.018400"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1551034989.002100"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1553211006.057700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SKPLT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve been dreaming of making some sort of “ultimate programming language” for over 15 years—but to my surprise, never found any like-minded folks until recently. I registered "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/loyc.net\/"
                            },
                            {
                                "type": "text",
                                "text": " in 2007 with the idea of making a democratically-extensible compiler with multiple input syntaxes; as time passed it morphed into a set of general ideas for language building. More concretely I wrote the C# parser generator LLLPG and the Lisp-inspired macro system it runs within (it's designed so that the same macro system could support any programming language, I just haven't had time to go beyond C#). But for this group the most relevant thing I've made is LESv2 and LESv3, two simple languages to represent universal syntax trees. I've worked a bit with Jonathan Van der Cruise who made Flame, a compiler-building framework for C#. I learned about Haxe just this year, but I've wanted to build something for several years that would let you write libraries targeting several languages at once. I think I could build something better than Haxe and Cito (Ć) - if only I had some funding and manpower. I’d also be interested in a system for bridging programming languages at run-time so they could communicate seamlessly. For now, I’m too busy at my new job to do anything, including hang out here! (truth be told it's a horrible job and I desperately wish to find something better.) I’ve been bursting with ideas for years and hate being unable to execute on them.\n\nLinks:\n• Loyc trees "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/loyc.net\/loyc-trees"
                            },
                            {
                                "type": "text",
                                "text": "\n• LES "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/loyc.net\/les"
                            },
                            {
                                "type": "text",
                                "text": " <= Use this to prototype new programming languages\n• LLLPG "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/ecsharp.net\/lllpg"
                            },
                            {
                                "type": "text",
                                "text": "\n• LeMP "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/ecsharp.net\/lemp"
                            },
                            {
                                "type": "text",
                                "text": "\n• Flame "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jonathanvdc\/Flame"
                            },
                            {
                                "type": "text",
                                "text": "\n• Haxe "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/haxe.org"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "wave",
                "users": [
                    "U8A5MS6R1",
                    "UC2A2ARPT",
                    "U85HCL7JP",
                    "UCKRZS3DZ",
                    "UA14TGLTC",
                    "U5TCAFTD3",
                    "UCUSW7WVD",
                    "UDLFL2HD4",
                    "UEGFXUK3M"
                ],
                "count": 9
            },
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1550369313.016100",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1551043970.000000"
        },
        "client_msg_id": "1e5f401c-3dd9-421f-ba3e-d5dd5133e0a5",
        "text": "I want to work on the foundations of programming and on interoperability, and I think my work is relevant to everyone here. Many researchers, for instance, have made experimental programming languages and environments - but they can't interoperate with each other! Many languages can only interoperate with C, one of the most archaic languages in existence!\n\nWe must break down these silo walls, so I want to work on those common foundations: to figure out a way to let you write a library in a language that will convert itself to several different languages and run easily on many platforms. To figure out how to standardize everything from point data types (X,Y coordinates), to D-style ranges (an abstraction for subsequences), to whatever data types neural networks are made of, to the way debuggers work. (current thinking: a StackOverflow-like site where people vote on interface designs?). In short, I want to solve the technical problems that create friction in both the niche of programming language design and in the broader world of software engineering. (But, as I say, no time, can't do it. It's funny to have enough urgent work to fill a lifetime, but treat it like a minor hobby to do on weekends sometimes.)\n\nOh and Bret Victor inspired me yada yada I invent on principle blah blah. Like the rest of y'all :slightly_smiling_face: But seriously, Bret Victor FTW.\n\nTwitter: @DPiepgrass  Site: <http:\/\/david.loyc.net|david.loyc.net>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550369313.016100",
        "reply_count": 7,
        "reply_users_count": 6,
        "latest_reply": "1551156433.010200",
        "reply_users": [
            "UC21F8Q48",
            "UCUSW7WVD",
            "UAVCC2X70",
            "UEQ6M68H0",
            "UA14TGLTC",
            "UD6EXQVM0"
        ],
        "replies": [
            {
                "user": "UC21F8Q48",
                "ts": "1550544849.019500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1550557566.019800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1550706692.000300"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1550885882.001000"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1550909672.001400"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1550909811.001600"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1551156433.010200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LABc1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to work on the foundations of programming and on interoperability, and I think my work is relevant to everyone here. Many researchers, for instance, have made experimental programming languages and environments - but they can't interoperate with each other! Many languages can only interoperate with C, one of the most archaic languages in existence!\n\nWe must break down these silo walls, so I want to work on those common foundations: to figure out a way to let you write a library in a language that will convert itself to several different languages and run easily on many platforms. To figure out how to standardize everything from point data types (X,Y coordinates), to D-style ranges (an abstraction for subsequences), to whatever data types neural networks are made of, to the way debuggers work. (current thinking: a StackOverflow-like site where people vote on interface designs?). In short, I want to solve the technical problems that create friction in both the niche of programming language design and in the broader world of software engineering. (But, as I say, no time, can't do it. It's funny to have enough urgent work to fill a lifetime, but treat it like a minor hobby to do on weekends sometimes.)\n\nOh and Bret Victor inspired me yada yada I invent on principle blah blah. Like the rest of y'all "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " But seriously, Bret Victor FTW.\n\nTwitter: @DPiepgrass  Site: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/david.loyc.net",
                                "text": "david.loyc.net"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC",
                    "UDJ2TKB99"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1550387608.017600",
        "edited": {
            "user": "UCKRZS3DZ",
            "ts": "1550387886.000000"
        },
        "client_msg_id": "9a9de7bb-4579-4e57-9789-fb2781b9e510",
        "text": "These Loyc trees remind a bit <https:\/\/ipld.io\/>\nAlso a DAG",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550368121.006600",
        "parent_user_id": "UD6EXQVM0",
        "attachments": [
            {
                "service_name": "IPLD",
                "title": "IPLD - The data model of the content-addressable web",
                "title_link": "https:\/\/ipld.io\/",
                "text": "The data model of the content-addressable web. It allows us to treat all hash-linked data structures as subsets of a unified information space, unifying all data models that link data with hashes as instances of IPLD.",
                "fallback": "IPLD: IPLD - The data model of the content-addressable web",
                "thumb_url": "https:\/\/ipld.io\/img\/ipld-logo.png",
                "from_url": "https:\/\/ipld.io\/",
                "thumb_width": 146,
                "thumb_height": 166,
                "service_icon": "https:\/\/ipld.io\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/ipld.io\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1VYN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These Loyc trees remind a bit "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ipld.io\/"
                            },
                            {
                                "type": "text",
                                "text": "\nAlso a DAG"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]