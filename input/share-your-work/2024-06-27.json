[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1719472909.635179",
        "client_msg_id": "a1781e07-16dc-43d7-a8e2-72842b07dce9",
        "text": "Thanks for posting this video! Question: what's the level of granularity of your diagram notation? Put differently, how is the operation of each node defined? By another diagram, by traditional code, or yet something else?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719438405.632489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WaorO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for posting this video! Question: what's the level of granularity of your diagram notation? Put differently, how is the operation of each node defined? By another diagram, by traditional code, or yet something else?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1719483191.966739",
        "client_msg_id": "4733cc74-3c99-48b3-8cba-19b1b2921437",
        "text": "There are 2 kinds of node. Containers are recursively defined - they can contain Containers and Leaves. Leaf nodes contain code and are not recursive.\n\nIn analogy, this is much like Lisp lists. Lists can contain Lists or Atoms. Atoms are the bottom.\n\nContainers run\/loop in multiple steps. A Container is \"busy\" if any of its children is \"busy\" (recursively). Leaves run in one gulp.\n\nA Container can inhale a single message from its input queue only when it is not busy.\n\nRouting of messages between children is performed by the Container, not the children. Children cannot know where their inputs come from nor where their outputs are sent to. A Container cannot know what kind of component each child is and may compose a mix of child components of various kinds.\n\nIn analogy, Containers are like \"main loops\" in windowing systems, except that it's turtles all the way down - a \"main loop\" might contain other \"main loops\" and so on.\n\nIn analogy, a Container is like a Unix command-line command. Containers have several stdins and several stdouts. You can't tell from the outside (nor do you care), if the command is a bash script or a lump of C code. But, it is done much more efficiently than using Unix processes (think: closures and OO queue objects).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719438405.632489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ft9hY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are 2 kinds of node. Containers are recursively defined - they can contain Containers and Leaves. Leaf nodes contain code and are not recursive.\n\nIn analogy, this is much like Lisp lists. Lists can contain Lists or Atoms. Atoms are the bottom.\n\nContainers run\/loop in multiple steps. A Container is \"busy\" if any of its children is \"busy\" (recursively). Leaves run in one gulp.\n\nA Container can inhale a single message from its input queue only when it is not busy.\n\nRouting of messages between children is performed by the Container, not the children. Children cannot know where their inputs come from nor where their outputs are sent to. A Container cannot know what kind of component each child is and may compose a mix of child components of various kinds.\n\nIn analogy, Containers are like \"main loops\" in windowing systems, except that it's turtles all the way down - a \"main loop\" might contain other \"main loops\" and so on.\n\nIn analogy, a Container is like a Unix command-line command. Containers have several stdins and several stdouts. You can't tell from the outside (nor do you care), if the command is a bash script or a lump of C code. But, it is done much more efficiently than using Unix processes (think: closures and OO queue objects)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1719483339.903509",
        "client_msg_id": "06a8ff38-f034-42c9-a23b-ba5f6de42ce1",
        "text": "In this way, you can structure a system in layers that elide details. The details are all still there, but the reader is not forced to understand every niggly detail unless the reader wants to dig deeply.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719438405.632489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ffsgn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In this way, you can structure a system in layers that elide details. The details are all still there, but the reader is not forced to understand every niggly detail unless the reader wants to dig deeply."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "URKQXRCAC",
        "type": "message",
        "ts": "1719488246.550659",
        "client_msg_id": "4292974e-2163-4d54-8bac-e478d80a64e2",
        "text": "Do we actually classify to concrete things? Like 'dog' or do we (also?) classify to behaviour? The thing that has dog-like behaviour. The barking of the neighbours dog (which I btw refer to as 'Sarah' instead of 'dog' when talking to the neighbour) is the topic of a short interaction. That could just as well have been an interaction about one of their sons, which also barks (i.e. makes loud noises) at times. I'm trying to move towards more behaviour-driven classifications and a model in which objects can have multiple behaviours. This would be dynamic, adding or removing behaviour based on the context. So not a static class hierarchy. Objects would receive messages (like in an inbox) and decide what to do with it. The default behaviour would be to execute a method with the same name (aka #selector, yup Smalltalk-like).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a55b20870fb9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-23\/6253994675665_a55b20870fb92473e7e8_72.png",
            "first_name": "Erik",
            "real_name": "Erik Stel",
            "display_name": "Erik Stel",
            "team": "T5TCAFTA9",
            "name": "foc572",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1399S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do we actually classify to concrete things? Like 'dog' or do we (also?) classify to behaviour? The thing that has dog-like behaviour. The barking of the neighbours dog (which I btw refer to as 'Sarah' instead of 'dog' when talking to the neighbour) is the topic of a short interaction. That could just as well have been an interaction about one of their sons, which also barks (i.e. makes loud noises) at times. I'm trying to move towards more behaviour-driven classifications and a model in which objects can have multiple behaviours. This would be dynamic, adding or removing behaviour based on the context. So not a static class hierarchy. Objects would receive messages (like in an inbox) and decide what to do with it. The default behaviour would be to execute a method with the same name (aka #selector, yup Smalltalk-like)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1719494868.108759",
        "client_msg_id": "d01bd389-f918-4a79-adfe-13a8781b0dec",
        "text": "Thanks <@UGWUJUZHT>, that sounds like a very reasonable design!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719438405.632489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zqKf2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": ", that sounds like a very reasonable design!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    }
]