[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589871958.466200",
        "client_msg_id": "09904C5A-3A57-4640-82AA-DFAD8E92D803",
        "text": "I mean, if we're playing the hits.. <https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/|https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35",
        "attachments": [
            {
                "service_name": "InfoQ",
                "title": "Simple Made Easy",
                "title_link": "https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/",
                "text": "Rich Hickey emphasizes simplicity’s virtues over easiness’, showing that while many choose easiness they may end up with complexity, and the better way is to choose easiness along the simplicity path.",
                "fallback": "InfoQ: Simple Made Easy",
                "thumb_url": "https:\/\/res.infoq.com\/presentations\/Simple-Made-Easy\/en\/mediumimage\/rich-hickey-big.jpg",
                "from_url": "https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/",
                "thumb_width": 270,
                "thumb_height": 200,
                "service_icon": "https:\/\/cdn.infoq.com\/statics_s1_20200519-0308\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5dyBj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mean, if we're playing the hits.. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/",
                                "text": "https:\/\/www.infoq.com\/presentations\/Simple-Made-Easy\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70",
                    "UT9TWSZB5"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589872006.466600",
        "client_msg_id": "85520BC8-84A1-41B3-9312-44754ECB6D2C",
        "text": "<https:\/\/youtube.com\/watch?v=_ahvzDzKdB0|https:\/\/youtube.com\/watch?v=_ahvzDzKdB0>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Growing a Language, by Guy Steele",
                "title_link": "https:\/\/youtube.com\/watch?v=_ahvzDzKdB0",
                "author_name": "Bill Pugh",
                "author_link": "https:\/\/www.youtube.com\/user\/wwp1960",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/_ahvzDzKdB0\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Growing a Language, by Guy Steele",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/_ahvzDzKdB0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/youtube.com\/watch?v=_ahvzDzKdB0",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtube.com\/watch?v=_ahvzDzKdB0"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bWP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/youtube.com\/watch?v=_ahvzDzKdB0",
                                "text": "https:\/\/youtube.com\/watch?v=_ahvzDzKdB0"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1589886784.467900",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1589886893.000000"
        },
        "client_msg_id": "66af45b8-008d-446d-af44-a20343ffa09c",
        "text": "<@UA14TGLTC> Yeah, I thought up about creating a top level building view kind of thing that can be used to visualize the trees of Lambda Calculus. Will allow for a city scape visualization.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bR7E6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " Yeah, I thought up about creating a top level building view kind of thing that can be used to visualize the trees of Lambda Calculus. Will allow for a city scape visualization."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1589886838.468200",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1589886874.000000"
        },
        "client_msg_id": "151395b2-886a-4c3b-bd75-7c65a44e10d2",
        "text": "<@UD6V09AQ4> <@UFB8STN7K> Those are pretty nice. I also a found out a cool Lambda REPL here: <https:\/\/tarao.github.io\/LambdaJS>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ejrJQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD6V09AQ4"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " Those are pretty nice. I also a found out a cool Lambda REPL here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tarao.github.io\/LambdaJS"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1589898927.469600",
        "client_msg_id": "e2f79e92-1be0-4ebb-accb-1e41ff676129",
        "text": "Let us not forget this: <https:\/\/www.famicol.in\/language_checklist.html|https:\/\/www.famicol.in\/language_checklist.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VxmzF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let us not forget this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.famicol.in\/language_checklist.html",
                                "text": "https:\/\/www.famicol.in\/language_checklist.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "face_with_rolling_eyes",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD31LGQKB",
        "type": "message",
        "ts": "1589899943.469800",
        "client_msg_id": "f36c640a-38db-4569-9b1b-78e6b8de365d",
        "text": "Lukas suss's stuff. Might be slightly out of scope: Take a look at Lukas Süss (@sluk_m): <https:\/\/twitter.com\/sluk_m?s=09|https:\/\/twitter.com\/sluk_m?s=09>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7e6e0f8e031",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-19\/699535022069_b7e6e0f8e031cdcf896f_72.jpg",
            "first_name": "",
            "real_name": "andrew blinn",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "me1856",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H",
        "attachments": [
            {
                "title": "Lukas Süss (@sluk_m) | Twitter",
                "title_link": "https:\/\/twitter.com\/sluk_m?s=09",
                "text": "The latest Tweets from Lukas Süss (@sluk_m): \"More of my thoughts on visualization of typed holes. <https:\/\/t.co\/9W6P438Jxo>\"",
                "fallback": "Lukas Süss (@sluk_m) | Twitter",
                "from_url": "https:\/\/twitter.com\/sluk_m?s=09",
                "service_icon": "https:\/\/abs.twimg.com\/icons\/apple-touch-icon-192x192.png",
                "service_name": "twitter.com",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/sluk_m?s=09"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eplxL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lukas suss's stuff. Might be slightly out of scope: Take a look at Lukas Süss (@sluk_m): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/sluk_m?s=09",
                                "text": "https:\/\/twitter.com\/sluk_m?s=09"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UHWC9PXBL",
        "thread_ts": "1589560472.416600",
        "root": {
            "user": "UHWC9PXBL",
            "type": "message",
            "ts": "1589560472.416600",
            "edited": {
                "user": "UHWC9PXBL",
                "ts": "1589560554.000000"
            },
            "client_msg_id": "076a3875-ddea-4b43-9f3d-b8ee66841df7",
            "text": "----TODAYS DEVELOPMENT COMPLAINTS----\nContext: I’m reimplementing a dragbox select a la: <https:\/\/simonwep.github.io\/selection\/> or many other libraries because I need to deal with elements that are overlapping (I’m using it for dom element selection, but you could imagine selecting items in an outline and you’d have 60% of the hairiness).\n---ISSUES IN THREAD BELOW---",
            "team": "T5TCAFTA9",
            "thread_ts": "1589560472.416600",
            "reply_count": 13,
            "reply_users_count": 2,
            "latest_reply": "1589915224.479000",
            "reply_users": [
                "UHWC9PXBL",
                "UKDM3GLAJ"
            ],
            "replies": [
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589560587.417000"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589560594.417300"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589577561.424900"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589911021.470400"
                },
                {
                    "user": "UKDM3GLAJ",
                    "ts": "1589912335.472600"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589913230.474300"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589913307.474500"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589913406.474700"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589913446.474900"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589913497.475300"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589913510.475500"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589915075.478400"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1589915224.479000"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "service_name": "Selectionjs",
                    "title": "Selectionjs - Selection engine",
                    "title_link": "https:\/\/simonwep.github.io\/selection\/",
                    "text": "Simple and lightweight library to realize visual DOM Selections, like on your Desktop. No jQuery. Supports any CSS library, e.g. Bootstrap. Including vertical &amp; horizontal scroll support.",
                    "fallback": "Selectionjs: Selectionjs - Selection engine",
                    "from_url": "https:\/\/simonwep.github.io\/selection\/",
                    "id": 1,
                    "original_url": "https:\/\/simonwep.github.io\/selection\/"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "F4tNt",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "----TODAYS DEVELOPMENT COMPLAINTS----\nContext: I’m reimplementing a dragbox select a la: "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/simonwep.github.io\/selection\/"
                                },
                                {
                                    "type": "text",
                                    "text": " or many other libraries because I need to deal with elements that are overlapping (I’m using it for dom element selection, but you could imagine selecting items in an outline and you’d have 60% of the hairiness).\n---ISSUES IN THREAD BELOW---"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1589911021.470400",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1589911106.000000"
        },
        "client_msg_id": "c1e53e4d-e971-4ee9-a8c9-50f7b7313876",
        "text": "on the off chance anyone around here is really into tree querying algorithms: I’m trying to grab and copy DOM elements out of the browser with a homemade box-select extension—which has some issues because the DOM is a tree, so if you drag select over a parent and its children I end up double-counting children (because their nodes are still attached to their parents). i suspect there are better ways to do this (either algorithmically, or using some APIs I don’t know about). If anyone has any feedback please let me know in this thread!",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QzW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "on the off chance anyone around here is really into tree querying algorithms: I’m trying to grab and copy DOM elements out of the browser with a homemade box-select extension—which has some issues because the DOM is a tree, so if you drag select over a parent and its children I end up double-counting children (because their nodes are still attached to their parents). i suspect there are better ways to do this (either algorithmically, or using some APIs I don’t know about). If anyone has any feedback please let me know in this thread!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589911601.472100",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1589911869.000000"
        },
        "client_msg_id": "c8e2c5a2-2a55-47a0-bf6a-7351ce17702a",
        "text": "Does anyone have handy any criticisms of Self-style prototypal inheritance? I'm not interested in performance, just the idea as a mechanism for dynamic data composition that lets you manage duplication vs references. What causes it to fail (eg: become unmanageable), where other kinds of data composition do not?\n\nAlso accepting links to good summaries of how Pharo handles inheritance\/composition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "reply_count": 35,
        "reply_users_count": 10,
        "latest_reply": "1590062671.017000",
        "reply_users": [
            "UL5AX4G2H",
            "UAJ9DV971",
            "UHWC9PXBL",
            "UC2A2ARPT",
            "U010SQSJGLS",
            "UEQ6M68H0",
            "UA14TGLTC",
            "UE1JQM9HQ",
            "UEBG0NPDK",
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "UL5AX4G2H",
                "ts": "1589912777.472800"
            },
            {
                "user": "UAJ9DV971",
                "ts": "1589913054.473100"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1589913095.474100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1589914094.475800"
            },
            {
                "user": "U010SQSJGLS",
                "ts": "1589914243.476200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1589914254.476400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1589914447.476600"
            },
            {
                "user": "U010SQSJGLS",
                "ts": "1589914495.476800"
            },
            {
                "user": "U010SQSJGLS",
                "ts": "1589914526.477000"
            },
            {
                "user": "U010SQSJGLS",
                "ts": "1589914557.477200"
            },
            {
                "user": "U010SQSJGLS",
                "ts": "1589914579.477400"
            },
            {
                "user": "UL5AX4G2H",
                "ts": "1589914671.477700"
            },
            {
                "user": "UL5AX4G2H",
                "ts": "1589914732.477900"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1589918793.479400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1589928956.479600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1589946606.481000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1589949016.481300"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1589958826.483100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1589962542.484800"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1589973959.485900"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1589974024.486100"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1589974245.486500"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1589974921.486700"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1589975171.486900"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1589975336.487300"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1589975396.487700"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1589975408.487900"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1589984022.496900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1590000588.004200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1590040877.011100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1590041931.011300"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1590043550.011800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1590044891.013700"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1590045515.013900"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1590062671.017000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Py",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone have handy any criticisms of Self-style prototypal inheritance? I'm not interested in performance, just the idea as a mechanism for dynamic data composition that lets you manage duplication vs references. What causes it to fail (eg: become unmanageable), where other kinds of data composition do not?\n\nAlso accepting links to good summaries of how Pharo handles inheritance\/composition."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1589912335.472600",
        "client_msg_id": "f6a67eaa-edc5-4c12-9aa2-fd20797e41c1",
        "text": "Let me see if I understand: You’re using the mouse to select a rectangle, and checking all of the dom elements to see if they live inside of that rectangle, and including the ones that do, along with their children?\nA few ideas:\n• Can you just ignore children?\n• What about: for each element you find in the rectangle, walk up the parent tree until you find a node that doesn’t live in the rectangle. The node before that is a top-level parent in your rectangle. If you find all of the top level-parents, and include all of their children, then you’ll probably not have the duplication issue. \nI’d be concerned about elements that don’t have boundingRects inside of their parent’s boundingRect, though (I think using `transform` can probably cause that). But if you’re including children regardless already, then you’d already have that problem.\n• I think a more robust way to do this might be to walk the tree once (or on updates) and build a quad tree, or other space-partitioning lookup. Then you wouldn’t have to rely on parent-child relationships at all.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4LhSw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let me see if I understand: You’re using the mouse to select a rectangle, and checking all of the dom elements to see if they live inside of that rectangle, and including the ones that do, along with their children?\nA few ideas:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Can you just ignore children?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What about: for each element you find in the rectangle, walk up the parent tree until you find a node that doesn’t live in the rectangle. The node before that is a top-level parent in your rectangle. If you find all of the top level-parents, and include all of their children, then you’ll probably not have the duplication issue. "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’d be concerned about elements that don’t have boundingRects inside of their parent’s boundingRect, though (I think using "
                            },
                            {
                                "type": "text",
                                "text": "transform",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " can probably cause that). But if you’re including children regardless already, then you’d already have that problem.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I think a more robust way to do this might be to walk the tree once (or on updates) and build a quad tree, or other space-partitioning lookup. Then you wouldn’t have to rely on parent-child relationships at all."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UL5AX4G2H",
        "type": "message",
        "ts": "1589912777.472800",
        "client_msg_id": "9d4afddd-b536-4b58-91b3-4523b6b28b32",
        "text": "Can you post a quick code sample of self style prototypal inheritance?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b05739c44158",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-12-05\/1552783044467_b05739c44158d860f3bd_72.png",
            "first_name": "",
            "real_name": "Tyler Adams",
            "display_name": "Tyler Adams",
            "team": "T5TCAFTA9",
            "name": "coppero1237",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qZCKH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can you post a quick code sample of self style prototypal inheritance?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAJ9DV971",
        "type": "message",
        "ts": "1589913054.473100",
        "client_msg_id": "06dcc41b-143a-46dd-a8e0-b3993e1b17dc",
        "text": "“composition over inheritance”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "540fc50d2192",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-12\/502004543669_540fc50d2192cc8aba20_72.jpg",
            "first_name": "Marcel",
            "real_name": "Marcel Goethals",
            "display_name": "wolkenmachine",
            "team": "T5TCAFTA9",
            "name": "accounts",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n3o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“composition over inheritance”"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1589913095.474100",
        "client_msg_id": "A04436BC-AEDA-46A2-93B1-275F2F863237",
        "text": "one thing i find confusing is understanding when state or closures are private to an instance vs its prototype ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G\/7q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "one thing i find confusing is understanding when state or closures are private to an instance vs its prototype "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1589913230.474300",
        "client_msg_id": "94171cb3-9de8-4940-b281-661dc9bb9fb6",
        "text": "I’ve been considering the quad tree as a last resort. there are a bunch of issues pushing me that way, like the fact that it’s not just `transform`, you can have `pre` selectors and negative margins screwing around",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a17j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve been considering the quad tree as a last resort. there are a bunch of issues pushing me that way, like the fact that it’s not just "
                            },
                            {
                                "type": "text",
                                "text": "transform",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", you can have "
                            },
                            {
                                "type": "text",
                                "text": "pre",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " selectors and negative margins screwing around"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1589913307.474500",
        "client_msg_id": "eb0776ca-902d-432a-8b89-5aa9739f76a0",
        "text": "your description of the tool is exactly right. i’m trying to let people box-select and copy dom nodes so that they can essentially drag pieces of webpages into their own notetaking app while preserving styles",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ppsr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "your description of the tool is exactly right. i’m trying to let people box-select and copy dom nodes so that they can essentially drag pieces of webpages into their own notetaking app while preserving styles"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1589913406.474700",
        "client_msg_id": "a4d4cc35-04ba-4112-b753-33ba21838acd",
        "text": "it’s a kind of pruning, which is a lot like depth-first traversal",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gncly",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it’s a kind of pruning, which is a lot like depth-first traversal"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "my main concern is situations like this one (ignore the writing)",
        "files": [
            {
                "id": "F0143T47KE0",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UHWC9PXBL",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "63Vee",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my main concern is situations like this one (ignore the writing)"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1589913446.474900",
        "client_msg_id": "cbadae05-ca4b-40a5-89c5-95c540ac639f",
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1589913497.475300",
        "client_msg_id": "3377533b-cef4-4462-9ddd-bed30f3c78e5",
        "text": "where I’d want to select the last child of the first parent, and only the first two of the second. working with the native dom structures is giving me brain fog. i think the quad tree is the right idea",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MGI9y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "where I’d want to select the last child of the first parent, and only the first two of the second. working with the native dom structures is giving me brain fog. i think the quad tree is the right idea"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1589913510.475500",
        "client_msg_id": "a3e8f9a7-b755-4a09-b666-c5b2fb3a87a3",
        "text": "thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "67j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589914094.475800",
        "client_msg_id": "07d1034e-7f9d-416a-a6b5-02e17e4c738c",
        "text": "<@UL5AX4G2H> — Here's a decent summary I came across the other day: <http:\/\/gameprogrammingpatterns.com\/prototype.html#self>\n\nIf you're familiar with JS inheritance, it's similar.\n\nNote that in my case, I'm only interested in using prototypes as a form of data composition, not method \/ function \/ class composition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nqs9j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL5AX4G2H"
                            },
                            {
                                "type": "text",
                                "text": " — Here's a decent summary I came across the other day: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/gameprogrammingpatterns.com\/prototype.html#self"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIf you're familiar with JS inheritance, it's similar.\n\nNote that in my case, I'm only interested in using prototypes as a form of data composition, not method \/ function \/ class composition."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U010SQSJGLS",
        "type": "message",
        "ts": "1589914243.476200",
        "client_msg_id": "3496e856-980d-4c23-b290-2fd83663639c",
        "text": "Prototypical inheritance seems to me to have the worst of both worlds of dynamic typing and inheritance: fragile base class problem PLUS the ability to change the base class at runtime.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge900b2beeb5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e900b2beeb5a6877d191b8d15623671b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Michael Coblenz",
            "display_name": "Michael Coblenz",
            "team": "T5TCAFTA9",
            "name": "mcoblenz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wRQe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Prototypical inheritance seems to me to have the worst of both worlds of dynamic typing and inheritance: fragile base class problem PLUS the ability to change the base class at runtime."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589914254.476400",
        "client_msg_id": "abf711a0-58b2-4d72-a575-3e4c2749bbfd",
        "text": "Further to my original post, I'd be curious to hear if anyone has come across the idea of field-level inheritance, where each field may be delegated to a field on a different object. Are there any systems that do this well?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "smE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Further to my original post, I'd be curious to hear if anyone has come across the idea of field-level inheritance, where each field may be delegated to a field on a different object. Are there any systems that do this well?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589914447.476600",
        "client_msg_id": "39ca11c1-34b8-4cbf-9c92-882f15362ab4",
        "text": "<@U010SQSJGLS> Does the fragile bass class apply to data? All the examples I can imagine are due to method inheritance, not data inheritance.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iPwQx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U010SQSJGLS"
                            },
                            {
                                "type": "text",
                                "text": " Does the fragile bass class apply to data? All the examples I can imagine are due to method inheritance, not data inheritance."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U010SQSJGLS",
        "type": "message",
        "ts": "1589914495.476800",
        "client_msg_id": "2161408d-00f5-4020-8455-5e7c76a105be",
        "text": "How do I know what fields an object has?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge900b2beeb5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e900b2beeb5a6877d191b8d15623671b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Michael Coblenz",
            "display_name": "Michael Coblenz",
            "team": "T5TCAFTA9",
            "name": "mcoblenz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ne4O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How do I know what fields an object has?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U010SQSJGLS",
        "type": "message",
        "ts": "1589914526.477000",
        "client_msg_id": "2f819776-1fae-487f-870d-da35a5d542f3",
        "text": "In prototype-based languages, the answer seems to be “inspect the object at runtime and see.”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge900b2beeb5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e900b2beeb5a6877d191b8d15623671b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Michael Coblenz",
            "display_name": "Michael Coblenz",
            "team": "T5TCAFTA9",
            "name": "mcoblenz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6CtQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In prototype-based languages, the answer seems to be “inspect the object at runtime and see.”"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U010SQSJGLS",
        "type": "message",
        "ts": "1589914557.477200",
        "client_msg_id": "75a9c3a9-9bb0-4bce-a014-6789d512a114",
        "text": "But ultimately you need to write code that makes assumptions about what fields are there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge900b2beeb5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e900b2beeb5a6877d191b8d15623671b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Michael Coblenz",
            "display_name": "Michael Coblenz",
            "team": "T5TCAFTA9",
            "name": "mcoblenz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vSJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But ultimately you need to write code that makes assumptions about what fields are there."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U010SQSJGLS",
        "type": "message",
        "ts": "1589914579.477400",
        "client_msg_id": "d2344c4c-4a5e-40ee-ae62-94afbf238fc8",
        "text": "So you run the code once, see that field f is there in the debugger or whatever, assume it’s always there, and then later, BOOM.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge900b2beeb5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e900b2beeb5a6877d191b8d15623671b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Michael Coblenz",
            "display_name": "Michael Coblenz",
            "team": "T5TCAFTA9",
            "name": "mcoblenz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zph",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So you run the code once, see that field f is there in the debugger or whatever, assume it’s always there, and then later, BOOM."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UL5AX4G2H",
        "type": "message",
        "ts": "1589914671.477700",
        "client_msg_id": "d66b79c5-5668-4fe5-ad2e-010ba5cf5141",
        "text": "Ah, general inheritance forces a taxonomy of your data which means there's a limited number of options and a unique parent. Which class should I inherit from? Diamond problem \"I really want to inherit from both ork and car\" With composition, you can get an unlimited number of options and no dependency issues. I can make an ork car, why not!\n\nself style is a dynamic typing approach to OO. Fast and lightweight, but no static analysis help.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b05739c44158",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-12-05\/1552783044467_b05739c44158d860f3bd_72.png",
            "first_name": "",
            "real_name": "Tyler Adams",
            "display_name": "Tyler Adams",
            "team": "T5TCAFTA9",
            "name": "coppero1237",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ri7pv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, general inheritance forces a taxonomy of your data which means there's a limited number of options and a unique parent. Which class should I inherit from? Diamond problem \"I really want to inherit from both ork and car\" With composition, you can get an unlimited number of options and no dependency issues. I can make an ork car, why not!\n\nself style is a dynamic typing approach to OO. Fast and lightweight, but no static analysis help."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UL5AX4G2H",
        "type": "message",
        "ts": "1589914732.477900",
        "client_msg_id": "5af5e970-4274-4c6a-9bef-26f50a609a1d",
        "text": "methods or data, it doesn't make a difference, esp in js where methods are first class",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b05739c44158",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-12-05\/1552783044467_b05739c44158d860f3bd_72.png",
            "first_name": "",
            "real_name": "Tyler Adams",
            "display_name": "Tyler Adams",
            "team": "T5TCAFTA9",
            "name": "coppero1237",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WGb3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "methods or data, it doesn't make a difference, esp in js where methods are first class"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "[xmpp] &lt;singpolyma&gt; Once you static type it is it really OO anymore?",
        "username": "cheogram (bot)",
        "type": "message",
        "ts": "1589914855.478100",
        "bot_id": "BEYLABLRH",
        "thread_ts": "1589914855.478100",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1589915063.478200",
        "reply_users": [
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1589915063.478200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cDao",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[xmpp] <singpolyma> Once you static type it is it really OO anymore?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589915063.478200",
        "client_msg_id": "5f575a48-8743-4378-9e9c-0c2e4656940d",
        "text": "Hi — is this a reply to a previous post? It showed up as a top-level post in Slack. If you are replying, please use the features of your client to form your message as a reply, so that it shows up threaded in Slack in the right place. Thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589914855.478100",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/Mo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi — is this a reply to a previous post? It showed up as a top-level post in Slack. If you are replying, please use the features of your client to form your message as a reply, so that it shows up threaded in Slack in the right place. Thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1589915075.478400",
        "client_msg_id": "bf0693ff-3bc4-4701-b973-d41e0013cb29",
        "text": "… it’s a quad interval tree. i feel like im doing a coding interview",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NsZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "… it’s a quad interval tree. i feel like im doing a coding interview"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "[xmpp] &lt;singpolyma&gt; Oh, sorry. I guess the matrix bridge isnt compatible with how slack works these days? I can just lurk. Excuse the noise :)",
        "username": "cheogram (bot)",
        "type": "message",
        "ts": "1589915136.478600",
        "bot_id": "BEYLABLRH",
        "thread_ts": "1589915136.478600",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1589915262.479200",
        "reply_users": [
            "BEYLABLRH"
        ],
        "replies": [
            {
                "user": "BEYLABLRH",
                "ts": "1589915222.478800"
            },
            {
                "user": "BEYLABLRH",
                "ts": "1589915262.479200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z=7R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[xmpp] <singpolyma> Oh, sorry. I guess the matrix bridge isnt compatible with how slack works these days? I can just lurk. Excuse the noise :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "",
        "username": "iorec",
        "icons": {
            "image_48": "https:\/\/s3-us-west-2.amazonaws.com\/slack-files2\/bot_icons\/2020-04-15\/1058751442086_48.png"
        },
        "attachments": [
            {
                "fallback": "grafik.png",
                "image_url": "https:\/\/matrix.org\/_matrix\/media\/r0\/download\/matrix.org\/qmQPjMEWmLQLAuXWNRotfHNr",
                "image_width": 109,
                "image_height": 59,
                "image_bytes": 1820,
                "id": 1
            }
        ],
        "type": "message",
        "ts": "1589915214.478700",
        "bot_id": "BEYLABLRH"
    },
    {
        "subtype": "bot_message",
        "text": "from riot you can use this reply feature:",
        "username": "iorec",
        "icons": {
            "image_48": "https:\/\/s3-us-west-2.amazonaws.com\/slack-files2\/bot_icons\/2020-04-15\/1058751442086_48.png"
        },
        "type": "message",
        "ts": "1589915222.478800",
        "bot_id": "BEYLABLRH",
        "thread_ts": "1589915136.478600",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KwE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "from riot you can use this reply feature:"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1589915224.479000",
        "client_msg_id": "1c98ae17-1842-423d-81db-4f9d2ace29b2",
        "text": "the other issue is that if i throw out all the children, I have to hunt through every selected node and rehook it to its parent at the end of the process, which feels like duplicated work",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JzP90",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the other issue is that if i throw out all the children, I have to hunt through every selected node and rehook it to its parent at the end of the process, which feels like duplicated work"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "ah, but you cannot yet reply with an image..",
        "username": "iorec",
        "icons": {
            "image_48": "https:\/\/s3-us-west-2.amazonaws.com\/slack-files2\/bot_icons\/2020-04-15\/1058751442086_48.png"
        },
        "type": "message",
        "ts": "1589915262.479200",
        "bot_id": "BEYLABLRH",
        "thread_ts": "1589915136.478600",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D==ek",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ah, but you cannot yet reply with an image.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1589918793.479400",
        "client_msg_id": "76335488-5cb5-4b65-8ebe-eb1e019cc123",
        "text": "best to avoid OOP paradigm entirely. Don't ever create or destroy an object and life becomes so much simpler. Then you don't create islands of state but instead have one central ball of state which can be serialized, communicated, etc. OOP creates islands of state that are nearly impossible to transmit across the network in a synchronized manner.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hCc+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "best to avoid OOP paradigm entirely. Don't ever create or destroy an object and life becomes so much simpler. Then you don't create islands of state but instead have one central ball of state which can be serialized, communicated, etc. OOP creates islands of state that are nearly impossible to transmit across the network in a synchronized manner."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589928956.479600",
        "client_msg_id": "b1f7c450-44f5-4729-96b5-26627503c0e0",
        "text": "Thanks for the replies everyone, but I guess I didn't articulate my inquiry very well. I'm asking very specifically about Self-style prototypal inheritance applied to data, and the idea of field-level delegation in particular. If you have a specific critique about that exact style of inheritance\/delegation, that'd be helpful. General critiques of OOP, classes, inheritance, or dynamic typing — especially critiques of the form \"these things are just bad, QED\" — are outside the scope of my concerns at the moment.\n\nI'm especially interested in hearing from folks who have worked with or (especially) built systems that use this style of inheritance, or who have considered using it in the design of a live programming environment but then decided not to. Eg: if <@UE1JQM9HQ> is still around, it'd be great to hear from him.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Z=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the replies everyone, but I guess I didn't articulate my inquiry very well. I'm asking very specifically about Self-style prototypal inheritance applied to data, and the idea of field-level delegation in particular. If you have a specific critique about that exact style of inheritance\/delegation, that'd be helpful. General critiques of OOP, classes, inheritance, or dynamic typing — especially critiques of the form \"these things are just bad, QED\" — are outside the scope of my concerns at the moment.\n\nI'm especially interested in hearing from folks who have worked with or (especially) built systems that use this style of inheritance, or who have considered using it in the design of a live programming environment but then decided not to. Eg: if "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": " is still around, it'd be great to hear from him."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1589946606.481000",
        "client_msg_id": "2cd1b8fb-1551-4e0e-8e94-976b2ce715aa",
        "text": "Done quite a bit with prototypes.  Pain points... Don't do great with objects that have complicated life-cycles.  Tend to have trouble when collaborating with other objects.  When I clone this, should I clone this part?  When I clone this, should some list of whatever's now include the clone?  You need to think a lot about aliasing, the difference between a clone and a copy, and so on.  Prototypes have an advantage in systems that try to make objects tangible, like Self, since physical tokens work in a similar sort of way making for decent transfer.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y8N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Done quite a bit with prototypes.  Pain points... Don't do great with objects that have complicated life-cycles.  Tend to have trouble when collaborating with other objects.  When I clone this, should I clone this part?  When I clone this, should some list of whatever's now include the clone?  You need to think a lot about aliasing, the difference between a clone and a copy, and so on.  Prototypes have an advantage in systems that try to make objects tangible, like Self, since physical tokens work in a similar sort of way making for decent transfer."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589949016.481300",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1589949202.000000"
        },
        "client_msg_id": "adf22826-9ac6-4c53-8505-1cdf49d2fcef",
        "text": "<@UA14TGLTC> Great points. I'm coming at Self prototypes from a weird angle. I've done a lot (a lot — like 5-10k hours in a past life) of 3d modelling across a dozen tools. In those environments you often have fairly rich control over aliasing\/instancing vs copying, and it's unambiguous. It was a good experience (eg: the \"fragile base\" is a powerful tool, not a pain point). Self feels only a small bit more complicated than that, which makes me think that a sufficiently rich GUI would make Self prototypes an equally good experience.\n\n... For data composition. Period. Prototypal code composition, on the other hand, I am not touching. Not unless I can work out some nice af way of visualizing it, which seems unlikely.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3p+M4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " Great points. I'm coming at Self prototypes from a weird angle. I've done a lot (a lot — like 5-10k hours in a past life) of 3d modelling across a dozen tools. In those environments you often have fairly rich control over aliasing\/instancing vs copying, and it's unambiguous. It was a good experience (eg: the \"fragile base\" is a powerful tool, not a pain point). Self feels only a small bit more complicated than that, which makes me think that a sufficiently rich GUI would make Self prototypes an equally good experience.\n\n... For data composition. Period. Prototypal code composition, on the other hand, I am not touching. Not unless I can work out some nice af way of visualizing it, which seems unlikely."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]