[
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1604146618.121800",
        "client_msg_id": "a5b227ac-7d7a-493f-a963-0560983c43c6",
        "text": "this feels, uh, REALLY good to use",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h1F+g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this feels, uh, REALLY good to use"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U019PRL1BNU"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1604147020.122000",
        "client_msg_id": "ea745c8d-16fc-491e-ab9c-b3b4f6fc5f7d",
        "text": "Initial rambles:\n\none thing I’d think about is getting a little more task-focused (this is already a pretty task-focused interface)\n\nI find myself creating a kind of mise-en-place in iTerm windows where I’m setting stuff up for some larger change or understanding. I think theres some implicit structure here that you’re hinting at with the child-pane relationships, and the notes that are free-floating vs the notes that are implicitly linked to certain views (e.g. “this is the code when `useMemo`…). I think the structure isn’t so much the code as it is code-and-task. I’d guess\/hypothesize that the hierarchy actually goes big note (“let’s look at the hook `useMemo`”), annotation-style notes (on mount, it calls the given..)  -&gt;  code symbols. theres a graphy-outlinely thing here (although I prefer these panes to say a workflowy interface, since in my experience stuff looks like a graph when youre working on it and an outline when you’re done)\n\nmaybe it’s actually that your notes are suggesting a transclusion— let’s look at the hook useMemo could be a notion-style slashword interface for pulling up code fragments that come immediately after where you typed in a separate pane\n\nI really like the interface in macOS where you can box-select a bunch of files on the desktop and right click to collect them all into a folder. this feels like it could use that kind of a grouping construct",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lWKV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Initial rambles:\n\none thing I’d think about is getting a little more task-focused (this is already a pretty task-focused interface)\n\nI find myself creating a kind of mise-en-place in iTerm windows where I’m setting stuff up for some larger change or understanding. I think theres some implicit structure here that you’re hinting at with the child-pane relationships, and the notes that are free-floating vs the notes that are implicitly linked to certain views (e.g. “this is the code when "
                            },
                            {
                                "type": "text",
                                "text": "useMemo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "…). I think the structure isn’t so much the code as it is code-and-task. I’d guess\/hypothesize that the hierarchy actually goes big note (“let’s look at the hook "
                            },
                            {
                                "type": "text",
                                "text": "useMemo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "”), annotation-style notes (on mount, it calls the given..)  ->  code symbols. theres a graphy-outlinely thing here (although I prefer these panes to say a workflowy interface, since in my experience stuff looks like a graph when youre working on it and an outline when you’re done)\n\nmaybe it’s actually that your notes are suggesting a transclusion— let’s look at the hook useMemo could be a notion-style slashword interface for pulling up code fragments that come immediately after where you typed in a separate pane\n\nI really like the interface in macOS where you can box-select a bunch of files on the desktop and right click to collect them all into a folder. this feels like it could use that kind of a grouping construct"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1604155452.122300",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1604224769.000000"
        },
        "text": "<@U01BAS8GU86> I start a new thread here because I would love to see what you are working on! :slightly_smiling_face: Do you have anything to share about it?\n\nSome time ago I played with CRDT using Rust and WebAssembly! It was more a project to play with the CRDT concepts, and an occasion to try Rust and its compilation to WebAssembly. It was a very basic POC for a offline first text editor. It was for a local conference. Here is a link to code: <https:\/\/gitlab.com\/ogadaki\/sunnytech-2019-wuer>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604155452.122300",
        "reply_count": 8,
        "reply_users_count": 4,
        "latest_reply": "1609287051.398700",
        "reply_users": [
            "UJ6LDMMN0",
            "UC2A2ARPT",
            "U01BAS8GU86",
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "UJ6LDMMN0",
                "ts": "1604156006.124200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1604157047.124600"
            },
            {
                "user": "U01BAS8GU86",
                "ts": "1604167001.125100"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1604224153.129200"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1604225096.129500"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1604225294.129700"
            },
            {
                "user": "U01BAS8GU86",
                "ts": "1604243602.129900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1609287051.398700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "[October 31st, 2020 3:03 PM] epompeii: <@UAVCC2X70> and <@UJ6LDMMN0> these both sound very similar to what I’m working on. A visual\/notebook based purely functional programming development environment with live data and time traveling for both previous inputs and each step of a run that uses CRDTs for collaboration.\n\nSeeing it on this thread has me worried that this may be pushing the limits too much for what’s currently feasible?\nI’m using Rust targeting wasm in browser. Is this possible now? Do I need this beast machine to make that happen?",
                "ts": "1604153038.323800",
                "author_id": "U01BAS8GU86",
                "author_subname": "Everett Pompeii",
                "channel_id": "C5T9GPWFL",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "<@UAVCC2X70> and <@UJ6LDMMN0> these both sound very similar to what I’m working on. A visual\/notebook based purely functional programming development environment with live data and time traveling for both previous inputs and each step of a run that uses CRDTs for collaboration.\n\nSeeing it on this thread has me worried that this may be pushing the limits too much for what’s currently feasible?\nI’m using Rust targeting wasm in browser. Is this possible now? Do I need this beast machine to make that happen?",
                "author_name": "Everett Pompeii",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U01BAS8GU86",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2020-10-23\/1445768371157_24e71f2ba4a9059b8c54_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604153038323800?thread_ts=1603907731306100&cid=C5T9GPWFL",
                "is_share": true,
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ux8OX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01BAS8GU86"
                            },
                            {
                                "type": "text",
                                "text": " I start a new thread here because I would love to see what you are working on! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " Do you have anything to share about it?\n\nSome time ago I played with CRDT using Rust and WebAssembly! It was more a project to play with the CRDT concepts, and an occasion to try Rust and its compilation to WebAssembly. It was a very basic POC for a offline first text editor. It was for a local conference. Here is a link to code: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gitlab.com\/ogadaki\/sunnytech-2019-wuer"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U01BAS8GU86"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "Here is a \"dynamic screenshot\" of the result for this POC:",
        "files": [
            {
                "id": "F01EFK70TAL",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UJ6LDMMN0",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tNaEj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here is a \"dynamic screenshot\" of the result for this POC:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1604156006.124200",
        "thread_ts": "1604155452.122300",
        "parent_user_id": "UJ6LDMMN0"
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1604157047.124600",
        "client_msg_id": "05db0f72-6d4e-4d43-b6d1-a1d86f42a41b",
        "text": "(I assume you're asking <@U01BAS8GU86> — Just posting an @-mention so that they won't miss this new thread in a new channel)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604155452.122300",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=J\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I assume you're asking "
                            },
                            {
                                "type": "user",
                                "user_id": "U01BAS8GU86"
                            },
                            {
                                "type": "text",
                                "text": " — Just posting an @-mention so that they won't miss this new thread in a new channel)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U01BAS8GU86"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01BAS8GU86",
        "type": "message",
        "ts": "1604167001.125100",
        "client_msg_id": "e3cfe33a-cf83-4472-9ec9-36e55f61defd",
        "text": "Great thought on a new thread, <@UJ6LDMMN0>!\nAnd I’ll also tag <@UAVCC2X70> if he’s interested in joining in.\n\nYour demo looks super cool! I think it’s a great visual representation of what the CRDT is doing. I’m still very much a novice in the CRDT space, once I get more up to speed I look forward to digging into the code to help me learn :male-technologist::skin-tone-4:\nI also have Kleppmann’s Designing Data-Intensive Applications sitting on my shelf waiting to be read.\n\nAs for my project, TableFlow, I built a basic dummy demo of it in React if you want to check it out: <http:\/\/tableflow.org\/studio\/flow\/#a>\n\nThe motivation behind it is to build a “better Excel” for power users and also software developers who would rather not deal with all the incidental complexity of modern app development for a project with complex logic, ie not just some CRUD app.\n\nThere are four core concepts: Tables, Flows, Subflows, and Decisions:\n• Tables are the core data type. Depending on how they are configured they can be algebraic data types (ADTs\/enums), structs\/maps, lists, values, and\/or an arbitrary nesting of any of these. Sort of like a statically typed version of JS objects with ADTs and a shorthand for tabular data built in.\n• Flows are pure functions. A Flow can be called by any other Flow or via a REST (or possibly gRPC) call to an endpoint from outside of TableFlow. A Flow can contain zero to any number of Subflows.\n• Subflows are functions just like Flows, but they can only be called once and by their parent. They’re sort of the opposite of a closure in that scope must be explicitly passed into them. They are very similar to Brian Will’s concept of a “use” function. They help break up Flows both visually and in terms of size\/scope. At any point in the future a Subflow can be converted into a standalone Flow if necessary.\n• Decisions are DMN decision tables on steroids. They are where conditional logic, Flow branching, and auto-iteration over all the rows in a table happen. Good example of the first two: <https:\/\/docs.appian.com\/suite\/help\/20.3\/Appian_Decisions.html>\nThere would be live data supplied to a Flow by filling in the input Tables. There would be a slider at the top of this input to time travel through the input history. Some of these inputs can be saved as “snapshots” along with their corresponding outputs. TDD would be built in, so every time a change is made, all applicable snapshots are run against the change and its outputs.\n\nOnce a run occurs, there would be a built in time traveling debugger. Each piece of computed\/output data would have its own slider that jumps between when there was actually a change to that piece of data in the last run. Recursion is possible so there may be multiple time points.\n\nI also want Tables to be reusable between Flows. The software engineer in me really wants to add public and private “Table Subflows” (ie methods) and then I’m like, well why not interfaces too!\nI will probably settle for reusable Tables with methods. Having interfaces would be great, but then I remind myself that even power users of Excel aren’t use to being able to write their own functions natively!\n\nThe eventual goal would be to build a TableFlow config =&gt; Rust compiler that would spit out a production grade Rust server.\nCan you see me drowning in my own ambition yet?  :man-swimming::skin-tone-4::shark:\n\nI played around with doing the UI in Elm, looked at ReasonML, and I’m currently giving Seed (seed-rs) a spin. I like The Elm Architecture for the frontend, but I’m just going to try doubling down on the Rust-&gt;wasm ecosystem and hopefully the wasm DOM API becomes a thing down the road and closes the performance gap.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "24e71f2ba4a9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-23\/1445768371157_24e71f2ba4a9059b8c54_72.jpg",
            "first_name": "",
            "real_name": "Everett Pompeii",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "epompeii",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604155452.122300",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ak3dF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great thought on a new thread, "
                            },
                            {
                                "type": "user",
                                "user_id": "UJ6LDMMN0"
                            },
                            {
                                "type": "text",
                                "text": "!\nAnd I’ll also tag "
                            },
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " if he’s interested in joining in.\n\nYour demo looks super cool! I think it’s a great visual representation of what the CRDT is doing. I’m still very much a novice in the CRDT space, once I get more up to speed I look forward to digging into the code to help me learn "
                            },
                            {
                                "type": "emoji",
                                "name": "male-technologist",
                                "unicode": "1f468-1f3fd-200d-1f4bb",
                                "skin_tone": 4
                            },
                            {
                                "type": "text",
                                "text": "\nI also have Kleppmann’s Designing Data-Intensive Applications sitting on my shelf waiting to be read.\n\nAs for my project, TableFlow, I built a basic dummy demo of it in React if you want to check it out: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/tableflow.org\/studio\/flow\/#a"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe motivation behind it is to build a “better Excel” for power users and also software developers who would rather not deal with all the incidental complexity of modern app development for a project with complex logic, ie not just some CRUD app.\n\nThere are four core concepts: Tables, Flows, Subflows, and Decisions:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Tables are the core data type. Depending on how they are configured they can be algebraic data types (ADTs\/enums), structs\/maps, lists, values, and\/or an arbitrary nesting of any of these. Sort of like a statically typed version of JS objects with ADTs and a shorthand for tabular data built in."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Flows are pure functions. A Flow can be called by any other Flow or via a REST (or possibly gRPC) call to an endpoint from outside of TableFlow. A Flow can contain zero to any number of Subflows."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Subflows are functions just like Flows, but they can only be called once and by their parent. They’re sort of the opposite of a closure in that scope must be explicitly passed into them. They are very similar to Brian Will’s concept of a “use” function. They help break up Flows both visually and in terms of size\/scope. At any point in the future a Subflow can be converted into a standalone Flow if necessary."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Decisions are DMN decision tables on steroids. They are where conditional logic, Flow branching, and auto-iteration over all the rows in a table happen. Good example of the first two: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/docs.appian.com\/suite\/help\/20.3\/Appian_Decisions.html"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThere would be live data supplied to a Flow by filling in the input Tables. There would be a slider at the top of this input to time travel through the input history. Some of these inputs can be saved as “snapshots” along with their corresponding outputs. TDD would be built in, so every time a change is made, all applicable snapshots are run against the change and its outputs.\n\nOnce a run occurs, there would be a built in time traveling debugger. Each piece of computed\/output data would have its own slider that jumps between when there was actually a change to that piece of data in the last run. Recursion is possible so there may be multiple time points.\n\nI also want Tables to be reusable between Flows. The software engineer in me really wants to add public and private “Table Subflows” (ie methods) and then I’m like, well why not interfaces too!\nI will probably settle for reusable Tables with methods. Having interfaces would be great, but then I remind myself that even power users of Excel aren’t use to being able to write their own functions natively!\n\nThe eventual goal would be to build a TableFlow config => Rust compiler that would spit out a production grade Rust server.\nCan you see me drowning in my own ambition yet?  "
                            },
                            {
                                "type": "emoji",
                                "name": "man-swimming",
                                "unicode": "1f3ca-1f3fd-200d-2642-fe0f",
                                "skin_tone": 4
                            },
                            {
                                "type": "emoji",
                                "name": "shark",
                                "unicode": "1f988"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI played around with doing the UI in Elm, looked at ReasonML, and I’m currently giving Seed (seed-rs) a spin. I like The Elm Architecture for the frontend, but I’m just going to try doubling down on the Rust->wasm ecosystem and hopefully the wasm DOM API becomes a thing down the road and closes the performance gap."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "U019PRL1BNU"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1604168461.125500",
        "client_msg_id": "85ac8313-3870-4d64-aaa3-109647c90c90",
        "text": "Nice! I'd like to see tiled window manager-style auto layout and the ability to zoom in and out (see: ZUIs).\n\n(Perhaps less usefully, it seems to be broken in Safari.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iIKF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice! I'd like to see tiled window manager-style auto layout and the ability to zoom in and out (see: ZUIs).\n\n(Perhaps less usefully, it seems to be broken in Safari.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U019PRL1BNU"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1604180931.125900",
        "client_msg_id": "032e1410-3cd2-4841-956f-42aa5aeb8f75",
        "text": "For a couple of years I've been building up a computing stack without metacircularity, where complex languages are consistently implemented in simpler languages.\n\nFor several months now I've been wrestling with a thorny problem in one corner of the core compiler which converts a safe language into unsafe machine code. Today I finally decided to stop agonizing over it, and write up the idea maze to the extent I've explored it.\n\n<https:\/\/github.com\/akkartik\/mu\/issues\/45>\n\nComments and suggestions most appreciated. This is a fairly simple compiler as these things go, and I'd be happy to engage with anyone who wants to learn about these beasts in a realistic setting.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604180931.125900",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1604273716.132700",
        "reply_users": [
            "U016VUZGUUQ",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "U016VUZGUUQ",
                "ts": "1604186657.126100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1604187339.126900"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1604212779.128700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1604273716.132700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Static checks for function outputs · Issue #45 · akkartik\/mu",
                "title_link": "https:\/\/github.com\/akkartik\/mu\/issues\/45",
                "text": "Background Mu (this repo) contains a compiler built in machine code, which converts a memory-safe high-level language into machine code. Since it&amp;#39;s built in machine code, the compiler is intend...",
                "fallback": "GitHub: Static checks for function outputs · Issue #45 · akkartik\/mu",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/3161?s=400&v=4",
                "from_url": "https:\/\/github.com\/akkartik\/mu\/issues\/45",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/akkartik\/mu\/issues\/45"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G7F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For a couple of years I've been building up a computing stack without metacircularity, where complex languages are consistently implemented in simpler languages.\n\nFor several months now I've been wrestling with a thorny problem in one corner of the core compiler which converts a safe language into unsafe machine code. Today I finally decided to stop agonizing over it, and write up the idea maze to the extent I've explored it.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu\/issues\/45"
                            },
                            {
                                "type": "text",
                                "text": "\n\nComments and suggestions most appreciated. This is a fairly simple compiler as these things go, and I'd be happy to engage with anyone who wants to learn about these beasts in a realistic setting."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1604186657.126100",
        "client_msg_id": "00edd4e1-01d7-456a-b320-4580d2244685",
        "text": "I think of the end of the function as the beginning of the return value's lifetime, not the end. Maybe you could find a way to \"initialize\" the output variable at\/near the end, or maybe just take that perspective as a vote for explicit returns.\n\nWhat are the intended semantics of example 4, where you seem to have x and out mapped to the same register in the same scope. Or is out spilled during the body block, and the assignment to out is targeted at the stack, then popped between the body block and the \"actual\" function block? It looks like I answered my question while writing it, but I'll leave this just in case I got it wrong...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604180931.125900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bkf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think of the end of the function as the beginning of the return value's lifetime, not the end. Maybe you could find a way to \"initialize\" the output variable at\/near the end, or maybe just take that perspective as a vote for explicit returns.\n\nWhat are the intended semantics of example 4, where you seem to have x and out mapped to the same register in the same scope. Or is out spilled during the body block, and the assignment to out is targeted at the stack, then popped between the body block and the \"actual\" function block? It looks like I answered my question while writing it, but I'll leave this just in case I got it wrong..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1604187339.126900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1604188223.000000"
        },
        "client_msg_id": "7427d2cc-b6c7-448f-8506-09f03b84d002",
        "text": "Yeah, that's a good insight. I wish I'd thought of that a year ago..\n\nIf you first ignore outputs, the semantics of a `var` B in a new block are that it shadows any var A in an outer block. However, a second `var` C to the same register in the same block simply clobbers the register. There's no way afterwards to get the first var B.\n\nNow reintroducing function outputs in example 4, the assignment to `out` would write register `eax`. Then the `break` would increment the stack pointer to skip the saved value of `x` before jumping to end of function.\n\nDoes this make sense?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604180931.125900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2+2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, that's a good insight. I wish I'd thought of that a year ago..\n\nIf you first ignore outputs, the semantics of a "
                            },
                            {
                                "type": "text",
                                "text": "var",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " B in a new block are that it shadows any var A in an outer block. However, a second "
                            },
                            {
                                "type": "text",
                                "text": "var",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " C to the same register in the same block simply clobbers the register. There's no way afterwards to get the first var B.\n\nNow reintroducing function outputs in example 4, the assignment to "
                            },
                            {
                                "type": "text",
                                "text": "out",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would write register "
                            },
                            {
                                "type": "text",
                                "text": "eax",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Then the "
                            },
                            {
                                "type": "text",
                                "text": "break",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would increment the stack pointer to skip the saved value of "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " before jumping to end of function.\n\nDoes this make sense?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U019PRL1BNU",
        "type": "message",
        "ts": "1604192759.127300",
        "client_msg_id": "f9a02255-ed2b-4588-bf00-49fd3f9b74d0",
        "text": "<@UHWC9PXBL> i’m still formulating my thoughts but I think canvases might not be ideal for knowledge transfer (documentation). Along your lines of thought, I _think_ documentation wants to be in a more linear format (e.g. notion doc or markdown file) so that it’s readable with ability to drill down\/explore on the side. The notion-style slashword interface would be cool!\n\nMakes me think of <@US6TKS2HW>’s post <https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1600909703001500>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "748829849f84",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-10\/1444204670448_748829849f84c5e6d568_72.jpg",
            "first_name": "",
            "real_name": "Paul Shen",
            "display_name": "Paul Shen",
            "team": "T5TCAFTA9",
            "name": "paulshen0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1600909703001500",
                "fallback": "[September 23rd, 2020 6:08 PM] raathigesh92: Experimenting with a code documentation idea - <https:\/\/twitter.com\/Raathigesh\/status\/1308728988160765952>",
                "ts": "1600909703.001500",
                "author_id": "US6TKS2HW",
                "author_subname": "Raathi",
                "channel_id": "CCL5VVBAN",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Experimenting with a code documentation idea - <https:\/\/twitter.com\/Raathigesh\/status\/1308728988160765952>",
                "author_name": "Raathi",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/US6TKS2HW",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2020-01-03\/891659417364_08d810dfba72ae74c1d2_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1600909703001500",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vYtAz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " i’m still formulating my thoughts but I think canvases might not be ideal for knowledge transfer (documentation). Along your lines of thought, I "
                            },
                            {
                                "type": "text",
                                "text": "think",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " documentation wants to be in a more linear format (e.g. notion doc or markdown file) so that it’s readable with ability to drill down\/explore on the side. The notion-style slashword interface would be cool!\n\nMakes me think of "
                            },
                            {
                                "type": "user",
                                "user_id": "US6TKS2HW"
                            },
                            {
                                "type": "text",
                                "text": "’s post "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1600909703001500"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1604212779.128700",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1604212834.000000"
        },
        "client_msg_id": "acde8a1c-1070-44ca-a1c8-01adb614b986",
        "text": "I think I understand your description. So at the write to `out`,  `x2` is \"shadowing\" `x` in `eax`, `x` is on the stack, then `out` clobbers `x2`?\n\nMy instincts say,  if you're doing it this way, `out` should be spilled to the stack like other vars when you enter `$foo:body`. Then the break would in principle pop `x`, immediately pop `out`, and `ret`. If you're treating output vars as a special case wrt storage management, I don't see how you're getting any benefit from making them syntactically look like regular vars.\n\nIs anything sensible supposed to happen if you don't immediately follow a write to an output with a break or something? Is that verboten, and if so is it checked?\n\nMaybe you should just ban mapping multiple vars to to same register in the same block, and consider `out` mapped at the function level. `x` isn't allowed to be in `eax` until you push a new block.\n\nHopefully this is semi-useful, but it's late here. :) FWIW, I didn't invent the idea about returns being the start of a new lifetime. It's mostly derived from Single Static Information IR, which has a similar relationship to SSA as Plan9 does to Unix: even more idealistic, and no one uses it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604180931.125900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GM0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think I understand your description. So at the write to "
                            },
                            {
                                "type": "text",
                                "text": "out",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ",  "
                            },
                            {
                                "type": "text",
                                "text": "x2",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is \"shadowing\" "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in `eax`, `x` is on the stack, then `out` clobbers `x2`?\n\nMy instincts say,  if you're doing it this way, `out` should be spilled to the stack like other vars when you enter "
                            },
                            {
                                "type": "text",
                                "text": "$foo:body",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Then the break would in principle pop `x`, immediately pop `out`, and `ret`. If you're treating output vars as a special case wrt storage management, I don't see how you're getting any benefit from making them syntactically look like regular vars.\n\nIs anything sensible supposed to happen if you don't immediately follow a write to an output with a break or something? Is that verboten, and if so is it checked?\n\nMaybe you should just ban mapping multiple vars to to same register in the same block, and consider "
                            },
                            {
                                "type": "text",
                                "text": "out",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mapped at the function level. "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " isn't allowed to be in "
                            },
                            {
                                "type": "text",
                                "text": "eax",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " until you push a new block.\n\nHopefully this is semi-useful, but it's late here. :) FWIW, I didn't invent the idea about returns being the start of a new lifetime. It's mostly derived from Single Static Information IR, which has a similar relationship to SSA as Plan9 does to Unix: even more idealistic, and no one uses it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]