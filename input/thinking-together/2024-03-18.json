[
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710784474.005689",
        "client_msg_id": "bc5c736f-8c69-458b-b719-bc9d01879d35",
        "text": "That's awesome! Thank you for sharing this. It shows that short videos can be turned into something meaningful. I think this is a direction I want to go when I'll have more time to direct my attention outwards. Too bad I'm shadow-banned from Tiktok so I can't follow anyone. I guess it's because I'm using the web app only and refuse to install native spyware. I would be happy to hear of a platform that can treat me a bit better so I can start posting things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704374764.684819",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LRaMZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's awesome! Thank you for sharing this. It shows that short videos can be turned into something meaningful. I think this is a direction I want to go when I'll have more time to direct my attention outwards. Too bad I'm shadow-banned from Tiktok so I can't follow anyone. I guess it's because I'm using the web app only and refuse to install native spyware. I would be happy to hear of a platform that can treat me a bit better so I can start posting things."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710789367.756809",
        "client_msg_id": "99e7ba58-0f29-42d2-8e60-7e7422188103",
        "text": "Have a look at *Typst*. It does what you're asking for.\n<https:\/\/typst.app>\n\nTypst is an easy way to write documents, but also a complete programming language. You can start writing a document without knowing anything about programming, and then gradually add variables, loops, functions, and even sandboxed arbitrary code execution with Web Assembly.\n\nTypst has a source code editor corresponding to the IDE in the discussed example, and an instant preview corresponding to the vector graphics editor in the discussed example. There are some things that are a bit lacking in comparison with the example, they can trivially be implemented.\n\n• Typst assumes that everyone will edit the source code even if they're not programmers, and there is an easy syntax similar to Markdown for non-programmers, but it would be trivial to add wysiwyg editing features to the preview and have them backpropagate to the source code to perfectly satisfy the example of a wysiwyg vector graphics editor. Typst already maintains source maps, allowing pointer events in the preview to backpropagate to the source code, so most of the implementation is already there.\n• Typst is focused only on authoring papers for print, but it would be trivial to add application state, and add features to attach event handlers to elements that can update the application state.\nAfter learning Typst, the massive challenge of designing the proposed system turns into a series of incremental improvements that are trivial to implement.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709980143.296959",
        "parent_user_id": "U03GBV8B58V",
        "attachments": [
            {
                "image_url": "https:\/\/typst.app\/assets\/social.png",
                "image_width": 1200,
                "image_height": 630,
                "image_bytes": 95735,
                "from_url": "https:\/\/typst.app\/",
                "service_icon": "https:\/\/typst.app\/assets\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/typst.app",
                "fallback": "Typst: Typst: Compose papers faster",
                "text": "Focus on your text and let Typst take care of layout and formatting. Sign up now and speed up your writing process.",
                "title": "Typst: Compose papers faster",
                "title_link": "https:\/\/typst.app\/",
                "service_name": "Typst"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NnnDz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have a look at "
                            },
                            {
                                "type": "text",
                                "text": "Typst",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It does what you're asking for.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/typst.app"
                            },
                            {
                                "type": "text",
                                "text": "\n\nTypst is an easy way to write documents, but also a complete programming language. You can start writing a document without knowing anything about programming, and then gradually add variables, loops, functions, and even sandboxed arbitrary code execution with Web Assembly.\n\nTypst has a source code editor corresponding to the IDE in the discussed example, and an instant preview corresponding to the vector graphics editor in the discussed example. There are some things that are a bit lacking in comparison with the example, they can trivially be implemented.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Typst assumes that everyone will edit the source code even if they're not programmers, and there is an easy syntax similar to Markdown for non-programmers, but it would be trivial to add wysiwyg editing features to the preview and have them backpropagate to the source code to perfectly satisfy the example of a wysiwyg vector graphics editor. Typst already maintains source maps, allowing pointer events in the preview to backpropagate to the source code, so most of the implementation is already there."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Typst is focused only on authoring papers for print, but it would be trivial to add application state, and add features to attach event handlers to elements that can update the application state."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAfter learning Typst, the massive challenge of designing the proposed system turns into a series of incremental improvements that are trivial to implement."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710792969.247549",
        "client_msg_id": "4b42c875-97b1-43ad-b148-eb4cc95584c7",
        "text": "Is there any wisdom on *how to best lay out code in a visual code browser*?\n\nIn my experience, code can be layed out either more horizontally on long lines or more vertically on short lines. This is controlled by setting a criterion for how many levels of nesting there can be before a node switches to a multiline layout. Long lines use space efficiently but tend to get hard to read. Short lines are easier to read, as tokens of similar significance line up in columns, but tend to take up much vertical space while leaving most of the horizontal space unused, as the average line is just one key and one value.\n\nShall I accept that code gets very vertical, and use the free horizontal space to add multilevel navigation panels, or is there a third option that is more horizontal while still easy to read? I can go really fancy and add tables and multiple columns, since I have full control over the layout function, but not all code is regular enough to fit a tabular format, and I cannot require the person editing the code to manually bikeshed it by editing whitespace or dragging around visual nodes. I've seen the <https:\/\/gitlab.com\/procps-ng\/procps\/-\/blob\/master\/src\/top\/top.c|horrors of manually bikeshedded plain-text languages> and the horrors of node-based languages where the programmer makes a simple one node change and then has to drag all the nodes around so they line up. Are there any examples of interesting solutions to look at?\n\nHere's how I mean a more horizontal layout:\n\n&gt; *element 1* { _key 1_: value 1, _key 2_: value 2, _key 3_: *surprise* { _key 1_: value 1 } }\n&gt; *element 2* { _key 1_: value 1 }\nHere's how I mean a more vertical layout:\n\n&gt; *element 1* {\n&gt;     _key 1_: value 1,\n&gt;     _key 2_: value 2,\n&gt;     _key 3_: *surprise* {\n&gt;         _key 1_: value 1,\n&gt;     },\n&gt; }\n&gt; *element 2* {\n&gt;     _key 1_: value 1,\n&gt; }\nIn the more horizontal layout, I can barely parse the surprise structure at a glance, and I can barely see if I've made a mistake in editing. It takes a lot less screen space though.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "reply_count": 18,
        "reply_users_count": 5,
        "latest_reply": "1710957971.279669",
        "reply_users": [
            "UMQ6LR9NZ",
            "U04SAJZ155H",
            "US370TRJA",
            "U06M6J30PE3",
            "U016VUZGUUQ"
        ],
        "replies": [
            {
                "user": "UMQ6LR9NZ",
                "ts": "1710795604.617009"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710796898.306469"
            },
            {
                "user": "US370TRJA",
                "ts": "1710821462.327829"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710834246.901459"
            },
            {
                "user": "U06M6J30PE3",
                "ts": "1710885147.978319"
            },
            {
                "user": "U06M6J30PE3",
                "ts": "1710885230.443909"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710905357.768639"
            },
            {
                "user": "U06M6J30PE3",
                "ts": "1710906225.925409"
            },
            {
                "user": "U06M6J30PE3",
                "ts": "1710906331.746489"
            },
            {
                "user": "U06M6J30PE3",
                "ts": "1710906640.374599"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710906657.992789"
            },
            {
                "user": "U06M6J30PE3",
                "ts": "1710906703.997519"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710907013.485389"
            },
            {
                "user": "U06M6J30PE3",
                "ts": "1710907201.613609"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710907367.897759"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1710947097.533449"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710948167.176889"
            },
            {
                "user": "US370TRJA",
                "ts": "1710957971.279669"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U4tEa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there any wisdom on "
                            },
                            {
                                "type": "text",
                                "text": "how to best lay out code in a visual code browser",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?\n\nIn my experience, code can be layed out either more horizontally on long lines or more vertically on short lines. This is controlled by setting a criterion for how many levels of nesting there can be before a node switches to a multiline layout. Long lines use space efficiently but tend to get hard to read. Short lines are easier to read, as tokens of similar significance line up in columns, but tend to take up much vertical space while leaving most of the horizontal space unused, as the average line is just one key and one value.\n\nShall I accept that code gets very vertical, and use the free horizontal space to add multilevel navigation panels, or is there a third option that is more horizontal while still easy to read? I can go really fancy and add tables and multiple columns, since I have full control over the layout function, but not all code is regular enough to fit a tabular format, and I cannot require the person editing the code to manually bikeshed it by editing whitespace or dragging around visual nodes. I've seen the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gitlab.com\/procps-ng\/procps\/-\/blob\/master\/src\/top\/top.c",
                                "text": "horrors of manually bikeshedded plain-text languages"
                            },
                            {
                                "type": "text",
                                "text": " and the horrors of node-based languages where the programmer makes a simple one node change and then has to drag all the nodes around so they line up. Are there any examples of interesting solutions to look at?\n\nHere's how I mean a more horizontal layout:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "element 1",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " { "
                            },
                            {
                                "type": "text",
                                "text": "key 1",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": value 1, "
                            },
                            {
                                "type": "text",
                                "text": "key 2",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": value 2, "
                            },
                            {
                                "type": "text",
                                "text": "key 3",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": "
                            },
                            {
                                "type": "text",
                                "text": "surprise",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " { "
                            },
                            {
                                "type": "text",
                                "text": "key 1",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": value 1 } }\n"
                            },
                            {
                                "type": "text",
                                "text": "element 2",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " { "
                            },
                            {
                                "type": "text",
                                "text": "key 1",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": value 1 }"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nHere's how I mean a more vertical layout:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "element 1",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " {\n    "
                            },
                            {
                                "type": "text",
                                "text": "key 1",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": value 1,\n    "
                            },
                            {
                                "type": "text",
                                "text": "key 2",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": value 2,\n    "
                            },
                            {
                                "type": "text",
                                "text": "key 3",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": "
                            },
                            {
                                "type": "text",
                                "text": "surprise",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " {\n        "
                            },
                            {
                                "type": "text",
                                "text": "key 1",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": value 1,\n    },\n}\n"
                            },
                            {
                                "type": "text",
                                "text": "element 2",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " {\n    "
                            },
                            {
                                "type": "text",
                                "text": "key 1",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": value 1,\n}"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn the more horizontal layout, I can barely parse the surprise structure at a glance, and I can barely see if I've made a mistake in editing. It takes a lot less screen space though."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1710795604.617009",
        "client_msg_id": "6b2f0aff-23e0-4109-90f4-1b946eb657b4",
        "text": "Not sure if this really helps, but, navigating your examples with a screen reader (something I use for work but not full time) the first example is read verbatim, like a sentence, whereas the second example is read in a more structured way, making the user navigate from key to value, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qllms",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if this really helps, but, navigating your examples with a screen reader (something I use for work but not full time) the first example is read verbatim, like a sentence, whereas the second example is read in a more structured way, making the user navigate from key to value, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710796898.306469",
        "edited": {
            "user": "U04SAJZ155H",
            "ts": "1710796997.000000"
        },
        "client_msg_id": "2e0cd47e-8848-45c7-b151-5411b2098ea5",
        "text": "<@UMQ6LR9NZ> That's the reading you get from the plain text on Slack. In my real app, you get a different reading. I've found it helpful to test my apps with a screen reader, and I've decided to design separately for visual presentation and screen readers, so there's no need to adjust the visual presentation to work with screen readers. Screen readers get the full hierarchy of all nodes, and the user can use the arrow keys to navigate individual nodes. Each node reads a summary, and the user can navigate into it to read more about the child nodes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UQUpO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMQ6LR9NZ"
                            },
                            {
                                "type": "text",
                                "text": " That's the reading you get from the plain text on Slack. In my real app, you get a different reading. I've found it helpful to test my apps with a screen reader, and I've decided to design separately for visual presentation and screen readers, so there's no need to adjust the visual presentation to work with screen readers. Screen readers get the full hierarchy of all nodes, and the user can use the arrow keys to navigate individual nodes. Each node reads a summary, and the user can navigate into it to read more about the child nodes."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "captain-planet",
                "users": [
                    "UMQ6LR9NZ",
                    "UFEQUBNNT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "US370TRJA",
        "type": "message",
        "ts": "1710821462.327829",
        "client_msg_id": "C277820F-EBE5-4452-BA00-1FA5F7D09873",
        "text": "I think two general books about typography\/ print layout may be relevant to . Both make the point that text is scanned \/ reread repeatedly. Because it isn’t necessarily read linearly, having “landmarks” that gives your eyes something to hook onto and make related structures chunkable as shapes is valuable. These marks are provided by the indentation. Apart from the words, both of these books practice what they preach when it comes to creative and memorable text layouts.\n\n• what we see when we read by Peter mendelsund \n• Seeing with fresh eyes by Edward Tufte \nIn visual neuroscience they benchmarked the page width at which reading speed \/ comprehension drops off a cliff aside from the basic physical constraint of reducing the amount of eye or neck movement to follow along.\n\nThe specific count varies by language \/ what comprehension means for your context, but it helps provide empirical backing for the intuition for why there’s a sweet spot in between being vertical vs horizontal heavy.\n\nYour code \/ json data editor sounds neat. I get your concern about the risk of an author getting caught up in formatting bikesheds. One middle ground that comes to mind looking at your examples is letting the code be autoformatted however, but if I add a comment annotation before a section, in “view mode” for the next section, that section could be forced into a vertical or horizontal mode, whatever I the author recommended.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8449ebbf703",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8449ebbf703fcee4e1eadc3e78478f01.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Cameron",
            "real_name": "Cameron Yick",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cameron.yick",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lMESG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think two general books about typography\/ print layout may be relevant to . Both make the point that text is scanned \/ reread repeatedly. Because it isn’t necessarily read linearly, having “landmarks” that gives your eyes something to hook onto and make related structures chunkable as shapes is valuable. These marks are provided by the indentation. Apart from the words, both of these books practice what they preach when it comes to creative and memorable text layouts.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "what we see when we read by Peter mendelsund "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Seeing with fresh eyes by Edward Tufte "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "offset": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn visual neuroscience they benchmarked the page width at which reading speed \/ comprehension drops off a cliff aside from the basic physical constraint of reducing the amount of eye or neck movement to follow along.\n\nThe specific count varies by language \/ what comprehension means for your context, but it helps provide empirical backing for the intuition for why there’s a sweet spot in between being vertical vs horizontal heavy.\n\nYour code \/ json data editor sounds neat. I get your concern about the risk of an author getting caught up in formatting bikesheds. One middle ground that comes to mind looking at your examples is letting the code be autoformatted however, but if I add a comment annotation before a section, in “view mode” for the next section, that section could be forced into a vertical or horizontal mode, whatever I the author recommended."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]