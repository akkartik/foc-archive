[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1580891249.020000",
        "client_msg_id": "e1807f04-abad-4916-b5e0-a7207b379ad9",
        "text": "I don't know smalltalk :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579511208.198000",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EQ6P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know smalltalk "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1580898747.043200",
        "client_msg_id": "E61D5D12-51FC-4492-8ABA-3BA67441D3AE",
        "text": "It’s been too long since I read Tar Pit and reading some comments here I’m not sure if I want to invest the time to read it again.\n\nI do find a distinction between accidental and essential complexity useful. Of course, for it to be useful we need to (a) consider some context and (b) agree on what these mean in such context. If we don’t, we talk past each other. And “we” includes Tar Pit authors.\n\nFor instance, if I put my mathematician hat on, then of course stuff like available registers and memory and the time it takes for each instruction to execute are incidental complexities that I don’t need to describe efficiently what the essence of computation is and a Turing Machine is a beautifully simple model to cover all cases of what can be computed.\n\nNow, if I take that hat off I’m just an engineer and I’m furiously angry at that mathematician who clearly has never built anything useful in their life because then they would’ve noticed that a Turing Machine is a piece of crap that makes even the most basic calculation way too complicated to express. And how can you possibly do anything useful without considering the engineering challenges of building a real computation machine? Execution speed and memory and instruction sets and architecture and freaking laws of physics are clearly essential components of such a system.\n\nAnd let’s not even get into what happens when I put on my UX designer hat… or my business founder hat… let’s say they don’t get along that well either. It’s almost like a little FoC Slack just inside my head…\n\nTL;DR: Wear more :tophat:!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ln3Yi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s been too long since I read Tar Pit and reading some comments here I’m not sure if I want to invest the time to read it again.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I do find a distinction between accidental and essential complexity useful. Of course, for it to be useful we need to (a) consider some context and (b) agree on what these mean in such context. If we don’t, we talk past each other. And “we” includes Tar Pit authors.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nFor instance, if I put my mathematician hat on, then of course stuff like available registers and memory and the time it takes for each instruction to execute are incidental complexities that I don’t need to describe efficiently what the essence of computation is and a Turing Machine is a beautifully simple model to cover all cases of what can be computed.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Now, if I take that hat off I’m just an engineer and I’m furiously angry at that mathematician who clearly has never built anything useful in their life because then they would’ve noticed that a Turing Machine is a piece of crap that makes even the most basic calculation way too complicated to express. And how can you possibly do anything useful without considering the engineering challenges of building a real computation machine? Execution speed and memory and instruction sets and architecture and freaking laws of physics are clearly essential components of such a system.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nAnd let’s not even get into what happens when I put on my UX designer hat… or my business founder hat… let’s say they don’t get along that well either. It’s almost like a little FoC Slack just inside my head…\n\n"
                            },
                            {
                                "type": "text",
                                "text": "TL;DR: Wear more "
                            },
                            {
                                "type": "emoji",
                                "name": "tophat",
                                "unicode": "1f3a9"
                            },
                            {
                                "type": "text",
                                "text": "!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJ6LDMMN0"
                ],
                "count": 2
            },
            {
                "name": "billed_cap",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UT39HTL9X",
        "type": "message",
        "ts": "1580920649.043500",
        "client_msg_id": "57d64105-a448-4300-b772-2c33684f76c8",
        "text": "<https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/ezaxxq\/what_makes_a_language_easy_to_learn_for_a_novice\/?utm_medium=android_app&amp;utm_source=share|https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/ezaxxq\/what_makes_a_language_easy_to_learn_for_a_novice\/?utm_medium=android_app&amp;utm_source=share>\n\nA discussion I'm guessing people here would like to contribute to",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g84a30c4b94b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/84a30c4b94b829ef94b42170de8f2edf.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Joseph Ivie",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "josephivie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "reddit",
                "title": "What makes a language easy to learn for a novice?",
                "title_link": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/ezaxxq\/what_makes_a_language_easy_to_learn_for_a_novice\/?utm_medium=android_app&utm_source=share",
                "text": "I am thinking about creating a programming language for business automation and I imagine most of my target audience has never writenn a single...",
                "fallback": "reddit: What makes a language easy to learn for a novice?",
                "thumb_url": "https:\/\/www.redditstatic.com\/new-icon.png",
                "from_url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/ezaxxq\/what_makes_a_language_easy_to_learn_for_a_novice\/?utm_medium=android_app&utm_source=share",
                "thumb_width": 256,
                "thumb_height": 256,
                "service_icon": "http:\/\/www.redditstatic.com\/desktop2x\/img\/favicon\/apple-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/ezaxxq\/what_makes_a_language_easy_to_learn_for_a_novice\/?utm_medium=android_app&amp;utm_source=share"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kleg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/ezaxxq\/what_makes_a_language_easy_to_learn_for_a_novice\/?utm_medium=android_app&utm_source=share",
                                "text": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/ezaxxq\/what_makes_a_language_easy_to_learn_for_a_novice\/?utm_medium=android_app&utm_source=share"
                            },
                            {
                                "type": "text",
                                "text": "\n\nA discussion I'm guessing people here would like to contribute to"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "popcorn",
                "users": [
                    "U5STGTB3J",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1580924471.043800",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1580925647.000000"
        },
        "client_msg_id": "298eb683-d3fc-4995-8e27-c4221dcc137e",
        "text": "&gt; Is it not the case that property-based testing gives you that same information?\nThere's an overlap but not quite. I mean specifically abstract interpretation (property testing does actual execution with a large number of inputs).\n\nFor example, if you have a chunk of untyped Python code you can informally reason about the types of values flowing around by reading and simulating in your head. An abstract interpreter (pytype) will actually evaluate the code in terms of types (not values) and can show you the predicted types of various parameters and locals. It can get much further than mental simulation, because it can evaluate much larger chunks of the code. Technically this might belong in formal reasoning, which the paper mentions in the following paragraph:\n&gt; The bottom line is that allways of attempting to understand a system have their limitations (and this includes both informal reasoning— which is limited in scope, imprecise and hence prone to error — as well as formal reasoning— which is dependent upon the accuracy of a specification)\nI think the abstract interpretation approach could be extended so you \"feed in scenarios\", e.g. the user says \"what if the local `a` here is an integer between 0 and 1000 and `b` is an empty list\" and the system does abstract interpretation (specifically one execution and *not* 1000 different executions) to find other properties of an execution under that scenario - dead code, exceptions, and notes  \"`c` will be `a+20` \" etc.\n\nA more apt name for this kind of approach might be *computer aided reasoning* - we're not reading static code on paper and we're not writing complex types and have the system prove something, but we're simply asking targeted questions. I'd love to ask the system \"show me why this dependency is invoked when this kind of request arrives\" and then follow up by zooming into a part of the abstract execution trace. A related idea is \"program slicing\" - point to a value and have the computer tell you the subpart (slice) of the program that affects that variable. I think these are all good ideas to make state trackable, a different angle than going state-free and aiding informal reasoning.\n\nEven with the most 'readable' code, I'll note that reading doesn't scale very far - how much can you read in a day anyway? We might climb out of a small tar pit only to fall into a larger one. But targeted questions in a query language might be able to handle very large programs and even large systems with multiple programs! They'd have to be built using a model that is designed for something like this and scales up.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/tdH",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it not the case that property-based testing gives you that same information?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's an overlap but not quite. I mean specifically abstract interpretation (property testing does actual execution with a large number of inputs).\n\nFor example, if you have a chunk of untyped Python code you can informally reason about the types of values flowing around by reading and simulating in your head. An abstract interpreter (pytype) will actually evaluate the code in terms of types (not values) and can show you the predicted types of various parameters and locals. It can get much further than mental simulation, because it can evaluate much larger chunks of the code. Technically this might belong in formal reasoning, which the paper mentions in the following paragraph:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The bottom line is that allways of attempting to understand a system have their limitations (and this includes both informal reasoning— which is limited in scope, imprecise and hence prone to error — as well as formal reasoning— which is dependent upon the accuracy of a specification)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI think the abstract interpretation approach could be extended so you \"feed in scenarios\", e.g. the user says \"what if the local "
                            },
                            {
                                "type": "text",
                                "text": "a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " here is an integer between 0 and 1000 and "
                            },
                            {
                                "type": "text",
                                "text": "b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is an empty list\" and the system does abstract interpretation (specifically one execution and *not* 1000 different executions) to find other properties of an execution under that scenario - dead code, exceptions, and notes  \""
                            },
                            {
                                "type": "text",
                                "text": "c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " will be "
                            },
                            {
                                "type": "text",
                                "text": "a+20",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \" etc.\n\nA more apt name for this kind of approach might be "
                            },
                            {
                                "type": "text",
                                "text": "computer aided reasoning",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - we're not reading static code on paper and we're not writing complex types and have the system prove something, but we're simply asking targeted questions. I'd love to ask the system \"show me why this dependency is invoked when this kind of request arrives\" and then follow up by zooming into a part of the abstract execution trace. A related idea is \"program slicing\" - point to a value and have the computer tell you the subpart (slice) of the program that affects that variable. I think these are all good ideas to make state trackable, a different angle than going state-free and aiding informal reasoning.\n\nEven with the most 'readable' code, I'll note that reading doesn't scale very far - how much can you read in a day anyway? We might climb out of a small tar pit only to fall into a larger one. But targeted questions in a query language might be able to handle very large programs and even large systems with multiple programs! They'd have to be built using a model that is designed for something like this and scales up."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1580924992.044000",
        "client_msg_id": "475f8514-6eba-456f-8b82-04e682d63f7b",
        "text": "Here's a related tweet thread: <https:\/\/twitter.com\/chatur_shalabh\/status\/1126201095636652032>. Take the simplest of programs and compose them in a small distributed system, and you'll see informal reasoning ability disappear. How about e_xpect complexity and design to handle it_ rather than _avoid complexity_.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/chatur_shalabh|@chatur_shalabh>: <https:\/\/twitter.com\/stevekrouse|@stevekrouse> But what if we want emergent complexity as it could lead to much larger and richer processes than possible with mentally case-analyzed and hand assembled programs? What we really want is a way to curb emergence of undesirable behavior. So maybe we should seek a way to express 1\/",
                "ts": 1557342239,
                "author_name": "Shalabh Chaturvedi",
                "author_link": "https:\/\/twitter.com\/chatur_shalabh\/status\/1126201095636652032",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1168926214343536641\/wNcbqYu0_normal.jpg",
                "author_subname": "@chatur_shalabh",
                "text": "<https:\/\/twitter.com\/stevekrouse|@stevekrouse> But what if we want emergent complexity as it could lead to much larger and richer processes than possible with mentally case-analyzed and hand assembled programs? What we really want is a way to curb emergence of undesirable behavior. So maybe we should seek a way to express 1\/",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/chatur_shalabh\/status\/1126201095636652032",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/chatur_shalabh\/status\/1126201095636652032",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TaTgH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a related tweet thread: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/chatur_shalabh\/status\/1126201095636652032"
                            },
                            {
                                "type": "text",
                                "text": ". Take the simplest of programs and compose them in a small distributed system, and you'll see informal reasoning ability disappear. How about e"
                            },
                            {
                                "type": "text",
                                "text": "xpect complexity and design to handle it",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rather than "
                            },
                            {
                                "type": "text",
                                "text": "avoid complexity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1580929856.044900",
        "client_msg_id": "cb18175b-0ad1-40a7-8eb0-2c4b2869a07a",
        "text": "Me neither. haha",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579511208.198000",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wgeL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Me neither. haha"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USUMN6XLH",
        "type": "message",
        "ts": "1580955499.046800",
        "client_msg_id": "F5955EFE-A2E0-4B21-B80C-91AAE5CB0A30",
        "text": "What are people’s opinions on Behavioral Programming?\n<https:\/\/youtu.be\/cXuvCMG21Ss>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "729eecb0df1d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-03\/5678948713014_729eecb0df1d998c9bcc_72.jpg",
            "first_name": "Josh",
            "real_name": "Josh Cho",
            "display_name": "Josh Cho",
            "team": "T5TCAFTA9",
            "name": "joshchonpc",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580955499.046800",
        "reply_count": 14,
        "reply_users_count": 8,
        "latest_reply": "1581381032.079000",
        "reply_users": [
            "UEQ6M68H0",
            "UP6G25H35",
            "UL3CJ7YKC",
            "USUMN6XLH",
            "UP28ETUSE",
            "UQ706GB9U",
            "UFEQUBNNT",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UEQ6M68H0",
                "ts": "1580966537.047400"
            },
            {
                "user": "UP6G25H35",
                "ts": "1580967686.047600"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1581020217.049100"
            },
            {
                "user": "USUMN6XLH",
                "ts": "1581023233.050100"
            },
            {
                "user": "UP28ETUSE",
                "ts": "1581065852.052000"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1581118402.053700"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1581238268.054500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1581288917.060400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1581289273.060800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1581289598.061000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1581290295.061600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1581290720.061800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1581292548.062100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1581381032.079000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Append only development with React — Luca Matteis",
                "title_link": "https:\/\/youtu.be\/cXuvCMG21Ss",
                "author_name": "React Finland",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCYRsLerK8J8uGWXFaprYa2A",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/cXuvCMG21Ss\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Append only development with React — Luca Matteis",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/cXuvCMG21Ss?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/cXuvCMG21Ss",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/cXuvCMG21Ss"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QcZYi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are people’s opinions on Behavioral Programming?\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/cXuvCMG21Ss"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "ULM3U6275",
                    "UFEQUBNNT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580962206.047000",
        "client_msg_id": "9971d1a4-4858-4dd3-a0e7-399ae74280a0",
        "text": "This is the most generous I've yet heard Blow be when talking about the programming communities he doesn't have fondness for — academic, JavaScript\/React, visual programming. It was nice to hear him articular the details of his qualms with them, rather than the normal \"those people are wrongheaded \/ idiots\"-like statements he's made in every previous instance I've seen.\n\nI really enjoyed this podcast, and would have missed it otherwise. Thanks for mentioning it here!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580480732.286100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gcD5=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is the most generous I've yet heard Blow be when talking about the programming communities he doesn't have fondness for — academic, JavaScript\/React, visual programming. It was nice to hear him articular the details of his qualms with them, rather than the normal \"those people are wrongheaded \/ idiots\"-like statements he's made in every previous instance I've seen.\n\nI really enjoyed this podcast, and would have missed it otherwise. Thanks for mentioning it here!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UE0ETTCG7",
                    "UGLSY9X3J"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580962298.047200",
        "client_msg_id": "669576f8-b620-409b-b8b1-1e2c912e0166",
        "text": "* articulate (I would just edit my message to fix that typo, but for some reason the Mac Slack client has had some sort of editing bug in the past week. Thanks, JavaScripters!)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580480732.286100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CzCl3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "* articulate (I would just edit my message to fix that typo, but for some reason the Mac Slack client has had some sort of editing bug in the past week. Thanks, JavaScripters!)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1580966537.047400",
        "client_msg_id": "6d83f4f1-1166-498f-93ca-1d2d2a543557",
        "text": "There are several competing theories of how to look at programming. One theory is the actor model, which is a pure object oriented conception, from Hewitt i believe, and was embodied in various languages like smalltalk, where messages are passed. Other systems make explicit a finite state machine, and you have state transitions caused by various events. There are other approaches. But as Joe Armstrong pointed out in his talk with Hoare and Hewitt, at the reunion of the \"3 old men\", only his Erlang\/Elixir system actually worked. The concept of having the agents track the state themselves leads to chaos; an almost impossible to debug system.  I think Luca's example of TicTacToe shows how it makes the game far harder to understand and prove correct than something much more conventional.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580955499.046800",
        "parent_user_id": "USUMN6XLH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kbL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are several competing theories of how to look at programming. One theory is the actor model, which is a pure object oriented conception, from Hewitt i believe, and was embodied in various languages like smalltalk, where messages are passed. Other systems make explicit a finite state machine, and you have state transitions caused by various events. There are other approaches. But as Joe Armstrong pointed out in his talk with Hoare and Hewitt, at the reunion of the \"3 old men\", only his Erlang\/Elixir system actually worked. The concept of having the agents track the state themselves leads to chaos; an almost impossible to debug system.  I think Luca's example of TicTacToe shows how it makes the game far harder to understand and prove correct than something much more conventional."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "USUMN6XLH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UP6G25H35",
        "type": "message",
        "ts": "1580967686.047600",
        "client_msg_id": "c5b58569-4e8f-40f3-b2b7-354a08244383",
        "text": "\"Who needs it today?\" Paul Graham asks this question a lot. It helps you workout who the early adopters are.\n\nThis rather looks like an idea looking for a problem. Which sometimes works. But it can be hard to find early adopters if you start with an idea and then search for early adopters. Have a read of <http:\/\/www.paulgraham.com\/bronze.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "57dceb337de9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-12\/870368572213_57dceb337de9d471d315_72.jpg",
            "first_name": "Eddy",
            "real_name": "Eddy Parkinson",
            "display_name": "Eddy Parkinson",
            "team": "T5TCAFTA9",
            "name": "eddyparkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580955499.046800",
        "parent_user_id": "USUMN6XLH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ISc5W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Who needs it today?\" Paul Graham asks this question a lot. It helps you workout who the early adopters are.\n\nThis rather looks like an idea looking for a problem. Which sometimes works. But it can be hard to find early adopters if you start with an idea and then search for early adopters. Have a read of "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.paulgraham.com\/bronze.html"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]