[
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1561021946.032700",
        "client_msg_id": "62af2546-91c9-4e4f-917e-a6cec48fa518",
        "text": "Paul Chiusano sums it up pretty well:\n\n<https:\/\/pchiusano.github.io\/2016-09-15\/static-vs-dynamic.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wmt8d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Paul Chiusano sums it up pretty well:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pchiusano.github.io\/2016-09-15\/static-vs-dynamic.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1561022018.032900",
        "client_msg_id": "6507a74b-6a8c-4c73-aed6-99cda4ee35df",
        "text": "“driving on roads. Yes, it can be a constraint. You can’t just drive through a river and over a mountain in a straight line from point A to point B. You have to stay on the roads, learn the traffic laws, and so on. But you still get to your destination, and you probably get there faster.”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cvGy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“driving on roads. Yes, it can be a constraint. You can’t just drive through a river and over a mountain in a straight line from point A to point B. You have to stay on the roads, learn the traffic laws, and so on. But you still get to your destination, and you probably get there faster.”"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U78TZ437S"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1561038955.033300",
        "client_msg_id": "45ead45f-411a-4eb8-b87c-e4683c0837e6",
        "text": "Something that has been bothering me for a while in the dynamic-static debate is the absence of application context. In my experience, the added value of static typing depends very much on what you are doing. In particular on the kinds of mistakes that are the most difficult ones to deal with.\nAs an example, in much of scientific computing, most data is \"float\" or \"array of float\" and most mistakes happen at the value level (a missing factor 2, an index off by one). Static typing doesn't help much with those mistakes, so its cost (in terms of language complexity) is hard to justify.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xpbbA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something that has been bothering me for a while in the dynamic-static debate is the absence of application context. In my experience, the added value of static typing depends very much on what you are doing. In particular on the kinds of mistakes that are the most difficult ones to deal with.\nAs an example, in much of scientific computing, most data is \"float\" or \"array of float\" and most mistakes happen at the value level (a missing factor 2, an index off by one). Static typing doesn't help much with those mistakes, so its cost (in terms of language complexity) is hard to justify."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561039198.034000",
        "client_msg_id": "90724ff7-1482-4e82-bb85-0822a337c27f",
        "text": "What is the “ununify api” mentioned in the podcast on occasion? A quick Google search didn’t yield anything.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561039198.034000",
        "reply_count": 6,
        "reply_users_count": 2,
        "latest_reply": "1561063133.047700",
        "reply_users": [
            "U5TCAFTD3",
            "UJK8MKYAZ"
        ],
        "replies": [
            {
                "user": "U5TCAFTD3",
                "ts": "1561062676.044600"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561062821.045000"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561062967.045200"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1561062972.045400"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561063091.046700"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561063133.047700"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1561063133.047700",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UA5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What is the “ununify api” mentioned in the podcast on occasion? A quick Google search didn’t yield anything."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1561041257.034100",
        "client_msg_id": "d0f0dbf2-5dc7-4e5e-bc09-6f78d947f853",
        "text": "And due to complaints on Hackernews and other places about it not being open source he removed the Mac binaries and will not release V until the 22nd...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561010003.031800",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XT=n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And due to complaints on Hackernews and other places about it not being open source he removed the Mac binaries and will not release V until the 22nd..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK69SS8LB",
        "type": "message",
        "ts": "1561045095.034400",
        "client_msg_id": "61e8ddd8-37f2-4e97-bf70-3673869b3c92",
        "text": "Ah. So it sounds like this particular issue is that the drawing tool isn't flexible enough to allow users to construct figures that make sense to them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb61a4a4200",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3db61a4a42000b4ff62648c0979e8920.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Ken Kan",
            "display_name": "Ken Kan",
            "team": "T5TCAFTA9",
            "name": "kenhkan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dl4=0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah. So it sounds like this particular issue is that the drawing tool isn't flexible enough to allow users to construct figures that make sense to them."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1561046023.034600",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1561046143.000000"
        },
        "client_msg_id": "68286c3a-248d-4665-9e3e-caaf8f97abf1",
        "text": "It has to walk the line between flexibility and automation. And as a WYSIWYG tool it has to do it _perfectly_. Very hard problem. It's a much more tractable problem as a textual language like LaTeX. The tool gets more slack in terms of latency, and that changes the game. A textual tool can be just internally consistent and that's good enough.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xOUS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It has to walk the line between flexibility and automation. And as a WYSIWYG tool it has to do it "
                            },
                            {
                                "type": "text",
                                "text": "perfectly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Very hard problem. It's a much more tractable problem as a textual language like LaTeX. The tool gets more slack in terms of latency, and that changes the game. A textual tool can be just internally consistent and that's good enough."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561046516.034900",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1561047814.000000"
        },
        "client_msg_id": "15e3850b-9601-4a0c-a833-80414ef4ae0e",
        "text": "I find it hard to not become emotionally attached to the tools I use. I'll admit I have become very fond of Clojure as the community has taught me a lot about software. Is Clojure  something i should be emotionally attached to? An objective part of me says no, but a deeper part of me knows this is impossible.\n\nWith that in mind, can i present that a review of large scale study on reducing bugs in programs ranked Clojure, a dynamic language, as doing the best. Ruby, Haskell and Clojure were found to do very well. That's two dynamic languages to one static.\n\n<https:\/\/arxiv.org\/pdf\/1901.10220.pdf>\n\nThe more important take away, was that if the advantage to static typing is great as some report, then it should surely show a significant difference. Yet no study i have seen, has concluded this. No argument I have heard has given me the clarity to understand why it would be the case either.\n\nIn a post like <https:\/\/pchiusano.github.io\/2016-09-15\/static-vs-dynamic.html> that lists pros and cons, i often agree with both lists. However, to conclude that one leads to great efficiency seems short sited. The cons he lists can be used to refute the pros.  As the assertion that static types are better, seems to be a wide spread belief in the software community, i often feel compelled to voice an alternate point of view.\n\nI believe that we should have the ability to compose the ideas. To drop mentally tracking types in a context where it offers more overhead then it offers clarity and to re-establish them in the inverse.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D4dsj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find it hard to not become emotionally attached to the tools I use. I'll admit I have become very fond of Clojure as the community has taught me a lot about software. Is Clojure  something i should be emotionally attached to? An objective part of me says no, but a deeper part of me knows this is impossible.\n\nWith that in mind, can i present that a review of large scale study on reducing bugs in programs ranked Clojure, a dynamic language, as doing the best. Ruby, Haskell and Clojure were found to do very well. That's two dynamic languages to one static.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arxiv.org\/pdf\/1901.10220.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe more important take away, was that if the advantage to static typing is great as some report, then it should surely show a significant difference. Yet no study i have seen, has concluded this. No argument I have heard has given me the clarity to understand why it would be the case either.\n\nIn a post like "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pchiusano.github.io\/2016-09-15\/static-vs-dynamic.html"
                            },
                            {
                                "type": "text",
                                "text": " that lists pros and cons, i often agree with both lists. However, to conclude that one leads to great efficiency seems short sited. The cons he lists can be used to refute the pros.  As the assertion that static types are better, seems to be a wide spread belief in the software community, i often feel compelled to voice an alternate point of view.\n\nI believe that we should have the ability to compose the ideas. To drop mentally tracking types in a context where it offers more overhead then it offers clarity and to re-establish them in the inverse."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK69SS8LB",
        "type": "message",
        "ts": "1561046554.035100",
        "client_msg_id": "252559e0-1ba3-453a-8dcd-c1b42277aa80",
        "text": "What do you see in \"automation\"? What is being automated?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb61a4a4200",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3db61a4a42000b4ff62648c0979e8920.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Ken Kan",
            "display_name": "Ken Kan",
            "team": "T5TCAFTA9",
            "name": "kenhkan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gf7JF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What do you see in \"automation\"? What is being automated?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1561046728.035400",
        "client_msg_id": "2de9c2fa-9e49-4858-b57e-d8b18c717845",
        "text": "In this context, automation = abstraction. If you want a pixel-level drawing tool, there are many decent solutions out there. (My favorite is Xfig as a front-end for SVG.) What we need is a pixel-level drawing tool along with some notion of a library of pre-drawn primitives. Packaged in a way that allows you to bump down to pixel-level manipulation anytime you want.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zIi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In this context, automation = abstraction. If you want a pixel-level drawing tool, there are many decent solutions out there. (My favorite is Xfig as a front-end for SVG.) What we need is a pixel-level drawing tool along with some notion of a library of pre-drawn primitives. Packaged in a way that allows you to bump down to pixel-level manipulation anytime you want."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1561047472.035900",
        "client_msg_id": "b3ce71b1-026d-480b-81de-0a44676416f1",
        "text": "In the context of a GUI libraries still feel like an unsolved problem. When I want to call a function I have to import a library and know the right name within it. GUIs don't want to restrict themselves to that klunky model. But maybe they should provide it as a backstop when all else fails. Because all the snazzy stuff doesn't always work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6qh5F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the context of a GUI libraries still feel like an unsolved problem. When I want to call a function I have to import a library and know the right name within it. GUIs don't want to restrict themselves to that klunky model. But maybe they should provide it as a backstop when all else fails. Because all the snazzy stuff doesn't always work."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFS53UWE5",
        "type": "message",
        "ts": "1561050698.036700",
        "client_msg_id": "0b73e736-bc0a-4426-9a87-585b56f569b7",
        "text": ":neutral_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a88832bbbfe7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-12\/1359700849458_a88832bbbfe7c26df530_72.jpg",
            "first_name": "John",
            "real_name": "John Austin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kleptine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561010003.031800",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yVTTK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "neutral_face",
                                "unicode": "1f610"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1561053128.036900",
        "client_msg_id": "475c42fb-1e6f-4138-8c0e-5a29eab39a1b",
        "text": "<@UJNJQD2AC> Maybe there aren’t rigorous experiments, but you can find many telling experience reports.\n\nFor example in a past incarnation <@U78TZ437S> and me were very much in the Python camp (even though we both mostly used C\/C++ in our jobs).\nEyal tried to use Python on a non-small personal project - and attempted to implement a projectional editor in Python!\nHis experience with that project in Python was that whenever he wanted to refactor it was a nightmare. He vividly remembered the pain points, and when subsequently he switched to the Haskell camp and tried to implement a projectional editor in Haskell (which is Lamdu) he didn’t get stuck and had much greater success!\n\nAs for another example - my company’s site <http:\/\/soundradix.com|soundradix.com> is based on Python\/Django. One day someone pushed a change which caused a bug and then him and me spent the whole night debugging it. I had to cancel my plans with my girlfriend because of that and that wasn’t cool. And after finally finding and solving it, it turned out that it was something that in any static language would had been quickly caught at development time and not after a day of debugging after it was deployed, and would not require cancelling any personal plans on short notice. That was a case where it was obvious how static types could had improved my quality of life.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6V7PG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJNJQD2AC"
                            },
                            {
                                "type": "text",
                                "text": " Maybe there aren’t rigorous experiments, but you can find many telling experience reports.\n\nFor example in a past incarnation "
                            },
                            {
                                "type": "user",
                                "user_id": "U78TZ437S"
                            },
                            {
                                "type": "text",
                                "text": " and me were very much in the Python camp (even though we both mostly used C\/C++ in our jobs).\nEyal tried to use Python on a non-small personal project - and attempted to implement a projectional editor in Python!\nHis experience with that project in Python was that whenever he wanted to refactor it was a nightmare. He vividly remembered the pain points, and when subsequently he switched to the Haskell camp and tried to implement a projectional editor in Haskell (which is Lamdu) he didn’t get stuck and had much greater success!\n\nAs for another example - my company’s site "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/soundradix.com",
                                "text": "soundradix.com"
                            },
                            {
                                "type": "text",
                                "text": " is based on Python\/Django. One day someone pushed a change which caused a bug and then him and me spent the whole night debugging it. I had to cancel my plans with my girlfriend because of that and that wasn’t cool. And after finally finding and solving it, it turned out that it was something that in any static language would had been quickly caught at development time and not after a day of debugging after it was deployed, and would not require cancelling any personal plans on short notice. That was a case where it was obvious how static types could had improved my quality of life."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561055464.037100",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1561055856.000000"
        },
        "client_msg_id": "8650f09e-60aa-4059-aeef-0e539a593b9c",
        "text": "<@U79HM6726> I think i understand where your coming from. I agree it's the case that static types can give insight into the code and in doing so prevent errors. I think its one tool among many others that we can apply to that effect, but i'm not at the point where i personal believe its a tool that universally improves my ability to reason or prevent errors. Maybe how its applied matters greatly. By linking to a study, that finds no strong correlation between bugs and static typing, i hope to motivate the discussion about why and how types help, rather then glossing over that and going straight to why can't we convince everyone to use them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iJd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U79HM6726"
                            },
                            {
                                "type": "text",
                                "text": " I think i understand where your coming from. I agree it's the case that static types can give insight into the code and in doing so prevent errors. I think its one tool among many others that we can apply to that effect, but i'm not at the point where i personal believe its a tool that universally improves my ability to reason or prevent errors. Maybe how its applied matters greatly. By linking to a study, that finds no strong correlation between bugs and static typing, i hope to motivate the discussion about why and how types help, rather then glossing over that and going straight to why can't we convince everyone to use them."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561056918.039200",
        "client_msg_id": "9694237a-28fb-4777-811a-90453b54b3ce",
        "text": "The above discussion about dynamic vs static typing is very interesting. I personally favor static typing (and many here seem too also). But, recently, I've become curious about what's making the Clojure, Elixir, etc people so damn happy. Or, in other words, I'd like to hear a steelman of \"dynamic typing is awesome\". Can anyone help?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "reply_count": 33,
        "reply_users_count": 7,
        "latest_reply": "1561645458.402300",
        "reply_users": [
            "UJK8MKYAZ",
            "UJTHWNH2T",
            "UJNJQD2AC",
            "UJUGB1XGD",
            "UHWC9PXBL",
            "U79HM6726",
            "UJN1TAYEQ"
        ],
        "replies": [
            {
                "user": "UJK8MKYAZ",
                "ts": "1561057543.039300"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561057629.039500"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1561057758.039700"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1561057813.039900"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561057943.040200"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561057967.040400"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1561058111.040600"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561058692.040800"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561058772.041100"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561059178.041600"
            },
            {
                "user": "UJUGB1XGD",
                "ts": "1561061054.042100"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561061179.042300"
            },
            {
                "user": "UJUGB1XGD",
                "ts": "1561061389.042500"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561061503.042700"
            },
            {
                "user": "UJUGB1XGD",
                "ts": "1561061505.042900"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561061614.043100"
            },
            {
                "user": "UJUGB1XGD",
                "ts": "1561061684.043300"
            },
            {
                "user": "UJUGB1XGD",
                "ts": "1561061928.043500"
            },
            {
                "user": "UJUGB1XGD",
                "ts": "1561062208.043700"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561062514.044000"
            },
            {
                "user": "UJUGB1XGD",
                "ts": "1561062814.044800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1561075564.059300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1561075600.059700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1561075618.060100"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1561077146.060500"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561078888.060700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1561090005.078400"
            },
            {
                "user": "U79HM6726",
                "ts": "1561110874.148300"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1561145086.212200"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1561146426.213000"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1561148111.214100"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561587979.391000"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1561645458.402300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BMG+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The above discussion about dynamic vs static typing is very interesting. I personally favor static typing (and many here seem too also). But, recently, I've become curious about what's making the Clojure, Elixir, etc people so damn happy. Or, in other words, I'd like to hear a steelman of \"dynamic typing is awesome\". Can anyone help?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561057543.039300",
        "client_msg_id": "e64a55a7-3466-43ff-a719-eca4dc47d1ee",
        "text": "The thing that’s essential to the Clojure experience for me is the interactivity of it all. I connect via a REPL and can introspect and grow my program over time in a way that’s very organic and satisfying. I don’t think this experience precludes static typing, but Lisp tooling for this is very advanced already, and considered a first class, essential feature.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Jycq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The thing that’s essential to the Clojure experience for me is the interactivity of it all. I connect via a REPL and can introspect and grow my program over time in a way that’s very organic and satisfying. I don’t think this experience precludes static typing, but Lisp tooling for this is very advanced already, and considered a first class, essential feature."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJTHWNH2T"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561057629.039500",
        "client_msg_id": "0d9f5c8b-b096-4b5a-add3-98e9b195f612",
        "text": "I also really like that there aren’t crazy abstract datatypes or classes - everything is just lists, sets, maps, or vectors, and once you learn the core library, you can do anything on those that you need to do.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tyl1c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also really like that there aren’t crazy abstract datatypes or classes - everything is just lists, sets, maps, or vectors, and once you learn the core library, you can do anything on those that you need to do."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561057758.039700",
        "client_msg_id": "3b36043e-659f-434c-83fd-68a07805290a",
        "text": "Your post reminded I wanted to add something to this, at least for Clojure and Elixir, are they awesome *despite* not having static typing? Or, are there really essential features of these two which is definitely impossible with static typing?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tTUS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Your post reminded I wanted to add something to this, at least for Clojure and Elixir, are they awesome "
                            },
                            {
                                "type": "text",
                                "text": "despite",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " not having static typing? Or, are there really essential features of these two which is definitely impossible with static typing?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561057813.039900",
        "client_msg_id": "6104a2fe-3927-44d7-ae4b-3d3ec76d7714",
        "text": "Along these lines, I was looking for something like Elixir but with static typing. But, all the projects which fit the bill (running on BEAM) are immature (it seemed to me). I know for the Lisp case there is Hackett, Typed Racket, more?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "40ToM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Along these lines, I was looking for something like Elixir but with static typing. But, all the projects which fit the bill (running on BEAM) are immature (it seemed to me). I know for the Lisp case there is Hackett, Typed Racket, more?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561057943.040200",
        "client_msg_id": "16a30f75-f442-4916-aa71-4032f9f35ee9",
        "text": "I don’t know, and super curious about this as well. I know typed lisp is really, really hard (at least, it’s hard to type something like `eval`). I don’t know if its possible to have all my fun Clojure features with a static typed language. I really love the simplicity of Lisp syntax, but types do seem really neat - it would be great if I didn’t have to choose only one.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a7pFr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don’t know, and super curious about this as well. I know typed lisp is really, really hard (at least, it’s hard to type something like "
                            },
                            {
                                "type": "text",
                                "text": "eval",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "). I don’t know if its possible to have all my fun Clojure features with a static typed language. I really love the simplicity of Lisp syntax, but types do seem really neat - it would be great if I didn’t have to choose only one."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561057967.040400",
        "client_msg_id": "fdb15c3e-3eae-4315-b944-5d0d77fd847f",
        "text": "I’ll ask on the Clojure slack.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PlXhZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ll ask on the Clojure slack."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561058111.040600",
        "client_msg_id": "da010512-9be5-46ca-8047-a22f501eba29",
        "text": "Good. Nice. I mentioned those two, but unfortunately I don't know enough about all of this to read their docs and evaluate it properly. Hopefully someone will swoop in here and help us :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EGe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good. Nice. I mentioned those two, but unfortunately I don't know enough about all of this to read their docs and evaluate it properly. Hopefully someone will swoop in here and help us "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561058692.040800",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1561058823.000000"
        },
        "client_msg_id": "fe2d0f7d-5b32-48b2-87b1-65bc5d8a725e",
        "text": "I'm fairly sure being dynamic, among other things which are equally important, was a design goal from the start.. I can't speak authoritatively on the subject, but thats always been my impression. Its highlighted right on the main site <https:\/\/clojure.org\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KHl7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm fairly sure being dynamic, among other things which are equally important, was a design goal from the start.. I can't speak authoritatively on the subject, but thats always been my impression. Its highlighted right on the main site "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/clojure.org\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561058772.041100",
        "client_msg_id": "a50a6f21-3ba2-4785-bf0f-a73e393b6a8f",
        "text": "My frustration on long debts about static vs dynamic is that those other important aspects quickly get swept under the rug. Things are often more then the sum of there parts.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DxfX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My frustration on long debts about static vs dynamic is that those other important aspects quickly get swept under the rug. Things are often more then the sum of there parts."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561059178.041600",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1561059332.000000"
        },
        "client_msg_id": "69c7856e-66b8-4c51-bcb5-43627a06563b",
        "text": "&gt; everything is just lists, sets, maps, or vectors, and once you learn the core library, you can do anything on those that you need to do.\n\nThis is part of the equation, Rich has really put his foot down and said these are the Types you need. He has constrained the language in such a way that its easy to use those and harder to make others. I think this is part of the philosophy behind \"simple made easy\"\n\nIt seems static typing proponents are looking for strong guarantees and Clojure offers them by limiting types to those which have proven utility and synergy with the physical world while exposing high level abstractions over them. This allows you to offload the burden of juggling the types and compose with confidence knowing everything can be used as a collection.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QqI",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "everything is just lists, sets, maps, or vectors, and once you learn the core library, you can do anything on those that you need to do."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThis is part of the equation, Rich has really put his foot down and said these are the Types you need. He has constrained the language in such a way that its easy to use those and harder to make others. I think this is part of the philosophy behind \"simple made easy\"\n\nIt seems static typing proponents are looking for strong guarantees and Clojure offers them by limiting types to those which have proven utility and synergy with the physical world while exposing high level abstractions over them. This allows you to offload the burden of juggling the types and compose with confidence knowing everything can be used as a collection."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1561061054.042100",
        "client_msg_id": "c8798855-e8f4-4027-82bc-afea466c65ef",
        "text": "on what dimensions is `clojure.spec` a static type system, vs not a static type system?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4OZvL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "on what dimensions is "
                            },
                            {
                                "type": "text",
                                "text": "clojure.spec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a static type system, vs not a static type system?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561061179.042300",
        "client_msg_id": "b2bafba5-c14a-4a6e-8267-d7119a88b121",
        "text": "predicates seem like a fundamentally different primitive than types. But that’s just an intuition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Wg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "predicates seem like a fundamentally different primitive than types. But that’s just an intuition."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1561061389.042500",
        "client_msg_id": "8190ff69-a610-4e05-a59a-57b54c15a96b",
        "text": "Not to go all <#CKC6FM9DF|category-theory> here, but one way to look at a type is as a set of all possible values of that type, and a potentially-infinite set is equivalent to a predicate…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dB\/D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not to go all "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CKC6FM9DF"
                            },
                            {
                                "type": "text",
                                "text": " here, but one way to look at a type is as a set of all possible values of that type, and a potentially-infinite set is equivalent to a predicate…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561061503.042700",
        "client_msg_id": "26e2ec79-7537-4acd-a501-07ecfd9cc0bb",
        "text": "i'm not qualified to answer that :slightly_smiling_face:.   Rich has tons of material out there on it and that question has been tackled quite a bit in other forums by people with a stronger background in both camps.\n\nI actually worked under someone who created a library that combined writing function with specs. I still have no strong opinions one way or the other on that applying them that way. I think its important to be constant in that regard.\n\n&gt; potentially-infinite set is equivalent to a predicate…\n\nwhat do you mean? i think of predicates as defining set membership. So in that regard, i feel like they are the same as a Type.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TI4hM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i'm not qualified to answer that "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ".   Rich has tons of material out there on it and that question has been tackled quite a bit in other forums by people with a stronger background in both camps.\n\nI actually worked under someone who created a library that combined writing function with specs. I still have no strong opinions one way or the other on that applying them that way. I think its important to be constant in that regard.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "potentially-infinite set is equivalent to a predicate…"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nwhat do you mean? i think of predicates as defining set membership. So in that regard, i feel like they are the same as a Type."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1561061505.042900",
        "client_msg_id": "1fc76836-45e0-44b8-ba69-795e690dce23",
        "text": "Or I guess looking at it from another angle, haskell lets you make container types which are neither lists maps sets nor vectors, while clojure \"types\" insofar as they can be observed to naturally occur, are all going to be subtypes of one of those.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nsN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or I guess looking at it from another angle, haskell lets you make container types which are neither lists maps sets nor vectors, while clojure \"types\" insofar as they can be observed to naturally occur, are all going to be subtypes of one of those."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561061614.043100",
        "client_msg_id": "2eeb2b39-6398-43d3-8e7b-921a011ee778",
        "text": "What do you mean by subtype? Are we calling a function a subtype?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iSRG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What do you mean by subtype? Are we calling a function a subtype?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1561061684.043300",
        "client_msg_id": "80a0a32e-3940-4787-bb5c-b6fae63c5d4f",
        "text": "Right, the primary use of static typing is to ensure you don't perform operations the wrong types of things; what does \"wrong\" mean? Well, if you pass a value to a function whose argument has a type annotation, that annotation is acting as a predicate on which values are and aren't valid to pass into that function",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ieu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right, the primary use of static typing is to ensure you don't perform operations the wrong types of things; what does \"wrong\" mean? Well, if you pass a value to a function whose argument has a type annotation, that annotation is acting as a predicate on which values are and aren't valid to pass into that function"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1561061928.043500",
        "client_msg_id": "a60e2050-9acf-434a-8471-bdf84dd7efb1",
        "text": "In dynamic languages I think I mean the `instanceof` operator, or structural equivalence insofar as the types are observations about the shapes of maps which are not explicitly reflected in the program text(though they can be for e.g. React.propTypes)\nIn static languages, this is explicitly enforced by the compiler, as all those relationships _are_ explicitly reflected in the program text; in theory anyway",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n8Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In dynamic languages I think I mean the "
                            },
                            {
                                "type": "text",
                                "text": "instanceof",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " operator, or structural equivalence insofar as the types are observations about the shapes of maps which are not explicitly reflected in the program text(though they can be for e.g. React.propTypes)\nIn static languages, this is explicitly enforced by the compiler, as all those relationships "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " explicitly reflected in the program text; in theory anyway"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1561062208.043700",
        "edited": {
            "user": "UJUGB1XGD",
            "ts": "1561062235.000000"
        },
        "client_msg_id": "93b7757b-5c92-447b-bcc1-268c38b7853a",
        "text": "Another plausible definition is the \"duck typing\" one: if I pass a value somewhere expecting another value, does anything go wrong? If not, both the values are of the implicitly defined type \"has a `.then` method\" or such; even if there are more specific (sub)types that the values individually inhabit(`browser.HTTPPromise` and `npm.fancyforms.DialogDismissedPromise` respectively for example)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fbP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another plausible definition is the \"duck typing\" one: if I pass a value somewhere expecting another value, does anything go wrong? If not, both the values are of the implicitly defined type \"has a "
                            },
                            {
                                "type": "text",
                                "text": ".then",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " method\" or such; even if there are more specific (sub)types that the values individually inhabit("
                            },
                            {
                                "type": "text",
                                "text": "browser.HTTPPromise",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "npm.fancyforms.DialogDismissedPromise",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " respectively for example)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561062514.044000",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1561062671.000000"
        },
        "client_msg_id": "cc4b22fd-acb2-4ba7-ae41-a3bb3a42e642",
        "text": "I dont believe it's  idiomatic to create new types in clojure for most things. l. The intuition is that, like the existing types, it should be a data structure e.g a tree and your using it because of its performance characteristics.\n\n...\n\nClojure isn't using what is commonly thought of as duck typing.\n\n<https:\/\/stackoverflow.com\/questions\/43840366\/type-system-in-clojure>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "attachments": [
            {
                "service_name": "Stack Overflow",
                "title": "Type system in Clojure",
                "title_link": "https:\/\/stackoverflow.com\/questions\/43840366\/type-system-in-clojure",
                "text": "Is the \"programming to abstractions\" principle in Clojure the same as duck typing? If not, what are the differences? Here is a quote from <http:\/\/www.braveclojure.com\/core-functions-in-depth\/>: The",
                "fallback": "Stack Overflow: Type system in Clojure",
                "thumb_url": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/apple-touch-icon@2.png?v=73d79a89bded",
                "from_url": "https:\/\/stackoverflow.com\/questions\/43840366\/type-system-in-clojure",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/favicon.ico?v=4f32ecc8f43d",
                "id": 1,
                "original_url": "https:\/\/stackoverflow.com\/questions\/43840366\/type-system-in-clojure"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qBbOT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I dont believe it's  idiomatic to create new types in clojure for most things. l. The intuition is that, like the existing types, it should be a data structure e.g a tree and your using it because of its performance characteristics.\n\n...\n\nClojure isn't using what is commonly thought of as duck typing.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stackoverflow.com\/questions\/43840366\/type-system-in-clojure"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1561062676.044600",
        "client_msg_id": "74257465-8d54-4c5f-837c-0e8d214db2a0",
        "text": "I don't recall. Do you remember which podcast? The timestamp would be helpful too",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561039198.034000",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F=IS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't recall. Do you remember which podcast? The timestamp would be helpful too"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1561062814.044800",
        "client_msg_id": "724db260-2d90-4f56-bc53-53c721a89b77",
        "text": "Every language has at least one definition of \"type\", and they don't perfectly line up!\nIn a specific context, you can use a definition like \"anything in haskell declared with a `data` keyword\" or \"anything in Java\/Clojure declared by a `class` or `interface` keyword\", but obviously those two are not completely compatible when trying to translate code or concepts",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u9\/zY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Every language has at least one definition of \"type\", and they don't perfectly line up!\nIn a specific context, you can use a definition like \"anything in haskell declared with a "
                            },
                            {
                                "type": "text",
                                "text": "data",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " keyword\" or \"anything in Java\/Clojure declared by a "
                            },
                            {
                                "type": "text",
                                "text": "class",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "interface",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " keyword\", but obviously those two are not completely compatible when trying to translate code or concepts"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561062821.045000",
        "client_msg_id": "8f800dd3-4ea8-4c2f-b3cb-9dfd4ced198e",
        "text": "It only comes up around discussions of Cycle JS. I can get the exact context later.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561039198.034000",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "amO=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It only comes up around discussions of Cycle JS. I can get the exact context later."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561062967.045200",
        "client_msg_id": "df0323a5-28a2-49db-96dc-e940ff7fb193",
        "text": "Maybe I’m mishearing what you’re saying as well.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561039198.034000",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "og5T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe I’m mishearing what you’re saying as well."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1561062972.045400",
        "client_msg_id": "0e09969a-773e-4430-a169-18d9bc43b58e",
        "text": "Ah yes! Here you go <https:\/\/github.com\/staltz\/cycle-onionify>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561039198.034000",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LEt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah yes! Here you go "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/staltz\/cycle-onionify"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561063091.046700",
        "client_msg_id": "2f773108-8ab4-461e-a0a4-e2e1918f49fe",
        "text": "Lol - I was starting to grow suspicious that the word was “onion” not “ununion”. Thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561039198.034000",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ukH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lol - I was starting to grow suspicious that the word was “onion” not “ununion”. Thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561063133.047700",
        "client_msg_id": "d5331934-84c5-4dad-b32b-1b5853ee9ffc",
        "text": "It’s funny how your brain imposes things like that. After programming all day, I’m much more likely to register mathematical operations than vegetables.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561039198.034000",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bdahK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s funny how your brain imposes things like that. After programming all day, I’m much more likely to register mathematical operations than vegetables."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1561063200.049600",
        "client_msg_id": "D85DE5E8-0121-4DF5-9339-2F570E232DFE",
        "text": "has anyone checked out <http:\/\/mesh-spreadsheet.com\/> ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063200.049600",
        "reply_count": 9,
        "reply_users_count": 5,
        "latest_reply": "1571652060.109800",
        "reply_users": [
            "UJK8MKYAZ",
            "U5TCAFTD3",
            "UBRKVHMCL",
            "UP6G25H35",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UJK8MKYAZ",
                "ts": "1561063297.051400"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1561064501.053700"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1561064559.053900"
            },
            {
                "user": "UBRKVHMCL",
                "ts": "1571383806.489900"
            },
            {
                "user": "UP6G25H35",
                "ts": "1571617516.099200"
            },
            {
                "user": "UP6G25H35",
                "ts": "1571617630.099400"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1571632280.105300"
            },
            {
                "user": "UBRKVHMCL",
                "ts": "1571642404.106500"
            },
            {
                "user": "UBRKVHMCL",
                "ts": "1571652060.109800"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1571780449.225449",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DZY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "has anyone checked out "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/mesh-spreadsheet.com\/"
                            },
                            {
                                "type": "text",
                                "text": " ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561063297.051400",
        "client_msg_id": "827abb9b-afeb-4fb4-b6e3-1324a6ddafea",
        "text": ":heart_eyes:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063200.049600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wZ0b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "heart_eyes",
                                "unicode": "1f60d"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561063338.052300",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1561063422.000000"
        },
        "client_msg_id": "15139b20-2ff9-45af-851e-cbfd1f4ee2a3",
        "text": "It seems to me that, in my current development environment, i have one primative for two seperate tasks\n\ntasks\n1. naming some functionality to abstract its meaning\n2. sharing that functionality.\n\nThere are times when i need the second but not the first. e.g I need to pass a subsection of a vector to two different \"places\". However, naming a subsection of a vector doesn't really offer a good abstraction because the functions over the vector are as high level as possible.\n\nHas anyone tackled this problem directly? It seems like a UI issue, i want my editor to show the functions, but if i change one the other should udpate.  with a UI interaction to signify im changing it in more then one place. It would probably be wise to assign a name as well, given that not everyone will be using this UI.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063338.052300",
        "reply_count": 5,
        "reply_users_count": 2,
        "latest_reply": "1561064284.053500",
        "reply_users": [
            "UJK8MKYAZ",
            "UJNJQD2AC"
        ],
        "replies": [
            {
                "user": "UJK8MKYAZ",
                "ts": "1561063482.052600"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561063713.052800"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561063970.053100"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561063994.053300"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561064284.053500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yoy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems to me that, in my current development environment, i have one primative for two seperate tasks\n\ntasks\n1. naming some functionality to abstract its meaning\n2. sharing that functionality.\n\nThere are times when i need the second but not the first. e.g I need to pass a subsection of a vector to two different \"places\". However, naming a subsection of a vector doesn't really offer a good abstraction because the functions over the vector are as high level as possible.\n\nHas anyone tackled this problem directly? It seems like a UI issue, i want my editor to show the functions, but if i change one the other should udpate.  with a UI interaction to signify im changing it in more then one place. It would probably be wise to assign a name as well, given that not everyone will be using this UI."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561063482.052600",
        "client_msg_id": "6f8c07cf-616f-4df7-afbd-42c7eca895ec",
        "text": "How can you talk about something without some symbolic representation though? Even if it’s autogenerated, don’t you need a name to signify the thing?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063338.052300",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z5MHM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How can you talk about something without some symbolic representation though? Even if it’s autogenerated, don’t you need a name to signify the thing?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561063713.052800",
        "client_msg_id": "aad06182-ab83-4b61-85dc-babbece59721",
        "text": "Yes, i'm almost positive the textual representation would need a shared symbol.\n\nWhat i'm considering is that could visualize that symbol in different ways. I might want to view the code instead of the symbol.\n\nI do a version of reverse all the time at my editor what i eval an expression to see the data directly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063338.052300",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aAC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, i'm almost positive the textual representation would need a shared symbol.\n\nWhat i'm considering is that could visualize that symbol in different ways. I might want to view the code instead of the symbol.\n\nI do a version of reverse all the time at my editor what i eval an expression to see the data directly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561063970.053100",
        "client_msg_id": "21866890-acd7-454f-b93d-1a782e35731e",
        "text": "I think I’ve heard someone suggest semantic rather than syntactic code highlighting (it was in that talk “Monads and Gonads”). If you could see based on color where a symbol was defined, would that help?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063338.052300",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vK9=I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think I’ve heard someone suggest semantic rather than syntactic code highlighting (it was in that talk “Monads and Gonads”). If you could see based on color where a symbol was defined, would that help?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561063994.053300",
        "client_msg_id": "16ac47e2-d2b1-4499-ada4-b548d7be13aa",
        "text": "(Or maybe tap it to have the definition open in a popover window or something)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063338.052300",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sYc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Or maybe tap it to have the definition open in a popover window or something)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1561064284.053500",
        "client_msg_id": "e7eb792d-7a5b-4c3e-be57-3303bded1cc4",
        "text": "Yea, Those are both ways of dealing with the issue. Though, those solutions are external to the program.\n\nIn part, this feels like wanting my program to contain information the editor can use.   i can see some rather obvious draw backs to going down that route though.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063338.052300",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f\/Jc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yea, Those are both ways of dealing with the issue. Though, those solutions are external to the program.\n\nIn part, this feels like wanting my program to contain information the editor can use.   i can see some rather obvious draw backs to going down that route though."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1561064501.053700",
        "client_msg_id": "9208d91c-bc4c-4ba6-95e5-0de5c7dfc9e4",
        "text": "cc <@UBRKVHMCL>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063200.049600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Em1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "cc "
                            },
                            {
                                "type": "user",
                                "user_id": "UBRKVHMCL"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1561064559.053900",
        "client_msg_id": "0b2509dc-8d62-4b60-99a9-c741c411a3da",
        "text": "Hasn't been active recently but I've been following <https:\/\/twitter.com\/MeshSpreadsheet>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063200.049600",
        "parent_user_id": "UHWC9PXBL",
        "attachments": [
            {
                "title": "Mesh Spreadsheet (@MeshSpreadsheet) | Twitter",
                "title_link": "https:\/\/twitter.com\/MeshSpreadsheet",
                "text": "The latest Tweets from Mesh Spreadsheet (@MeshSpreadsheet). A code editor with a spreadsheet interface. Currently in alpha and rapidly changing, please send all feedback or help requests via Twitter or GitHub!",
                "fallback": "Mesh Spreadsheet (@MeshSpreadsheet) | Twitter",
                "from_url": "https:\/\/twitter.com\/MeshSpreadsheet",
                "service_icon": "https:\/\/abs.twimg.com\/icons\/apple-touch-icon-192x192.png",
                "service_name": "twitter.com",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/MeshSpreadsheet"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y67",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hasn't been active recently but I've been following "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/MeshSpreadsheet"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561070294.054200",
        "client_msg_id": "d43db7b1-a123-413b-87f4-0d0d93f7293c",
        "text": "wew this HN thread is spicy",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561010003.031800",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Aj8w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wew this HN thread is spicy"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1561074078.055500",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1561074101.000000"
        },
        "client_msg_id": "580F28AC-FAFE-4A22-B9E1-4E7A983A54E0",
        "text": "anyone interested in types and\/or macros who hasn't seen this talk is in for a treat <https:\/\/youtu.be\/5QQdI3P7MdY>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561074078.055500",
        "reply_count": 15,
        "reply_users_count": 5,
        "latest_reply": "1561359205.303800",
        "reply_users": [
            "UHWC9PXBL",
            "UJUGB1XGD",
            "UJK8MKYAZ",
            "U79HM6726",
            "UJNJQD2AC"
        ],
        "replies": [
            {
                "user": "UHWC9PXBL",
                "ts": "1561074240.056400"
            },
            {
                "user": "UJUGB1XGD",
                "ts": "1561076947.060300"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561079661.066600"
            },
            {
                "user": "U79HM6726",
                "ts": "1561117858.157800"
            },
            {
                "user": "UJK8MKYAZ",
                "ts": "1561118359.158200"
            },
            {
                "user": "U79HM6726",
                "ts": "1561118629.158400"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561140306.192900"
            },
            {
                "user": "U79HM6726",
                "ts": "1561200891.224900"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561212806.225300"
            },
            {
                "user": "U79HM6726",
                "ts": "1561280822.276500"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561323347.281800"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561323456.282000"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561323480.282200"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1561328296.282700"
            },
            {
                "user": "U79HM6726",
                "ts": "1561359205.303800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "\"Hackett: a metaprogrammable Haskell\" by Alexis King",
                "title_link": "https:\/\/youtu.be\/5QQdI3P7MdY",
                "author_name": "Strange Loop",
                "author_link": "https:\/\/www.youtube.com\/channel\/UC_QIfHvN9auy2CoOdSfMWDw",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/5QQdI3P7MdY\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: \"Hackett: a metaprogrammable Haskell\" by Alexis King",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/5QQdI3P7MdY?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/5QQdI3P7MdY",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/5QQdI3P7MdY"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gkK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "anyone interested in types and\/or macros who hasn't seen this talk is in for a treat "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/5QQdI3P7MdY"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726",
                    "UJNJQD2AC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1561074240.056400",
        "client_msg_id": "734E53BC-8529-4E35-B44A-4E37BEE7C3B5",
        "text": "one of a small number of talks where the questions section is also interesting",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561074078.055500",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/3k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "one of a small number of talks where the questions section is also interesting"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1561075186.056600",
        "client_msg_id": "1070dc3b-7063-475b-9ca9-3f4d64a194d5",
        "text": "Yeah its pretty bad, the FOSS defense force is out in full effect",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561010003.031800",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jf9bY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah its pretty bad, the FOSS defense force is out in full effect"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1561075208.056800",
        "client_msg_id": "0c175a79-f66d-4961-a1f4-656c0864a951",
        "text": "and he plays into it pretty hard, unfortunately, I think him responding did more damage than good",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561010003.031800",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2\/h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and he plays into it pretty hard, unfortunately, I think him responding did more damage than good"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1561075564.059300",
        "client_msg_id": "0D3C3616-C99F-41B3-BBFD-A3012BCC50DE",
        "text": "<https:\/\/youtu.be\/YR5WdGrpoug> is a pretty good summary of why rich hickey doesn't want to deal with static types as they work now and I think alexis king (lexi lambda) has an unfinished blog post about how it may boil down to issues with nominal vs structural typing",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Maybe Not - Rich Hickey",
                "title_link": "https:\/\/youtu.be\/YR5WdGrpoug",
                "author_name": "ClojureTV",
                "author_link": "https:\/\/www.youtube.com\/user\/ClojureTV",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/YR5WdGrpoug\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Maybe Not - Rich Hickey",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/YR5WdGrpoug?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/YR5WdGrpoug",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/YR5WdGrpoug"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zqEaN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/YR5WdGrpoug"
                            },
                            {
                                "type": "text",
                                "text": " is a pretty good summary of why rich hickey doesn't want to deal with static types as they work now and I think alexis king (lexi lambda) has an unfinished blog post about how it may boil down to issues with nominal vs structural typing"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1561075600.059700",
        "client_msg_id": "27FA7968-D83D-4336-BF88-729107C893EA",
        "text": "<https:\/\/mobile.twitter.com\/lexi_lambda\/status\/1131315024205623296>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/lexi_lambda|@lexi_lambda>: Taking the free time I have while unemployed to finally actually write the blog post I said I wanted to write back in November: <https:\/\/twitter.com\/lexi_lambda\/status\/1068695186895790081> <https:\/\/pbs.twimg.com\/media\/D7M8P_KWkAAa_OW.jpg>",
                "ts": 1558561495,
                "author_name": "Alexis King",
                "author_link": "https:\/\/twitter.com\/lexi_lambda\/status\/1131315024205623296",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/943374200571441152\/vRHcWNIB_normal.jpg",
                "author_subname": "@lexi_lambda",
                "text": "Taking the free time I have while unemployed to finally actually write the blog post I said I wanted to write back in November: <https:\/\/twitter.com\/lexi_lambda\/status\/1068695186895790081> <https:\/\/pbs.twimg.com\/media\/D7M8P_KWkAAa_OW.jpg>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/mobile.twitter.com\/lexi_lambda\/status\/1131315024205623296",
                "image_url": "https:\/\/pbs.twimg.com\/media\/D7M8P_KWkAAa_OW.jpg",
                "image_width": 1200,
                "image_height": 1200,
                "image_bytes": 248519,
                "id": 1,
                "original_url": "https:\/\/mobile.twitter.com\/lexi_lambda\/status\/1131315024205623296",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            },
            {
                "fallback": "<https:\/\/twitter.com\/lexi_lambda|@lexi_lambda>: <https:\/\/twitter.com\/deech|@deech> I’ve had a blog post sitting in my head for a long time that I’ve never written about how the Hickey\/Clojure camp doesn’t really hate static typing, they hate *nominal* typing, and to explore how different (non-Haskell) typed languages make different choices and the tradeoffs.",
                "ts": 1543631762,
                "author_name": "Alexis King",
                "author_link": "https:\/\/twitter.com\/lexi_lambda\/status\/1068695186895790081",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/943374200571441152\/vRHcWNIB_normal.jpg",
                "author_subname": "@lexi_lambda",
                "text": "<https:\/\/twitter.com\/deech|@deech> I’ve had a blog post sitting in my head for a long time that I’ve never written about how the Hickey\/Clojure camp doesn’t really hate static typing, they hate *nominal* typing, and to explore how different (non-Haskell) typed languages make different choices and the tradeoffs.",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/lexi_lambda\/status\/1068695186895790081",
                "indent": true,
                "color": "32BBF3",
                "id": 2,
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FAkL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/mobile.twitter.com\/lexi_lambda\/status\/1131315024205623296"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1561075618.060100",
        "client_msg_id": "10306F35-63DE-482B-8283-B81A2BE9ABBA",
        "text": "<https:\/\/gist.github.com\/halgari\/f431b2d1094e4ec1e933969969489854>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jJe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/halgari\/f431b2d1094e4ec1e933969969489854"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1561076947.060300",
        "client_msg_id": "fceb7154-0e77-4ad3-b096-91e70f02a9aa",
        "text": "Taking that combination in a slightly different direction, there's <http:\/\/www.iro.umontreal.ca\/~monnier\/typer-jfla2019.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561074078.055500",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IWe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Taking that combination in a slightly different direction, there's "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.iro.umontreal.ca\/~monnier\/typer-jfla2019.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561077146.060500",
        "client_msg_id": "3c69d9c6-02c5-4e9d-b37c-53fef622bf6a",
        "text": "niceeeeeee. looks like what I'm looking for",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wxjOv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "niceeeeeee. looks like what I'm looking for"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561078888.060700",
        "client_msg_id": "86a3bf64-8c2c-4b68-a2e3-165092ac5ef2",
        "text": "So far on Clojurian’s slack, no one has listed any features that are impossible to achieve in typed languages (transducers came up as something very difficult to achieve in static languages, but there were a few counter examples of how to do it in Scala, Haskell, etc.). The other thing that came up was how nil punning is used in Clojure in a way that can be resilient to change in systems, but I think this whole idea of optional data is hotly debated and in flux in the Clojure community (as evidenced by the above Rich Hickey talk given last November). I think the above Gist is the best summary of the Clojure mindset on types I’ve encountered, which is surprisingly much less “against static types” and much more “for openness to extension”.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "psR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So far on Clojurian’s slack, no one has listed any features that are impossible to achieve in typed languages (transducers came up as something very difficult to achieve in static languages, but there were a few counter examples of how to do it in Scala, Haskell, etc.). The other thing that came up was how nil punning is used in Clojure in a way that can be resilient to change in systems, but I think this whole idea of optional data is hotly debated and in flux in the Clojure community (as evidenced by the above Rich Hickey talk given last November). I think the above Gist is the best summary of the Clojure mindset on types I’ve encountered, which is surprisingly much less “against static types” and much more “for openness to extension”."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJUGB1XGD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561079389.066100",
        "client_msg_id": "01c59a69-6803-4954-9752-ef5fba0e1d74",
        "text": "We’ve got some pretty sharp minds in type theory wandering around this channel. I’m more and more convinced that static types are powerful, and that a language without them is going to be missing on a dimension of expressiveness. But I use Typescript at work, and its gradual typing system is pretty sweet. From a type theorist’s perspective (I know oh so little about type theory, so be gentle with me), does gradual typing get a seat at the table, or do type theorists look at gradually typed languages like functional programmers look at Javascript: sure, some of the  same primitives are there, but you’re severely handicapping yourself in expressiveness and power.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561079389.066100",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1561128150.161100",
        "reply_users": [
            "UKJ75RMFT",
            "UHWC9PXBL",
            "UKQT95T1V",
            "UC21F8Q48"
        ],
        "replies": [
            {
                "user": "UKJ75RMFT",
                "ts": "1561079576.066200"
            },
            {
                "user": "UKJ75RMFT",
                "ts": "1561079619.066400"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1561090221.082800"
            },
            {
                "user": "UKQT95T1V",
                "ts": "1561124183.159100"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1561128150.161100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A=sb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We’ve got some pretty sharp minds in type theory wandering around this channel. I’m more and more convinced that static types are powerful, and that a language without them is going to be missing on a dimension of expressiveness. But I use Typescript at work, and its gradual typing system is pretty sweet. From a type theorist’s perspective (I know oh so little about type theory, so be gentle with me), does gradual typing get a seat at the table, or do type theorists look at gradually typed languages like functional programmers look at Javascript: sure, some of the  same primitives are there, but you’re severely handicapping yourself in expressiveness and power."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKJ75RMFT",
        "type": "message",
        "ts": "1561079576.066200",
        "client_msg_id": "4fc9f16d-f4ae-450d-8af0-24677310fb70",
        "text": "It's a very active area of research, but the short answer is that (in my experience) type theorists do pay it serious attention. This paper from one of my former labmates goes into it, and following forward and backward references from there should give you more info: <http:\/\/www.ccs.neu.edu\/home\/amal\/papers\/gtt.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9f40eca738a7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-13\/693369079316_9f40eca738a7ae7412c0_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Schuster",
            "display_name": "Jonathan Schuster",
            "team": "T5TCAFTA9",
            "name": "jonathan.p.schuster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561079389.066100",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jo2I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's a very active area of research, but the short answer is that (in my experience) type theorists do pay it serious attention. This paper from one of my former labmates goes into it, and following forward and backward references from there should give you more info: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.ccs.neu.edu\/home\/amal\/papers\/gtt.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKJ75RMFT",
        "type": "message",
        "ts": "1561079619.066400",
        "client_msg_id": "0597a865-289a-4e8a-bbb2-929178fc431f",
        "text": "Max would probably be happy to talk more about it on Twitter too: @maxsnew",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9f40eca738a7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-13\/693369079316_9f40eca738a7ae7412c0_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Schuster",
            "display_name": "Jonathan Schuster",
            "team": "T5TCAFTA9",
            "name": "jonathan.p.schuster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561079389.066100",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "on9Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Max would probably be happy to talk more about it on Twitter too: @maxsnew"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1561079661.066600",
        "client_msg_id": "d16b1664-e88a-42bd-a242-9517d88b898f",
        "text": "This looks really exciting - can’t wait to listen. I’m still waffling on static vs dynamic types, but Lisp does seem to be the True Way for syntax (that is, virtually no syntax!)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561074078.055500",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cunx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This looks really exciting - can’t wait to listen. I’m still waffling on static vs dynamic types, but Lisp does seem to be the True Way for syntax (that is, virtually no syntax!)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1561080280.073900",
        "client_msg_id": "c2776964-b44c-4491-bd97-6fd8afb27073",
        "text": "With twentyish (yikes) years of experience with typed functional programming and dynamical languages, my feelings are really complicated.  Languages with principle types are really cool: the compiler can infer all the types from a well formed program; but they don't exactly have the amount of flexibility that you might like.  Sometimes you'd like \"types\" that correspond to stronger propositions about programs, but then an expression can have multiple \"types\" depending.  Then you get into dependent types, gradual types, subtypes (covariant, contravariant), type classes, generalized algebraic data types, and it doesn't feel quite so nice or elegant anymore.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kuwEx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With twentyish (yikes) years of experience with typed functional programming and dynamical languages, my feelings are really complicated.  Languages with principle types are really cool: the compiler can infer all the types from a well formed program; but they don't exactly have the amount of flexibility that you might like.  Sometimes you'd like \"types\" that correspond to stronger propositions about programs, but then an expression can have multiple \"types\" depending.  Then you get into dependent types, gradual types, subtypes (covariant, contravariant), type classes, generalized algebraic data types, and it doesn't feel quite so nice or elegant anymore."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1561090005.078400",
        "client_msg_id": "8E2D4D54-2373-494A-864C-709291C23C92",
        "text": "yeah I actually think this is a sensible way of resolving the debate—ie nobody is saying \"PLEASE LET ME ADD STRINGS TO INT FOR THE LOVE OF GOD I NEED IT AND IT'S BUSINESS CRITICAL\"–it's more like, on the static type side we've all been burned by runtime type errors but on the dynamic type side a lot of people have been burned by types forcing them to change a lot of code during of relatively simple API upgrades (it's midnight for me so might not be super clear)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZCTj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah I actually think this is a sensible way of resolving the debate—ie nobody is saying \"PLEASE LET ME ADD STRINGS TO INT FOR THE LOVE OF GOD I NEED IT AND IT'S BUSINESS CRITICAL\"–it's more like, on the static type side we've all been burned by runtime type errors but on the dynamic type side a lot of people have been burned by types forcing them to change a lot of code during of relatively simple API upgrades (it's midnight for me so might not be super clear)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1561090221.082800",
        "client_msg_id": "38F45E4A-2B0A-4A6E-9848-2C22D0CB18B9",
        "text": "I think you can look at projects like hazel with typed holes as being an outgrowth of absolutely taking the ideas of gradual types systems seriously—sometimes youre in the middle of figuring out what your program should do and youre not ready to type it yet and that's ok—and the best type theorists in PLT IMO are saying \"all code is ok—how can we get the compiler to help you here?\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561079389.066100",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "672",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you can look at projects like hazel with typed holes as being an outgrowth of absolutely taking the ideas of gradual types systems seriously—sometimes youre in the middle of figuring out what your program should do and youre not ready to type it yet and that's ok—and the best type theorists in PLT IMO are saying \"all code is ok—how can we get the compiler to help you here?\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1561095423.085200",
        "client_msg_id": "9d5a0a46-5850-4022-99ea-52e221d5c98c",
        "text": "one of my favorite writings on the topic: <https:\/\/gist.github.com\/non\/ec48b0a7343db8291b92>\n\nthis really resonated with me when trying to the nuances of type-level programming in Scala. dynamic languages permit techniques that are very difficult to model in static type systems, period, let alone in ways that the types are comprehensible. i think we're making a lot of progress toward type systems that can do this increasingly well. Scala goes a long way towards trying to let you write dynamic-looking code with static types. TypeScript comes from the other direction of trying to model idiomatic JS in a type system. but in both, the type system operates quite differently from the value system, which makes it hard to grasp. that said, i'm generally a fan of static types, at the cost of sacrificing some of those hard to model techniques",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560960552.001100",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GFX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "one of my favorite writings on the topic: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/non\/ec48b0a7343db8291b92"
                            },
                            {
                                "type": "text",
                                "text": "\n\nthis really resonated with me when trying to the nuances of type-level programming in Scala. dynamic languages permit techniques that are very difficult to model in static type systems, period, let alone in ways that the types are comprehensible. i think we're making a lot of progress toward type systems that can do this increasingly well. Scala goes a long way towards trying to let you write dynamic-looking code with static types. TypeScript comes from the other direction of trying to model idiomatic JS in a type system. but in both, the type system operates quite differently from the value system, which makes it hard to grasp. that said, i'm generally a fan of static types, at the cost of sacrificing some of those hard to model techniques"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ"
                ],
                "count": 1
            }
        ]
    }
]