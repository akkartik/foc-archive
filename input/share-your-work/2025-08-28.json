[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1756407786.868009",
        "client_msg_id": "9cd4224e-9646-41af-a8be-c65e9a068cea",
        "text": "Like <@UJBAJNFLK>, I also pre-date OO-oriented pedagogy. What I learnt as a student, and what I still believe, is basically what Sussman says at 3:34 of this video:\n<https:\/\/youtu.be\/Tdwr9tweTDE?si=MwrH4qXAKxNnW_lR&amp;t=214>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zcqYB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": ", I also pre-date OO-oriented pedagogy. What I learnt as a student, and what I still believe, is basically what Sussman says at 3:34 of this video:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/Tdwr9tweTDE?si=MwrH4qXAKxNnW_lR&t=214"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1756408772.009719",
        "client_msg_id": "b1abe1d8-215b-4ec5-930a-bf2f5211a7f4",
        "text": "Thanks <@UJBAJNFLK>! Interested to dig more into the paper! Can you share more about the distinction you make there between implement vs embed?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MjixR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": "! Interested to dig more into the paper! Can you share more about the distinction you make there between implement vs embed?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1756408935.652539",
        "client_msg_id": "06aa2d69-52f9-4111-b145-5557440c7da9",
        "text": "<@U013ZLJARC7> love this video immediately haha. That's really interesting, I've felt this way, but I haven't really run into many others while working who felt this way. It's always been - we need the system to be homogenous, which means certain parts the paradigm chosen works great, but others it doesn't work so great but there hasn't been much appetite for mixing...maybe I've just been on the wrong teams",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "61R83",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " love this video immediately haha. That's really interesting, I've felt this way, but I haven't really run into many others while working who felt this way. It's always been - we need the system to be homogenous, which means certain parts the paradigm chosen works great, but others it doesn't work so great but there hasn't been much appetite for mixing...maybe I've just been on the wrong teams"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1756414194.003109",
        "client_msg_id": "D476AC54-61D4-466C-AEA3-579E0E4C9DDE",
        "text": "Most people really enjoy joining cults, so you can expect to be on many more such teams. Personally, I think identifying as, say, a “JavaScript programmer” is like identifying as a “hammer carpenter”. There are many tools for many situations…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ffA9u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Most people really enjoy joining cults, so you can expect to be on many more such teams. Personally, I think identifying as, say, a “JavaScript programmer” is like identifying as a “hammer carpenter”. There are many tools for many situations"
                            },
                            {
                                "type": "text",
                                "text": "…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01MCG14D38",
        "type": "message",
        "ts": "1756416198.951649",
        "client_msg_id": "61be860d-274f-42dc-bfa0-c52e1589c01c",
        "text": "<@UJBAJNFLK> It's interesting thinking of Scheme as a step towards formalism given how informal it is compared to a lot of the other languages I'm familiar with, but I suppose everything is relative :slightly_smiling_face: (will have to read your paper in more detail later)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g91f898f2272",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/91f898f2272e506007fec215d6b75609.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jonathan Frederickson",
            "display_name": "Jonathan Frederickson",
            "team": "T5TCAFTA9",
            "name": "jonathan795",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t\/FT+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " It's interesting thinking of Scheme as a step towards formalism given how informal it is compared to a lot of the other languages I'm familiar with, but I suppose everything is relative "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " (will have to read your paper in more detail later)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01MCG14D38",
        "type": "message",
        "ts": "1756417852.151949",
        "client_msg_id": "beacf51d-61e6-40bf-a1e4-59a79c4c26a9",
        "text": "<@U05GSC0B4A0> Nice observation, I can definitely see the pattern. I'm not sure I agree that it's as much of a dichotomy as it seems though, or that sandboxing falls squarely on the formalist side. This definitely comes from my object-capability interests, but sandboxing feels to me very compatible with a highly dynamic, Smalltalk-style system. It does rely on setting up a few key constraints at the start to work, but I think those constraints can be designed in such a way that very dynamic behavior is still possible within the system\n\nYou might find this paper interesting: <https:\/\/mumble.net\/~jar\/pubs\/secureos\/secureos.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g91f898f2272",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/91f898f2272e506007fec215d6b75609.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jonathan Frederickson",
            "display_name": "Jonathan Frederickson",
            "team": "T5TCAFTA9",
            "name": "jonathan795",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "attachments": [
            {
                "from_url": "https:\/\/mumble.net\/~jar\/pubs\/secureos\/secureos.html",
                "service_icon": "https:\/\/mumble.net\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/mumble.net\/~jar\/pubs\/secureos\/secureos.html",
                "fallback": "Emergent Technologies Inc. -- Security Kernel",
                "text": "CADR",
                "title": "Emergent Technologies Inc. -- Security Kernel",
                "title_link": "https:\/\/mumble.net\/~jar\/pubs\/secureos\/secureos.html",
                "service_name": "mumble.net"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vq+8C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05GSC0B4A0"
                            },
                            {
                                "type": "text",
                                "text": " Nice observation, I can definitely see the pattern. I'm not sure I agree that it's as much of a dichotomy as it seems though, or that sandboxing falls squarely on the formalist side. This definitely comes from my object-capability interests, but sandboxing feels to me very compatible with a highly dynamic, Smalltalk-style system. It does rely on setting up a few key constraints at the start to work, but I think those constraints can be designed in such a way that very dynamic behavior is still possible within the system\n\nYou might find this paper interesting: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mumble.net\/~jar\/pubs\/secureos\/secureos.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1756443997.424069",
        "client_msg_id": "2c8e5308-221c-412e-814c-8da75de2b46c",
        "text": "<@U05GSC0B4A0> Embedding means building a subsystem that can interact with its surrounding system. Implementing means creating a new isolated system.\n\nAll programs end up embedded into something bigger, typically an OS. That something bigger must therefore follow informalist principles. The Unix shell does it, for example. But that embedding is very limited. Unix offers three character streams per process, plus the file system. I'd much prefer formalist subsystems to be embedded in a richer informalist language, and that's what happens in Lisp. Also in Scheme, for example with Typed Racket.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zkYz5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05GSC0B4A0"
                            },
                            {
                                "type": "text",
                                "text": " Embedding means building a subsystem that can interact with its surrounding system. Implementing means creating a new isolated system.\n\nAll programs end up embedded into something bigger, typically an OS. That something bigger must therefore follow informalist principles. The Unix shell does it, for example. But that embedding is very limited. Unix offers three character streams per process, plus the file system. I'd much prefer formalist subsystems to be embedded in a richer informalist language, and that's what happens in Lisp. Also in Scheme, for example with Typed Racket."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    }
]