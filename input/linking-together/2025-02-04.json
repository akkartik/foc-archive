[
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1738659759.404469",
        "client_msg_id": "5927AA6D-82B0-4101-9F4D-568B0F5476B7",
        "text": "If anything, I believe what I wrote there even more than before and I think we have all the pieces to truly make it a reality now :smile: ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736371579.847269",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HkI9L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If anything, I believe what I wrote there even more than before and I think we have all the pieces to truly make it a reality now "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U08294YLWJH",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1738667579.333059",
        "client_msg_id": "018525a6-7997-4c06-887a-04317a2703ee",
        "text": "&gt; All my exercises started with \"remember: no loops!\", and yet, most solutions implemented by the students had at least one explicit loop.\nThere is a duality between per-element vs. aggregate code.  `if`&lt;-&gt;`filter`, `for`&lt;-&gt;`map` etc.\nBut textually and mentally they look pretty different.  I'm curious if there are any languages\/notations seeking to minimize that gap — to make it easy to see both perspectives?\n\n[I think I've asked this before, and I suppose LINQ is a start]\n\n:thinking_face: Part of this gap though is not about element vs. aggregate.  It's  _executable_ code that can do whatever vs. _analyzable_ code explicitly composed from a core set of patterns.\ncf. SQL queries that are not simply executed but get analyzed &amp; transformed in a query optimizer.  And it's not like C++ loops don't undergo impressive compiler optimizations — but there is some different \"feel\" to the languages...\n:thinking_face: Perhaps the gap is also about dataflow? Patterns like `filter` constrain it significantly; capturing the whole flexibility you have with variables in loops requires something like Haskell's do notation &lt;-&gt; a whole zoo of combinators?  Indeed, listening to <https:\/\/www.arraycast.com\/|Array Cast>, they keep going on about a gazilion combinators to know.  Which, let's face it, is hard to teach :disappointed:\n\n:cake: OK then, are there visual languages that expose this duality?\nNode-and-wire promise seeing dataflow directly without having to _name_ all the patterns!  It gets interesting with how to present data crossing element\/aggregate domains — reductions like `max` or `sum` , broadcasts of single value into many iterations etc...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738338222.269849",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rtuI3",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All my exercises started with \"remember: no loops!\", and yet, most solutions implemented by the students had at least one explicit loop."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is a duality between per-element vs. aggregate code.  "
                            },
                            {
                                "type": "text",
                                "text": "if",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "<->"
                            },
                            {
                                "type": "text",
                                "text": "filter",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "for",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "<->"
                            },
                            {
                                "type": "text",
                                "text": "map",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " etc.\nBut textually and mentally they look pretty different.  I'm curious if there are any languages\/notations seeking to minimize that gap — to make it easy to see both perspectives?\n\n[I think I've asked this before, and I suppose LINQ is a start]\n\n"
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": " Part of this gap though is not about element vs. aggregate.  It's  "
                            },
                            {
                                "type": "text",
                                "text": "executable",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code that can do whatever vs. "
                            },
                            {
                                "type": "text",
                                "text": "analyzable",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code explicitly composed from a core set of patterns.\ncf. SQL queries that are not simply executed but get analyzed & transformed in a query optimizer.  And it's not like C++ loops don't undergo impressive compiler optimizations — but there is some different \"feel\" to the languages...\n"
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": " Perhaps the gap is also about dataflow? Patterns like "
                            },
                            {
                                "type": "text",
                                "text": "filter",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " constrain it significantly; capturing the whole flexibility you have with variables in loops requires something like Haskell's do notation <-> a whole zoo of combinators?  Indeed, listening to "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.arraycast.com\/",
                                "text": "Array Cast"
                            },
                            {
                                "type": "text",
                                "text": ", they keep going on about a gazilion combinators to know.  Which, let's face it, is hard to teach "
                            },
                            {
                                "type": "emoji",
                                "name": "disappointed",
                                "unicode": "1f61e"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "emoji",
                                "name": "cake",
                                "unicode": "1f370"
                            },
                            {
                                "type": "text",
                                "text": " OK then, are there visual languages that expose this duality?\nNode-and-wire promise seeing dataflow directly without having to "
                            },
                            {
                                "type": "text",
                                "text": "name",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " all the patterns!  It gets interesting with how to present data crossing element\/aggregate domains — reductions like "
                            },
                            {
                                "type": "text",
                                "text": "max",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "sum",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , broadcasts of single value into many iterations etc..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1738694374.091139",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1738694401.000000"
        },
        "client_msg_id": "85250a72-2201-492e-9bc0-7e3c55865ebc",
        "text": "The large number of combinators is definitely an issue if you set out to cover all possible aggregate behaviors, and that's why I mostly stopped using APL in real life. But it can't the be cause of my observations with student exercises because they were designed to be solvable with just a small number of combinators that I had explained before.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738338222.269849",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "teQRh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The large number of combinators is definitely an issue if you set out to cover all possible aggregate behaviors, and that's why I mostly stopped using APL in real life. But it can't the be cause of my observations with student exercises because they were designed to be solvable with just a small number of combinators that I had explained before."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1738694591.051329",
        "client_msg_id": "e51f5203-9e6a-48c5-a731-0ba6df2f3f0d",
        "text": "I'd love to see a systematic approach to the duality, visual or other. The Smalltalk collection classes can be seen as an attempt, as can STL for C++. Both are pragmatic rather then systematic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738338222.269849",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g+IF0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd love to see a systematic approach to the duality, visual or other. The Smalltalk collection classes can be seen as an attempt, as can STL for C++. Both are pragmatic rather then systematic."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088U28SDPB",
        "type": "message",
        "ts": "1738738295.489129",
        "client_msg_id": "2bfdc099-cc95-409f-8e98-cd072defbe8e",
        "text": "Good to see people excited about the history of coding as well! I'm hosting a Plan 9 night this Friday if anybody is curious about the forgotten successor to Unix. It's a watch party of curated videos on Plan 9 from Bell Labs, its history and ideas, and possibly some live demos. <https:\/\/discord.gg\/S2Tabjnw?event=1334589413744840835>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbb46488d2c9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bb46488d2c90d51f366cafc776e2b3ad.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Jeff",
            "real_name": "Jeff Lindsay",
            "display_name": "Jeff Lindsay",
            "team": "T5TCAFTA9",
            "name": "progrium",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738738295.489129",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1739204146.749669",
        "reply_users": [
            "UDCLA1HU4",
            "UMHG81CBH",
            "U0887QU9G2V",
            "U088U28SDPB",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UDCLA1HU4",
                "ts": "1738753913.458979"
            },
            {
                "user": "UMHG81CBH",
                "ts": "1738761688.885979"
            },
            {
                "user": "U0887QU9G2V",
                "ts": "1738774766.530589"
            },
            {
                "user": "U088U28SDPB",
                "ts": "1738776570.317989"
            },
            {
                "user": "U0887QU9G2V",
                "ts": "1738783185.968019"
            },
            {
                "user": "U088U28SDPB",
                "ts": "1738792341.537239"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1739204146.749669"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NdbYx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good to see people excited about the history of coding as well! I'm hosting a Plan 9 night this Friday if anybody is curious about the forgotten successor to Unix. It's a watch party of curated videos on Plan 9 from Bell Labs, its history and ideas, and possibly some live demos. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/discord.gg\/S2Tabjnw?event=1334589413744840835"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]