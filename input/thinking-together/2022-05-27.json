[
    {
        "user": "U0165TZ39GV",
        "type": "message",
        "ts": "1653648713.043979",
        "client_msg_id": "5AAFE601-47EB-422F-83F6-39F3032908C6",
        "text": "TL;DR: many computing applications have transcended files-and-folders, why haven't developer tools? :thinking_face:\n\nDuring Papers We Love Education yesterday, we were joined by a couple of teachers of various age groups, and I had the opportunity to ask them about whether they've observed what this Verge article describes: <https:\/\/www.theverge.com\/22684730\/students-file-folder-directory-structure-education-gen-z|https:\/\/www.theverge.com\/22684730\/students-file-folder-directory-structure-education-gen-z>\n\nThe article is about how ubiquitous search and cloud storage have meant that young folk no longer have a mental model of file systems, or really understand files and folders. I had suspected I was observing this in my work, with some of the questions I was getting in our introductory content about CLIs. The educators confirmed they're also seeing this and it's a big problem. \n\nThat struck me as a big issue for CS education. If students are coming in never having interacted with an app that deals in files, saving files, or organising content in directories, that's a huge hurdle to beginning programming, or interacting with most tools. Everything we do and use still has the file system at the centre of the experience and the interface. \n\nWhether the “tabletification” of computing is a positive thing or not, it's interesting to me that unlike many categories of applications, developer tools, even for young learners, have resisted it ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "dc2c7f9b4a4f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-29\/1217517778004_dc2c7f9b4a4f3937c08d_72.png",
            "first_name": "Joe",
            "real_name": "Joe Nash",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joe.nash",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "reply_count": 14,
        "reply_users_count": 9,
        "latest_reply": "1653766994.884239",
        "reply_users": [
            "U03GBV8B58V",
            "UA14TGLTC",
            "UQ706GB9U",
            "UJBAJNFLK",
            "UCGAK10LS",
            "U016VUZGUUQ",
            "UCUSW7WVD",
            "U0165TZ39GV",
            "U03B14DUZSA"
        ],
        "replies": [
            {
                "user": "U03GBV8B58V",
                "ts": "1653664360.241889"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1653664467.438809"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1653669275.056789"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1653679536.699739"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1653694071.018419"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1653696656.423049"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1653708910.639539"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1653714333.068139"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1653715336.334719"
            },
            {
                "user": "U0165TZ39GV",
                "ts": "1653718017.063869"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1653747895.760799"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1653747991.173779"
            },
            {
                "user": "U03B14DUZSA",
                "ts": "1653756627.329869"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1653766994.884239"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/www.theverge.com\/22684730\/students-file-folder-directory-structure-education-gen-z",
                "ts": 1632312000,
                "image_url": "https:\/\/cdn.vox-cdn.com\/thumbor\/zOr23q1TOD2gN3-14wyc_TnuGIU=\/0x147:2048x1219\/fit-in\/1200x630\/cdn.vox-cdn.com\/uploads\/chorus_asset\/file\/22864733\/VRG_ILLO_4756_Student_Professor_Folders_Lede.jpg",
                "image_width": 478,
                "image_height": 250,
                "image_bytes": 203652,
                "service_icon": "https:\/\/cdn.vox-cdn.com\/uploads\/chorus_asset\/file\/7395359\/ios-icon.0.png",
                "id": 1,
                "original_url": "https:\/\/www.theverge.com\/22684730\/students-file-folder-directory-structure-education-gen-z",
                "fallback": "The Verge: Students who grew up with search engines might change STEM education forever",
                "text": "Professors are struggling to teach Gen Z",
                "title": "Students who grew up with search engines might change STEM education forever",
                "title_link": "https:\/\/www.theverge.com\/22684730\/students-file-folder-directory-structure-education-gen-z",
                "service_name": "The Verge"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CVOwH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "TL;DR: many computing applications have transcended files-and-folders, why haven't developer tools? "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDuring Papers We Love Education yesterday, we were joined by a couple of teachers of various age groups, and I had the opportunity to ask them about whether they've observed what this Verge article describes: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.theverge.com\/22684730\/students-file-folder-directory-structure-education-gen-z",
                                "text": "https:\/\/www.theverge.com\/22684730\/students-file-folder-directory-structure-education-gen-z"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe article is about how ubiquitous search and cloud storage have meant that young folk no longer have a mental model of file systems, or really understand files and folders. I had suspected I was observing this in my work, with some of the questions I was getting in our introductory content about CLIs. The educators confirmed they're also seeing this and it's a big problem. \n\nThat struck me as a big issue for CS education. If students are coming in never having interacted with an app that deals in files, saving files, or organising content in directories, that's a huge hurdle to beginning programming, or interacting with most tools. Everything we do and use still has the file system at the centre of the experience and the interface. \n\nWhether the “tabletification” of computing is a positive thing or not, it's interesting to me that unlike many categories of applications, developer tools, even for young learners, have resisted it "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653663004.176149",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1653663067.000000"
        },
        "client_msg_id": "3df82603-6ab9-4a08-a17d-d6b4cd34fdc3",
        "text": "Undo and redo in relationship to CRDTs\/multiplayer seems to be an underexplored area with huge challenges.\n\nHere's a case where multiplayer undo-redo becomes interesting for visual programming.\n\n_(This would be visual programming, e.g. via a blocks\/node interface, but I'll use JavaScript and React to express the states)_\n\n*Initial state:*\nEmpty div.\n```return (\n &lt;div&gt;\n &lt;\/div&gt;\n);```\n*User A:*\nInserts a new Dialog component, which uses an \"open\" state to control its rendering.\n\n```const [open, setOpen] = useState(false);\nreturn (\n  &lt;div&gt;\n    &lt;Dialog open={open} \/&gt;\n  &lt;div&gt;\n);```\nNow, an undo by User A at this point would rightly remove both the `useState` statement and `Dialog` element. But, lets say user B does this before that:\n\n*User B:*\nInserts an expression that references and displays the open state:\n\n```const [open, setOpen] = useState(false);\nreturn (\n  &lt;div&gt;\n    &lt;Dialog open={open} \/&gt;\n    &lt;h1&gt;Open: {open}&lt;\/h1&gt;\n  &lt;div&gt;\n);```\nIf User A now wants to undo, removing the `open` state would break User B's use of said state.\n\nAre there any examples in research or open source of how to gracefully resolve this? I assume that node based programming could run into this dependency challenge, but I'm unaware of any node based tools that support multiplayer with undo\/redo.\n\nOne approach I can think of is to check whether there are dependencies on nodes that would be removed by undo, and simply aborting the undo with an error, but I'm curious if there is a more elegant approach.\n\nOn a related note, the UI would also have to prevent a traditional delete operation on the `open` state, since this would leave the program in an invalid state.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "reply_count": 28,
        "reply_users_count": 6,
        "latest_reply": "1654790065.838769",
        "reply_users": [
            "UCUSW7WVD",
            "U03GBV8B58V",
            "U03DNFDFYDA",
            "U016VUZGUUQ",
            "UJBAJNFLK",
            "UDQBTJ211"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1653673904.755839"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653675461.547379"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653676082.793329"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653676480.226599"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653676843.064789"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653676983.663729"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653677088.113919"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653677090.985599"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653677248.270179"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653677293.271999"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653677332.937439"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653677360.872559"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653677394.594549"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653677437.116859"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653677509.293139"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653677708.347059"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653677765.455019"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653677844.340599"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653679679.972199"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1653679747.965499"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1653695422.445189"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653716361.698549"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1653717678.057469"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653718034.966319"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1653724814.213529"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1653725859.885999"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653727069.146419"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1654790065.838769"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s8r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Undo and redo in relationship to CRDTs\/multiplayer seems to be an underexplored area with huge challenges.\n\nHere's a case where multiplayer undo-redo becomes interesting for visual programming.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "(This would be visual programming, e.g. via a blocks\/node interface, but I'll use JavaScript and React to express the states)",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Initial state:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nEmpty div.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "return (\n <div>\n <\/div>\n);"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "User A:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nInserts a new Dialog component, which uses an \"open\" state to control its rendering.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "const [open, setOpen] = useState(false);\nreturn (\n  <div>\n    <Dialog open={open} \/>\n  <div>\n);"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNow, an undo by User A at this point would rightly remove both the "
                            },
                            {
                                "type": "text",
                                "text": "useState",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " statement and "
                            },
                            {
                                "type": "text",
                                "text": "Dialog",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " element. But, lets say user B does this before that:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "User B:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nInserts an expression that references and displays the open state:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "const [open, setOpen] = useState(false);\nreturn (\n  <div>\n    <Dialog open={open} \/>\n    <h1>Open: {open}<\/h1>\n  <div>\n);"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIf User A now wants to undo, removing the "
                            },
                            {
                                "type": "text",
                                "text": "open",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " state would break User B's use of said state.\n\nAre there any examples in research or open source of how to gracefully resolve this? I assume that node based programming could run into this dependency challenge, but I'm unaware of any node based tools that support multiplayer with undo\/redo.\n\nOne approach I can think of is to check whether there are dependencies on nodes that would be removed by undo, and simply aborting the undo with an error, but I'm curious if there is a more elegant approach.\n\nOn a related note, the UI would also have to prevent a traditional delete operation on the "
                            },
                            {
                                "type": "text",
                                "text": "open",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " state, since this would leave the program in an invalid state."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653664360.241889",
        "client_msg_id": "bc0a1a95-6d49-4992-ab38-2e48e5f7230b",
        "text": "Good question. I was excited by <https:\/\/en.wikipedia.org\/wiki\/WinFS|WinFS >when it was first announced, but it never made it to market. Maybe it would resonate with the \"non-files\" crowd today,",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C98vL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good question. I was excited by "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/WinFS",
                                "text": "WinFS "
                            },
                            {
                                "type": "text",
                                "text": "when it was first announced, but it never made it to market. Maybe it would resonate with the \"non-files\" crowd today,"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1653664467.438809",
        "client_msg_id": "9cda0b80-3706-41bb-9cee-de349dea2018",
        "text": "Aren't developers (UNIX developers) the ones who invented files and directories in the first place?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EIw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Aren't developers (UNIX developers) the ones who invented files and directories in the first place?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1653669275.056789",
        "client_msg_id": "bdbac73e-8acb-4922-8051-649390087536",
        "text": "multiple processes have to operate on the code. Examples are: version control, compiler, and ide. Some people may want to use a tool you haven’t heard of or don’t exist yet. All these iOS apps operate like little islands where the author has to export the data from one app to another to do different tasks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rJs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "multiple processes have to operate on the code. Examples are: version control, compiler, and ide. Some people may want to use a tool you haven’t heard of or don’t exist yet. All these iOS apps operate like little islands where the author has to export the data from one app to another to do different tasks."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1653673904.755839",
        "client_msg_id": "643aa082-ed61-40a3-a02b-7296e27999e5",
        "text": "Particularly if A and B are seeing each other's edits in real time, you could make a case to keep things simple and maintain a single sequence of operations that either side can unwind things from. In your example A would first undo B's operation. Doesn't really use CRDTs' special properties, though.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kaHM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Particularly if A and B are seeing each other's edits in real time, you could make a case to keep things simple and maintain a single sequence of operations that either side can unwind things from. In your example A would first undo B's operation. Doesn't really use CRDTs' special properties, though."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653675461.547379",
        "client_msg_id": "c6d59b7b-52ab-4a73-b6ee-092bb0c6db96",
        "text": "That's the crux of the problem. People don't expect their undo\/redo stack to be affected by other people's actions, but there can be cross-client dependencies between the stacks. We're already doing undo\/redo history rewriting, e.g. to incorporate other peoples changes on component properties (I set a rectangle to green, you set it to red, I undo + redo, and we should be back to red to not loose your changes).\n\nBut this class of problem seems beyond that because the operations in the undo\/redo stack don't capture the dependencies to other people's actions. Hmm... :thinking_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=Tle",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's the crux of the problem. People don't expect their undo\/redo stack to be affected by other people's actions, but there can be cross-client dependencies between the stacks. We're already doing undo\/redo history rewriting, e.g. to incorporate other peoples changes on component properties (I set a rectangle to green, you set it to red, I undo + redo, and we should be back to red to not loose your changes).\n\nBut this class of problem seems beyond that because the operations in the undo\/redo stack don't capture the dependencies to other people's actions. Hmm... "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653676082.793329",
        "client_msg_id": "f1050ffb-b734-43c8-9e9f-ef7f6e7aac84",
        "text": "If you haven’t seen <https:\/\/en.wikipedia.org\/wiki\/Operational_transformation> yet… :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z9Wq7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you haven’t seen "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Operational_transformation"
                            },
                            {
                                "type": "text",
                                "text": " yet… "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653676480.226599",
        "client_msg_id": "0e045b18-9f34-448e-be53-f9672815ef63",
        "text": "<@U03DNFDFYDA> Have read a bit about OT, but that reading quickly guided me towards CRDTs as being a more modern approach that's easier to implement. Problem is, this scenario might not fit with CRDTs. What made you think of OT? Are there examples where you've seen this case solved elegantly?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lvkh8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03DNFDFYDA"
                            },
                            {
                                "type": "text",
                                "text": " Have read a bit about OT, but that reading quickly guided me towards CRDTs as being a more modern approach that's easier to implement. Problem is, this scenario might not fit with CRDTs. What made you think of OT? Are there examples where you've seen this case solved elegantly?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653676843.064789",
        "client_msg_id": "b1857908-9dbe-4b55-9e3f-58746ed43d23",
        "text": "OT is the only thing I’ve seen that works at all! :sweat_smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zh9jd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OT is the only thing I’ve seen that works at all! "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U03GBV8B58V"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653676983.663729",
        "client_msg_id": "8d0b3c7a-41f3-4370-acc9-c02649b18650",
        "text": "Current mental model: Undo redo is time traveling. Undo redo combined with multiplayer and other people's undo redo is the multiverse with conflicting timelines :partying_face::boom:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "si3s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Current mental model: Undo redo is time traveling. Undo redo combined with multiplayer and other people's undo redo is the multiverse with conflicting timelines "
                            },
                            {
                                "type": "emoji",
                                "name": "partying_face",
                                "unicode": "1f973"
                            },
                            {
                                "type": "emoji",
                                "name": "boom",
                                "unicode": "1f4a5"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653677088.113919",
        "client_msg_id": "b674bf35-0979-4710-a20e-581d71a1f6f2",
        "text": "yeah, I’ve thought (and built) quite a bit about versioning over the years. If you want to get really fine-grained, OT or something equally complex seems like the way to go… But if you don’t mind forcing updates to be more coarse-grained, in which a thing with a long-lived identity is CRUD’d, it doesn’t need to be so hard",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CP+C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah, I’ve thought (and built) quite a bit about versioning over the years. If you want to get really fine-grained, OT or something equally complex seems like the way to go… But if you don’t mind forcing updates to be more coarse-grained, in which a thing with a long-lived identity is CRUD’d, it doesn’t need to be so hard"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653677090.985599",
        "client_msg_id": "dbe9ff69-145f-4ceb-abce-0623d62bd3eb",
        "text": "But it’s never easy",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "etz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But it’s never easy"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653677248.270179",
        "client_msg_id": "76d988ab-065e-4e5d-9692-d6314b62fb67",
        "text": "Domain model versioning always comes up eventually when you have enterprise customers… Some people are trusted to propose changes but not to make it so; they need to be able to save their work persistently, and someone else has to come along and move the pointer once they decide the proposed version is good",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FHV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Domain model versioning always comes up eventually when you have enterprise customers… Some people are trusted to propose changes but not to make it so; they need to be able to save their work persistently, and someone else has to come along and move the pointer once they decide the proposed version is good"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653677293.271999",
        "client_msg_id": "5d730e91-b69f-4e79-af86-3122d24d1d37",
        "text": "It’s easy to say “you should trust your users” but subjectively, I don’t want to be trusted so much! I want someone else to check my work! :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g0bB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s easy to say “you should trust your users” but subjectively, I don’t want to be trusted so much! I want someone else to check my work! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653677332.937439",
        "client_msg_id": "2167f1d8-df3e-4f31-aa05-6d6c6dfb4c46",
        "text": "It can also be tempting to go full git, with parallel histories that sometimes merge eventually, but git is confusing enough for developers, let alone non-technical users",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=nYMv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It can also be tempting to go full git, with parallel histories that sometimes merge eventually, but git is confusing enough for developers, let alone non-technical users"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653677360.872559",
        "client_msg_id": "120b3a04-9b7d-4cf4-ba80-1890f7f0035c",
        "text": "Good point on how coarse-grained ops are, because I'm thinking a hybrid approach could be needed. Certain ops, like changing simple component properties, are frequent and need to be optimistically applied. Other things, like inserting new components with dependencies on an import statement and state management could use another approach.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pjy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good point on how coarse-grained ops are, because I'm thinking a hybrid approach could be needed. Certain ops, like changing simple component properties, are frequent and need to be optimistically applied. Other things, like inserting new components with dependencies on an import statement and state management could use another approach."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653677394.594549",
        "client_msg_id": "6efd4bec-fa6e-4519-986c-8e94d902ea1d",
        "text": "A nice middle ground my team proposed recently, which supports some of the reasons you want branching, is to store every pointer between entities as an (id, version) tuple rather than just an id… If the version field is null, it means we want to point to whichever version is the latest; if it’s not null, it means we want to pin that specific version",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kCeb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A nice middle ground my team proposed recently, which supports some of the reasons you want branching, is to store every pointer between entities as an (id, version) tuple rather than just an id… If the version field is null, it means we want to point to whichever version is the latest; if it’s not null, it means we want to pin that specific version"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653677437.116859",
        "client_msg_id": "03d78bfc-fbf2-4ae4-9246-6f9e1d6a6714",
        "text": "Postgres allows some components of a composite foreign key to be null, so you can still have referential integrity",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jO5l+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Postgres allows some components of a composite foreign key to be null, so you can still have referential integrity"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653677509.293139",
        "client_msg_id": "b11f982c-aeb6-4bac-8bdd-edf65335a7be",
        "text": "Versioning is also sometimes necessary even when there’s no approval workflow… the best example I know is when version n-1 needs to be in effect until some specific date\/time, then version n needs to take effect automatically",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IWL+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Versioning is also sometimes necessary even when there’s no approval workflow… the best example I know is when version n-1 needs to be in effect until some specific date\/time, then version n needs to take effect automatically"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653677708.347059",
        "client_msg_id": "ebb99766-d355-41fa-b652-97d17e06edf1",
        "text": "For our case, the code being edited is versioned using git and push\/pulled via GitHub where approval can happen via PRs and automatic checks.\n\nI'm inclined to think that on the design canvas itself (we're a UX design tool), everyone should be seeing the exact same thing in real time while they work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q6N8i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For our case, the code being edited is versioned using git and push\/pulled via GitHub where approval can happen via PRs and automatic checks.\n\nI'm inclined to think that on the design canvas itself (we're a UX design tool), everyone should be seeing the exact same thing in real time while they work."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653677765.455019",
        "client_msg_id": "99e9dcef-8255-44ea-8ffd-3593f9844f7f",
        "text": "yeah, if you don’t need to be responsible for merging up in userspace, that simplifies things quite a bit :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KaVK4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah, if you don’t need to be responsible for merging up in userspace, that simplifies things quite a bit "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653677844.340599",
        "client_msg_id": "17b8c6b6-3ae8-4884-a533-048a3baf0419",
        "text": "The crux of the challenge is to avoid an invalid source file with multiple people doing structural edits and undo + redo :joy:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kqV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The crux of the challenge is to avoid an invalid source file with multiple people doing structural edits and undo + redo "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1653679536.699739",
        "client_msg_id": "725837c1-1d67-4a1c-a015-128c7f886b96",
        "text": "There are good arguments for and against filesystems, which carry different weight for different applications and\/or user profiles. So why should one expect developers to manage data in the same way as the users of their applications?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mTL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are good arguments for and against filesystems, which carry different weight for different applications and\/or user profiles. So why should one expect developers to manage data in the same way as the users of their applications?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653679679.972199",
        "client_msg_id": "2d870399-f9f8-4643-b049-eca9faf5e71c",
        "text": "Undo\/redo _within the user’s work in progress, with respect to an immutable snapshot_ is fine… Undo\/redo _across_ commits is much, much harder. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=D+n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Undo\/redo "
                            },
                            {
                                "type": "text",
                                "text": "within the user’s work in progress, with respect to an immutable snapshot",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is fine… Undo\/redo "
                            },
                            {
                                "type": "text",
                                "text": "across",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " commits is much, much harder. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1653679747.965499",
        "client_msg_id": "916b47d3-9c4a-49cd-a2b1-a15c75fba5a9",
        "text": "Sometimes you can get away with making things command-driven, and have as many commands as feasible be idempotent",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lOYF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sometimes you can get away with making things command-driven, and have as many commands as feasible be idempotent"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1653688617.190259",
        "client_msg_id": "fddfea17-a946-4ff4-a625-b5b030ca5215",
        "text": "I'm not sure if this is going to be discovery or thinking together, but oh well.\n\nI've had the idea in the back of my mind for a long time that UI sucks. It's bad for us as programmers when we have to build an app across 5+ form factors (more when you consider the possibility of AR, VR, or voice assistant applications). It's bad for the consumer when we develop a bad UI. It's bad for the consumer when we build a good UI, but it's not talored to how individuals use it. For example I use about 5% of the potential functionality of my IDE, but it's extremely tedious ranging to impossible to customize the UI for myself. Yes, keyboard bindings exist but for the most part let's ignore that. Most casual users won't learn Keybindings. And, that ignores that I'd like to comstomize the application state I can view.\n\nOK, the problem established, I'd like to think about a solution: stop writing UI. Instead, write api descriptors so an agent can design a UI for you, knowing the capabilities of your application. Early versions of an agent will require massive amounts of hints, but that's probably still easier than writing UI. Having an agent (ai maybe?) would also allow input from individual users to the system with hints as to how they want to view the app. \"show the buttons in this order. \" \"show the status of this in that box.\" etc. Graphql is the closest approximation of such an api descriptor I can think of.\n\nOn to the questions: Has this been considered before? What prior art is in this space? Are we near technical feasibility of such a project?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653688617.190259",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1653958732.846779",
        "reply_users": [
            "UC2A2ARPT",
            "U01DUNFS2N4",
            "U014Y19RYA3"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1653691364.955309"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1653691442.149299"
            },
            {
                "user": "U01DUNFS2N4",
                "ts": "1653691535.634009"
            },
            {
                "user": "U014Y19RYA3",
                "ts": "1653692179.019109"
            },
            {
                "user": "U01DUNFS2N4",
                "ts": "1653701186.141679"
            },
            {
                "user": "U01DUNFS2N4",
                "ts": "1653958732.846779"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jgo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure if this is going to be discovery or thinking together, but oh well.\n\nI've had the idea in the back of my mind for a long time that UI sucks. It's bad for us as programmers when we have to build an app across 5+ form factors (more when you consider the possibility of AR, VR, or voice assistant applications). It's bad for the consumer when we develop a bad UI. It's bad for the consumer when we build a good UI, but it's not talored to how individuals use it. For example I use about 5% of the potential functionality of my IDE, but it's extremely tedious ranging to impossible to customize the UI for myself. Yes, keyboard bindings exist but for the most part let's ignore that. Most casual users won't learn Keybindings. And, that ignores that I'd like to comstomize the application state I can view.\n\nOK, the problem established, I'd like to think about a solution: stop writing UI. Instead, write api descriptors so an agent can design a UI for you, knowing the capabilities of your application. Early versions of an agent will require massive amounts of hints, but that's probably still easier than writing UI. Having an agent (ai maybe?) would also allow input from individual users to the system with hints as to how they want to view the app. \"show the buttons in this order. \" \"show the status of this in that box.\" etc. Graphql is the closest approximation of such an api descriptor I can think of.\n\nOn to the questions: Has this been considered before? What prior art is in this space? Are we near technical feasibility of such a project?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03J1HP9C0G",
        "type": "message",
        "ts": "1653689818.945319",
        "client_msg_id": "989ae321-46ca-4f85-b2cc-b96a08eb739e",
        "text": "I feel close to the answer of <https:\/\/app.slack.com\/team\/UJBAJNFLK|Konrad Hinsen>. The programmers spend much time on things that should be easy. My 'deep goal' is to _(searching for right words for a while)_ introduce a functional tool to build and maintain systems which serve as a backbone for the future of data handling and computation. Is that too much to ask for :wink: ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "fd3b904fdc45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-27\/3589814658547_fd3b904fdc456648ecb2_72.jpg",
            "first_name": "Václav",
            "real_name": "Václav Blažej",
            "display_name": "Václav Blažej",
            "team": "T5TCAFTA9",
            "name": "vaclavblazej",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1652941445.312379",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5m+4x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel close to the answer of "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/app.slack.com\/team\/UJBAJNFLK",
                                "text": "Konrad Hinsen"
                            },
                            {
                                "type": "text",
                                "text": ". The programmers spend much time on things that should be easy. My 'deep goal' is to "
                            },
                            {
                                "type": "text",
                                "text": "(searching for right words for a while)",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " introduce a functional tool to build and maintain systems which serve as a backbone for the future of data handling and computation. Is that too much to ask for "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": " ?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1653691364.955309",
        "client_msg_id": "b1ed1847-bb80-4cfd-8f42-aeeb285fc6e6",
        "text": "This sounds exactly like a description of what HTML and CSS are. HTML is a description of a document without much regard for how a particular client will render it. CSS is a bunch of optional hints to the client about how to render it. Browser clients are designed for all sorts of different device types, and when a new device type comes along there's often a web browser for it that adapts existing HTML to work passably well with the new type of device. (I'm always shocked when I load my wildly complex website, loaded with SVG animations, on, say, a PlayStation, and it works 99% perfectly.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653688617.190259",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "on=r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This sounds exactly like a description of what HTML and CSS are. HTML is a description of a document without much regard for how a particular client will render it. CSS is a bunch of optional hints to the client about how to render it. Browser clients are designed for all sorts of different device types, and when a new device type comes along there's often a web browser for it that adapts existing HTML to work passably well with the new type of device. (I'm always shocked when I load my wildly complex website, loaded with SVG animations, on, say, a PlayStation, and it works 99% perfectly.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1653691442.149299",
        "client_msg_id": "827f31fc-fc03-40c7-af97-4818891d8a8e",
        "text": "I suspect you meant something more than this, though. How is what you're imagining different from HTML\/CSS? I'm sure you've got lots of thoughts about this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653688617.190259",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ub3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suspect you meant something more than this, though. How is what you're imagining different from HTML\/CSS? I'm sure you've got lots of thoughts about this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1653691535.634009",
        "client_msg_id": "d532921e-1502-49db-a5a5-d209af2e85f0",
        "text": "It does. But html and css are far more concrete than I'm thinking. Instead of the presented api being in the form of user interactable elements, present a machine api (think graphql ish) and let a program design a bridge from your api to UI. Maybe a better example is in order. Will see if I can make one when I'm at my desktop.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653688617.190259",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XCW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It does. But html and css are far more concrete than I'm thinking. Instead of the presented api being in the form of user interactable elements, present a machine api (think graphql ish) and let a program design a bridge from your api to UI. Maybe a better example is in order. Will see if I can make one when I'm at my desktop."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U014Y19RYA3",
        "type": "message",
        "ts": "1653692179.019109",
        "client_msg_id": "45f2f10b-51fa-423b-8195-316546946427",
        "text": "I would encourage you not to think of HTML in terms of \"user interactable elements\" but rather data types.  Most of the data types are well named enough (input types: text, date, color, datetime, email) some less well named (input types: checkbox &lt;should be boolean&gt;, radio &lt;should just be hints on select&gt;) output types: p, section, h1.  Because it's old and has accumulated age there are warts to it, but I think you'll find it still fits the bill and has the benefit of already working even when used well",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3ab4d3a66e4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ab4d3a66e470ce10eb7ec812fab3c46.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Stephen",
            "real_name": "Stephen Paul Weber",
            "display_name": "singpolyma",
            "team": "T5TCAFTA9",
            "name": "singpolyma",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653688617.190259",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DOTK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would encourage you not to think of HTML in terms of \"user interactable elements\" but rather data types.  Most of the data types are well named enough (input types: text, date, color, datetime, email) some less well named (input types: checkbox <should be boolean>, radio <should just be hints on select>) output types: p, section, h1.  Because it's old and has accumulated age there are warts to it, but I think you'll find it still fits the bill and has the benefit of already working even when used well"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1653694071.018419",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1653694725.000000"
        },
        "client_msg_id": "A79A36F0-130E-4C97-A2F9-E7EEDF9D3216",
        "text": "<@UQ706GB9U> A file system is essentially just an app too. It's an app that allows you to store and retrieve data via a GUI interface or a programmatic interface. The only real benefit (or unfair advantage?) it has is that every programming language\/environment has built-in APIs for interacting with the app.\n\nI think the right path forward is for OS developers to abandon the idea of a file system as a “blessed app”, and create better and more general ways for apps to share data directly with each other. Mobile OS’s have been heading in this direction for a while.\n\nThis will make the “desktop” metaphor entirely obsolete, but that's ok. I'd say its time has passed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S+\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UQ706GB9U"
                            },
                            {
                                "type": "text",
                                "text": " A file system is essentially just an app too. It's an app that allows you to store and retrieve data via a GUI interface or a programmatic interface. The only real benefit (or unfair advantage?) it has is that every programming language\/environment has built-in APIs for interacting with the app."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "I think the right path forward is for OS developers to abandon the idea of a file system as a “blessed app”, and create better and more general ways for apps to share data directly with each other. Mobile OS’s have been heading in this direction for a while."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "This will make the “desktop” metaphor entirely obsolete, but that's ok. "
                            },
                            {
                                "type": "text",
                                "text": "I'd say "
                            },
                            {
                                "type": "text",
                                "text": "its time has passed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1653695422.445189",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1653695596.000000"
        },
        "client_msg_id": "4ed9a1af-460f-43ba-b5d3-2a57675d3667",
        "text": "My instinct: model \"Undo\" as a regular operation that can conflict with others. If A creates something, B builds on it (more generally, makes a dependent change), and then A hits Ctrl-Z it should register a conflict in exactly the same way as if A manually deleted the thing. Maybe the only difference would be that the parent state of the undo op is guaranteed to be the result of the op it's undoing, rather than incorporating other changes (this sidesteps the question of whether A's client has seen B's edits). But the basic idea is that you need to handle all those cases anyway, so just use them for Undo. Ed: I guess I should be explicit that in this scenario the undo stack or whatever is probably private state, scoped to the client.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XYKU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My instinct: model \"Undo\" as a regular operation that can conflict with others. If A creates something, B builds on it (more generally, makes a dependent change), and then A hits Ctrl-Z it should register a conflict in exactly the same way as if A manually deleted the thing. Maybe the only difference would be that the parent state of the undo op is guaranteed to be the result of the op it's undoing, rather than incorporating other changes (this sidesteps the question of whether A's client has seen B's edits). But the basic idea is that you need to handle all those cases anyway, so just use them for Undo. Ed: I guess I should be explicit that in this scenario the undo stack or whatever is probably private state, scoped to the client."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1653696656.423049",
        "client_msg_id": "8e91b3bb-6773-4985-9d00-205573d9177a",
        "text": "It's probably overreaching to say that search-based interfaces are inherently more abstract than filesystems, but they are certainly inherently abstract, and presently more abstract than filesystems.\n\nDev tools face a pressure to be low-abstraction, because we never know what weird detail is going to get picked up and branched on by our eldritch runtime stack of OS, language VM, etc. For that weird detail to be _invisible_ because of our shiny UI is intolerable. This kind of thing already happens far too often for my taste. My dev tools need to be an anchor in this ocean of insanity, not another contributor. So I think dev tools, at least for professionals and those who wish to be such, are unlikely to change and absolutely should not change until the underlying OS does.\n\nI also reject the notion that \"smart college students\" are incapable of learning a hierarchical file system. If they're not getting it, you're doing a bad job teaching it. (Granted, the attempts of mainstream OSs to split the difference don't help, with multiple dumbed-down views onto the same tree. Funny how devs gravitate toward OSs that make that tree easier to see.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TWv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's probably overreaching to say that search-based interfaces are inherently more abstract than filesystems, but they are certainly inherently abstract, and presently more abstract than filesystems.\n\nDev tools face a pressure to be low-abstraction, because we never know what weird detail is going to get picked up and branched on by our eldritch runtime stack of OS, language VM, etc. For that weird detail to be "
                            },
                            {
                                "type": "text",
                                "text": "invisible",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " because of our shiny UI is intolerable. This kind of thing already happens far too often for my taste. My dev tools need to be an anchor in this ocean of insanity, not another contributor. So I think dev tools, at least for professionals and those who wish to be such, are unlikely to change and absolutely should not change until the underlying OS does.\n\nI also reject the notion that \"smart college students\" are incapable of learning a hierarchical file system. If they're not getting it, you're doing a bad job teaching it. (Granted, the attempts of mainstream OSs to split the difference don't help, with multiple dumbed-down views onto the same tree. Funny how devs gravitate toward OSs that make that tree easier to see.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U01HKDC2H08"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1653701186.141679",
        "client_msg_id": "bb8e98e1-2858-460d-a59f-256b77463b4b",
        "text": "I'm not necessarily opposed to thinking about HTML in that way. I just consider it slightly more constraining than what I'd like (which may or may not be possible). This is all indirectly inspired by Smalltalk and the ability in older systems to edit the UI of your own operating system immediately. That would be challenging in modern apps, if only because of the resulting merge conflicts :slightly_smiling_face:.\n\nHere's a _very_ rough sketch of what I'm thinking of.\n\n<http:\/\/inthedarkcoder.com\/images\/SlackImageHosting.jpeg>\n\nThe hope would be that this kind of api declaration could also span to entirely different UI types, because the programmer in fact makes no statement about any UI type at all. But then it starts to sound like SciFi where \"Magic AI does everything\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653688617.190259",
        "parent_user_id": "U01DUNFS2N4",
        "attachments": [
            {
                "from_url": "http:\/\/inthedarkcoder.com\/images\/SlackImageHosting.jpeg",
                "image_url": "http:\/\/inthedarkcoder.com\/images\/SlackImageHosting.jpeg",
                "image_width": 1505,
                "image_height": 1439,
                "image_bytes": 134014,
                "id": 1,
                "original_url": "http:\/\/inthedarkcoder.com\/images\/SlackImageHosting.jpeg",
                "fallback": "1505x1439px image"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T2C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not necessarily opposed to thinking about HTML in that way. I just consider it slightly more constraining than what I'd like (which may or may not be possible). This is all indirectly inspired by Smalltalk and the ability in older systems to edit the UI of your own operating system immediately. That would be challenging in modern apps, if only because of the resulting merge conflicts "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nHere's a "
                            },
                            {
                                "type": "text",
                                "text": "very",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rough sketch of what I'm thinking of.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/inthedarkcoder.com\/images\/SlackImageHosting.jpeg"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe hope would be that this kind of api declaration could also span to entirely different UI types, because the programmer in fact makes no statement about any UI type at all. But then it starts to sound like SciFi where \"Magic AI does everything\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1653708910.639539",
        "client_msg_id": "99c1fb9b-ab59-41b1-a359-b5e5c729731d",
        "text": "<@U016VUZGUUQ>, \"we never know what weird detail is going to get picked up and branched on by our eldritch runtime stack.\"  In contrast we have the lie of WYSIWYG tools where some aspect of the WYG is hidden deep in a sub-sub menu panel or actually, truly invisible.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gXFt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": ", \"we never know what weird detail is going to get picked up and branched on by our eldritch runtime stack.\"  In contrast we have the lie of WYSIWYG tools where some aspect of the WYG is hidden deep in a sub-sub menu panel or actually, truly invisible."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1653714333.068139",
        "client_msg_id": "7be9a9dd-4a76-4484-bff6-5e69ead10b8a",
        "text": "<@UCGAK10LS> What does a \"better and more general way for apps to share data directly with each other\" look like that isn't \"essentially an app\"?\n\nOr did you mean a file explorer rather than a file system? Calling file systems apps feels not even wrong. Syscalls are not apps.\n\nThe big difference between system software and application software is one of incentives. An OS maker needs people developing apps, and so has an incentive to standardize and maintain interfaces independent of products or apps. Two apps interchanging information often lack such transparently aligned incentives.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q13vR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " What does a \"better and more general way for apps to share data directly with each other\" look like that isn't \"essentially an app\"?\n\nOr did you mean a file explorer rather than a file system? Calling file systems apps feels not even wrong. Syscalls are not apps.\n\nThe big difference between system software and application software is one of incentives. An OS maker needs people developing apps, and so has an incentive to standardize and maintain interfaces independent of products or apps. Two apps interchanging information often lack such transparently aligned incentives."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1653715336.334719",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1653715595.000000"
        },
        "client_msg_id": "c5ba1d6e-8c2c-4101-ac09-abb8ff0abcc4",
        "text": "<@UCUSW7WVD>\n&gt; What does a \"better and more general way for apps to share data directly with each other\" look like that isn't \"essentially an app\"?\nMy vision for inter-app communication demands that apps exist in a wholly new (i.e. not-yet-invented) operating environment that offers a novel model of data communication. The model will _*not*_ be message-passing (i.e. syscalls, APIs, etc); it will be something closer to shared immutable state. But the details are unimportant here (and I'm still working on them). My main point is: this would be the \"standard\" you are speaking of, but it involves no \"intermediary app\", and it involves no \"central file system\". (After all, have you ever heard of an immutable file system?)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qyH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does a \"better and more general way for apps to share data directly with each other\" look like that isn't \"essentially an app\"?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nMy vision for inter-app communication demands that apps exist in a wholly new (i.e. not-yet-invented) operating environment that offers a novel model of data communication. The model will "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be message-passing (i.e. syscalls, APIs, etc); it will be something closer to shared immutable state. But the details are unimportant here (and I'm still working on them). My main point is: this would be the \"standard\" you are speaking of, but it involves no \"intermediary app\", and it involves no \"central file system\". (After all, have you ever heard of an immutable file system?)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653716361.698549",
        "client_msg_id": "9a6a8679-8f46-42d2-b1ad-95f31841e27c",
        "text": "<@U016VUZGUUQ> Makes sense. We already use reverse ops for undo, but they don't have the concept of a blocking conflict error. I guess the thing that tripped me up was the search for conflict-free ops, but it seems like if program structures are dependent, yet can be independently removed (or at least attempted to), it's unavoidable to run into blocking conflicts since the program would otherwise end up in an invalid state.\n\nIn practical terms, these will be edge cases, but they still need predictable behavior. For user A there is still the option to first delete the `open` state expression that user B added, and then remove the Dialog along with the `open`state that no other elements depend on now.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=bH3=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " Makes sense. We already use reverse ops for undo, but they don't have the concept of a blocking conflict error. I guess the thing that tripped me up was the search for conflict-free ops, but it seems like if program structures are dependent, yet can be independently removed (or at least attempted to), it's unavoidable to run into blocking conflicts since the program would otherwise end up in an invalid state.\n\nIn practical terms, these will be edge cases, but they still need predictable behavior. For user A there is still the option to first delete the "
                            },
                            {
                                "type": "text",
                                "text": "open",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " state expression that user B added, and then remove the Dialog along with the "
                            },
                            {
                                "type": "text",
                                "text": "open",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "state that no other elements depend on now."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653717093.432579",
        "client_msg_id": "1ca4b1f2-2246-4c5a-bbac-5f81bb9cd0ec",
        "text": "Feels like computers are these incredible tools that we've invented, but we (their creators) are only able to comprehend maybe 5% of what they're capable of. Exploring those 95% together is what makes this community so exciting :smiling_face_with_3_hearts:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gZ3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Feels like computers are these incredible tools that we've invented, but we (their creators) are only able to comprehend maybe 5% of what they're capable of. Exploring those 95% together is what makes this community so exciting "
                            },
                            {
                                "type": "emoji",
                                "name": "smiling_face_with_3_hearts",
                                "unicode": "1f970"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1653717678.057469",
        "client_msg_id": "9fde00c7-24f1-44f9-a7f6-a95d1dd2604b",
        "text": "The option for conflicts that I am curious about (but haven't seen any serious work on) is to include conflict markers in the fundamental data model, so they can just stay there until whatever squishy human process is relevant can decide what the right answer is. Optionally, automatically squash nested or adjacent conflict markers (less felicitous if you want to annotate each conflict site or branch, maybe record who made each change).\n\nIncidentally, for me the idea of explicit conflict markers is tied to my ancient ideas for an editor for prose\/poetry that lets you keep around various possibilities for a line or passage. So I guess if you go that route, and also use it for conflict markers, uh, let me know. :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xiJd\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The option for conflicts that I am curious about (but haven't seen any serious work on) is to include conflict markers in the fundamental data model, so they can just stay there until whatever squishy human process is relevant can decide what the right answer is. Optionally, automatically squash nested or adjacent conflict markers (less felicitous if you want to annotate each conflict site or branch, maybe record who made each change).\n\nIncidentally, for me the idea of explicit conflict markers is tied to my ancient ideas for an editor for prose\/poetry that lets you keep around various possibilities for a line or passage. So I guess if you go that route, and also use it for conflict markers, uh, let me know. :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0165TZ39GV",
        "type": "message",
        "ts": "1653718017.063869",
        "client_msg_id": "F5A91D35-896E-471F-A15B-756134BE0B41",
        "text": "<@U016VUZGUUQ> I don't know if anyone is saying they're incapable of learning it. It's just a challenge, when a fundamental mental model that previously all students had needs to be taught. A pre-requisite becomes part of the course, and room needs to be made for that in the limited time the educators have with the students. \n\nOne of the high school educators on the stream we were discussing this on made a comment to the effect of: CS classes are increasingly teaching digital literacy skills that used to be addressed elsewhere.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "dc2c7f9b4a4f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-29\/1217517778004_dc2c7f9b4a4f3937c08d_72.png",
            "first_name": "Joe",
            "real_name": "Joe Nash",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joe.nash",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fcl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "I don't "
                            },
                            {
                                "type": "text",
                                "text": "know"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "if"
                            },
                            {
                                "type": "text",
                                "text": " anyone "
                            },
                            {
                                "type": "text",
                                "text": "is"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "saying"
                            },
                            {
                                "type": "text",
                                "text": " they're "
                            },
                            {
                                "type": "text",
                                "text": "incapable"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "of"
                            },
                            {
                                "type": "text",
                                "text": " learning "
                            },
                            {
                                "type": "text",
                                "text": "it."
                            },
                            {
                                "type": "text",
                                "text": " It's just "
                            },
                            {
                                "type": "text",
                                "text": "a"
                            },
                            {
                                "type": "text",
                                "text": " challenge"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "when"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "a"
                            },
                            {
                                "type": "text",
                                "text": " fundamental "
                            },
                            {
                                "type": "text",
                                "text": "mental"
                            },
                            {
                                "type": "text",
                                "text": " model "
                            },
                            {
                                "type": "text",
                                "text": "that"
                            },
                            {
                                "type": "text",
                                "text": " previously "
                            },
                            {
                                "type": "text",
                                "text": "all"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "students"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "had"
                            },
                            {
                                "type": "text",
                                "text": " needs to be taught"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "A"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "pre-requisite"
                            },
                            {
                                "type": "text",
                                "text": " becomes part "
                            },
                            {
                                "type": "text",
                                "text": "of"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "course,"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "and"
                            },
                            {
                                "type": "text",
                                "text": " room "
                            },
                            {
                                "type": "text",
                                "text": "needs"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "to"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "be"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "made"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "for"
                            },
                            {
                                "type": "text",
                                "text": " that in "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "limited"
                            },
                            {
                                "type": "text",
                                "text": " time "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "educators"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "have"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "with"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "students."
                            },
                            {
                                "type": "text",
                                "text": " \n\n"
                            },
                            {
                                "type": "text",
                                "text": "One"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "of"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " h"
                            },
                            {
                                "type": "text",
                                "text": "igh"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "school"
                            },
                            {
                                "type": "text",
                                "text": " educators "
                            },
                            {
                                "type": "text",
                                "text": "on"
                            },
                            {
                                "type": "text",
                                "text": " the stream "
                            },
                            {
                                "type": "text",
                                "text": "we"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "were"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "discussing"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "this"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "on"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "made"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "a"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "comment"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "to"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "effect"
                            },
                            {
                                "type": "text",
                                "text": " of"
                            },
                            {
                                "type": "text",
                                "text": ":"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "CS"
                            },
                            {
                                "type": "text",
                                "text": " classes "
                            },
                            {
                                "type": "text",
                                "text": "are"
                            },
                            {
                                "type": "text",
                                "text": " increasingly teaching "
                            },
                            {
                                "type": "text",
                                "text": "digital"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "literacy"
                            },
                            {
                                "type": "text",
                                "text": " skills "
                            },
                            {
                                "type": "text",
                                "text": "that"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "used"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "to"
                            },
                            {
                                "type": "text",
                                "text": " be "
                            },
                            {
                                "type": "text",
                                "text": "addressed"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "elsewhere."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653718034.966319",
        "client_msg_id": "83203347-bf29-45c0-8d84-0a807dd0d30b",
        "text": "Ah, interesting. I think that has real merit in knowledge work where it's a collaboration to sort out a complicated topic. I recall also wanting branching for our pitch deck, where we could try out variations and target different audiences.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Mt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, interesting. I think that has real merit in knowledge work where it's a collaboration to sort out a complicated topic. I recall also wanting branching for our pitch deck, where we could try out variations and target different audiences."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]