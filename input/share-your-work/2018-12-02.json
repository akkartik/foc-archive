[
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1543767865.001300",
        "client_msg_id": "1ffb0f28-7db3-4a79-9085-700a80a93199",
        "text": "So is it really possible to do this well at scale? I ask because it's easy as a lone programmer to think it can be done perfectly but arguably the reason Google has much of that problem is they have 30k programmers. There's just no way to communicate all the knowledge needed to follow \"the one true way\".\n\nI know I've seen Google employees or maybe ex-google employees complain as well because they want to hack some new service together but were told \"no, it must integrate with our system\" and so something they could probably throw together if they were a 3 person startup ends up being 6-12 months of work.\n\nOf course if Google had let them just hack then there'd be a new service incompatible with everything else. Then again I guess because of the communication issues they still have this problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543241688.079600",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qn2vI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So is it really possible to do this well at scale? I ask because it's easy as a lone programmer to think it can be done perfectly but arguably the reason Google has much of that problem is they have 30k programmers. There's just no way to communicate all the knowledge needed to follow \"the one true way\".\n\nI know I've seen Google employees or maybe ex-google employees complain as well because they want to hack some new service together but were told \"no, it must integrate with our system\" and so something they could probably throw together if they were a 3 person startup ends up being 6-12 months of work.\n\nOf course if Google had let them just hack then there'd be a new service incompatible with everything else. Then again I guess because of the communication issues they still have this problem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1543770020.001600",
        "client_msg_id": "f19d6e57-2e8d-4e1a-804e-60a08896245f",
        "text": "This is very cool. I really liked how it deals with the complexity seen in the patch systems and how you can seemingly effectively break a problem down so that at each level you're only dealing with the parts relevant to that level of the program.\n\nI'm curious what your plan is to add types for visualizations. If I understood correctly in the example when you enabled the vector visualization it looked for any thing with an x:number, y:number and I guess no other fields. But x:number, y:number also describes a \"point\". Points are different from vectors. A Point + A Vector produces another point. A Vector + a Vector produces a vector. Point + Point is an error.\n\nAnother example can be seen in the still for the video you have `size` and `angle` both of which are just numbers but `angle` could be visualized differently than `size`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543308265.086500",
        "parent_user_id": "UBKNXPBAB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mJgaT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is very cool. I really liked how it deals with the complexity seen in the patch systems and how you can seemingly effectively break a problem down so that at each level you're only dealing with the parts relevant to that level of the program.\n\nI'm curious what your plan is to add types for visualizations. If I understood correctly in the example when you enabled the vector visualization it looked for any thing with an x:number, y:number and I guess no other fields. But x:number, y:number also describes a \"point\". Points are different from vectors. A Point + A Vector produces another point. A Vector + a Vector produces a vector. Point + Point is an error.\n\nAnother example can be seen in the still for the video you have "
                            },
                            {
                                "type": "text",
                                "text": "size",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "angle",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " both of which are just numbers but "
                            },
                            {
                                "type": "text",
                                "text": "angle",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " could be visualized differently than "
                            },
                            {
                                "type": "text",
                                "text": "size",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1543809306.002000",
        "client_msg_id": "8b92e9ac-2ed5-442c-881b-3f18e0d17f46",
        "text": "<@UC6997THT> Thanks!\n\nI think there are a lot of interesting questions about how (\/ if) to work types into a system like this. I agree that they could help for choosing data visualizations. You could even go all the way to a Haskell-y, type-class-y thing. On the other hand, it's worth asking: Does PANE really need types? How often do these ambiguous cases occur? How much of a problem would it be to just ask the user to disambiguate when needed?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1543308265.086500",
        "parent_user_id": "UBKNXPBAB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WWx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": " Thanks!\n\nI think there are a lot of interesting questions about how (\/ if) to work types into a system like this. I agree that they could help for choosing data visualizations. You could even go all the way to a Haskell-y, type-class-y thing. On the other hand, it's worth asking: Does PANE really need types? How often do these ambiguous cases occur? How much of a problem would it be to just ask the user to disambiguate when needed?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCKRZS3DZ"
                ],
                "count": 1
            }
        ]
    }
]