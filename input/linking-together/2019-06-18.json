[
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1560841968.115100",
        "client_msg_id": "63BD3105-E5E7-46F0-B0A9-A3E35AD6DA8E",
        "text": "<https:\/\/www.google.com\/amp\/s\/randocity.com\/2018\/03\/27\/cando-an-amiga-programming-language\/amp\/> more in the same vein: tales of an extinct amiga-based successor to hypercard that may have been secretly written as a sort of smalltalk-image-type-thing?!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "Random Thoughts - Randocity!",
                "service_url": "http:\/\/randocity.com",
                "title": "CanDo: An Amiga Programming Language",
                "title_link": "https:\/\/www.google.com\/amp\/s\/randocity.com\/2018\/03\/27\/cando-an-amiga-programming-language\/amp\/",
                "author_name": "commorancy",
                "author_link": "https:\/\/randocity.com\/author\/commorancy\/",
                "thumb_url": "https:\/\/randosity.files.wordpress.com\/2018\/03\/cando1.png?fit=200%2C150",
                "thumb_width": 127,
                "thumb_height": 150,
                "text": "At one point in time, I owned a Commodore Amiga. This was back when I was in college. I first owned an Amiga 500, then later an Amiga 3000. I loved spending my time learning new things about the Amiga and I was particularly interested in programming it. While in college, I came across a programming language by the name of CanDo. Let&rsquo;s explore.\nHyperCard\nAround the time that CanDo came to exist on the Amiga, Apple had already introduced HyperCard on the Mac. It was a &lsquo;card&rsquo; based programming language. What that means is that each screen (i.e., card) had a set of objects such has fields for entering data, placement of visual images or animations, buttons and whatever other things you could jam onto that card. Behind each element on the card, you could attach written programming functions() and conditionals (if-then-else, do&hellip;while, etc). For example, if you had an animation on the screen, you could add a play button. If you click the play button, a function would be called to run the animation just above the button. You could even add buttons like pause, slow motion, fast forward and so on.\nCanDo was an interpreted object oriented language written by a small software company named Inovatronics out of Dallas. I want to say it was released around 1989. Don&rsquo;t let the fact that it was an interpreted language fool you. CanDo was fast for an interpreted language (by comparison, I&rsquo;d say it was proportionally faster than the first version of Java), even on the then 68000 CPU series. The CanDo creators took the HyperCard idea, expanded it and created their own version on the Amiga. While it supported very similar ideas to HyperCard, it certainly wasn&rsquo;t identical. In fact, it was a whole lot more powerful than HyperCard ever dreamed of being. HyperCard was a small infant next to this product. My programmer friend and I would yet come to find exactly how powerful the CanDo language could be.\nCanDo\nAmiga owners only saw what INOVATronics wanted them to see in this product. A simplistic and easy to use user interface consisting of a &lsquo;deck&rsquo; (i.e, deck of cards) concept where you could add buttons or fields or images or sounds or animation to one of the cards in that deck. They were trying to keep this product as easy to use as possible. It was, for all intents and purposes, a drag-and-drop programming language, but closely resembled HyperCard in functionality, not language syntax. For the most part, you didn&rsquo;t need to write a stitch of code to make most things work. It was all just there. You pull a button over and a bunch of pre-programmed functions could be placed onto the button and attached to other objects already on the screen. As a language, it was about as simple as you could make it. I commend the INOVATronics guys on the user-friendly aspect of this system. This was, hands down, one of the easiest visual programming languages to learn on the Amiga. They nailed that part of this software on the head.\nHowever, if you wanted to write complex code, you most certainly could do this as well. The underlying language was completely full featured and easy to write. The syntax checker was amazing and would help you fix just about any problem in your code. The language had a full set of typical conditional constructs including for loops, if&hellip;then&hellip;else, do&hellip;while, while&hellip;until and even do&hellip;while&hellip;until (very unusual to see this one). It was a fully stocked mostly free form programming language, not unlike C, but easier. If you&rsquo;re interested in reading the manual for CanDo, it is now located at this end of this section below.\nAs an object oriented language, internal functions were literally attached to objects (usually screen elements). For example, a button. The button would then have a string of code or functions that drove its internal functionality. You could even dip into that element&rsquo;s functions to get data out (from the outside). Like most OO languages, the object itself is opaque. You can&rsquo;t see its functions names or use them directly, only that object that owns that code can. However, you could ask the object to use one of its function and return data back to you. Of course, you had to know that function existed. In fact, this would be the first time I would be introduced to the concept of object oriented programming in this way. There was no such thing as free floating code in this language. All code had to exist as an attachment to some kind of object. For example, it was directly attached to the deck itself, to one of the cards in the deck, to an element on one of the cards or to an action associated with that object (mouse, joystick button or movement, etc).\nCanDo also supported RPC calls. This was incredibly important for communication between two separately running CanDo deck windows. If you had one deck window with player controls and another window that had a video you wanted to play, you could send a message from one window to another to perform an action in that window, like play, pause, etc. There were many reasons to need many windows open each communicating with each other.\nThe INOVATronics guys really took programming the Amiga to a whole new level&hellip; way beyond anything in HyperCard. It was so powerful, in fact, there was virtually nothing stock on the Amiga it couldn&rsquo;t control. Unfortunately, it did have one downside. It didn&rsquo;t have the ability to import system shared libraries on AmigaDOS. If you installed a new database engine on your Amiga with its own shared function library, there was no way to access those functions in CanDo by linking it in. This was probably CanDo&rsquo;s single biggest flaw. It was not OS extensible. However, for what CanDo was designed to do and the amount of control that was built into it by default, it was an amazing product.\nI&rsquo;d also like to mention that TCP\/IP was just coming into existence with modems on the Amiga. I don&rsquo;t recall how much CanDo supported network sockets or network programming. It did support com port communication, but I can&rsquo;t recall if it supported TCP\/IP programming. I have no doubt that had INOVATronics stayed in business and CanDo progressed beyond its few short years in existence, TCP\/IP support would have been added.\nCanDo also supported Amiga Rexx (ARexx) to add additional functionality to CanDO which would offer additional features that CanDo didn&rsquo;t support directly. Though, ARexx worked, it wasn&rsquo;t as convenient as having a feature supported directly by CanDo.\nHere are the CanDo manuals if you&rsquo;re interested in checking out more about it:\nOriginal CanDo Manual\nSearchable CanDo Manual\nOriginal CanDo ProPak Manual\nSearchable CanDo ProPak Manual\nHere&rsquo;s a snippet from the CanDo main manual:\nCanDo is a revolutionary, Amiga specific, interactive software authoring system. Its unique purpose is to let you create real Amiga software without any programming experience. CanDo is extremely friendly to you and your Amiga. Its elegant design lets you take advantage of the Amiga&rsquo;s sophisticated operating system without any technical knowledge. CanDo makes it easy to use the things that other programs generate &ndash; pictures, sounds, animations, and text files. In a minimal amount of time, you can make programs that are specially suited to your needs. Equipped with CanDo, a paint program, a sound digitizer, and a little bit of imagination, you can produce standalone applications that rival commercial quality software. These applications may be given to friends or sold for profit without the need for licenses or fees.\nAs you can see from this snippet, INOVATronics thought of it as an &lsquo;Authoring System&rsquo; not as a language. CanDo itself might have been, but the underlying language was most definitely a programming language.\nCanDo Player\nThe way CanDo worked its creation process was that you would create your CanDo d…",
                "fallback": "Random Thoughts - Randocity! Link: CanDo: An Amiga Programming&nbsp;Language",
                "from_url": "https:\/\/www.google.com\/amp\/s\/randocity.com\/2018\/03\/27\/cando-an-amiga-programming-language\/amp\/",
                "service_icon": "https:\/\/s2.wp.com\/i\/webclip.png",
                "id": 1,
                "original_url": "https:\/\/www.google.com\/amp\/s\/randocity.com\/2018\/03\/27\/cando-an-amiga-programming-language\/amp\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CzdV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.google.com\/amp\/s\/randocity.com\/2018\/03\/27\/cando-an-amiga-programming-language\/amp\/"
                            },
                            {
                                "type": "text",
                                "text": " more in the same vein: tales of an extinct amiga-based successor to hypercard that may have been secretly written as a sort of smalltalk-image-type-thing?!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UJ6LDMMN0",
                    "UHZNB3HRP"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "UHDQ62M4P",
                    "UEGFXUK3M"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1560841985.115600",
        "client_msg_id": "91BBACE7-AC9D-4C7C-B6B1-3BD9DF4AD696",
        "text": "&gt;&gt;&gt; A programmer friend who was working towards his CompSci masters owned an Amiga, and also owned CanDo. In fact, he introduced me to it. He had been poking around with CanDo and found that it supported three very interesting functions. It had the ability to  decompile its own code into humanly readable format to allow modification, syntactically check the changes and recompile it, all while still running. Yes, you read that right. It supported on-the-fly code modification. Remember this, it’s important.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rWP",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A programmer friend who was working towards his CompSci masters owned an Amiga, and also owned CanDo. In fact, he introduced me to it. He had been poking around with CanDo and found that it supported three very interesting functions. It had the ability to  decompile its own code into humanly readable format to allow modification, syntactically check the changes and recompile it, all while still running. Yes, you read that right. It supported on-the-fly code modification. Remember this, it’s important."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1560842047.116100",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1560842074.000000"
        },
        "client_msg_id": "AED47912-2A00-4343-82B6-63EB51A99117",
        "text": "&gt;&gt;&gt; Enter TurboEditor. Because of this one simple little thing (not so little actually) that my friend found, we were able to decompile the entire CanDo program and figure out how it worked. Remember that important thing? Yes, that’s right, CanDo is actually written in itself and it could actually modify pieces that are currently executing. Let me clarify this just a little. One card could modify another card, then pull that card into focus. The actual card wasn’t currently executing, but the deck was. In fact, we came to find that CanDo was merely a facade. We also found that there was a very powerful object oriented, fully reentrant, self-modifying, programming language under that facade of a UI. In fact, this is how CanDo’s UI worked. Internally, it could take an element, decompile it, modify it and then recompile it right away and make it go live, immediately adding the updated functionality to a button or slider.\n\n&gt;While CanDo could modify itself, it never did this. Instead, it utilized a parent-child relationship. It always created a child sandbox for user-created decks. This sandbox area is where the user built new CanDo Decks. Using this sandbox approach, this is how CanDo built and displayed a preview of your deck’s window. The sandbox would then be saved to a deck file and then executed as necessary.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560842047.116100",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1560844001.116400",
        "reply_users": [
            "UJUGB1XGD"
        ],
        "replies": [
            {
                "user": "UJUGB1XGD",
                "ts": "1560844001.116400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=Ns",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Enter TurboEditor. Because of this one simple little thing (not so little actually) that my friend found, we were able to decompile the entire CanDo program and figure out how it worked. Remember that important thing? Yes, that’s right, CanDo is actually written in itself and it could actually modify pieces that are currently executing. Let me clarify this just a little. One card could modify another card, then pull that card into focus. The actual card wasn’t currently executing, but the deck was. In fact, we came to find that CanDo was merely a facade. We also found that there was a very powerful object oriented, fully reentrant, self-modifying, programming language under that facade of a UI. In fact, this is how CanDo’s UI worked. Internally, it could take an element, decompile it, modify it and then recompile it right away and make it go live, immediately adding the updated functionality to a button or slider.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "While CanDo could modify itself, it never did this. Instead, it utilized a parent-child relationship. It always created a child sandbox for user-created decks. This sandbox area is where the user built new CanDo Decks. Using this sandbox approach, this is how CanDo built and displayed a preview of your deck’s window. The sandbox would then be saved to a deck file and then executed as necessary."
                            }
                        ],
                        "border": 1
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUGB1XGD",
        "type": "message",
        "ts": "1560844001.116400",
        "client_msg_id": "2f485766-9d0b-4769-91e6-a859aac3a1b2",
        "text": "\"While it could modify itself, it never did this\" - an underappreciated constraint of the compile-execute separation model imo. There's a certain pattern of sawing at the tree branch you're sitting on that you can fall into when digging too deep in emacs or a smalltalk image…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2810c79d33a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f2810c79d33a097f4e0900c9622b5106.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "fyr",
            "display_name": "fyr",
            "team": "T5TCAFTA9",
            "name": "ohaitch",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560842047.116100",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HkbeO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"While it could modify itself, it never did this\" - an underappreciated constraint of the compile-execute separation model imo. There's a certain pattern of sawing at the tree branch you're sitting on that you can fall into when digging too deep in emacs or a smalltalk image…"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEGFXUK3M",
                    "UFV8P4472",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1560921445.118400",
        "client_msg_id": "bd5746bf-43af-4672-a7a8-1954e7cc0ee8",
        "text": "YouTube recommended a video about Arrow Types to me.  <https:\/\/www.youtube.com\/watch?v=McnKrV0aDjo>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560921445.118400",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1560966734.118900",
        "reply_users": [
            "UD4Q9LT52"
        ],
        "replies": [
            {
                "user": "UD4Q9LT52",
                "ts": "1560966734.118900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Six Medieval Arrow Types - What are they for?",
                "title_link": "https:\/\/www.youtube.com\/watch?v=McnKrV0aDjo",
                "author_name": "Tod's Workshop",
                "author_link": "https:\/\/www.youtube.com\/user\/todsstuff1",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/McnKrV0aDjo\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Six Medieval Arrow Types - What are they for?",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/McnKrV0aDjo?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=McnKrV0aDjo",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=McnKrV0aDjo"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h3b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "YouTube recommended a video about Arrow Types to me.  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=McnKrV0aDjo"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "UC2A2ARPT",
                    "UJK8MKYAZ",
                    "UHWC9PXBL",
                    "UFV8P4472"
                ],
                "count": 4
            }
        ]
    }
]