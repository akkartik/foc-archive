[
    {
        "user": "UGJ9KAZM3",
        "type": "message",
        "ts": "1553329465.127600",
        "client_msg_id": "b03eb7c2-14d5-4907-8e34-c40cea3fe16e",
        "text": "I want to emphasize that my preference was minor, even artificial. Provoked by someone explicitly asking for it. :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a9ca5b79893e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-05\/567982344725_a9ca5b79893ede5381e5_72.jpg",
            "first_name": "Iridian",
            "real_name": "Iridian Kiiskinen",
            "display_name": "Iridian",
            "team": "T5TCAFTA9",
            "name": "iridian",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553216451.112800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IQ1wZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to emphasize that my preference was minor, even artificial. Provoked by someone explicitly asking for it. "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1553335445.128000",
        "client_msg_id": "E3032CD6-597C-4FD0-B24E-E868A67ADD0A",
        "text": "<http:\/\/khanlou.com\/2017\/03\/on-comments\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553216451.112800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hnRQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/khanlou.com\/2017\/03\/on-comments\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726",
                    "UGJ9KAZM3",
                    "UE6EFEPTQ"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UA8HY8R7B",
        "type": "message",
        "ts": "1553340554.128300",
        "client_msg_id": "75a6fa18-c4a8-42eb-b846-f95ade35e6c7",
        "text": "Hi <!channel>. Anybody here interested in simplifying version control?\n\nThe other day I was trying to get some non-programmers to use github for collaborative work on mostly text documents and realized git is really a huge hurdle. So I've been thinking about how version control could be simplified and have a couple of ideas.\n\nIs anybody here interested in that topic and in sparring with me on it a bit?\n\nAlso: do you know of any projects trying to simplify version control? I've found in ungit and gitless so far.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7db3c1ad975",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e7db3c1ad975b0355d3047ca8acb7c54.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Nikolas",
            "real_name": "Nikolas Martens",
            "display_name": "Nikolas",
            "team": "T5TCAFTA9",
            "name": "nikolas.m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "reply_count": 47,
        "reply_users_count": 18,
        "latest_reply": "1554173675.002300",
        "reply_users": [
            "UCKRZS3DZ",
            "UG91ZQ26P",
            "UA8HY8R7B",
            "U79HM6726",
            "U5TCAFTD3",
            "UAL7940NM",
            "U85HCL7JP",
            "UEASWGGMR",
            "UFXFB1RK8",
            "UC1TYP06P",
            "U7C7B75R6",
            "UFS53UWE5",
            "UEQ6M68H0",
            "UD3AK9JRF",
            "UCUSW7WVD",
            "UD6EXQVM0",
            "UA14TGLTC",
            "UGJ9KAZM3"
        ],
        "replies": [
            {
                "user": "UCKRZS3DZ",
                "ts": "1553341106.128400"
            },
            {
                "user": "UG91ZQ26P",
                "ts": "1553341553.129300"
            },
            {
                "user": "UG91ZQ26P",
                "ts": "1553342182.130100"
            },
            {
                "user": "UA8HY8R7B",
                "ts": "1553343797.130400"
            },
            {
                "user": "UG91ZQ26P",
                "ts": "1553344503.130600"
            },
            {
                "user": "UG91ZQ26P",
                "ts": "1553344751.131100"
            },
            {
                "user": "U79HM6726",
                "ts": "1553345843.131300"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1553350447.131700"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1553350519.132000"
            },
            {
                "user": "UAL7940NM",
                "ts": "1553353183.132300"
            },
            {
                "user": "U85HCL7JP",
                "ts": "1553353586.133600"
            },
            {
                "user": "UEASWGGMR",
                "ts": "1553361805.133900"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1553365020.134100"
            },
            {
                "user": "UC1TYP06P",
                "ts": "1553368757.134400"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1553371987.134800"
            },
            {
                "user": "UA8HY8R7B",
                "ts": "1553372649.135000"
            },
            {
                "user": "UFS53UWE5",
                "ts": "1553373090.135200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1553401848.135500"
            },
            {
                "user": "UA8HY8R7B",
                "ts": "1553417143.136600"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1553443330.139400"
            },
            {
                "user": "UA8HY8R7B",
                "ts": "1553465781.140300"
            },
            {
                "user": "UA8HY8R7B",
                "ts": "1553465910.140900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1553473427.141600"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1553474618.141800"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1553530106.142800"
            },
            {
                "user": "UA8HY8R7B",
                "ts": "1553533411.143300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1553534205.143500"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1553537053.143700"
            },
            {
                "user": "UA8HY8R7B",
                "ts": "1553550183.144500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1553550379.144700"
            },
            {
                "user": "UA8HY8R7B",
                "ts": "1553550553.144900"
            },
            {
                "user": "UA8HY8R7B",
                "ts": "1553550760.145100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1553551411.145300"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1553796053.000500"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1553796136.000700"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1554096463.013200"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1554096533.013400"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1554096654.013600"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1554096691.013800"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1554096788.014000"
            },
            {
                "user": "UAL7940NM",
                "ts": "1554103962.014700"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1554108587.015200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1554133089.015600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1554149792.000900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1554150502.001100"
            },
            {
                "user": "UGJ9KAZM3",
                "ts": "1554151314.001400"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1554173675.002300"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1554185893.387815",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wRZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "broadcast",
                                "range": "channel"
                            },
                            {
                                "type": "text",
                                "text": ". Anybody here interested in simplifying version control?\n\nThe other day I was trying to get some non-programmers to use github for collaborative work on mostly text documents and realized git is really a huge hurdle. So I've been thinking about how version control could be simplified and have a couple of ideas.\n\nIs anybody here interested in that topic and in sparring with me on it a bit?\n\nAlso: do you know of any projects trying to simplify version control? I've found in ungit and gitless so far."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1553341106.128400",
        "client_msg_id": "6c2402e8-5aa5-4d77-b5ff-f08ac1ea0f4d",
        "text": "This is interesting.\n\nWhich part of the version control you want to simplify?\n\nThere is an article you might find interesting: <http:\/\/tonsky.me\/blog\/reinventing-git-interface\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "attachments": [
            {
                "service_name": "tonsky.me",
                "title": "Reinventing Git interface",
                "title_link": "http:\/\/tonsky.me\/blog\/reinventing-git-interface\/",
                "text": "A set of recommendations on how Git UI can be improved not on a cosmetic, but on a very fundamental level. We aim at making Git more usable, powerful and easier to learn by radically simplifying its interface and keeping compartibility with the implementation",
                "fallback": "tonsky.me: Reinventing Git interface",
                "ts": 1402988400,
                "from_url": "http:\/\/tonsky.me\/blog\/reinventing-git-interface\/",
                "id": 1,
                "original_url": "http:\/\/tonsky.me\/blog\/reinventing-git-interface\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jD993",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is interesting.\n\nWhich part of the version control you want to simplify?\n\nThere is an article you might find interesting: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/tonsky.me\/blog\/reinventing-git-interface\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UG91ZQ26P",
        "type": "message",
        "ts": "1553341553.129300",
        "edited": {
            "user": "UG91ZQ26P",
            "ts": "1553341781.000000"
        },
        "client_msg_id": "8a8bfec6-14a8-4193-a71e-4412fab445a9",
        "text": "Due to the nature of our platform (using events to describe the application source code and structure) we are somewhat forced to think new ways of doing version control. It would be awesome to hear your ideas!\n\nIn ValOS, you can instantiate the entire project, essentially making an copy that recursively inherits everything from its prototype. The prototype of an resource is just a field and can be changed. Further edits to the original will be reflected in the instance. This could be seen as a branch.\n\nNow, someone else instantiates the original project, too. Both users make changes to their own versions, materializing only the properties and medias that they have modified. A sort of merge of these two branches could be done by setting the prototype of one instance to be the other instance instead of the original project. This would include the changes of the other user to the project, but only when they don't conflict with your changes (that have been materialized).\n\nThis is only a start and does not cover nearly enough cases, but something like this might be a part of the final version control system. <@UGJ9KAZM3> has some ideas on how to make things work even with Git.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19d30218e585",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-17\/553192434434_19d30218e5859358fde0_72.jpg",
            "first_name": "Ville",
            "real_name": "Ville Ilkkala",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ville111",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EqW4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Due to the nature of our platform (using events to describe the application source code and structure) we are somewhat forced to think new ways of doing version control. It would be awesome to hear your ideas!\n\nIn ValOS, you can instantiate the entire project, essentially making an copy that recursively inherits everything from its prototype. The prototype of an resource is just a field and can be changed. Further edits to the original will be reflected in the instance. This could be seen as a branch.\n\nNow, someone else instantiates the original project, too. Both users make changes to their own versions, materializing only the properties and medias that they have modified. A sort of merge of these two branches could be done by setting the prototype of one instance to be the other instance instead of the original project. This would include the changes of the other user to the project, but only when they don't conflict with your changes (that have been materialized).\n\nThis is only a start and does not cover nearly enough cases, but something like this might be a part of the final version control system. "
                            },
                            {
                                "type": "user",
                                "user_id": "UGJ9KAZM3"
                            },
                            {
                                "type": "text",
                                "text": " has some ideas on how to make things work even with Git."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UG91ZQ26P",
        "type": "message",
        "ts": "1553342182.130100",
        "client_msg_id": "3c180108-c47f-4dc5-9712-4886597f9ecc",
        "text": "Another scenario is this: let's say we have a user profile entity that is in production use. Thousands of users have instantiated their profiles from this profile prototype. Modifying the profile could be done either by a) editing the live prototype (which is sort of risky and stupid), or b) making an instance of the prototype, making edits and then setting the prototype of all profiles to be this instance, which is cumbersome.\n\nThe third option is to make an intermediate instance of the profile (don't know how to call that..) that acts as a sort of an router and has no modifications to it, but all profiles are instances of it. Then, you can freely make new versions of the profile and when you are happy, just set the prototype of the router instance to be the new version and with a single change all the profiles in the system inherit their non-materialized features from the new version.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19d30218e585",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-17\/553192434434_19d30218e5859358fde0_72.jpg",
            "first_name": "Ville",
            "real_name": "Ville Ilkkala",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ville111",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7eZ3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another scenario is this: let's say we have a user profile entity that is in production use. Thousands of users have instantiated their profiles from this profile prototype. Modifying the profile could be done either by a) editing the live prototype (which is sort of risky and stupid), or b) making an instance of the prototype, making edits and then setting the prototype of all profiles to be this instance, which is cumbersome.\n\nThe third option is to make an intermediate instance of the profile (don't know how to call that..) that acts as a sort of an router and has no modifications to it, but all profiles are instances of it. Then, you can freely make new versions of the profile and when you are happy, just set the prototype of the router instance to be the new version and with a single change all the profiles in the system inherit their non-materialized features from the new version."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA8HY8R7B",
        "type": "message",
        "ts": "1553343797.130400",
        "client_msg_id": "c461d3c9-8c91-460f-9f00-232de70097ba",
        "text": "<@UCKRZS3DZ> Thank you for the article. I agree with Nikita bascially in every single point and that's exactly what I have in mind except I would go a little further and also get rid of `merge`. It doesn't look like he followed-up on this, like turning it into a project, or did he?\nWhat I would love to do it take the technical approach of ungit, the model of Nikita, sprinkle in some Github and turn it into a real nice collaboration tool.\n\n<@UG91ZQ26P> I love the idea of using version control as an inheritance\/code reuse mechanism. For your \"changing the prototype\" scenario you could for each existing instance decide whether they want to re-base onto the new prototype version or stick with the old one. Where can I find more information on ValOS?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7db3c1ad975",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e7db3c1ad975b0355d3047ca8acb7c54.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Nikolas",
            "real_name": "Nikolas Martens",
            "display_name": "Nikolas",
            "team": "T5TCAFTA9",
            "name": "nikolas.m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nzBq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCKRZS3DZ"
                            },
                            {
                                "type": "text",
                                "text": " Thank you for the article. I agree with Nikita bascially in every single point and that's exactly what I have in mind except I would go a little further and also get rid of "
                            },
                            {
                                "type": "text",
                                "text": "merge",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It doesn't look like he followed-up on this, like turning it into a project, or did he?\nWhat I would love to do it take the technical approach of ungit, the model of Nikita, sprinkle in some Github and turn it into a real nice collaboration tool.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UG91ZQ26P"
                            },
                            {
                                "type": "text",
                                "text": " I love the idea of using version control as an inheritance\/code reuse mechanism. For your \"changing the prototype\" scenario you could for each existing instance decide whether they want to re-base onto the new prototype version or stick with the old one. Where can I find more information on ValOS?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UG91ZQ26P",
        "type": "message",
        "ts": "1553344503.130600",
        "edited": {
            "user": "UG91ZQ26P",
            "ts": "1553344623.000000"
        },
        "client_msg_id": "80f4115e-b5d6-4112-b3d9-77fee2149fc2",
        "text": "you can find our project from GitHub: <https:\/\/github.com\/valaatech\/vault> or check out the video interview with Steve from here: <https:\/\/youtu.be\/PAAV9tgDbuM>\n\nWe are in a process of rewriting the GitHub readme from a brain dump to something a bit more approachable, thanks to feedback from here and elsewhere :slightly_smiling_face:\n\nThat's an interesting idea.. one way to do that would be:\na) There is a original prototype\nb) Developer makes some new versions\nc) The prototype contains a list of references to all versions. The developer adds new versions to this list, them being inherited by all profiles.\nd) The user with the instance of the profile can see that list in a UI with something like\n```\n&lt;ValaaScope context={{profile: focus}} array={focus.versions.$V.getRelationsTargets(\"version\")}&gt;\n&lt;button onClick={() =&gt; profile.$V.prototype = focus}&gt;\nSwitch to {focus.versionNumber}\n&lt;\/button&gt;\n&lt;\/ValaaScope&gt;\n```\nClicking one of the buttons would switch the prototype of that profile entity to be the one they selected from the version list.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19d30218e585",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-17\/553192434434_19d30218e5859358fde0_72.jpg",
            "first_name": "Ville",
            "real_name": "Ville Ilkkala",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ville111",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Valaa",
                "title_link": "https:\/\/youtu.be\/PAAV9tgDbuM",
                "author_name": "Steven Krouse",
                "author_link": "https:\/\/www.youtube.com\/user\/stevekrouse",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/PAAV9tgDbuM\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Valaa",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/PAAV9tgDbuM?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/PAAV9tgDbuM",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/PAAV9tgDbuM"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vvJVx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you can find our project from GitHub: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/valaatech\/vault"
                            },
                            {
                                "type": "text",
                                "text": " or check out the video interview with Steve from here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/PAAV9tgDbuM"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWe are in a process of rewriting the GitHub readme from a brain dump to something a bit more approachable, thanks to feedback from here and elsewhere "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThat's an interesting idea.. one way to do that would be:\na) There is a original prototype\nb) Developer makes some new versions\nc) The prototype contains a list of references to all versions. The developer adds new versions to this list, them being inherited by all profiles.\nd) The user with the instance of the profile can see that list in a UI with something like"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "<ValaaScope context={{profile: focus}} array={focus.versions.$V.getRelationsTargets(\"version\")}>\n<button onClick={() => profile.$V.prototype = focus}>\nSwitch to {focus.versionNumber}\n<\/button>\n<\/ValaaScope>\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Clicking one of the buttons would switch the prototype of that profile entity to be the one they selected from the version list."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UG91ZQ26P",
        "type": "message",
        "ts": "1553344751.131100",
        "client_msg_id": "d65443ac-6d40-4d46-b4e3-52e6870e596b",
        "text": "but with the mechanism in the earlier message, this wouldn't really work, because if I have this router entity for the profiles and all profiles inherit from it, changing it's prototype would affect all users instantly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19d30218e585",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-17\/553192434434_19d30218e5859358fde0_72.jpg",
            "first_name": "Ville",
            "real_name": "Ville Ilkkala",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ville111",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fZ4=q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but with the mechanism in the earlier message, this wouldn't really work, because if I have this router entity for the profiles and all profiles inherit from it, changing it's prototype would affect all users instantly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1553345843.131300",
        "client_msg_id": "872dcf02-9829-465f-85b6-8e34bce6afb8",
        "text": "Once you store the document as a data structure and not as text to be parsed, you can include unique identifiers for elements in the document which I believe will vastly simplify and improve merging. We definitely intend to explore this in the future in Lamdu (currently there’s no merge support)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7ZZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Once you store the document as a data structure and not as text to be parsed, you can include unique identifiers for elements in the document which I believe will vastly simplify and improve merging. We definitely intend to explore this in the future in Lamdu (currently there’s no merge support)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1553350447.131700",
        "client_msg_id": "43208ab0-8193-4506-ac97-f8a6901a9147",
        "text": "in case you haven't seen: <http:\/\/www.expressionsofchange.org\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "attachments": [
            {
                "title": "Expressions of Change",
                "title_link": "http:\/\/www.expressionsofchange.org\/",
                "text": "Expressions of Change is a research project that aims to improve the tools for constructing ever-changing computer programs by putting the changes themselves...",
                "fallback": "Expressions of Change",
                "from_url": "http:\/\/www.expressionsofchange.org\/",
                "service_icon": "http:\/\/www.expressionsofchange.org\/favicon.ico",
                "service_name": "expressionsofchange.org",
                "id": 1,
                "original_url": "http:\/\/www.expressionsofchange.org\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hQlZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in case you haven't seen: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.expressionsofchange.org\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD3AK9JRF"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1553350519.132000",
        "client_msg_id": "39e1ac32-67e2-4c45-8362-963a3b25fd98",
        "text": "I did an experiment to make branches feel like nested Todo items <https:\/\/github.com\/stevekrouse\/futureofcoding.org\/files\/1248895\/Top-down.programming.assistant.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dY3q0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I did an experiment to make branches feel like nested Todo items "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/stevekrouse\/futureofcoding.org\/files\/1248895\/Top-down.programming.assistant.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1553353183.132300",
        "client_msg_id": "cc9b1bee-3e33-40da-961b-a927132059cf",
        "text": "It seems like Observable notebooks (online jupyter-like js notebooks) have human-friendly collaboration features:\n<https:\/\/observablehq.com\/@observablehq\/suggestions-and-comments>\n<https:\/\/observablehq.com\/@observablehq\/fork-share-merge>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "attachments": [
            {
                "title": "Suggestions and Comments",
                "title_link": "https:\/\/observablehq.com\/@observablehq\/suggestions-and-comments",
                "text": "An Observable notebook by Observable.",
                "fallback": "Suggestions and Comments",
                "image_url": "https:\/\/static.observableusercontent.com\/thumbnail\/4e7dbae4815c0093ca52a3caf4ab85f01e6e7c8d52f09f43b31170b81ebb6a8e.jpg",
                "ts": 1550178753,
                "from_url": "https:\/\/observablehq.com\/@observablehq\/suggestions-and-comments",
                "image_width": 400,
                "image_height": 250,
                "image_bytes": 31736,
                "service_icon": "https:\/\/static.observablehq.com\/favicon-512.e85350a27dfadeea7c7c78c797c24419525df5579de174d86d258c40ae57473a.png",
                "service_name": "observablehq.com",
                "id": 1,
                "original_url": "https:\/\/observablehq.com\/@observablehq\/suggestions-and-comments"
            },
            {
                "title": "Fork, Share, Merge",
                "title_link": "https:\/\/observablehq.com\/@observablehq\/fork-share-merge",
                "text": "An Observable notebook by Observable.",
                "fallback": "Fork, Share, Merge",
                "image_url": "https:\/\/static.observableusercontent.com\/thumbnail\/24cf874730e897cc1e62047ea2259871613ec0dec75a41a8668139aeb29a0dbb.jpg",
                "ts": 1542145480,
                "from_url": "https:\/\/observablehq.com\/@observablehq\/fork-share-merge",
                "image_width": 400,
                "image_height": 250,
                "image_bytes": 29262,
                "service_icon": "https:\/\/static.observablehq.com\/favicon-512.e85350a27dfadeea7c7c78c797c24419525df5579de174d86d258c40ae57473a.png",
                "service_name": "observablehq.com",
                "id": 2,
                "original_url": "https:\/\/observablehq.com\/@observablehq\/fork-share-merge"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JKFn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems like Observable notebooks (online jupyter-like js notebooks) have human-friendly collaboration features:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@observablehq\/suggestions-and-comments"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@observablehq\/fork-share-merge"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1553353586.133600",
        "client_msg_id": "DD15C3ED-D404-44BF-A9F1-5FBDFEE5A0D7",
        "text": "Unison has an interesting different approach, made possible by making the code immutable <http:\/\/unisonweb.org\/2015-06-12\/editing.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XCX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unison has an interesting different approach, made possible by making the code immutable "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/unisonweb.org\/2015-06-12\/editing.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEASWGGMR",
        "type": "message",
        "ts": "1553361805.133900",
        "client_msg_id": "1dc5ecea-19ea-4cdc-8bc9-8a4a1bb429a8",
        "text": "We have been doing that as well at Postman. Would love to chat <@UA8HY8R7B>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g38106c50942",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/038106c509428014f4312ff180438f77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Abhinav Asthana",
            "display_name": "Abhinav",
            "team": "T5TCAFTA9",
            "name": "abhinav",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i+4Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We have been doing that as well at Postman. Would love to chat "
                            },
                            {
                                "type": "user",
                                "user_id": "UA8HY8R7B"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFXFB1RK8",
        "type": "message",
        "ts": "1553365020.134100",
        "client_msg_id": "d8aa44ec-20f3-4c41-b5c7-d73de089b514",
        "text": "We've been working on this topic at Ink &amp; Switch.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3ffd374deb8",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/53ffd374deb821ab07cdef9f7e321364.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Peter van Hardenberg",
            "display_name": "Peter van Hardenberg",
            "team": "T5TCAFTA9",
            "name": "pvh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/8Gfw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We've been working on this topic at Ink & Switch."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC1TYP06P",
        "type": "message",
        "ts": "1553368757.134400",
        "client_msg_id": "a8fd0497-0f44-48f2-9961-ee48bcdfc928",
        "text": "<https:\/\/gitless.com\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7a68744c2a2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b7a68744c2a288f24b931b3f65b832f9.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "",
            "real_name": "James Koppel",
            "display_name": "jkoppel",
            "team": "T5TCAFTA9",
            "name": "jkoppel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "attachments": [
            {
                "title": "Gitless",
                "title_link": "https:\/\/gitless.com\/",
                "text": "Gitless: a simple version control system built on top of Git",
                "fallback": "Gitless",
                "from_url": "https:\/\/gitless.com\/",
                "service_icon": "https:\/\/gitless.com\/favicon.ico",
                "service_name": "gitless.com",
                "id": 1,
                "original_url": "https:\/\/gitless.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "csI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/gitless.com\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U7C7B75R6",
        "type": "message",
        "ts": "1553371987.134800",
        "client_msg_id": "9b1e77a9-0d0c-4b16-9322-f430f47e1716",
        "text": "Darcs \/ Pijul use so called patch-theory to make changes more first-class citizen. <https:\/\/pijul.org\/manual\/why_pijul.html>\n\nBtw just used quite a lot of time this week how we should expose composed versioned resources to non-programmers in our application for technical writers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=3K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Darcs \/ Pijul use so called patch-theory to make changes more first-class citizen. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pijul.org\/manual\/why_pijul.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBtw just used quite a lot of time this week how we should expose composed versioned resources to non-programmers in our application for technical writers."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA8HY8R7B",
        "type": "message",
        "ts": "1553372649.135000",
        "client_msg_id": "0011c72e-633f-40ba-b98b-e60cd0493efa",
        "text": "Thanks for the many pointers. This was very fruitful already.\n\n<@U5TCAFTD3> expressionsofchange looks very interesting. Gonna check that out in more detail. The WoofJS workflow is pretty close to my preferred workflow in github. Happened more than one that I've created a pull request for a pull request.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7db3c1ad975",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e7db3c1ad975b0355d3047ca8acb7c54.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Nikolas",
            "real_name": "Nikolas Martens",
            "display_name": "Nikolas",
            "team": "T5TCAFTA9",
            "name": "nikolas.m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Qsu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the many pointers. This was very fruitful already.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " expressionsofchange looks very interesting. Gonna check that out in more detail. The WoofJS workflow is pretty close to my preferred workflow in github. Happened more than one that I've created a pull request for a pull request."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFS53UWE5",
        "type": "message",
        "ts": "1553373090.135200",
        "client_msg_id": "5afbdab2-f8da-4b6b-9e3f-9dfa8f7acc6e",
        "text": "Perforce is much simpler to grasp. Git is the better tool, but Perforce is used by non-technical folks in gamedev every day",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a88832bbbfe7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-12\/1359700849458_a88832bbbfe7c26df530_72.jpg",
            "first_name": "John",
            "real_name": "John Austin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kleptine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oYSA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perforce is much simpler to grasp. Git is the better tool, but Perforce is used by non-technical folks in gamedev every day"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1553401848.135500",
        "client_msg_id": "9ae4698f-1a93-4a91-9724-31c79580b0e3",
        "text": "I don't think that you need to reform version control. What you need is a lot less version control. When you look at someone integrating code into 20 files, you are seeing a contributor spraying their code over a wide area. The very second you add a few people spraying code across modules, you get a chaotic situation, where  it is very hard for someone in charge of QA to understand why all these changes  are being done, and whether they interact. The true problem worth addressing the lack of interchangeable parts. Once we have a language with an interchangeable part ecosystem, you can assemble your program out of already polished components, and thus you keep your changes focused and narrow. Once you are touching dozens of files, it starts to get ugly. I personally have never seen a programming team above 12 people work smoothly. Programming is a great deal like cooking; there is a creative element that doesn't permit large group contributions. In this sense i am firmly in the camp of Fred Brooks of Mythical Man Month fame, where he recommends a surgical team structure for coding. I recently compared an electron version of minesweeper with a beads version, and the electron version had over 100 source files vs. 1. So i think improving the language can drastically reduce the amount of fiddling with Git one has to do. But don't get me wrong, I hate most of the version control systems as i almost never go back in time. i use time machine on the mac myself as the version system, and i only dip backwards perhaps twice a year.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553340554.128300",
        "parent_user_id": "UA8HY8R7B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qWOz4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think that you need to reform version control. What you need is a lot less version control. When you look at someone integrating code into 20 files, you are seeing a contributor spraying their code over a wide area. The very second you add a few people spraying code across modules, you get a chaotic situation, where  it is very hard for someone in charge of QA to understand why all these changes  are being done, and whether they interact. The true problem worth addressing the lack of interchangeable parts. Once we have a language with an interchangeable part ecosystem, you can assemble your program out of already polished components, and thus you keep your changes focused and narrow. Once you are touching dozens of files, it starts to get ugly. I personally have never seen a programming team above 12 people work smoothly. Programming is a great deal like cooking; there is a creative element that doesn't permit large group contributions. In this sense i am firmly in the camp of Fred Brooks of Mythical Man Month fame, where he recommends a surgical team structure for coding. I recently compared an electron version of minesweeper with a beads version, and the electron version had over 100 source files vs. 1. So i think improving the language can drastically reduce the amount of fiddling with Git one has to do. But don't get me wrong, I hate most of the version control systems as i almost never go back in time. i use time machine on the mac myself as the version system, and i only dip backwards perhaps twice a year."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1553402667.135700",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1553408714.000000"
        },
        "client_msg_id": "4e3d6259-252c-4957-85ac-2b9405811a0b",
        "text": "Mr Khanlou is a junior programmer, and his assertion that comments are a negative to a code base is primarily motivated by the fact that in his syntax coloring scheme they are faded out so thus unimportant. The fact that it is common to fade out the comments in code editors is an alarming trend, and i personally feel that people who refuse to document the purpose of function parameters should be punished. When you run JS code through Uglify or some other compression program, the first thing it does is convert all the variable names to single letters, and strip the comments out. I think people who irresponsibly dispense incorrect information should have to wade into a codebase of several hundred thousand lines, and see how much fun that is when you are under deadline pressure to fix some problem as i used to do as a consultant back in the day. Knowing the data structures is even more important than the function parameters, but when i  look at GitHub, i observe a sea of unprofessional code that would be very tough to repair. Programs last decades, and only people who have not endured the pain of reconstructing intent of the programmer - which is one of the most valuable things a comment can disclose - will cling to a flabby assertion born of laziness.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553216451.112800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VHJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mr Khanlou is a junior programmer, and his assertion that comments are a negative to a code base is primarily motivated by the fact that in his syntax coloring scheme they are faded out so thus unimportant. The fact that it is common to fade out the comments in code editors is an alarming trend, and i personally feel that people who refuse to document the purpose of function parameters should be punished. When you run JS code through Uglify or some other compression program, the first thing it does is convert all the variable names to single letters, and strip the comments out. I think people who irresponsibly dispense incorrect information should have to wade into a codebase of several hundred thousand lines, and see how much fun that is when you are under deadline pressure to fix some problem as i used to do as a consultant back in the day. Knowing the data structures is even more important than the function parameters, but when i  look at GitHub, i observe a sea of unprofessional code that would be very tough to repair. Programs last decades, and only people who have not endured the pain of reconstructing intent of the programmer - which is one of the most valuable things a comment can disclose - will cling to a flabby assertion born of laziness."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1553404298.135900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1553405290.000000"
        },
        "client_msg_id": "de94016f-992d-457d-a066-75f98917458e",
        "text": "(To stipulate a couple of obvious statements: *a.* yes, judging the value of comments by the color most editors color them is stupid, and *b.* many codebases exist with extremely verbose and _worse than useless_ comments. Just like there is prose of all qualities in this world. It's a jungle out there. All this has been said before.)\n\nBack in 2012 I observed (at least?) two styles of comments out there in the wild: <http:\/\/akkartik.name\/post\/2012-11-24-18-10-36-soc>. So --  as an attempt to gain the best of both worlds -- I started programming with two colors for comments, one bright and salient and the other subdued. Maybe counter-intuitively, I tend to make the large comments of verbose commenters subdued, and the occasional flash of comment in a run of uncommented code bright and salient: <https:\/\/i.imgur.com\/H1h7M.png>\n\nA few years later I added a third color for code commented out using text-editor support (my link earlier in this thread).\n\nAnd when I started programming a lot of machine code, I added a _fourth_ color for comments. (Because machine code is one place where this sort of much maligned comment is actually useful:\n\n```\n# increment *(ESI+8)\nff 0\/subop 1\/mod 6\/rm32 8\/disp8\n```\n\n(I actually also add comments in the middle of this line; the original line is twice as long. All tastes for comments converge when it comes to programming in machine code.))\n\nAnyway, so yes, I now program with 4 colors of comments (and mostly avoid syntax highlighting almost anything else):  <https:\/\/mastodon.social\/@akkartik\/101163809901430347>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1553216451.112800",
        "parent_user_id": "UEQ6M68H0",
        "attachments": [
            {
                "fallback": "1600x900px image",
                "image_url": "https:\/\/i.imgur.com\/H1h7M.png",
                "image_width": 1600,
                "image_height": 900,
                "image_bytes": 169460,
                "from_url": "https:\/\/i.imgur.com\/H1h7M.png",
                "id": 1,
                "original_url": "https:\/\/i.imgur.com\/H1h7M.png"
            },
            {
                "service_name": "Mastodon",
                "title": "Kartik Agaram (@akkartik@mastodon.social)",
                "title_link": "https:\/\/mastodon.social\/@akkartik\/101163809901430347",
                "text": "Attached: 2 images My assembly language hasn't had much syntax highlighting, and I'm playing with a use for all those colors: 4 types of comments! It took some doing to make them look ok on my 256-color terminal, but also pass the WCAG contrast checker. (They barely do.) Tell me what you think. <https:\/\/github.com\/akkartik\/mu\/blob\/master\/subx\/Readme.md>",
                "fallback": "Mastodon: Kartik Agaram (@akkartik@mastodon.social)",
                "image_url": "https:\/\/files.mastodon.social\/media_attachments\/files\/008\/323\/220\/original\/19d40ef3bc05d373.png",
                "image_width": 281,
                "image_height": 250,
                "from_url": "https:\/\/mastodon.social\/@akkartik\/101163809901430347",
                "image_bytes": 142334,
                "service_icon": "https:\/\/mastodon.social\/favicon.ico",
                "id": 2,
                "original_url": "https:\/\/mastodon.social\/@akkartik\/101163809901430347"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WTN2Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(To stipulate a couple of obvious statements: "
                            },
                            {
                                "type": "text",
                                "text": "a.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " yes, judging the value of comments by the color most editors color them is stupid, and "
                            },
                            {
                                "type": "text",
                                "text": "b.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " many codebases exist with extremely verbose and "
                            },
                            {
                                "type": "text",
                                "text": "worse than useless",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " comments. Just like there is prose of all qualities in this world. It's a jungle out there. All this has been said before.)\n\nBack in 2012 I observed (at least?) two styles of comments out there in the wild: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/2012-11-24-18-10-36-soc"
                            },
                            {
                                "type": "text",
                                "text": ". So --  as an attempt to gain the best of both worlds -- I started programming with two colors for comments, one bright and salient and the other subdued. Maybe counter-intuitively, I tend to make the large comments of verbose commenters subdued, and the occasional flash of comment in a run of uncommented code bright and salient: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/i.imgur.com\/H1h7M.png"
                            },
                            {
                                "type": "text",
                                "text": "\n\nA few years later I added a third color for code commented out using text-editor support (my link earlier in this thread).\n\nAnd when I started programming a lot of machine code, I added a "
                            },
                            {
                                "type": "text",
                                "text": "fourth",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " color for comments. (Because machine code is one place where this sort of much maligned comment is actually useful:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# increment *(ESI+8)\nff 0\/subop 1\/mod 6\/rm32 8\/disp8\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n(I actually also add comments in the middle of this line; the original line is twice as long. All tastes for comments converge when it comes to programming in machine code.))\n\nAnyway, so yes, I now program with 4 colors of comments (and mostly avoid syntax highlighting almost anything else):  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mastodon.social\/@akkartik\/101163809901430347"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]