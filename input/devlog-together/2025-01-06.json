[
    {
        "text": "Progress on \"Emacs for visualizing LÖVE apps\": I have the first message between windows. I press a key, the key gets processed by the first window's keymap and dispatched to a function, which reads the selection, parses it and sends a message to the second window. The second window then responds to the message by adding a new object into its scene.\n\nIn principle, this approach feels nice and timeless. I think \"every window is a scene and runs its own event loop\" is more general a foundation than Emacs's \"every window is a buffer containing text.\" It feels realistic to provide this foundation alongside a wide library of primitives for text rendering and analysis.\n\nIn practice, I've been struggling to find a focus, and I'm probably going to focus on creating tools for myself to more visually debug the LÖVE apps I create. I'm not going to focus at the moment on:\n• editing the source code for the environment _in_ the environment, the way you can modify Emacs sources from within Emacs. I already have a way to do that: you open <https:\/\/git.sr.ht\/~akkartik\/driver.love|a second window> and modify the app live as it runs.\n• interfacing with other processes or tools besides LÖVE, the way Emacs lets you connect to any programming language REPL.\nBoth these are totally feasible. I don't think any crucial infrastructure is missing here. They're just not priorities for me right now. I plan to focus on more easily adding new windows to a LÖVE app, and creating new kinds of debug UIs in them.\n\nOne open question: supporting focus follows mouse. I don't know if it's possible in Emacs, and even if not I think it makes a lot more sense in a more graphics- and mouse-centered environment. Again, not a priority but perhaps this is a sign this foundation is not quite as timeless as I would like.",
        "files": [
            {
                "id": "F087HJGN5FU",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8W2PM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Progress on \"Emacs for visualizing LÖVE apps\": I have the first message between windows. I press a key, the key gets processed by the first window's keymap and dispatched to a function, which reads the selection, parses it and sends a message to the second window. The second window then responds to the message by adding a new object into its scene.\n\nIn principle, this approach feels nice and timeless. I think \"every window is a scene and runs its own event loop\" is more general a foundation than Emacs's \"every window is a buffer containing text.\" It feels realistic to provide this foundation alongside a wide library of primitives for text rendering and analysis.\n\nIn practice, I've been struggling to find a focus, and I'm probably going to focus on creating tools for myself to more visually debug the LÖVE apps I create. I'm not going to focus at the moment on:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "editing the source code for the environment "
                                    },
                                    {
                                        "type": "text",
                                        "text": "in",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " the environment, the way you can modify Emacs sources from within Emacs. I already have a way to do that: you open "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/git.sr.ht\/~akkartik\/driver.love",
                                        "text": "a second window"
                                    },
                                    {
                                        "type": "text",
                                        "text": " and modify the app live as it runs."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "interfacing with other processes or tools besides LÖVE, the way Emacs lets you connect to any programming language REPL."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Both these are totally feasible. I don't think any crucial infrastructure is missing here. They're just not priorities for me right now. I plan to focus on more easily adding new windows to a LÖVE app, and creating new kinds of debug UIs in them.\n\nOne open question: supporting focus follows mouse. I don't know if it's possible in Emacs, and even if not I think it makes a lot more sense in a more graphics- and mouse-centered environment. Again, not a priority but perhaps this is a sign this foundation is not quite as timeless as I would like."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1736209328.833849",
        "client_msg_id": "24fb11ed-9176-481c-9d02-324932dd00a8",
        "thread_ts": "1736209328.833849",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1737021580.827859",
        "reply_users": [
            "UJBAJNFLK",
            "U02QC0PPER3",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1736232973.451209"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1736949134.393919"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1736949144.380819"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1736956650.081859"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1737021580.827859"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK",
                    "U02E4DAQGSZ"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1736232973.451209",
        "client_msg_id": "094be2e2-f56e-4198-b261-1ef4fe5ff9a4",
        "text": "Nice!\n\nI suspect that focussing on your own immediate needs is the only way to make good tools that are not simply clones of mainstream things. And I doubt there is much value in making an Emacs clone in LÖVE. You'd be eternally trying to catch up with Emacs' 40 years of advance.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736209328.833849",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LhYfn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice!\n\nI suspect that focussing on your own immediate needs is the only way to make good tools that are not simply clones of mainstream things. And I doubt there is much value in making an Emacs clone in LÖVE. You'd be eternally trying to catch up with Emacs' 40 years of advance."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]