[
    {
        "user": "U014DGL57HA",
        "type": "message",
        "ts": "1590930526.265600",
        "edited": {
            "user": "U014DGL57HA",
            "ts": "1590930535.000000"
        },
        "client_msg_id": "a80da4c7-76b6-4618-9cab-3a360d73dc86",
        "text": "Hello everyone,\n\nI’m a PhD student in music tech in the North of England. I write a lot of Python code to help me create bespoke MIR programs to create music. I also love to code outside of this space making small command line applications in languages like Nim, as well as doing some light web development to help document ideas and present them to the public.\n\nHere’s my ghub: <http:\/\/github.com\/jamesb93|github.com\/jamesb93>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g760e801b30d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/760e801b30d58ac0b1a3d847cf0ddcd0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "James Bradbury",
            "display_name": "James Bradbury",
            "team": "T5TCAFTA9",
            "name": "jamesbradbury93",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590930526.265600",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1591006798.267100",
        "reply_users": [
            "UUQ2EQW21"
        ],
        "replies": [
            {
                "user": "UUQ2EQW21",
                "ts": "1591006798.267100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lh4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello everyone,\n\nI’m a PhD student in music tech in the North of England. I write a lot of Python code to help me create bespoke MIR programs to create music. I also love to code outside of this space making small command line applications in languages like Nim, as well as doing some light web development to help document ideas and present them to the public.\n\nHere’s my ghub: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/github.com\/jamesb93",
                                "text": "github.com\/jamesb93"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "wave",
                "users": [
                    "UCUSW7WVD",
                    "UDQBTJ211",
                    "U013LMAG3UL",
                    "UP7SQ8KT3",
                    "UJBAJNFLK",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "UUQ2EQW21",
                    "UFLN9JFRT",
                    "UC2A2ARPT",
                    "UC21F8Q48",
                    "UJ6LDMMN0",
                    "UKP3B2J5D"
                ],
                "count": 13
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1590939232.266100",
        "client_msg_id": "12ae7a64-89fa-4434-a272-729b7bb6b7a4",
        "text": "This seems more like a RISC architecture to me. Personal computers have gigabytes of RAM, which resides on different chips than the CPU. CISC CPUs create the illusion that RAM is directly addressable (eg, you can directly increment a word in RAM), but to make this work, they employ a complex cache hierarchy. By contrast, RISC uses a load\/store architecture. Data from off-chip RAM must be explicitly loaded into local memory (registers) before it can be operated on by the ALU. uCISC takes the RISC philosophy one step further. AFAIK you can't execute instructions directly out of RAM, so there is no need for an instruction cache. Instead, even executable code must be explicitly loaded into local memory before it can be executed. So I would call this uRISC.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590881147.261300",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gy3P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This seems more like a RISC architecture to me. Personal computers have gigabytes of RAM, which resides on different chips than the CPU. CISC CPUs create the illusion that RAM is directly addressable (eg, you can directly increment a word in RAM), but to make this work, they employ a complex cache hierarchy. By contrast, RISC uses a load\/store architecture. Data from off-chip RAM must be explicitly loaded into local memory (registers) before it can be operated on by the ALU. uCISC takes the RISC philosophy one step further. AFAIK you can't execute instructions directly out of RAM, so there is no need for an instruction cache. Instead, even executable code must be explicitly loaded into local memory before it can be executed. So I would call this uRISC."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]