[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1742212230.110659",
        "client_msg_id": "c7f0ef97-f713-4c17-bee1-8deba2a21f97",
        "text": "<@U05PY5AQCA2> Note that <@UGWUJUZHT> was also asking for real parsers rather than DSLs that look like the language in which they’re embedded. That’s the thing with Racket’s approach: you can have the syntax of Pascal (or whatever) and the Racket tooling gives you some automatic goodies for things like syntax highlighting in your new syntax, &amp;c. I haven’t seen that done as well by any other project.\n\nThat said, I find DSLs with radically different syntax are usually not worth creating for quick things, and on balance prefer embedding the DSL in a language with a flexible syntax (that is, I’d rather just write some Lisp macros in most cases).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742096636.964039",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L\/6sG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05PY5AQCA2"
                            },
                            {
                                "type": "text",
                                "text": " Note that "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " was also asking for real parsers rather than DSLs that look like the language in which they’re embedded. That’s the thing with Racket’s approach: you can have the syntax of Pascal (or whatever) and the Racket tooling gives you some automatic goodies for things like syntax highlighting in your new syntax, &c. I haven’t seen that done as well by any other project.\n\nThat said, I find DSLs with radically different syntax are usually not worth creating for quick things, and on balance prefer embedding the DSL in a language with a flexible syntax (that is, I’d rather just write some Lisp macros in most cases)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1742212444.815339",
        "client_msg_id": "6ac18d1d-f4f8-4dba-8754-35622052d9e2",
        "text": "Also, special mention should probably be given to Kay’s approach at VPRI. They didn’t make it easy to spin up throwaway languages, but they did experiment heavily with layered custom languages starting with Maru at the bottom.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742096636.964039",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "37vc1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, special mention should probably be given to Kay’s approach at VPRI. They didn’t make it easy to spin up throwaway languages, but they did experiment heavily with layered custom languages starting with Maru at the bottom."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1742222712.875809",
        "client_msg_id": "f249f709-3ce6-4670-83c4-4143a251ef8a",
        "text": "&gt; eval really treats \"data as code\", not \"code as data\".\n&gt; \"syntax is a view\"\n[Points that jumped out at me from the blog article that <@UJBAJNFLK> mentioned]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742096636.964039",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o7uyp",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "eval really treats \"data as code\", not \"code as data\"."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"syntax is a view\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n[Points that jumped out at me from the blog article that "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " mentioned]"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1742230039.617159",
        "client_msg_id": "3a59807b-8b95-44c2-9b0a-c2c2167f1792",
        "text": "Thanks <@UGWUJUZHT>! And I certainly don't claim any rights to the term <https:\/\/en.wikipedia.org\/wiki\/Data_model|data model>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1741605348.018929",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "byur3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": "! And I certainly don't claim any rights to the term "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Data_model",
                                "text": "data model"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1742261105.085899",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1742265401.000000"
        },
        "client_msg_id": "fd8db533-711e-4992-b7b4-c42a41a36ff0",
        "text": "> ... I find DSLs with radically different syntax are usually not worth creating for quick things, and on balance prefer embedding the DSL in a language with a flexible syntax (that is, I'd rather just write some Lisp macros in most cases)\nI think that PEG gives us the power to create Lisp-like, quickie macros for non-Lisp languages. Challenge to self: give examples that demonstrate this. Aside: REGEX is a DSL, albeit with a horrible syntax. PEG is the new REGEX.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742096636.964039",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5+7K+",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... I find DSLs with radically different syntax are usually not worth creating for quick things, and on balance prefer embedding the DSL in a language with a flexible syntax (that is, I'd rather just write some Lisp macros in most cases)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI think that PEG gives us the power to create Lisp-like, quickie macros for non-Lisp languages. Challenge to self: give examples that demonstrate this. Aside: REGEX is a DSL, albeit with a horrible syntax. PEG is the new REGEX."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1742261228.607929",
        "client_msg_id": "b922e2d7-9605-4298-917c-9bbfb970fe5c",
        "text": "It's \"steam engine time\" for PEG: Lately Janet, earlier Rebol, Racket, ...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742096636.964039",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ps6Na",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's \"steam engine time\" for PEG: Lately Janet, earlier Rebol, Racket, ..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1742261347.509669",
        "client_msg_id": "A8CFDAA1-4108-481A-A2E8-00D806EF9D6D",
        "text": "When you’ve lots of declarative machinery available, it’s nice to be able to write those declarations in a concise way.\n\nA Ruby on Rails controller might have code within it like:\n\n```has_one :user\nhas_many :logins\nhas_and_belongs_to_Many :account_groups\n\nvalidates :user, presence: true```\nIt’s nice when without much fuss, your language naturally supports expressing declarative truths in your program with close to optimal concision.\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3ecb3076c7b0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-29\/5820723719363_3ecb3076c7b047d665ea_72.jpg",
            "first_name": "Guyren",
            "real_name": "Guyren Howe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "guyren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1742096636.964039",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zEeM7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When you’ve lots of declarative machinery available, it’s nice to be able to write those declarations in a concise way.\n\nA Ruby on Rails controller might "
                            },
                            {
                                "type": "text",
                                "text": "have code within it"
                            },
                            {
                                "type": "text",
                                "text": " like:"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "has_one :user\nhas_many :logins\nhas_and_belongs_to_Many :account_groups\n\nvalidates :user, presence: true"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIt’s nice when without much fuss, your language naturally supports expressing declarative truths in your program with close to optimal concision."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]