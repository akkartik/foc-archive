[
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1595492717.265600",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595492767.000000"
        },
        "client_msg_id": "278ddf3b-ad3b-49dd-b4c9-fee4d3a87180",
        "text": "I think the complexity here stems from our historical love of serializing data in order to persist and distribute it. We wouldn't have these problems if we weren't working with (text and binary) strings all the time. The \"correct solution\" is to have a software universe where data is always structured (and *typed*), and serialization is left as an infrastructural concern.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595480888.262200",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gl0O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the complexity here stems from our historical love of serializing data in order to persist and distribute it. We wouldn't have these problems if we weren't working with (text and binary) strings all the time. The \"correct solution\" is to have a software universe where data is always structured (and "
                            },
                            {
                                "type": "text",
                                "text": "typed",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "), and serialization is left as an infrastructural concern."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ",
                    "UHWC9PXBL",
                    "UUMQH3TA5"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "UJN1TAYEQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1595493109.266100",
        "client_msg_id": "79b64e54-5883-4efc-b26e-f1902664bb99",
        "text": "<@UHWC9PXBL> `(apply (fun arglist))` is `(apply (partial fun arglist))` in the usual semantics. Some of what you're thinking about might be illuminated by a quick look into dialects that assume function composition, like <http:\/\/shenlanguage.org|Shen>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BKN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "(apply (fun arglist))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is "
                            },
                            {
                                "type": "text",
                                "text": "(apply (partial fun arglist))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the usual semantics. Some of what you're thinking about might be illuminated by a quick look into dialects that assume function composition, like "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/shenlanguage.org",
                                "text": "Shen"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1595493335.266300",
        "client_msg_id": "2095abcd-565a-4cb0-baa9-a41814fcfe6a",
        "text": "A note on the history mentioned by <@UJN1TAYEQ>: the person referred to in the oft-repeated litany as \"one of McCarthy's grad students\" is Slug Russell. In addition to coding the first Lisp interpreter, he invented continuations, designed and coded _Spacewar!_ (the first video game), and taught Gates and Allen programming on a PDP-10 as part of a school program in Seattle.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/0sN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A note on the history mentioned by "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": ": the person referred to in the oft-repeated litany as \"one of McCarthy's grad students\" is Slug Russell. In addition to coding the first Lisp interpreter, he invented continuations, designed and coded "
                            },
                            {
                                "type": "text",
                                "text": "Spacewar!",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (the first video game), and taught Gates and Allen programming on a PDP-10 as part of a school program in Seattle."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UHWC9PXBL",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1595497171.266500",
        "client_msg_id": "00929c51-c3e9-44d3-91a3-c607453f8078",
        "text": "<@UAVCC2X70> At the risk of being a pedant, I wanted to point out that `'(a b c)` is not equivalent to `(list a b c)` in exactly the topic of this discussion—`quote` does not evaluate its arguments, and `list` does. So `'(a (+ 2 3))` is self evaluating, but `(list a (+ 2 3))` evaluates to `'(a 5)`. It's for that reason that `quote` requires a special case in an interpreter, but `list` does not.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iRu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " At the risk of being a pedant, I wanted to point out that "
                            },
                            {
                                "type": "text",
                                "text": "'(a b c)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is not equivalent to "
                            },
                            {
                                "type": "text",
                                "text": "(list a b c)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in exactly the topic of this discussion—"
                            },
                            {
                                "type": "text",
                                "text": "quote",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does not evaluate its arguments, and "
                            },
                            {
                                "type": "text",
                                "text": "list",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does. So "
                            },
                            {
                                "type": "text",
                                "text": "'(a (+ 2 3))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is self evaluating, but "
                            },
                            {
                                "type": "text",
                                "text": "(list a (+ 2 3))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " evaluates to "
                            },
                            {
                                "type": "text",
                                "text": "'(a 5)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It's for that reason that "
                            },
                            {
                                "type": "text",
                                "text": "quote",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " requires a special case in an interpreter, but "
                            },
                            {
                                "type": "text",
                                "text": "list",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does not."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UAVCC2X70",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1595498671.266900",
        "client_msg_id": "a90817ca-ee03-4ceb-8350-481279c639f0",
        "text": "My point wasn't about serialization. that's just an example. My point was \"it's never simple\". Handling the real world, regardless of what it is, is almost always several orders of magnitude more complicated than we first expect.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595480888.262200",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TGQ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My point wasn't about serialization. that's just an example. My point was \"it's never simple\". Handling the real world, regardless of what it is, is almost always several orders of magnitude more complicated than we first expect."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1595499783.267400",
        "client_msg_id": "76926bec-da8f-4728-a8ca-5a899446da1c",
        "text": "<@UAVCC2X70> Let's add that how neat JITting can be with modern JavaScript heaven help us.  Go ahead and compile away at runtime.  (I confess I haven't followed any recent developments along those lines, so I don't know whether it's getting better or worse or just weirder.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J4DBz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " Let's add that how neat JITting can be with modern JavaScript heaven help us.  Go ahead and compile away at runtime.  (I confess I haven't followed any recent developments along those lines, so I don't know whether it's getting better or worse or just weirder.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1595500143.267600",
        "client_msg_id": "4c84e6bf-7a2c-4924-b106-fe5e7e886bdc",
        "text": "Some days my whole freaking job is checking the consistency of CSV uploaded by Excel jockeys to give them real nice error messages.  Let's see in the background here I have 150 lines check a super simple file (three columns) and 150 lines of tests to identify 12 ways it could reasonably be messed up.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595480888.262200",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a27T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some days my whole freaking job is checking the consistency of CSV uploaded by Excel jockeys to give them real nice error messages.  Let's see in the background here I have 150 lines check a super simple file (three columns) and 150 lines of tests to identify 12 ways it could reasonably be messed up."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I think this is a general case of “as the number of entities increase linearly, the number of potential relations between them increases exponentially”. What may seem like a small addition, can turn out to increase complexity significantly.",
        "files": [
            {
                "id": "F017LFDEF8A",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UAJ9DV971",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CwI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think this is a general case of “as the number of entities increase linearly, the number of potential relations between them increases exponentially”. What may seem like a small addition, can turn out to increase complexity significantly."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1595502825.267800",
        "thread_ts": "1595480888.262200",
        "parent_user_id": "UC6997THT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UUMQH3TA5"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1595510199.268200",
        "client_msg_id": "2f652fab-4d90-41db-bac3-0652b4f1d9a6",
        "text": "&gt; i’m working on languages that are at a minimum frame-based\nThanks for showing me the term \"frame-based\". I'm working on something similar, having problems finding prior art, and googling \"frame-based\" gave me this: <https:\/\/www.greenfoot.org\/frames\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Bp",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i’m working on languages that are at a minimum frame-based"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for showing me the term \"frame-based\". I'm working on something similar, having problems finding prior art, and googling \"frame-based\" gave me this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.greenfoot.org\/frames\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1595513868.268500",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1595525728.000000"
        },
        "client_msg_id": "452a4db6-eca1-42e8-bb51-0f72b53b5368",
        "text": "Consider the hypothetical language T-Lisp, based on T-expressions:\n\n(f x)\n&gt; A call. f is an abstraction (function or macro). Abstractions always have a single argument, like in ML\/Haskell. In a call, 'f' is an evaluated subexpression, like in Scheme.\n(f x y z)\n&gt; A call chain. (f x y z) is sugar for (((f x) y) z). This gives us a natural syntax for invoking a curried function or macro.\n[a b c]\n&gt; A list. The subexpressions a, b, c are evaluated, similar to (list a b c) in Lisp.\nList exprs and call exprs are orthogonal concepts. A list expr expresses the fundamental concept of an ordered sequence of expressions.  It is a mistake to intertwine or complect list exprs with call exprs, because that creates complexity.\n\nA function has a single argument, but you can simulate multiple arguments using Currying, or by passing a list as an argument. There is no need for the 'apply' function. This is important for composability. Let's say that the + function takes a list of zero or more numbers, as it does in Scheme. Then you write (+ [a b c]). Suppose you want to abstract out the list [a b c], replace it with the variable x. No need for mental gymnastics, you just write (+ x).\n\nMacros can be curried. The 'let' macro has two curried arguments. For example,\n```(let [[x [a b c]]] (+ x))```\nIn T-Lisp, every value is printed as a constructor expression. When you evaluate this printed representation, you reconstruct the original value. List values are printed as list expressions, eg `[1 2 3]`. This is intuitive, easy to understand, useful.\n\nOne of my criticisms of Lisp is that the printed representation of a list is a function call, and this is confusing to non-experts. For example, in Lisp, the printed representation of `(list 'a 2)` is `(a 2)`. You can manually convert this to an expression that reconstructs the original list by writing `'(a 2)`, but now you have lost composability (the ability to substitute like for like). You can't trivially abstract out one of the subexpressions and replace it with a variable containing the same value.\n\nHere is empirical research supporting my complaint about list syntax in Lisp:\n<https:\/\/www.cs.kent.ac.uk\/people\/staff\/dat\/miranda\/wadler87.pdf>\n&gt; The difference between (1 2 3) and (quote (1 2 3)) is subtle, and it inevitably confuses students. In particular, it plays havoc with the substitution model of evaluation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gRw8f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consider the hypothetical language T-Lisp, based on T-expressions:\n\n(f x)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A call. f is an abstraction (function or macro). Abstractions always have a single argument, like in ML\/Haskell. In a call, 'f' is an evaluated subexpression, like in Scheme."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(f x y z)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A call chain. (f x y z) is sugar for (((f x) y) z). This gives us a natural syntax for invoking a curried function or macro."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[a b c]\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A list. The subexpressions a, b, c are evaluated, similar to (list a b c) in Lisp."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nList exprs and call exprs are orthogonal concepts. A list expr expresses the fundamental concept of an ordered sequence of expressions.  It is a mistake to intertwine or complect list exprs with call exprs, because that creates complexity.\n\nA function has a single argument, but you can simulate multiple arguments using Currying, or by passing a list as an argument. There is no need for the 'apply' function. This is important for composability. Let's say that the + function takes a list of zero or more numbers, as it does in Scheme. Then you write (+ [a b c]). Suppose you want to abstract out the list [a b c], replace it with the variable x. No need for mental gymnastics, you just write (+ x).\n\nMacros can be curried. The 'let' macro has two curried arguments. For example,\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(let [[x [a b c]]] (+ x))"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn T-Lisp, every value is printed as a constructor expression. When you evaluate this printed representation, you reconstruct the original value. List values are printed as list expressions, eg "
                            },
                            {
                                "type": "text",
                                "text": "[1 2 3]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". This is intuitive, easy to understand, useful.\n\nOne of my criticisms of Lisp is that the printed representation of a list is a function call, and this is confusing to non-experts. For example, in Lisp, the printed representation of "
                            },
                            {
                                "type": "text",
                                "text": "(list 'a 2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is "
                            },
                            {
                                "type": "text",
                                "text": "(a 2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". You can manually convert this to an expression that reconstructs the original list by writing "
                            },
                            {
                                "type": "text",
                                "text": "'(a 2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but now you have lost composability (the ability to substitute like for like). You can't trivially abstract out one of the subexpressions and replace it with a variable containing the same value.\n\nHere is empirical research supporting my complaint about list syntax in Lisp:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.kent.ac.uk\/people\/staff\/dat\/miranda\/wadler87.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The difference between (1 2 3) and (quote (1 2 3)) is subtle, and it inevitably confuses students. In particular, it plays havoc with the substitution model of evaluation."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1595532730.270400",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1595532764.000000"
        },
        "client_msg_id": "292fc6dc-8a30-4662-bf78-9518eb6c9b1d",
        "text": "The vocabulary that comes to mind for me for the problems you are describing break down into two parts:\n\n*incidental complexity*: problems you have to solve that have nothing to do with the problem you are actually trying to solve, but are necessary because of the inefficiencies of our current technology.\nTo play off your example, you want to parse some configuration, and suddenly you need to become an expert in parser theory. You don't care about parsers, it's _incidental_ to the problem, but necessary because of the limits of our current tools.\n\n\"*software requirements gathering*\" and \"*scope creep*\".\nHumans, in general, are really bad at communicating what they actually want or need. Partially this is because we are really bad at thinking of unforeseen consequences. \"Out of sight out of mind\" so to speak.\n\nOften, you start out thinking you need one thing, and then it turns out that you needed something else. Requirements also change! You maybe start out with a little script you hacked together for yourself. You have a very clear idea of the inputs and outputs, so you don't add much error checking.\nThen, after a while, you share your script, and suddenly lots of people start using it. Now you need to add a lot more error checking than you had before.\n\nThis happens all the time. Python3 and Unicode, IPV4 to IPV6... the list goes on.\n\nAs a field, we have not solved either of these problems very well.\nOur state of the art is just iteration (_Agile_ _Development_ to use a crappy buzz word.)\n\nI recommend reading <https:\/\/www.amazon.com\/Mythical-Man-Month-Anniversary-Software-Engineering-ebook\/dp\/B00B8USS14\/|Mythical Man Month by Fred Brooks>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595480888.262200",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H77",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The vocabulary that comes to mind for me for the problems you are describing break down into two parts:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "incidental complexity",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": problems you have to solve that have nothing to do with the problem you are actually trying to solve, but are necessary because of the inefficiencies of our current technology.\nTo play off your example, you want to parse some configuration, and suddenly you need to become an expert in parser theory. You don't care about parsers, it's "
                            },
                            {
                                "type": "text",
                                "text": "incidental",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to the problem, but necessary because of the limits of our current tools.\n\n\""
                            },
                            {
                                "type": "text",
                                "text": "software requirements gathering",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\" and \""
                            },
                            {
                                "type": "text",
                                "text": "scope creep",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\".\nHumans, in general, are really bad at communicating what they actually want or need. Partially this is because we are really bad at thinking of unforeseen consequences. \"Out of sight out of mind\" so to speak.\n\nOften, you start out thinking you need one thing, and then it turns out that you needed something else. Requirements also change! You maybe start out with a little script you hacked together for yourself. You have a very clear idea of the inputs and outputs, so you don't add much error checking.\nThen, after a while, you share your script, and suddenly lots of people start using it. Now you need to add a lot more error checking than you had before.\n\nThis happens all the time. Python3 and Unicode, IPV4 to IPV6... the list goes on.\n\nAs a field, we have not solved either of these problems very well.\nOur state of the art is just iteration ("
                            },
                            {
                                "type": "text",
                                "text": "Agile",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Development",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to use a crappy buzz word.)\n\nI recommend reading "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.com\/Mythical-Man-Month-Anniversary-Software-Engineering-ebook\/dp\/B00B8USS14\/",
                                "text": "Mythical Man Month by Fred Brooks"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1595544917.271900",
        "client_msg_id": "78e1a4ea-d1bc-434a-aa06-821cd729c387",
        "text": "<https:\/\/www.rand.org\/pubs\/research_reports\/RR4185.html?adobe_mc=TS%3D1595543685%7CMCMID%3D29954829578144551473161423160607004138%7CMCORGID%3DCB68E4BA55144CAA0A4C98A5%2540AdobeOrg|https:\/\/www.rand.org\/pubs\/research_reports\/RR4185.html?adobe_mc=TS%3D1595543685%7CMCMID%3D29954829578144551473161423160607004138%7CMCORGID%3DCB68E4BA55144CAA0A4C98A5%2540AdobeOrg>\ntalks about systemic risk, and points out that cloud services are pretty important as far as that goes",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595544917.271900",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1595550808.274400",
        "reply_users": [
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UHWC9PXBL",
                "ts": "1595550808.274400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "Systemic Risk in the Broad Economy",
                "title_link": "https:\/\/www.rand.org\/pubs\/research_reports\/RR4185.html?adobe_mc=TS%3D1595543685%7CMCMID%3D29954829578144551473161423160607004138%7CMCORGID%3DCB68E4BA55144CAA0A4C98A5%2540AdobeOrg",
                "text": "After the 2008 financial crisis, research and policy focused on the risk that heavily interconnected networks could fuel the spread of economic crises—a problem known as systemic risk. A new analysis considers systemic risk in other sectors like technology, telecommunications, and health care.",
                "fallback": "Systemic Risk in the Broad Economy",
                "image_url": "https:\/\/wwwassets.rand.org\/content\/rand\/pubs\/research_reports\/RR4185\/jcr:content\/par\/teaser.aspectfit.0x1200.gif\/1579554561805.gif",
                "from_url": "https:\/\/www.rand.org\/pubs\/research_reports\/RR4185.html?adobe_mc=TS%3D1595543685%7CMCMID%3D29954829578144551473161423160607004138%7CMCORGID%3DCB68E4BA55144CAA0A4C98A5%2540AdobeOrg",
                "image_width": 335,
                "image_height": 250,
                "image_bytes": 570031,
                "service_icon": "https:\/\/www.rand.org\/etc\/rand\/designs\/common\/images\/xfavicon.png.pagespeed.ic.z-tYQoqKiO.png",
                "service_name": "rand.org",
                "id": 1,
                "original_url": "https:\/\/www.rand.org\/pubs\/research_reports\/RR4185.html?adobe_mc=TS%3D1595543685%7CMCMID%3D29954829578144551473161423160607004138%7CMCORGID%3DCB68E4BA55144CAA0A4C98A5%2540AdobeOrg"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T4YZV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.rand.org\/pubs\/research_reports\/RR4185.html?adobe_mc=TS%3D1595543685%7CMCMID%3D29954829578144551473161423160607004138%7CMCORGID%3DCB68E4BA55144CAA0A4C98A5%2540AdobeOrg",
                                "text": "https:\/\/www.rand.org\/pubs\/research_reports\/RR4185.html?adobe_mc=TS%3D1595543685%7CMCMID%3D29954829578144551473161423160607004138%7CMCORGID%3DCB68E4BA55144CAA0A4C98A5%2540AdobeOrg"
                            },
                            {
                                "type": "text",
                                "text": "\ntalks about systemic risk, and points out that cloud services are pretty important as far as that goes"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0143PC0UTC",
        "type": "message",
        "ts": "1595546160.272200",
        "client_msg_id": "859106bd-393c-4cb1-8fb2-fc52b9dfd9f2",
        "text": "<https:\/\/blogs.unity3d.com\/2020\/07\/22\/bolt-visual-scripting-is-now-included-in-all-unity-plans\/?utm_campaign=unitynews_global_newsletter_2020-07-global-unity-newsletter-july&amp;utm_content=2020-07-global-unity-newsletter-july&amp;utm_medium=email&amp;utm_source=Eloqua>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5033feb257f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5033feb257f3472c43bd6c45eb3202dd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Mike Cann",
            "display_name": "Mike Cann",
            "team": "T5TCAFTA9",
            "name": "mike.cann",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "Unity Technologies Blog",
                "title": "Bolt visual scripting is now included in all Unity plans",
                "title_link": "https:\/\/blogs.unity3d.com\/2020\/07\/22\/bolt-visual-scripting-is-now-included-in-all-unity-plans\/?utm_campaign=unitynews_global_newsletter_2020-07-global-unity-newsletter-july&utm_content=2020-07-global-unity-newsletter-july&utm_medium=email&utm_source=Eloqua",
                "text": "A short while ago, Unity announced the acquisition of the Bolt visual scripting Asset from developer Ludiq. Now that the integration and technical transiti...",
                "fallback": "Unity Technologies Blog: Bolt visual scripting is now included in all Unity plans",
                "image_url": "https:\/\/blogs.unity3d.com\/wp-content\/uploads\/2020\/07\/01.jpg",
                "image_width": 444,
                "image_height": 250,
                "ts": 1595437230,
                "from_url": "https:\/\/blogs.unity3d.com\/2020\/07\/22\/bolt-visual-scripting-is-now-included-in-all-unity-plans\/?utm_campaign=unitynews_global_newsletter_2020-07-global-unity-newsletter-july&utm_content=2020-07-global-unity-newsletter-july&utm_medium=email&utm_source=Eloqua",
                "image_bytes": 402470,
                "service_icon": "https:\/\/blogs.unity3d.com\/wp-content\/themes\/unity\/images\/ui\/favicons\/apple-touch-icon-152x152.png",
                "id": 1,
                "original_url": "https:\/\/blogs.unity3d.com\/2020\/07\/22\/bolt-visual-scripting-is-now-included-in-all-unity-plans\/?utm_campaign=unitynews_global_newsletter_2020-07-global-unity-newsletter-july&amp;utm_content=2020-07-global-unity-newsletter-july&amp;utm_medium=email&amp;utm_source=Eloqua"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cCqI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/blogs.unity3d.com\/2020\/07\/22\/bolt-visual-scripting-is-now-included-in-all-unity-plans\/?utm_campaign=unitynews_global_newsletter_2020-07-global-unity-newsletter-july&utm_content=2020-07-global-unity-newsletter-july&utm_medium=email&utm_source=Eloqua"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1595546218.272900",
        "edited": {
            "user": "USH01JEDQ",
            "ts": "1595546228.000000"
        },
        "client_msg_id": "7a4eb309-db89-4042-9bbe-57bed36a9a5a",
        "text": "Any Oovium users here? [iOS}\n\nApparently a big update today <https:\/\/apps.apple.com\/us\/app\/oovium\/id336573328>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595546218.272900",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1595550900.275200",
        "reply_users": [
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UHWC9PXBL",
                "ts": "1595550900.275200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yle",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Any Oovium users here? [iOS}\n\nApparently a big update today "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/apps.apple.com\/us\/app\/oovium\/id336573328"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "sunglasses",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595550808.274400",
        "client_msg_id": "F5C41085-A0B6-47C1-B668-698DF3E1E686",
        "text": "yeah. cloud services are one of those things i prefer not to think about. like how growing up means you ignore some bumps in the night ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595544917.271900",
        "parent_user_id": "UT60XSVCN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fyp3K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah. cloud services are one of those things i prefer not to think about. like how growing up means you ignore some bumps in the night "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595550900.275200",
        "client_msg_id": "8BD14448-6C91-474A-A666-38BF868E83E4",
        "text": "woah, this looks wild! thank you for sharing it i’ll give it a try",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595546218.272900",
        "parent_user_id": "USH01JEDQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=+y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "woah, this looks wild! thank you for sharing it i’ll give it a try"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "beer",
                "users": [
                    "USH01JEDQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595564501.281300",
        "client_msg_id": "C5802D24-DB20-4450-AC0D-8BEE2B8C4332",
        "text": "holy crap this discussion has been insanely valuable. <@UAVCC2X70> it sounds like we’re working on super similar stuff <@U013ZLJARC7> i have absolutely checked out shen. wish there was more video content on it. aditya siram has demonstrated a lot of really cool stuff but i could really use a tutorial lol. <@UT60XSVCN> this is exactly the kind of pedantry that’s really important to get right in this discussion! <@UJN1TAYEQ> i’m going to have to pin this message on my wall. i think there are a lot of great specifics about the lisp you outlined that line up with what i’m thinking about and i will reread this when it’s not midnight my time",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9xUl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "holy crap this discussion has been insanely valuable. "
                            },
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " it sounds like we’re working on super similar stuff "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " i have absolutely checked out shen. wish there was more video content on it. aditya siram has demonstrated a lot of really cool stuff but i could really use a tutorial lol. "
                            },
                            {
                                "type": "user",
                                "user_id": "UT60XSVCN"
                            },
                            {
                                "type": "text",
                                "text": " this is exactly the kind of pedantry that’s really important to get right in this discussion! "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " i’m going to have to pin this message on my wall. i think there are a lot of great specifics about the lisp you outlined that line up with what i’m thinking about and i will reread this when it’s not midnight my time"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "beers",
                "users": [
                    "UAVCC2X70",
                    "U013ZLJARC7",
                    "UKP3B2J5D"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1595566869.281800",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1595567241.000000"
        },
        "client_msg_id": "6e240bf4-18ae-43cd-b4f4-dc2d2a30a04f",
        "text": "<@UA14TGLTC> - Or \"compile away\" ahead of time, but by having your code operate on itself rather than being bound by some set-in-stone compiler\/language. Instead, YOU choose how to programmatically express the program you want to build.\n\nComputationally \/ expressiveness-wise, you get the same benefit (minus the optimization) by just doing it \"at runtime\" (like JavaScript), but it can be done Ahead Of (rather than Just In) Time.\n\nBut especially for Lisp-like languages where the compile-time stuff is really no different than the runtime stuff (i.e. macro expansion), that \"compile pass\" can be made of your own code that does whatever you want, rather than having to be granted (and locked down by) something separate called a compiler.\n\n... WAIT ... Have I just been describing Racket this _whole time_?? :exploding_head:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "djB5p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " - Or \"compile away\" ahead of time, but by having your code operate on itself rather than being bound by some set-in-stone compiler\/language. Instead, YOU choose how to programmatically express the program you want to build.\n\nComputationally \/ expressiveness-wise, you get the same benefit (minus the optimization) by just doing it \"at runtime\" (like JavaScript), but it can be done Ahead Of (rather than Just In) Time.\n\nBut especially for Lisp-like languages where the compile-time stuff is really no different than the runtime stuff (i.e. macro expansion), that \"compile pass\" can be made of your own code that does whatever you want, rather than having to be granted (and locked down by) something separate called a compiler.\n\n... WAIT ... Have I just been describing Racket this "
                            },
                            {
                                "type": "text",
                                "text": "whole time",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?? "
                            },
                            {
                                "type": "emoji",
                                "name": "exploding_head",
                                "unicode": "1f92f"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UA14TGLTC",
                    "UKP3B2J5D",
                    "U013ZLJARC7"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1595567307.282500",
        "client_msg_id": "37219DBE-4AFE-4CB9-BFAC-3C8267785A9E",
        "text": "<https:\/\/www.wired.com\/story\/how-doug-engelbart-pulled-off-the-mother-of-all-demos\/|https:\/\/www.wired.com\/story\/how-doug-engelbart-pulled-off-the-mother-of-all-demos\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "Wired",
                "title": "How Doug Engelbart Pulled off the Mother of All Demos",
                "title_link": "https:\/\/www.wired.com\/story\/how-doug-engelbart-pulled-off-the-mother-of-all-demos\/",
                "text": "In this excerpt from Valley of Genius, author Adam Fisher sketches how Doug Engelbart came up with many of the ideas of modern computing.",
                "fallback": "Wired: How Doug Engelbart Pulled off the Mother of All Demos",
                "image_url": "https:\/\/media.wired.com\/photos\/5c0b25164b774b39cde4063f\/191:100\/w_1280,c_limit\/First-Mouse-h_14392708.jpg?mbid=social_retweet",
                "from_url": "https:\/\/www.wired.com\/story\/how-doug-engelbart-pulled-off-the-mother-of-all-demos\/",
                "image_width": 478,
                "image_height": 250,
                "image_bytes": 84171,
                "service_icon": "https:\/\/www.wired.com\/verso\/static\/wired\/assets\/favicon.ccc13c90b928e0b02eaafcfb05864c93a0136dd0.ico",
                "id": 1,
                "original_url": "https:\/\/www.wired.com\/story\/how-doug-engelbart-pulled-off-the-mother-of-all-demos\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UmiTp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.wired.com\/story\/how-doug-engelbart-pulled-off-the-mother-of-all-demos\/",
                                "text": "https:\/\/www.wired.com\/story\/how-doug-engelbart-pulled-off-the-mother-of-all-demos\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "clap",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "U01661S9F34",
                    "UN57U8V53"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1595573271.283000",
        "client_msg_id": "50338a56-4801-4780-a716-62a78c1968d4",
        "text": "On that note, I just found this:\n\n<https:\/\/beautifulracket.com\/appendix\/why-racket-why-lisp.html|https:\/\/beautifulracket.com\/appendix\/why-racket-why-lisp.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "10+Or",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On that note, I just found this:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/beautifulracket.com\/appendix\/why-racket-why-lisp.html",
                                "text": "https:\/\/beautifulracket.com\/appendix\/why-racket-why-lisp.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UKP3B2J5D",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    }
]