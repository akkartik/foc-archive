[
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1580481196.038700",
        "client_msg_id": "4c3cd708-9059-4a1f-92f5-494d6d50b80e",
        "text": "Python: f(a, -b, c+d, g(x))\nHaskell: f a (-b) (c+d) (g x)\nLisp: (f a (- b) (+ c d) (g x))\nPynchon: f(a (-b) (c+d) (g(x)))\n\nSo Pynchon has a novel syntax for function calls. It seems to be quite verbose, requiring more parentheses than Lisp.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580431336.034000",
        "parent_user_id": "UT57EGH6K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0FD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Python: f(a, -b, c+d, g(x))\nHaskell: f a (-b) (c+d) (g x)\nLisp: (f a (- b) (+ c d) (g x))\nPynchon: f(a (-b) (c+d) (g(x)))\n\nSo Pynchon has a novel syntax for function calls. It seems to be quite verbose, requiring more parentheses than Lisp."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U012FRV0EV7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UT57EGH6K",
        "type": "message",
        "ts": "1580483381.040200",
        "client_msg_id": "F29D3DE0-5894-4276-86C3-788D18C25316",
        "text": "you could omit one pair of parens around g(x) unless i’m mistaken? and perhaps i will softly discourage nested function calls without an intermediate binding in the style guide",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0fd956c6f873",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-24\/923255899367_0fd956c6f873c2df6cd5_72.jpg",
            "first_name": "",
            "real_name": "mat ess",
            "display_name": "mat ess",
            "team": "T5TCAFTA9",
            "name": "daringseal",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580431336.034000",
        "parent_user_id": "UT57EGH6K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J13",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you could omit one pair of parens around g(x) unless i’m mistaken? and perhaps i will softly discourage nested function calls without an intermediate binding in the style guide"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1580483823.040400",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1580483933.000000"
        },
        "client_msg_id": "11e2e50a-6cf5-4bf1-b2b5-2326813a761b",
        "text": "&gt; you could omit one pair of parens around g(x) unless i’m mistaken?\nI don't think you can do that. Consider\n```f((g(x+y)))```\nIf you omit one pair of parens, then you get\n```f(g(x+y))```\nwhich I think is a call to `f` with two arguments, `g` and `(x+y)`, unless white space is significant in the parsing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580431336.034000",
        "parent_user_id": "UT57EGH6K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xz3V",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you could omit one pair of parens around g(x) unless i’m mistaken?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think you can do that. Consider\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "f((g(x+y)))"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you omit one pair of parens, then you get\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "f(g(x+y))"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "which I think is a call to "
                            },
                            {
                                "type": "text",
                                "text": "f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with two arguments, "
                            },
                            {
                                "type": "text",
                                "text": "g",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "(x+y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", unless white space is significant in the parsing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT57EGH6K",
        "type": "message",
        "ts": "1580488705.040800",
        "edited": {
            "user": "UT57EGH6K",
            "ts": "1580488980.000000"
        },
        "client_msg_id": "f9f2f384-3a96-4145-8d3e-79e96310316d",
        "text": "i intend to require whitespace to separate arguments in function calls, and generally i think i want `identifer()` to always represent a function call. perhaps this could be addressed in the underlying source representation where indentation-based blocks are converted to braced syntax, a la haskell: `f(g(x y) z)` could be syntax sugar for `f(g(x;y);z)` . the use of `;` is obviously a bit odd, but since this is just meant to give us a whitespace insensitive representation, i dont expect it to get used very much, vs the braced syntax which i intend to make a bit more \"front and center\" for fans of c style syntax.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0fd956c6f873",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-24\/923255899367_0fd956c6f873c2df6cd5_72.jpg",
            "first_name": "",
            "real_name": "mat ess",
            "display_name": "mat ess",
            "team": "T5TCAFTA9",
            "name": "daringseal",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580431336.034000",
        "parent_user_id": "UT57EGH6K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aFKQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i intend to require whitespace to separate arguments in function calls, and generally i think i want "
                            },
                            {
                                "type": "text",
                                "text": "identifer()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to always represent a function call. perhaps this could be addressed in the underlying source representation where indentation-based blocks are converted to braced syntax, a la haskell: "
                            },
                            {
                                "type": "text",
                                "text": "f(g(x y) z)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " could be syntax sugar for "
                            },
                            {
                                "type": "text",
                                "text": "f(g(x;y);z)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . the use of "
                            },
                            {
                                "type": "text",
                                "text": ";",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is obviously a bit odd, but since this is just meant to give us a whitespace insensitive representation, i dont expect it to get used very much, vs the braced syntax which i intend to make a bit more \"front and center\" for fans of c style syntax."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT39HTL9X",
        "type": "message",
        "ts": "1580523851.056900",
        "edited": {
            "user": "UT39HTL9X",
            "ts": "1580523900.000000"
        },
        "client_msg_id": "6eccfd48-c19b-43e3-8928-73931333193e",
        "text": "Hello! I wish I would have found this forever ago - I'm a software engineer that's extremely interested in programming language design, and I'm currently working on a language concept (deterministic, metaprogramming, and code-completable editing). \n\nI got interested in programming languages while working extensively on various libraries for mobile\/back-end\/web (Kotlin), as I frequently found myself fighting language limitations to make the most intuitive and simple API possible. I've made a simple scripting language in the past, and I've managed my way around ANTLR while making a Kotlin to Swift syntax translator. \n\nI've sure been humbled just reading about the various concepts I've never considered before, especially coding with proofs.  I also feel a little out of my depth with some of the formal terms here, but I'm excited to learn from you all!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g84a30c4b94b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/84a30c4b94b829ef94b42170de8f2edf.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Joseph Ivie",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "josephivie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580523851.056900",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1580586643.061900",
        "reply_users": [
            "UC2A2ARPT",
            "UT39HTL9X"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1580580627.061200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580580683.061400"
            },
            {
                "user": "UT39HTL9X",
                "ts": "1580585131.061600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580586643.061900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J7nI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello! I wish I would have found this forever ago - I'm a software engineer that's extremely interested in programming language design, and I'm currently working on a language concept (deterministic, metaprogramming, and code-completable editing). \n\nI got interested in programming languages while working extensively on various libraries for mobile\/back-end\/web (Kotlin), as I frequently found myself fighting language limitations to make the most intuitive and simple API possible. I've made a simple scripting language in the past, and I've managed my way around ANTLR while making a Kotlin to Swift syntax translator. \n\nI've sure been humbled just reading about the various concepts I've never considered before, especially coding with proofs.  I also feel a little out of my depth with some of the formal terms here, but I'm excited to learn from you all!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "wave",
                "users": [
                    "UT57EGH6K",
                    "UC21F8Q48",
                    "U8A5MS6R1",
                    "UJ6LDMMN0",
                    "UA14TGLTC",
                    "USUMN6XLH",
                    "U5TCAFTD3",
                    "UJBAJNFLK",
                    "UC2A2ARPT",
                    "USJSL2NVB",
                    "US370TRJA",
                    "UFPRPSA4S",
                    "UD6EXQVM0"
                ],
                "count": 13
            }
        ]
    }
]