[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1664053036.553589",
        "client_msg_id": "70816b18-835d-420a-be49-8468e2054deb",
        "text": "Yeah, I had a similar reaction. The systems vs languages divide or OS vs compiler people divide has existed long before 1990, so treating it as an instance of a Kuhnian revolution is likely to lead one astray. One side didn't come after the other.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1663687687.115909",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+6V2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I had a similar reaction. The systems vs languages divide or OS vs compiler people divide has existed long before 1990, so treating it as an instance of a Kuhnian revolution is likely to lead one astray. One side didn't come after the other."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1664053565.552369",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1664056321.000000"
        },
        "client_msg_id": "ece30ed4-4a37-4b80-9b0f-d1bb78911919",
        "text": "I think the claim of incommensurability is a bit overblown. Here's a random PhD thesis from 2002 (so a decade before RPG's paper) about mixins that I just happen to be aware of because I sat in the cubicle next door and helped proofread it and attend practice talks: <https:\/\/www.cs.utexas.edu\/~lin\/papers\/richcar.pdf>\n\nHere's what it says about mixins in Section 2.3.2:\n\n&gt; The term mixin was first used to describe a style of LISP programming that combines classes using multiple inheritance [Moon, OO with Flavors]. Since then, however, mixins have been more commonly defined as types whose supertypes are declared parametrically [Bracha and Cook, Mixin-based inheritance], and it is in this sense that we use the term.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1663687687.115909",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qnl1D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the claim of incommensurability is a bit overblown. Here's a random PhD thesis from 2002 (so a decade before RPG's paper) about mixins that I just happen to be aware of because I sat in the cubicle next door and helped proofread it and attend practice talks: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.utexas.edu\/~lin\/papers\/richcar.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nHere's what it says about mixins in Section 2.3.2:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The term mixin was first used to describe a style of LISP programming that combines classes using multiple inheritance [Moon, OO with Flavors]. Since then, however, mixins have been more commonly defined as types whose supertypes are declared parametrically [Bracha and Cook, Mixin-based inheritance], and it is in this sense that we use the term."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1664054366.910259",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1664054556.000000"
        },
        "client_msg_id": "ae1ead03-dcc0-4586-a14c-eb0f541c6a42",
        "text": "Here's Bracha and Cook, \"Mixin-based inheritance\": <http:\/\/www.bracha.org\/oopsla90.pdf>\n\nI don't see any occurrence of the word \"science\" or \"scientific\". So I'm not sure what RPG meant by \"immediately laid claim to being the first scientific paper on mixins,\" but the paper doesn't say that anyway. It would be kind of a weird thing to say in an academic paper. The groupthink and class warfare in academia RPG mentions is seldom written out in black and white in a paper. It's implicit in the way people characterize each other in hallways of conferences, papers chosen for publication, research projects funded, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1663687687.115909",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D=REF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's Bracha and Cook, \"Mixin-based inheritance\": "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.bracha.org\/oopsla90.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI don't see any occurrence of the word \"science\" or \"scientific\". So I'm not sure what RPG meant by \"immediately laid claim to being the first scientific paper on mixins,\" but the paper doesn't say that anyway. It would be kind of a weird thing to say in an academic paper. The groupthink and class warfare in academia RPG mentions is seldom written out in black and white in a paper. It's implicit in the way people characterize each other in hallways of conferences, papers chosen for publication, research projects funded, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1664055761.786599",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1664056257.000000"
        },
        "client_msg_id": "52b5bb7c-89c7-4cbb-b78a-aa76ecc691c9",
        "text": "Alternative explanation for why conferences changed their names and the mix of papers in OOPSLA shifted: the AI winter. Before the winter there was a strong revolving door between academia and industry as researchers went off to create startups like Symbolics, then returned to academia. Such a revolving door has many benefits. It also has a tendency for practitioners to hype their research outside of academia, which leads to inflated expectations and, inevitably, a crash in funding. The word \"Lisp\" had to do some penance for a decade due to this dynamic before it was rehabilitated. It's not that different from companies changing their name after a big scandal.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1663687687.115909",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B1jeC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Alternative explanation for why conferences changed their names and the mix of papers in OOPSLA shifted: the AI winter. Before the winter there was a strong revolving door between academia and industry as researchers went off to create startups like Symbolics, then returned to academia. Such a revolving door has many benefits. It also has a tendency for practitioners to hype their research outside of academia, which leads to inflated expectations and, inevitably, a crash in funding. The word \"Lisp\" had to do some penance for a decade due to this dynamic before it was rehabilitated. It's not that different from companies changing their name after a big scandal."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1664057308.662689",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1664057563.000000"
        },
        "client_msg_id": "56792526-209c-42bf-8093-60ed951ce7f4",
        "text": "Here's how Bracha and Cook defended ignoring `before` and `after` auxiliary methods:\n\n&gt; The more complex method combination mechanisms of CLOS can also be modeled in this framework. For example, if `before` and `after` methods were distinguished then the base class, whose methods would be called after all other methods, could arrange for the last `before` method to call the primary method, and the last primary method to call the `after` method.\nI think they understand CLOS just fine, even if they don't quite appreciate what it allows.\n\nBottomline: I find the distinction between auxiliary methods and superclass parameters to be fairly minor. In either case you have some primitives that ideally include a single concern, and combination mechanisms for composing them. Both rely on programmer taste to ensure the universe of concerns is orthogonal. Yes, Bracha and Cook seem to care more about \"encapsulation\", something I personally don't care about. But this is more an example of Steve Yegge's liberal vs conservative programmers than two sides that speak different languages using the same words. Conservatives typically tend to have experienced larger scales where it's easier for poor abstractions to slip through into code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1663687687.115909",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xtO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's how Bracha and Cook defended ignoring "
                            },
                            {
                                "type": "text",
                                "text": "before",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "after",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " auxiliary methods:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The more complex method combination mechanisms of CLOS can also be modeled in this framework. For example, if "
                            },
                            {
                                "type": "text",
                                "text": "before",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "after",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " methods were distinguished then the base class, whose methods would be called after all other methods, could arrange for the last "
                            },
                            {
                                "type": "text",
                                "text": "before",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " method to call the primary method, and the last primary method to call the "
                            },
                            {
                                "type": "text",
                                "text": "after",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " method."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI think they understand CLOS just fine, even if they don't quite appreciate what it allows.\n\nBottomline: I find the distinction between auxiliary methods and superclass parameters to be fairly minor. In either case you have some primitives that ideally include a single concern, and combination mechanisms for composing them. Both rely on programmer taste to ensure the universe of concerns is orthogonal. Yes, Bracha and Cook seem to care more about \"encapsulation\", something I personally don't care about. But this is more an example of Steve Yegge's liberal vs conservative programmers than two sides that speak different languages using the same words. Conservatives typically tend to have experienced larger scales where it's easier for poor abstractions to slip through into code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1664059893.735919",
        "client_msg_id": "ad87f3c1-c0ea-4479-a57a-7ffa90c33531",
        "text": "Returning to the podcast, a short story recommendation on the reality of numbers: _\"Division by zero\"_ by Ted Chiang.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1663687687.115909",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oNuPi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Returning to the podcast, a short story recommendation on the reality of numbers: "
                            },
                            {
                                "type": "text",
                                "text": "\"Division by zero\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " by Ted Chiang."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]