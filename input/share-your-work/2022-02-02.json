[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1643810725.375609",
        "client_msg_id": "8ca9c313-4c72-4826-b8d9-f5d42f6abd88",
        "text": "Do you have a version of this video hosted on the web (vimeo or youtube or whatever)? I'd love to reference it, along with the current stuff from Primitive, on my <https:\/\/github.com\/ivanreese\/visual-programming-codex\/|codex>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643747012.895199",
        "parent_user_id": "U02M0CVTU8K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x0iC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you have a version of this video hosted on the web (vimeo or youtube or whatever)? I'd love to reference it, along with the current stuff from Primitive, on my "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/ivanreese\/visual-programming-codex\/",
                                "text": "codex"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02M0CVTU8K",
        "type": "message",
        "ts": "1643834497.482999",
        "client_msg_id": "542e133c-9a83-41e7-8b40-9912c975c056",
        "text": "thanks <@UC2A2ARPT> - here you go: <https:\/\/youtu.be\/40ua8NRyrro>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "949e3dbab4eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-11\/2727210339761_949e3dbab4eb6696dc51_72.jpg",
            "first_name": "John",
            "real_name": "John Voorhees",
            "display_name": "John Voorhees (Primitive)",
            "team": "T5TCAFTA9",
            "name": "john960",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643747012.895199",
        "parent_user_id": "U02M0CVTU8K",
        "attachments": [
            {
                "from_url": "https:\/\/youtu.be\/40ua8NRyrro",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/40ua8NRyrro\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/40ua8NRyrro?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/40ua8NRyrro",
                "fallback": "YouTube Video: PRIME Function Graphical Interpreter Demo (April 2016)",
                "title": "PRIME Function Graphical Interpreter Demo (April 2016)",
                "title_link": "https:\/\/youtu.be\/40ua8NRyrro",
                "author_name": "Primitive",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCOR_9Zltvwwv623_4msNp8Q",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8D+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " - here you go: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/40ua8NRyrro"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1643855121.372529",
        "client_msg_id": "bc36c43e-bf75-45b2-8824-aaafb005d9fe",
        "text": "<https:\/\/jasonmorrissc.github.io\/post\/blawx_v1\/|Blog post announcing the revised version of Blawx>.  Early stage proof of concept that demonstrates natural language explanations, multiple models, hypothetical reasoning, etc. It's very rough around the edges, but feedback welcome at this early stage.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643855121.372529",
        "reply_count": 13,
        "reply_users_count": 4,
        "latest_reply": "1643917201.836859",
        "reply_users": [
            "U013HU44GLS",
            "UCUSW7WVD",
            "UJBAJNFLK",
            "U02U0AS3J49"
        ],
        "replies": [
            {
                "user": "U013HU44GLS",
                "ts": "1643860006.674629"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1643860080.880449"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1643868666.324829"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1643886762.100319"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1643915977.138419"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1643916033.259989"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1643916204.753999"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1643916285.621559"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1643916392.546889"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1643916464.222069"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1643916610.983549"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1643916640.825169"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1643917201.836859"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kw4w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/jasonmorrissc.github.io\/post\/blawx_v1\/",
                                "text": "Blog post announcing the revised version of Blawx"
                            },
                            {
                                "type": "text",
                                "text": ".  Early stage proof of concept that demonstrates natural language explanations, multiple models, hypothetical reasoning, etc. It's very rough around the edges, but feedback welcome at this early stage."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U013HU44GLS",
                    "UJBAJNFLK",
                    "U71PMQ1V0",
                    "U030JL9M8SH"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "U013HU44GLS",
        "type": "message",
        "ts": "1643860006.674629",
        "client_msg_id": "0db2cfd3-fd9c-4d84-bce6-5cc5b886447d",
        "text": "That's pretty neat. I have been pondering what a graphical logic programming language would looks like (I though something akin to Unreal's blueprint to compose logical statements could maybe work ...) and a-la-scratch blocks seems to be a good match",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cb9e0e557132",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-12\/1132600153425_cb9e0e5571321437af24_72.jpg",
            "first_name": "Jean-Louis",
            "real_name": "Jean-Louis Villecroze",
            "display_name": "CocoaGeek",
            "team": "T5TCAFTA9",
            "name": "jeanlouis.villecroze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643855121.372529",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kDYYe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's pretty neat. I have been pondering what a graphical logic programming language would looks like (I though something akin to Unreal's blueprint to compose logical statements could maybe work ...) and a-la-scratch blocks seems to be a good match"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "U02U0AS3J49"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1643860080.880449",
        "client_msg_id": "cf9ba116-e045-472d-9c9f-e566677f978a",
        "text": "Ok, this helps me understand it much better! It's for law the way lisp is for AI. Alternative elevator pitch for it: Prolog with a natural language syntax.\n\n:heart:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643855121.372529",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dixSk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, this helps me understand it much better! It's for law the way lisp is for AI. Alternative elevator pitch for it: Prolog with a natural language syntax.\n\n"
                            },
                            {
                                "type": "emoji",
                                "name": "heart",
                                "unicode": "2764-fe0f"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "U02U0AS3J49"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1643868666.324829",
        "client_msg_id": "da9023ef-f19e-417e-8b9b-879c98c43fca",
        "text": "One idea I've often thought about is including test scenarios in laws. Like, consider the usual tired debate about income tax rates. One side wants to tax more as income grows, one side wants to tax less, both sides are obscenely self-interested, and the result is a raw negotiation without good faith. Lost is any sense of how best to build our society together. What if instead we pinned down a few criteria:\n• A family of 4 making X should be able to have a budget that looks like Y.\n• A single parent raising children on food stamps should be able to have childcare.\n• ...\nI think it'll probably be much easier to agree on these tests, and might make for a better foundation for debate. And if the laws start with scenarios, it'll make it easier to update them as well. We just ask if the tests are still passing, and if not we think about ways to rebalance our portfolio. Or we might ask if a refactoring of laws makes any of our scenarios break.\n\nI'm well aware of how naive all this sounds. I just like thinking about it :slightly_smiling_face: One problem I can anticipate is that the negotiation may then happen over which scenarios we permit to be included..\n\nAnother related idea: what if we included tests in Ethereum code? It would add legitimacy to code changes and forks when bugs are discovered.\n\nSorry, probably off-topic for this thread. But you've gotten my imagination to soar :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643855121.372529",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Sm=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One idea I've often thought about is including test scenarios in laws. Like, consider the usual tired debate about income tax rates. One side wants to tax more as income grows, one side wants to tax less, both sides are obscenely self-interested, and the result is a raw negotiation without good faith. Lost is any sense of how best to build our society together. What if instead we pinned down a few criteria:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A family of 4 making X should be able to have a budget that looks like Y."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A single parent raising children on food stamps should be able to have childcare."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "..."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI think it'll probably be much easier to agree on these tests, and might make for a better foundation for debate. And if the laws start with scenarios, it'll make it easier to update them as well. We just ask if the tests are still passing, and if not we think about ways to rebalance our portfolio. Or we might ask if a refactoring of laws makes any of our scenarios break.\n\nI'm well aware of how naive all this sounds. I just like thinking about it "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " One problem I can anticipate is that the negotiation may then happen over which scenarios we permit to be included..\n\nAnother related idea: what if we included tests in Ethereum code? It would add legitimacy to code changes and forks when bugs are discovered.\n\nSorry, probably off-topic for this thread. But you've gotten my imagination to soar "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]