[
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1564929712.210600",
        "client_msg_id": "ea578635-d396-44c7-9a04-f37813963891",
        "text": "Yeah, general purpose seems like a reasonable constraint but I wouldn’t agree on the text part. For me, the goal is optimizing productivity and there are places where text is more optimal.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564698994.147700",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=GZ2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, general purpose seems like a reasonable constraint but I wouldn’t agree on the text part. For me, the goal is optimizing productivity and there are places where text is more optimal."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1564931157.210800",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1564931208.000000"
        },
        "client_msg_id": "ab1b9c94-2c4f-43fe-8e3e-a40f14337427",
        "text": "So the NeXT Interface Builder is interesting not because it’s visual per se, but because of how much more productive it is. It happens to make the UI building part more productive through directness - visually manipulating the visual UI. But there are other things where doing something “visually” would be less direct and less productive than a text (structured or otherwise) interface.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564698994.147700",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rkuLt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So the NeXT Interface Builder is interesting not because it’s visual per se, but because of how much more productive it is. It happens to make the UI building part more productive through directness - visually manipulating the visual UI. But there are other things where doing something “visually” would be less direct and less productive than a text (structured or otherwise) interface."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1564933056.211300",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1564933090.000000"
        },
        "client_msg_id": "d5b50fc0-b501-49eb-b1a4-f400036e6b79",
        "text": "This is so cool! Maybe you are already aware of that.\nTopic: FP &amp; Homotopy Type Theory\n<https:\/\/www.youtube.com\/watch?v=caSOTjr1z18>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ks1j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is so cool! Maybe you are already aware of that.\nTopic: FP & Homotopy Type Theory\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=caSOTjr1z18"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564940728.211800",
        "client_msg_id": "1a899d08-f7df-4114-8c50-3287e1c6d9de",
        "text": "&gt; For me, the goal is optimizing productivity and there are places where text is more optimal.\n\nI have a different goal. I'm trying to make programming _feel_ different than it currently does. I don't like the emotional arc of writing code. I like how I feel when I'm doing 3D modelling or music better, so I'm trying to make programming feel more like that. It has nothing to do with productivity — I'm more productive writing code than I am recording music. But the moment-to-moment experience is wildly different.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564698994.147700",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Tswf",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For me, the goal is optimizing productivity and there are places where text is more optimal."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI have a different goal. I'm trying to make programming "
                            },
                            {
                                "type": "text",
                                "text": "feel",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " different than it currently does. I don't like the emotional arc of writing code. I like how I feel when I'm doing 3D modelling or music better, so I'm trying to make programming feel more like that. It has nothing to do with productivity — I'm more productive writing code than I am recording music. But the moment-to-moment experience is wildly different."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564940867.212000",
        "client_msg_id": "06a1c6a0-69a7-4111-8aff-6022e331ed76",
        "text": "DM is part of it, but I think chasing DM itself is actually a distraction. DM will emerge naturally as the result of satisfying other goals.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564698994.147700",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=C66",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "DM is part of it, but I think chasing DM itself is actually a distraction. DM will emerge naturally as the result of satisfying other goals."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564941487.212200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564944337.000000"
        },
        "client_msg_id": "ee9deec5-4b61-48b3-93e2-9138d8d48546",
        "text": "Text is more optimal for a wide range of things, absolutely. I see a lot of value, though, in defining \"visual programming\" as oppositional to text, since it pushes you further away from well-explored territory. Yeah, it does mean you miss out on a lot of interesting hybrids, or environments where you have visual extensions to traditional text code (eg: notebook interfaces with inline graphs and widgets). But after exploring a lot of that stuff, I've found it doesn't change how it feels to write code. You're still working in an environment where the mechanical thing you do with your body is type characters into a document, and the thing you do with your mind is imagine what that text does as it executes, and there's no knob that you can turn to control the passage of time (other than undo\/redo, but that doesn't touch the execution model in most environments).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564698994.147700",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OGLFe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Text is more optimal for a wide range of things, absolutely. I see a lot of value, though, in defining \"visual programming\" as oppositional to text, since it pushes you further away from well-explored territory. Yeah, it does mean you miss out on a lot of interesting hybrids, or environments where you have visual extensions to traditional text code (eg: notebook interfaces with inline graphs and widgets). But after exploring a lot of that stuff, I've found it doesn't change how it feels to write code. You're still working in an environment where the mechanical thing you do with your body is type characters into a document, and the thing you do with your mind is imagine what that text does as it executes, and there's no knob that you can turn to control the passage of time (other than undo\/redo, but that doesn't touch the execution model in most environments)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564944280.212500",
        "client_msg_id": "86067fdb-1fb1-4f18-ad62-afc16832dff2",
        "text": "A great visual programming tool will have lots of text in it, of course, because text is a great medium. But (I believe) that text will sit inside an environment and execution model that were designed to afford things that simply make no sense if text is the primary medium, or if text is the outer bound \/ conceptual foundation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564698994.147700",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cmTlT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A great visual programming tool will have lots of text in it, of course, because text is a great medium. But (I believe) that text will sit inside an environment and execution model that were designed to afford things that simply make no sense if text is the primary medium, or if text is the outer bound \/ conceptual foundation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1564958324.214400",
        "client_msg_id": "8ce5cef1-4503-4e10-a1c8-0299748cc61f",
        "text": "With 1000 programming languages to choose from, how to rank them? One important quantity that can be measured is MTTR BSOTTA -Mean Time To Repair By Someone Other Than The Author. This is what killed APL, LISP and FORTH; high MTTR scores.\n\n<https:\/\/www.e-dejong.com\/blog\/2019\/8\/4\/a-very-important-quality-in-a-programming-language-mttr-bsotta>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564958324.214400",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1565271744.241300",
        "reply_users": [
            "UCUSW7WVD",
            "UJN1TAYEQ",
            "UEQ6M68H0",
            "UJNJQD2AC"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1564979654.216600"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1565020438.225400"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1565129769.234100"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1565205035.236800"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1565240754.237200"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1565271355.240900"
            },
            {
                "user": "UJNJQD2AC",
                "ts": "1565271744.241300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "edward de jong",
                "title": "A very important quality in a programming language - MTTR BSOTTA",
                "title_link": "https:\/\/www.e-dejong.com\/blog\/2019\/8\/4\/a-very-important-quality-in-a-programming-language-mttr-bsotta",
                "text": "There are a 1000 computer languages to choose from, and hundreds more each year. How is a scientific person supposed to sort out which language is worth studying? Given that the top 10 languages average over 20 years old, surely there must be something superior by now. Without measurement, there i",
                "fallback": "edward de jong: A very important quality in a programming language - MTTR BSOTTA",
                "from_url": "https:\/\/www.e-dejong.com\/blog\/2019\/8\/4\/a-very-important-quality-in-a-programming-language-mttr-bsotta",
                "service_icon": "https:\/\/assets.squarespace.com\/universal\/default-favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.e-dejong.com\/blog\/2019\/8\/4\/a-very-important-quality-in-a-programming-language-mttr-bsotta"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/fVE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With 1000 programming languages to choose from, how to rank them? One important quantity that can be measured is MTTR BSOTTA -Mean Time To Repair By Someone Other Than The Author. This is what killed APL, LISP and FORTH; high MTTR scores.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.e-dejong.com\/blog\/2019\/8\/4\/a-very-important-quality-in-a-programming-language-mttr-bsotta"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHZNB3HRP",
                    "U5TCAFTD3",
                    "U7C7B75R6"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1564959119.214600",
        "client_msg_id": "f9cb777b-ab26-410b-b7cf-b8989d5a911e",
        "text": "(responding to your last paragraph) Well said, I agree. It just seems to me that tools like Smalltalk\/Self are much closer to that than many of the other projects in the list.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564698994.147700",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2nZaK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(responding to your last paragraph) Well said, I agree. It just seems to me that tools like Smalltalk\/Self are much closer to that than many of the other projects in the list."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564960574.215800",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564961025.000000"
        },
        "client_msg_id": "ecbfbf2a-a5e3-4fe7-bdb8-96cf498dc797",
        "text": "Totally! I simply forgot to add them. Self, in particular, is a big inspiration for me. They didn't succeed at offering the \"different feeling\" I'm looking for, but they certainly were instrumental in broadening the field in that direction.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564698994.147700",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h0Vjw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Totally! I simply forgot to add them. Self, in particular, is a big inspiration for me. They didn't succeed at offering the \"different feeling\" I'm looking for, but they certainly were instrumental in broadening the field in that direction."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564966620.216200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564968101.000000"
        },
        "client_msg_id": "505eedc1-975e-4346-8796-fb8d93b0076d",
        "text": "It was really fun to read everyone's thoughts in this problem space — thanks for weighing in!\n\nI'm not done designing my solution, but here's my current sense of my problem.\n\nI want to make something that feels similar to the timeline view\/control in a video editing or 3d animation program, to leverage people's experience with that kind of interface. I can spare space in my GUI about a hundred pixels tall and as wide as the window. I'd like to show _something_ inside this view that serves as a visual landmark based on what happened in the execution at each human-scale moment in time. Behind the scenes, my environment logs an event whenever the state of an entity is changed. I already use that for time travel, and it feels natural to use it for a timeline too.\n\nThe open questions are: what should be drawn in the timeline? How do those drawings relate to the code and its execution?\n\nGiven that context, here are some of my thoughts on your thoughts.\n\n<@UA14TGLTC> said\n&gt; Instead of picturing a filter as pulling matching items out of the list, we bring them forward pushing the non-matching items back. From one point of view, it's the normal, filtered list.  From another, literally from the side, you can see the distribution of matches.  Are they all in the middle?  Periodic?  Erratic?\n&gt; [...]\n&gt; One view that's really nice for imperative programming is to line up all the steps that modify a variable along a horizontal with the immediate context for each modification shown above and below the assignment.\n\nThat sounds very similar to how I'm planning to handle a few common features such as find &amp; replace, showing all call sites of a function, and even viewing function definitions via their call sites. I'd use multiple cameras to render different parts of the 2d code plane, stacking the views from those cameras at different depth layers vaguely like a \"card\" interface, to make it quick to flip between different locations in the code. This is similar to what you get with conventional windows\/tabs, but by putting things together in the same space you can draw dynamic connections between them and play with the in-between depth space.\n\nIt's neat to think about leveraging depth for a timeline view, though it butts up against two of my constraints — the \"human-scale\" sense of time will sometimes mean showing thousands of events from many different objects all at once; and the default timeline GUI is something like 2000x100 pixels big. Not sure what ideas I could adapt from William that'd fit within these constraints, but feel free to make suggestions.\n\n<@U8A5MS6R1> and <@UJ6LDMMN0> offered a bunch of excellent ideas for visualizing things, many of which I already plan to do in the main editor view — but they are visualizations that _integrate_ or aggregate across time rather than _differentiate_ to distinguish the moment-to-moment changes.\n\n<@UHWC9PXBL> said\n&gt; the leisure programming environment has a bunch of ideas—if no one has them at hand i can look harder\n\nI've never heard of this, and I'd love a link if you can find it, Garth. (You should throw it in <#C5T9GPWFL|thinking-together> in case anyone else is interested.)\n\nThanks again for the thoughts. More are welcome. If I've done a bad job of articulating my problem and you are interested in understanding it better, please let me know and I can post some drawings or something.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564729170.159200",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Alk+u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It was really fun to read everyone's thoughts in this problem space — thanks for weighing in!\n\nI'm not done designing my solution, but here's my current sense of my problem.\n\nI want to make something that feels similar to the timeline view\/control in a video editing or 3d animation program, to leverage people's experience with that kind of interface. I can spare space in my GUI about a hundred pixels tall and as wide as the window. I'd like to show "
                            },
                            {
                                "type": "text",
                                "text": "something",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " inside this view that serves as a visual landmark based on what happened in the execution at each human-scale moment in time. Behind the scenes, my environment logs an event whenever the state of an entity is changed. I already use that for time travel, and it feels natural to use it for a timeline too.\n\nThe open questions are: what should be drawn in the timeline? How do those drawings relate to the code and its execution?\n\nGiven that context, here are some of my thoughts on your thoughts.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " said"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Instead of picturing a filter as pulling matching items out of the list, we bring them forward pushing the non-matching items back. From one point of view, it's the normal, filtered list.  From another, literally from the side, you can see the distribution of matches.  Are they all in the middle?  Periodic?  Erratic?\n[...]\nOne view that's really nice for imperative programming is to line up all the steps that modify a variable along a horizontal with the immediate context for each modification shown above and below the assignment."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThat sounds very similar to how I'm planning to handle a few common features such as find & replace, showing all call sites of a function, and even viewing function definitions via their call sites. I'd use multiple cameras to render different parts of the 2d code plane, stacking the views from those cameras at different depth layers vaguely like a \"card\" interface, to make it quick to flip between different locations in the code. This is similar to what you get with conventional windows\/tabs, but by putting things together in the same space you can draw dynamic connections between them and play with the in-between depth space.\n\nIt's neat to think about leveraging depth for a timeline view, though it butts up against two of my constraints — the \"human-scale\" sense of time will sometimes mean showing thousands of events from many different objects all at once; and the default timeline GUI is something like 2000x100 pixels big. Not sure what ideas I could adapt from William that'd fit within these constraints, but feel free to make suggestions.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UJ6LDMMN0"
                            },
                            {
                                "type": "text",
                                "text": " offered a bunch of excellent ideas for visualizing things, many of which I already plan to do in the main editor view — but they are visualizations that "
                            },
                            {
                                "type": "text",
                                "text": "integrate",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or aggregate across time rather than "
                            },
                            {
                                "type": "text",
                                "text": "differentiate",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to distinguish the moment-to-moment changes.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " said"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the leisure programming environment has a bunch of ideas—if no one has them at hand i can look harder"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI've never heard of this, and I'd love a link if you can find it, Garth. (You should throw it in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " in case anyone else is interested.)\n\nThanks again for the thoughts. More are welcome. If I've done a bad job of articulating my problem and you are interested in understanding it better, please let me know and I can post some drawings or something."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1564979654.216600",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1564980031.000000"
        },
        "client_msg_id": "c20b688b-9474-4b03-8ed1-1d10b68e26cb",
        "text": "It's a useful metric, but it's misapplied to languages. I predict experiments to show that the variation _within_ modern languages will exceed the variation between them for any codebases beyond the scale of a term project. Your language will be no exception.\n\nWhy would this be?\n\n• Selection bias. If a language eliminates some defects they disappear entirely from this metric. As a C programmer I can find low hanging memory leaks in many codebases that are fairly easy to repair. In a GC language they don't exist anymore. The leaks that remain are much harder to track down.\n\n• Social factors. Bad\/inexperienced programmers can convolute any codebase. Moderately fixable with some sort of apprenticeship process. Boss level: bad incentives cause even good programmers to behave like bad ones. Not fixable with apprenticeship, because even mentors aren't immune to incentives.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564958324.214400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sV\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's a useful metric, but it's misapplied to languages. I predict experiments to show that the variation "
                            },
                            {
                                "type": "text",
                                "text": "within",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " modern languages will exceed the variation between them for any codebases beyond the scale of a term project. Your language will be no exception.\n\nWhy would this be?\n\n• Selection bias. If a language eliminates some defects they disappear entirely from this metric. As a C programmer I can find low hanging memory leaks in many codebases that are fairly easy to repair. In a GC language they don't exist anymore. The leaks that remain are much harder to track down.\n\n• Social factors. Bad\/inexperienced programmers can convolute any codebase. Moderately fixable with some sort of apprenticeship process. Boss level: bad incentives cause even good programmers to behave like bad ones. Not fixable with apprenticeship, because even mentors aren't immune to incentives."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    }
]