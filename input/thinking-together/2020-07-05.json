[
    {
        "user": "U0139HUPMQ9",
        "type": "message",
        "ts": "1593951627.352200",
        "client_msg_id": "6e36ee0d-efe7-4c3c-9cf3-46bc497f37f4",
        "text": "Lately I've been thinking about syntax highlighting and how helpful it is for developers. Recent research on this seems to be mostly focused on students and beginners, but the consensus (if there is any) seems to be that SH has negligible effects on source code comprehension (some examples: <https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/2987491.2987536|1>, <https:\/\/refubium.fu-berlin.de\/bitstream\/handle\/fub188\/21867\/emip2017_report.pdf;jsessionid=D5D8345F061D423D87BB519F94D6B346?sequence=1#page=6|2>, <https:\/\/link.springer.com\/content\/pdf\/10.1007\/s10664-017-9579-0.pdf|3>). A <https:\/\/d1wqtxts1xzle7.cloudfront.net\/38888331\/sarkar_2015_syntax_colouring.pdf?1443186018=&amp;response-content-disposition=inline%3B+filename%3DThe_impact_of_syntax_colouring_on_progra.pdf&amp;Expires=1593952423&amp;Signature=VAr9tKNZznILbhZz9-f5PlsVtDUIiQgnZCMjbfgYFjf31o5omzBx8D8-WnGRS~Y9O9QyYuUeRgycsfqW1do5wZQv4WE2FkIUmfcv~-yFWwDmxPliMDVAm759IeTPjZr9s3yVyOj-XNZHP9THuot3Zt4b6elvTWGdNqENvjFzB424N6QmV3z5zXpzMT9xWveglmRB7P-Pd9~Z5AsFifJQ5De3wCwFSyIAwi2L9UW8KgDQHO~z9rU6IiZ0EV2lg822bxezra~OiYike1LsxgWy7U7o402G2DV3D~vsJ3OK~nMH7Z5ceWxq6nGi3BGIMTl0GfDTIyuiRyjvx~Ls-9u7VQ__&amp;Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA|2015 paper> found an positive benefit, but the study had a small sample size and found that the effect is strongest for beginners.\n\nThe authors of the <https:\/\/link.springer.com\/content\/pdf\/10.1007\/s10664-017-9579-0.pdf|2018 paper> (linked above) made the following claim:\n\n&gt; Our findings indicate that current IDEs possibly waste a feedback channel to the developer with an ineffective code highlighting scheme. This feedback channel could convey more meaningful information, for example the font colour could encode the type of function in terms of its namespace.\nIn other words, \"semantic highlighting\" could be more beneficial for programmer productivity, a paradigm that \"attempts to reveal the meaning of the code\" instead of just \"identifying syntactic elements\" [<https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/2846680.2846685|source>]. This can mean something simple like giving each variable its own colour, but I think it can also incorporate more creative ideas.\n\nI found two IDE packages for semantic highlighting: <https:\/\/marketplace.visualstudio.com\/items?itemName=AndreasReischuck.SemanticColorizer|SemanticColorizer> for Visual Studio and <https:\/\/atom.io\/packages\/semanticolor|semanticolor> for Atom. Has anyone here has used those packages (or something similar) and found them useful? I'm also interested what opinions you have about syntax highlighting in general (I've already read <https:\/\/groups.google.com\/forum\/#!msg\/golang-nuts\/hJHCAaiL0so\/kG3BHV6QFfIJ|Rob Pike's opinion>). :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3dec956efe5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3dec956efe594149cbf027145d37aa47.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Sverrir",
            "real_name": "Sverrir Thorgeirsson",
            "display_name": "Sverrir Thorgeirsson",
            "team": "T5TCAFTA9",
            "name": "sverrir.thorgeirsson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "reply_count": 20,
        "reply_users_count": 8,
        "latest_reply": "1595403304.121900",
        "reply_users": [
            "UP28ETUSE",
            "UL5AX4G2H",
            "UT60XSVCN",
            "UAL7940NM",
            "U0136G8R8KG",
            "UJN1TAYEQ",
            "UCUSW7WVD",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UP28ETUSE",
                "ts": "1593955945.353400"
            },
            {
                "user": "UP28ETUSE",
                "ts": "1593956204.354000"
            },
            {
                "user": "UL5AX4G2H",
                "ts": "1593956769.354200"
            },
            {
                "user": "UT60XSVCN",
                "ts": "1593957252.354400"
            },
            {
                "user": "UAL7940NM",
                "ts": "1593960634.354800"
            },
            {
                "user": "U0136G8R8KG",
                "ts": "1593966552.355200"
            },
            {
                "user": "UAL7940NM",
                "ts": "1593969960.355500"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1593980946.360800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1594005117.361400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1594005386.361900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1594342918.190900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1594839015.391300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1594839081.392000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1594839107.392700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1594841389.394600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1594845378.395500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1594845948.395800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1594845987.396000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1594846821.396500"
            },
            {
                "user": "U0136G8R8KG",
                "ts": "1595403304.121900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F77",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lately I've been thinking about syntax highlighting and how helpful it is for developers. Recent research on this seems to be mostly focused on students and beginners, but the consensus (if there is any) seems to be that SH has negligible effects on source code comprehension (some examples: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/2987491.2987536",
                                "text": "1"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/refubium.fu-berlin.de\/bitstream\/handle\/fub188\/21867\/emip2017_report.pdf;jsessionid=D5D8345F061D423D87BB519F94D6B346?sequence=1#page=6",
                                "text": "2"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/link.springer.com\/content\/pdf\/10.1007\/s10664-017-9579-0.pdf",
                                "text": "3"
                            },
                            {
                                "type": "text",
                                "text": "). A "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/d1wqtxts1xzle7.cloudfront.net\/38888331\/sarkar_2015_syntax_colouring.pdf?1443186018=&response-content-disposition=inline%3B+filename%3DThe_impact_of_syntax_colouring_on_progra.pdf&Expires=1593952423&Signature=VAr9tKNZznILbhZz9-f5PlsVtDUIiQgnZCMjbfgYFjf31o5omzBx8D8-WnGRS~Y9O9QyYuUeRgycsfqW1do5wZQv4WE2FkIUmfcv~-yFWwDmxPliMDVAm759IeTPjZr9s3yVyOj-XNZHP9THuot3Zt4b6elvTWGdNqENvjFzB424N6QmV3z5zXpzMT9xWveglmRB7P-Pd9~Z5AsFifJQ5De3wCwFSyIAwi2L9UW8KgDQHO~z9rU6IiZ0EV2lg822bxezra~OiYike1LsxgWy7U7o402G2DV3D~vsJ3OK~nMH7Z5ceWxq6nGi3BGIMTl0GfDTIyuiRyjvx~Ls-9u7VQ__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA",
                                "text": "2015 paper"
                            },
                            {
                                "type": "text",
                                "text": " found an positive benefit, but the study had a small sample size and found that the effect is strongest for beginners.\n\nThe authors of the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/link.springer.com\/content\/pdf\/10.1007\/s10664-017-9579-0.pdf",
                                "text": "2018 paper"
                            },
                            {
                                "type": "text",
                                "text": " (linked above) made the following claim:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Our findings indicate that current IDEs possibly waste a feedback channel to the developer with an ineffective code highlighting scheme. This feedback channel could convey more meaningful information, for example the font colour could encode the type of function in terms of its namespace."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn other words, \"semantic highlighting\" could be more beneficial for programmer productivity, a paradigm that \"attempts to reveal the meaning of the code\" instead of just \"identifying syntactic elements\" ["
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/2846680.2846685",
                                "text": "source"
                            },
                            {
                                "type": "text",
                                "text": "]. This can mean something simple like giving each variable its own colour, but I think it can also incorporate more creative ideas.\n\nI found two IDE packages for semantic highlighting: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/marketplace.visualstudio.com\/items?itemName=AndreasReischuck.SemanticColorizer",
                                "text": "SemanticColorizer"
                            },
                            {
                                "type": "text",
                                "text": " for Visual Studio and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/atom.io\/packages\/semanticolor",
                                "text": "semanticolor"
                            },
                            {
                                "type": "text",
                                "text": " for Atom. Has anyone here has used those packages (or something similar) and found them useful? I'm also interested what opinions you have about syntax highlighting in general (I've already read "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/groups.google.com\/forum\/#!msg\/golang-nuts\/hJHCAaiL0so\/kG3BHV6QFfIJ",
                                "text": "Rob Pike's opinion"
                            },
                            {
                                "type": "text",
                                "text": "). "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1593953976.353200",
        "client_msg_id": "9FC25255-74F7-4DE1-9FB6-3980B5AD19ED",
        "text": "When was parallel\/distributed computing mentioned?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593722002.162200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5VO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When was parallel\/distributed computing mentioned?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I use this occurrence-based highlighting (giving it the semantic attribute seems a bit of an overstatement to me) in IntellIJ IDEA with Scala. Honestly, I haven't felt any improvement, but i'm also not bothered by it, so I kept it active. I guess I should disable it and see whether I'll be missing it.\n\nWhat I'd love to see, though, is a plugin that colors identifiers based on types, so that I can _see_ how types flow through an implementation. I've created a couple images at some point to show this idea. I needed this when I was attempting to explain the implementation of a Cartesian product function to some people at a coding dojo.\n\nThe language in the screenshots is Haskell.",
        "files": [
            {
                "id": "F0164AUB2F9",
                "mode": "tombstone"
            },
            {
                "id": "F0164AUBCCF",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UP28ETUSE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9dd3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use this occurrence-based highlighting (giving it the semantic attribute seems a bit of an overstatement to me) in IntellIJ IDEA with Scala. Honestly, I haven't felt any improvement, but i'm also not bothered by it, so I kept it active. I guess I should disable it and see whether I'll be missing it.\n\nWhat I'd love to see, though, is a plugin that colors identifiers based on types, so that I can "
                            },
                            {
                                "type": "text",
                                "text": "see",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " how types flow through an implementation. I've created a couple images at some point to show this idea. I needed this when I was attempting to explain the implementation of a Cartesian product function to some people at a coding dojo.\n\nThe language in the screenshots is Haskell."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1593955945.353400",
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9"
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1593956204.354000",
        "client_msg_id": "951f360b-df58-4b27-af92-43a91a964e40",
        "text": "In the example above, the type-based highlighting makes it easier to notice that the first and second pattern matches of `[]` are on different type occurences.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u8j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the example above, the type-based highlighting makes it easier to notice that the first and second pattern matches of "
                            },
                            {
                                "type": "text",
                                "text": "[]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are on different type occurences."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UL5AX4G2H",
        "type": "message",
        "ts": "1593956769.354200",
        "client_msg_id": "c37e81bb-fffb-4f91-9263-747d975ed709",
        "text": "Few ideas:\n\nThe value for beginners shouldnt be underestimated because anybody in a new codebase or language is like a beginner. Having colors for keywords and meaning makes it easier to learn the language.\n\nhighlighting helps with writing code. I find it helps me identify typos while typing because the word is the wrong color. Similarly it helps me identify keywords I forgot were keywords.\n\nSemantic highlighting can be thought of as something to strengthen code smell. If code looks the wrong color, it has a very bad smell that's easy to spot, whereas code with a single letter missing has a very subtle bad smell. \n\nI'd imagine highlighting would be most helpful for debugging.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b05739c44158",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-12-05\/1552783044467_b05739c44158d860f3bd_72.png",
            "first_name": "",
            "real_name": "Tyler Adams",
            "display_name": "Tyler Adams",
            "team": "T5TCAFTA9",
            "name": "coppero1237",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d+8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Few ideas:\n\nThe value for beginners shouldnt be underestimated because anybody in a new codebase or language is like a beginner. Having colors for keywords and meaning makes it easier to learn the language.\n\nhighlighting helps with writing code. I find it helps me identify typos while typing because the word is the wrong color. Similarly it helps me identify keywords I forgot were keywords.\n\nSemantic highlighting can be thought of as something to strengthen code smell. If code looks the wrong color, it has a very bad smell that's easy to spot, whereas code with a single letter missing has a very subtle bad smell. \n\nI'd imagine highlighting would be most helpful for debugging."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1593957252.354400",
        "client_msg_id": "487b59cb-1e24-4735-84ab-e442bffbcb27",
        "text": "I find it varies with language—in C for example, I find it very helpful, quite often I'll find myself in a conversation of sorts with my editor to make sure the highlighting match up, if it doesn't highlight like I expect, I know I've made a syntactic error somewhere. On the other hand, take any lisp, I don't find highlighting tokens to be too useful at all, but I find myself doing a similar thing with the autoindenter, though rainbow parens are also great.\n\nI personally find tooling quite important",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4XmxO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find it varies with language—in C for example, I find it very helpful, quite often I'll find myself in a conversation of sorts with my editor to make sure the highlighting match up, if it doesn't highlight like I expect, I know I've made a syntactic error somewhere. On the other hand, take any lisp, I don't find highlighting tokens to be too useful at all, but I find myself doing a similar thing with the autoindenter, though rainbow parens are also great.\n\nI personally find tooling quite important"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1593960634.354800",
        "client_msg_id": "86560971-10bf-4111-a3ed-3a82c006c221",
        "text": "My experience is that syntax highlighting really helps spotting some errors quickly. If the syntax highlighting is even slightly off, it really confuses me. For example, when I started learning Rust, the VS Code incorrectly highlighted some regular names as built-ins. So before thinking of \"semantic highlighting\", I think it's more important to do \"correct highlighting\" first. For most languages, this means that you can't simply use Regex highlighting rules.\nI've used individually-colored names in Jetbrains products and liked it, but it wasn't a huge productivity boost. Rainbow-Parens are also helpful IMO.\n\nWhen talking about syntax highlighting, it's usually about text \/ background color and font variants (bold\/italic) only. My hypothesis is that source code readablility could benefit from using different fonts for different syntactic elements. Identifiers and literals could use a sans-serif font, documentation a serif one and keywords \/ punctuation a monospace font. I'm currently building a prototype that uses different fonts depending on the element type. I can hopefully show something next week.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3x8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My experience is that syntax highlighting really helps spotting some errors quickly. If the syntax highlighting is even slightly off, it really confuses me. For example, when I started learning Rust, the VS Code incorrectly highlighted some regular names as built-ins. So before thinking of \"semantic highlighting\", I think it's more important to do \"correct highlighting\" first. For most languages, this means that you can't simply use Regex highlighting rules.\nI've used individually-colored names in Jetbrains products and liked it, but it wasn't a huge productivity boost. Rainbow-Parens are also helpful IMO.\n\nWhen talking about syntax highlighting, it's usually about text \/ background color and font variants (bold\/italic) only. My hypothesis is that source code readablility could benefit from using different fonts for different syntactic elements. Identifiers and literals could use a sans-serif font, documentation a serif one and keywords \/ punctuation a monospace font. I'm currently building a prototype that uses different fonts depending on the element type. I can hopefully show something next week."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0136G8R8KG",
        "type": "message",
        "ts": "1593966552.355200",
        "edited": {
            "user": "U0136G8R8KG",
            "ts": "1594342658.000000"
        },
        "client_msg_id": "63743f56-4569-4781-8457-f063ed365030",
        "text": "Douglas Crockford has a similar opinion as Rob Pike about normal syntax highlighting. He discusses his system in his \"monads and gonads\" video. In it he uses color to signify scope. Here is a vscode plugin based on that idea:\n<https:\/\/github.com\/azz\/vscode-levels|https:\/\/github.com\/azz\/vscode-levels>\n\nI haven't used it myself, but I wonder whether non-traditional syntax highlighting schemes wouldn't have the same level of utility as traditional ones (which I agree is low; though I also use the \"wrong\" color as a signal that something is syntactically wrong with my code, there are better ways my editor can and does use to inform me of such problems).\n\nThere is a small set of limited colors that can be unambiguously used at the same time (say max 7ish), incidentally about the same as the limit of how many things I can hold in my head at the same time (<https:\/\/en.wikipedia.org\/wiki\/The_Magical_Number_Seven,_Plus_or_Minus_Two|7, plus or minus two>). This color limit is especially true if I'm using different colors for the same syntax elements (to indicate something other than syntax, such as scope or other semantics).\n\nIn order to program I need to build up a mental model of the code. Highlighting will only help me if it can extend the capability of my brain to do that beyond its natural limits, e.g. work with a partial mental model, supported by \"color context\", or help me build up a regular mental model more quickly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd2caf630e2e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/d2caf630e2e75cb2177deb9da5798424.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Xandor Schiefer",
            "display_name": "Xandor Schiefer",
            "team": "T5TCAFTA9",
            "name": "me1539",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j4O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Douglas Crockford has a similar opinion as Rob Pike about normal syntax highlighting. He discusses his system in his \"monads and gonads\" video. In it he uses color to signify scope. Here is a vscode plugin based on that idea:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/azz\/vscode-levels",
                                "text": "https:\/\/github.com\/azz\/vscode-levels"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI haven't used it myself, but I wonder whether non-traditional syntax highlighting schemes wouldn't have the same level of utility as traditional ones (which I agree is low; though I also use the \"wrong\" color as a signal that something is syntactically wrong with my code, there are better ways my editor can and does use to inform me of such problems).\n\nThere is a small set of limited colors that can be unambiguously used at the same time (say max 7ish), incidentally about the same as the limit of how many things I can hold in my head at the same time ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/The_Magical_Number_Seven,_Plus_or_Minus_Two",
                                "text": "7, plus or minus two"
                            },
                            {
                                "type": "text",
                                "text": "). This color limit is especially true if I'm using different colors for the same syntax elements (to indicate something other than syntax, such as scope or other semantics).\n\nIn order to program I need to build up a mental model of the code. Highlighting will only help me if it can extend the capability of my brain to do that beyond its natural limits, e.g. work with a partial mental model, supported by \"color context\", or help me build up a regular mental model more quickly."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1593969960.355500",
        "client_msg_id": "35a74988-958a-426a-8a4d-1355646547ba",
        "text": "Another thought on this: even if studies showed that there was no productivity increase when using syntax highlighting, I'd still want to use it just for the aesthetics.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z4SZm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another thought on this: even if studies showed that there was no productivity increase when using syntax highlighting, I'd still want to use it just for the aesthetics."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UP28ETUSE",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1593974907.357000",
        "client_msg_id": "50AC1EF3-7C34-4F64-AA2F-C0A1E5C2CD6A",
        "text": "Ok I watched the gtoolkit video. This feels like an exploratory programming interface. Has anyone here actually used it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593677610.126000",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vzze",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok I watched the gtoolkit video. This feels like an exploratory programming interface. Has anyone here actually used it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1593975241.359200",
        "edited": {
            "user": "UFLN9JFRT",
            "ts": "1593975298.000000"
        },
        "client_msg_id": "5102161E-5268-4B60-AB3F-336BC475FB2E",
        "text": "Well I am not sure we have walled gardens. Npm, container repos and others let anyone make their own version of a repo library  if they wish don’t they? Or am I misunderstanding the thesis? Like Facebook did with npm and yarn ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593692019.136100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LY3y2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well I am not sure we have walled gardens. Npm, container repos and others let anyone make their own version of a repo library  if they wish don’t they? Or am I misunderstanding the thesis? Like Facebook did with npm and yarn "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1593975361.360400",
        "client_msg_id": "9A3DD73E-8E5E-42BC-9968-1078BAADB3F1",
        "text": "Yep sorry I forgot to update it here. I posted here and On Hacker news ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592922339.405900",
        "parent_user_id": "UGLSY9X3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FfBx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep sorry I forgot to update it here. I posted here and On Hacker news "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1593980946.360800",
        "client_msg_id": "96bac323-20b9-4c88-8a86-6786c499f94b",
        "text": "I originally had the same opinion as Rob Pike. Now, I'm programming in C++, and I sometimes disable blocks of code using ``#if  1 try this #else old code #endif`` when I am experimenting with a new implementation. Vim colours the disabled `old code` differently, so I can quickly see that a large block of code is disabled even if I can't see the preprocessor `#` tags that disabled it. That's useful. Ditto for colouring block comments and multiline string literals. On the other hand, giving each token on a line a different colour is just visual noise.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xqig",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I originally had the same opinion as Rob Pike. Now, I'm programming in C++, and I sometimes disable blocks of code using `"
                            },
                            {
                                "type": "text",
                                "text": "#if  1 try this #else old code #endif",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "` when I am experimenting with a new implementation. Vim colours the disabled "
                            },
                            {
                                "type": "text",
                                "text": "old code",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " differently, so I can quickly see that a large block of code is disabled even if I can't see the preprocessor "
                            },
                            {
                                "type": "text",
                                "text": "#",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " tags that disabled it. That's useful. Ditto for colouring block comments and multiline string literals. On the other hand, giving each token on a line a different colour is just visual noise."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC",
                    "UDQBTJ211"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1594005117.361400",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1594005258.000000"
        },
        "client_msg_id": "f2253c13-614e-4f0b-8657-b6e57a7a72d4",
        "text": "The synthesis of many positions is that conventional syntax highlighting is extremely useful for highlighting two things: comments and literals (especially string literals). Beyond that the returns start diminishing quite quickly. I believe this so strongly that I disable highlighting for most things but have 4(!!) colors of comments based on different leaders. (I also like to highlight early exits: `break`\/`continue`\/`return`.)\n\nAnd then I find the colors I save to be occasionally useful for highlighting individual variables _on demand_ but _randomly_ and _persistently_ (across restarts), giving me a sort of synesthesia where I start to expect certain variable names in certain parts of a codebase to be colored a certain way. Invaluable for highlighting dataflow and side-effects.\n\nHere's a couple of screenshots from various points in the past that show off all these features. (I love talking about this topic but often repeat myself.)\n\n* <https:\/\/mastodon.social\/@akkartik\/101163809901430347>\n* <https:\/\/i.imgur.com\/EmFMTtv.png>\n\nHere's what I use for \"dataflow highlighting\": <https:\/\/www.reddit.com\/r\/programming\/comments\/1w76um\/coding_in_color\/cezpios>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "attachments": [
            {
                "fallback": "606x727px image",
                "image_url": "https:\/\/i.imgur.com\/EmFMTtv.png",
                "image_width": 606,
                "image_height": 727,
                "image_bytes": 85852,
                "from_url": "https:\/\/i.imgur.com\/EmFMTtv.png",
                "id": 2,
                "original_url": "https:\/\/i.imgur.com\/EmFMTtv.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vlJsq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The synthesis of many positions is that conventional syntax highlighting is extremely useful for highlighting two things: comments and literals (especially string literals). Beyond that the returns start diminishing quite quickly. I believe this so strongly that I disable highlighting for most things but have 4(!!) colors of comments based on different leaders. (I also like to highlight early exits: "
                            },
                            {
                                "type": "text",
                                "text": "break",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\/"
                            },
                            {
                                "type": "text",
                                "text": "continue",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\/"
                            },
                            {
                                "type": "text",
                                "text": "return",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".)\n\nAnd then I find the colors I save to be occasionally useful for highlighting individual variables "
                            },
                            {
                                "type": "text",
                                "text": "on demand",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but "
                            },
                            {
                                "type": "text",
                                "text": "randomly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "persistently",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (across restarts), giving me a sort of synesthesia where I start to expect certain variable names in certain parts of a codebase to be colored a certain way. Invaluable for highlighting dataflow and side-effects.\n\nHere's a couple of screenshots from various points in the past that show off all these features. (I love talking about this topic but often repeat myself.)\n\n* "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mastodon.social\/@akkartik\/101163809901430347"
                            },
                            {
                                "type": "text",
                                "text": "\n* "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/i.imgur.com\/EmFMTtv.png"
                            },
                            {
                                "type": "text",
                                "text": "\n\nHere's what I use for \"dataflow highlighting\": "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.reddit.com\/r\/programming\/comments\/1w76um\/coding_in_color\/cezpios"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UA14TGLTC",
                    "UC2A2ARPT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1594005386.361900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1594005446.000000"
        },
        "client_msg_id": "c1d6ffbb-dc53-4005-a23e-fa9ac9b9355e",
        "text": "These days Mu has slightly more conventional highlighting of keywords just because I expect most people to be unfamiliar with the syntax: <http:\/\/akkartik.github.io\/mu\/html\/apps\/arith.mu.html>. But you can still see multiple colors of comments here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wSer",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These days Mu has slightly more conventional highlighting of keywords just because I expect most people to be unfamiliar with the syntax: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.github.io\/mu\/html\/apps\/arith.mu.html"
                            },
                            {
                                "type": "text",
                                "text": ". But you can still see multiple colors of comments here."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1594007503.364200",
        "client_msg_id": "61711D62-610C-4299-B75A-340EE98994EB",
        "text": "Hi! I’ve been a bit checked out of this Slack but Slack+knowledge base is something I’ve been thinking about and prototyping a bit for a while now. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593723588.167900",
        "parent_user_id": "ULK0Z4MPV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "upVAZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi! I’ve been a bit checked out of this Slack but Slack+knowledge base is something I’ve been thinking about and prototyping a bit for a while now. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1594007711.366300",
        "client_msg_id": "0D3D96F0-1896-40D3-8641-661E2F4E8481",
        "text": "There’s tons to explore here, and it would be great to hear where your imaginations are going. I think an environment for prototyping and a very patient, motivated user base are key, though, to getting our priorities straight. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593723588.167900",
        "parent_user_id": "ULK0Z4MPV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lgF1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There’s tons to explore here, and it would be great to hear where your imaginations are going. I think an environment for prototyping and a very patient, motivated user base are key, though, to getting our priorities straight. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1594007880.368300",
        "client_msg_id": "9022E13D-E33C-4225-96D1-DCDCA8F297D4",
        "text": "Datalog, or Prolog, are promising tools for prototyping. I’ve used clojure only a little, but if I can ignore the JVM, am drawn to it as well. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593723588.167900",
        "parent_user_id": "ULK0Z4MPV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/cvY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Datalog, or Prolog, are promising tools for prototyping. I’ve used clojure only a little, but if I can ignore the JVM, am drawn to it as well. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMWF81HTP",
        "type": "message",
        "ts": "1594010464.369300",
        "client_msg_id": "96570070-0dfe-4a84-be02-a079999b0e6b",
        "text": "Recently discovered this prototype of micro-versioning:\n&gt; Experimentation plays an essential role in exploratory programming, and programmers apply version control operations when switching the part of the source code back to the past state during experimentation. However, these operations, which we refer to as _micro-versioning_, are not well supported in current programming environments. We first examined previous studies to clarify the requirements for a micro-versioning tool. We then developed a micro-versioning tool that displays visual cues representing possible micro-versioning operations in a textual code editor. Our tool includes a history model that generates meaningful candidates by combining a regional undo model and tree-structured undo model. The history model uses code executions as a delimiter to segment text edit operations into meaning groups.\n<https:\/\/hiroakimikami.github.io\/micro-versioning-tool\/index.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4022671f3400",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-03\/775814402657_4022671f340032b9eb75_72.jpg",
            "first_name": "yoshiki",
            "real_name": "yoshiki",
            "display_name": "yoshiki",
            "team": "T5TCAFTA9",
            "name": "yoshikischmitz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594010464.369300",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1594231900.084600",
        "reply_users": [
            "U013ZLJARC7",
            "UEQ6M68H0",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "U013ZLJARC7",
                "ts": "1594028124.381200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1594037831.384900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1594060627.389500"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1594231900.084600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TS+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Recently discovered this prototype of micro-versioning:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Experimentation plays an essential role in exploratory programming, and programmers apply version control operations when switching the part of the source code back to the past state during experimentation. However, these operations, which we refer to as "
                            },
                            {
                                "type": "text",
                                "text": "micro-versioning",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", are not well supported in current programming environments. We first examined previous studies to clarify the requirements for a micro-versioning tool. We then developed a micro-versioning tool that displays visual cues representing possible micro-versioning operations in a textual code editor. Our tool includes a history model that generates meaningful candidates by combining a regional undo model and tree-structured undo model. The history model uses code executions as a delimiter to segment text edit operations into meaning groups."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/hiroakimikami.github.io\/micro-versioning-tool\/index.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UU45NNMHT",
                    "UKP3B2J5D"
                ],
                "count": 4
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "U015V233CFL",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    }
]