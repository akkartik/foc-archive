[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566651205.429900",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1566651238.000000"
        },
        "client_msg_id": "3CDF5897-84BB-42E4-B044-657198DF4292",
        "text": "Ha! So is that a decrease, or an increase, in incidental complexity? And relative to what?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566591528.419800",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hik",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ha! So is that a decrease, or an increase, in incidental complexity? And relative to what?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1566661220.430200",
        "client_msg_id": "ed61e214-8c2f-4693-a396-d6d2283af467",
        "text": "<@UC2A2ARPT> Wow, that's a lot of stuff, thanks! I am mostly interested in the large scale, i.e. library and language dependencies, rather than the internal structure of a code base.\nRich Hickey's talk addresses most of the issues I was thinking of, and the comments on Hacker News add various points of view.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566555331.405700",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yJU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " Wow, that's a lot of stuff, thanks! I am mostly interested in the large scale, i.e. library and language dependencies, rather than the internal structure of a code base.\nRich Hickey's talk addresses most of the issues I was thinking of, and the comments on Hacker News add various points of view."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1566661279.430400",
        "client_msg_id": "858f8699-2510-4134-a810-f52c2c44ab36",
        "text": "Relative to a burrito? ... Not sure :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566591528.419800",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dUI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Relative to a burrito? ... Not sure :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1566661676.430600",
        "client_msg_id": "b8f6d9d6-9bc6-4f4b-98c2-95aedef9a862",
        "text": "That's funny, because I would have thought that the applicability was more the other way around -- I guess it works both ways. I do know he had a whole other presentation on package dependencies though",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566555331.405700",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xi32J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's funny, because I would have thought that the applicability was more the other way around -- I guess it works both ways. I do know he had a whole other presentation on package dependencies though"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566664138.431200",
        "client_msg_id": "238361D3-3F10-4ADA-B35D-F00BBF52DCC9",
        "text": "Oh, I thought this was the talk about package dependencies",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566555331.405700",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nevW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, I thought this was the talk about package dependencies"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566664147.431600",
        "client_msg_id": "A3FD5ACC-CEB1-4251-B614-33B23D59592D",
        "text": "Maybe I linked the wrong talk",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566555331.405700",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "altqO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe I linked the wrong talk"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566664190.432800",
        "client_msg_id": "B99441F5-F8A7-496E-800A-ED09BC96BD7B",
        "text": "I was thinking of the one where he proposed never making breaking changes. If you need to make a breaking change, make a new thing with a different name instead.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566555331.405700",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HnyLL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was thinking of the one where he proposed never making breaking changes. If you need to make a breaking change, make a new thing with a different name instead."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1566673857.433900",
        "client_msg_id": "907d8522-07eb-40bc-895b-24ab94c1198c",
        "text": "The \"mutable variables and immutable values\" model is less complex than the \"implicit references to mutable objects\" model. See replies for more information.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "reply_count": 16,
        "reply_users_count": 5,
        "latest_reply": "1566885060.470000",
        "reply_users": [
            "UJN1TAYEQ",
            "UCUSW7WVD",
            "UEQ6M68H0",
            "UJBAJNFLK",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UJN1TAYEQ",
                "ts": "1566674058.434000"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1566674148.434200"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1566674294.434400"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1566674365.434600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1566677590.435600"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1566683084.436200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1566683309.436500"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1566693327.442000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1566693974.442900"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1566724381.455000"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1566777824.461000"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1566778188.461200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566862081.466200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566862106.467000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566862135.467800"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1566885060.470000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SD2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The \"mutable variables and immutable values\" model is less complex than the \"implicit references to mutable objects\" model. See replies for more information."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "U7C7B75R6",
                    "UAVCC2X70",
                    "UA14TGLTC",
                    "UC2A2ARPT"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1566674058.434000",
        "client_msg_id": "2fc75b7f-9fe3-46bc-a71e-29905f30a5bb",
        "text": "In C, a variable can contain an scalar value, like an integer, or it can contain a composite value, like a structure or array. If A and B are structure variables, then the assignment A=B *copies* the value of B into A. Unlike \"implicit references to mutable objects\" languages such as Java or Smalltalk or Python, the assignment A=B does not result in A and B being implicit references to the same mutable object. Instead, if I modify one of the fields of B, using B.foo=0, then the value of A is unaffected.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+g2k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In C, a variable can contain an scalar value, like an integer, or it can contain a composite value, like a structure or array. If A and B are structure variables, then the assignment A=B "
                            },
                            {
                                "type": "text",
                                "text": "copies",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the value of B into A. Unlike \"implicit references to mutable objects\" languages such as Java or Smalltalk or Python, the assignment A=B does not result in A and B being implicit references to the same mutable object. Instead, if I modify one of the fields of B, using B.foo=0, then the value of A is unaffected."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1566674148.434200",
        "client_msg_id": "2c76d989-d4fc-4b39-b0cc-fceec8eec687",
        "text": "In C, you can still arrange for the variables A and B to reference the same mutable objects, but you must use explicit pointers. There are no implicit references.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nCZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In C, you can still arrange for the variables A and B to reference the same mutable objects, but you must use explicit pointers. There are no implicit references."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1566674294.434400",
        "client_msg_id": "825b45b3-2132-499e-8cf6-905c89840c26",
        "text": "My language Curv uses a simpler and purer version of this model. All values are immutable. There are mutable local variables, but the assignment statement works by copying immutable values. This means that the state of two local variables with different names is guaranteed to be disjoint, so it's easier to reason about the semantics of mutable state in Curv. Unlike C, Curv does not have pointers, and unlike OOP languages, Curv does not have implicit references to mutable objects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "07BTz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My language Curv uses a simpler and purer version of this model. All values are immutable. There are mutable local variables, but the assignment statement works by copying immutable values. This means that the state of two local variables with different names is guaranteed to be disjoint, so it's easier to reason about the semantics of mutable state in Curv. Unlike C, Curv does not have pointers, and unlike OOP languages, Curv does not have implicit references to mutable objects."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1566674365.434600",
        "client_msg_id": "a28aa7c4-a26a-4365-8781-3e8d4ad3c305",
        "text": "Curv has two kinds of aggregate data: lists and records. One consequence of these semantics (no pointers, no references) is that all aggregate data is tree structured. There is no cyclic data. That's a feature, not a bug. It makes data easier to visualize and easier to reason about.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "485",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Curv has two kinds of aggregate data: lists and records. One consequence of these semantics (no pointers, no references) is that all aggregate data is tree structured. There is no cyclic data. That's a feature, not a bug. It makes data easier to visualize and easier to reason about."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566674705.435100",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1566736630.000000"
        },
        "client_msg_id": "ff82236c-463e-4c73-8126-8f5f37185417",
        "text": "I thought C and Unix were developed on PDP computers with VTs .. with actual _lower case_ letters!!!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566613671.428600",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6na",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I thought C and Unix were developed on PDP computers with VTs .. with actual "
                            },
                            {
                                "type": "text",
                                "text": "lower case",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " letters!!!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1566677590.435600",
        "client_msg_id": "6848d219-5770-4aec-a3cd-69a139b3cfc3",
        "text": "It's not just that you have no cyclic data. _You have no aliasing_. That's fine for the domain you're targeting, but won't work for a general-purpose language.\n\nYour first statement is still valid. But \"mutable variables and immutable values\" doesn't preclude aliasing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AHPgb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not just that you have no cyclic data. "
                            },
                            {
                                "type": "text",
                                "text": "You have no aliasing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". That's fine for the domain you're targeting, but won't work for a general-purpose language.\n\nYour first statement is still valid. But \"mutable variables and immutable values\" doesn't preclude aliasing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1566683084.436200",
        "client_msg_id": "987840b5-1592-4d09-a418-723780b5fa60",
        "text": "<@UCUSW7WVD> The requirement that there be no aliasing of mutable state is definitely viable for a general purpose high level language. I'm not sure if it works for system languages, though. The idea was taken seriously back in the 1970's. It does force you to use a different style of programming (it is incompatible with OOP). Today, that original line of research has been forgotten, but the idea has been rediscovered in other contexts. Pure functional languages like Haskell have no aliasing of mutable state, since they have no mutable state. Data oriented design is a style of programming that is compatible with no cycles\/no aliasing of mutable state: it's motivated by efficiency and ease of maintenance in video games. The \"Out of the tarpit\" paper advocated radical changes to the way we design software, to eliminate incidental complexity, and it advocates putting all of your state into what is effectively a relational database, with hierarchical data, no cycles, no aliasing. If we want the future of coding to have less incidental complexity, then we need to look beyond the OOP style of programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kZz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " The requirement that there be no aliasing of mutable state is definitely viable for a general purpose high level language. I'm not sure if it works for system languages, though. The idea was taken seriously back in the 1970's. It does force you to use a different style of programming (it is incompatible with OOP). Today, that original line of research has been forgotten, but the idea has been rediscovered in other contexts. Pure functional languages like Haskell have no aliasing of mutable state, since they have no mutable state. Data oriented design is a style of programming that is compatible with no cycles\/no aliasing of mutable state: it's motivated by efficiency and ease of maintenance in video games. The \"Out of the tarpit\" paper advocated radical changes to the way we design software, to eliminate incidental complexity, and it advocates putting all of your state into what is effectively a relational database, with hierarchical data, no cycles, no aliasing. If we want the future of coding to have less incidental complexity, then we need to look beyond the OOP style of programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UAVCC2X70"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UEQ6M68H0",
                    "U7C7B75R6",
                    "U6FKVSVCK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1566683309.436500",
        "client_msg_id": "31b0b025-ca2e-45d5-abb2-47f9f7cec375",
        "text": "Huh, you're right! I'd somehow never internalized this implication of Haskell: <https:\/\/stackoverflow.com\/questions\/10386616\/how-to-implement-doubly-linked-lists>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ",
        "attachments": [
            {
                "service_name": "Stack Overflow",
                "title": "how to implement doubly linked lists",
                "title_link": "https:\/\/stackoverflow.com\/questions\/10386616\/how-to-implement-doubly-linked-lists",
                "text": "Is it possible to have a doubly linked list in Haskell, and what's the ideal solution to implementing them? I'm implementing a scene graph where every widget has a parent as well as a child, and it's",
                "fallback": "Stack Overflow: how to implement doubly linked lists",
                "thumb_url": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/apple-touch-icon@2.png?v=73d79a89bded",
                "from_url": "https:\/\/stackoverflow.com\/questions\/10386616\/how-to-implement-doubly-linked-lists",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/favicon.ico?v=4f32ecc8f43d",
                "id": 1,
                "original_url": "https:\/\/stackoverflow.com\/questions\/10386616\/how-to-implement-doubly-linked-lists"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cua",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Huh, you're right! I'd somehow never internalized this implication of Haskell: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stackoverflow.com\/questions\/10386616\/how-to-implement-doubly-linked-lists"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1566687402.439400",
        "client_msg_id": "64457ae7-395b-49a5-b823-27eadfc77dd9",
        "text": "Uniform references (~Python) are less incidentally complex than value\/reference\/pointer variants (~C++) because you don't worry about which variant of syntax and semantics to deal with, when working with any business model object.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566687402.439400",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1566862232.469000",
        "reply_users": [
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1566862232.469000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WFq02",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Uniform references (~Python) are less incidentally complex than value\/reference\/pointer variants (~C++) because you don't worry about which variant of syntax and semantics to deal with, when working with any business model object."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1566688846.441800",
        "client_msg_id": "7f470dd8-8997-4322-9644-9b7b23d94fa6",
        "text": "In most programming languages, when you define a composite type (e.g. `class User {string name}`), you define both - the business shape ('a user entity has one name') and also the memory layout used to represent it internally. Are there any languages that let you define these separately?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566688846.441800",
        "reply_count": 19,
        "reply_users_count": 7,
        "latest_reply": "1566908920.471600",
        "reply_users": [
            "UAVCC2X70",
            "UHDQ62M4P",
            "U8A5MS6R1",
            "UC2A2ARPT",
            "UCGAK10LS",
            "UJUQESQ1Z",
            "U79HM6726"
        ],
        "replies": [
            {
                "user": "UAVCC2X70",
                "ts": "1566694942.443200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1566747978.456100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1566750950.456300"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1566751384.456600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1566751760.456800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566763148.458600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566763254.458800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566763515.459000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1566821720.463500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1566838055.464600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1566838339.464800"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1566872812.469400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1566881776.469600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1566883089.469800"
            },
            {
                "user": "UJUQESQ1Z",
                "ts": "1566900105.470200"
            },
            {
                "user": "UJUQESQ1Z",
                "ts": "1566900240.470500"
            },
            {
                "user": "UJUQESQ1Z",
                "ts": "1566900330.470700"
            },
            {
                "user": "UJUQESQ1Z",
                "ts": "1566900548.471000"
            },
            {
                "user": "U79HM6726",
                "ts": "1566908920.471600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lbo27",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In most programming languages, when you define a composite type (e.g. "
                            },
                            {
                                "type": "text",
                                "text": "class User {string name}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "), you define both - the business shape ('a user entity has one name') and also the memory layout used to represent it internally. Are there any languages that let you define these separately?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UJUQESQ1Z",
                    "U79HM6726"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566693327.442000",
        "client_msg_id": "f7cc6aed-745c-44fd-ae4d-1090f060c47e",
        "text": "OOP is an obstacle to progress, and I am finally being vindicated for loathing Java and refusing to use it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CXq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OOP is an obstacle to progress, and I am finally being vindicated for loathing Java and refusing to use it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "as you can see the classic Model 33 teletype was used.",
        "files": [
            {
                "id": "FMBT0LTM1",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UEQ6M68H0",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xfn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "as you can see the classic Model 33 teletype was used."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1566693415.442200",
        "client_msg_id": "fc1c4941-5c8e-46c1-adcc-1c3306527036",
        "thread_ts": "1566613671.428600",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566693614.442600",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1566693693.000000"
        },
        "client_msg_id": "74834dfc-5286-4021-8bf7-f586e71b8ccd",
        "text": "Model 33 Teletype was a very slow machine to type on, it heavily influenced the syntax of C. At the time Unix was a skunkworks kind of project competing against the MIT authored Multics operating system. Multics was far better than Unix. More secure, and instead of written in C was written in a much cleaner language called PL\/1. However Multics was a commercial project sponsored by GE\/Honeywell\/Bull, and when those 3 computer companies fell apart, Multics went down with it. Those old GE computers were a trip. Instead of things called Interrupts, they used the term \"Derail\", which refers to locomotives!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566613671.428600",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7hhT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Model 33 Teletype was a very slow machine to type on, it heavily influenced the syntax of C. At the time Unix was a skunkworks kind of project competing against the MIT authored Multics operating system. Multics was far better than Unix. More secure, and instead of written in C was written in a much cleaner language called PL\/1. However Multics was a commercial project sponsored by GE\/Honeywell\/Bull, and when those 3 computer companies fell apart, Multics went down with it. Those old GE computers were a trip. Instead of things called Interrupts, they used the term \"Derail\", which refers to locomotives!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1566693974.442900",
        "client_msg_id": "ee74d11b-d0f0-41f5-be78-aa805b1c7fb5",
        "text": "Edward de Jong, now weighing in at 50 milli-wolframs :smile:\n\nReminder to both of you that regular imperative programming (C, Pascal, Lisp, Oberon) also has mutable values and aliasing. I enjoy ripping into (mainstream! not Smalltalk!) OOP and Java as much as the next PL hipster, but it's a pretty low-brow activity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0e=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Edward de Jong, now weighing in at 50 milli-wolframs "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nReminder to both of you that regular imperative programming (C, Pascal, Lisp, Oberon) also has mutable values and aliasing. I enjoy ripping into (mainstream! not Smalltalk!) OOP and Java as much as the next PL hipster, but it's a pretty low-brow activity."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1566694942.443200",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1566853790.000000"
        },
        "client_msg_id": "8f587314-1459-4da3-8184-014899fc4652",
        "text": "Classes in languages like C++\/C#\/Java define both the type of entity and the memory layout for it. Languages like Haskell treat types more like an abstract algebra over combinations of data.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566688846.441800",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xhg2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Classes in languages like C++\/C#\/Java define both the type of entity and the memory layout for it. Languages like Haskell treat types more like an abstract algebra over combinations of data."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566706581.443500",
        "client_msg_id": "8d70b583-04e6-4349-9dec-437f87c4fbbd",
        "text": "With all due respect Kartik, almost the entire electronics industry is based on interchangeable parts. Within a family of chips like Schottky TTL, there were 100,000 chips you could freely interconnect, and build amazing stuff with, and not one in a 100 companies needed to drop down to custom programmed logic. Not every one wants to fiddle with NAND gates and flip-flops. A marketplace of interchangeable parts would be a boon to mankind, and if people could get rewarded for making a great looking pie chart module, why shouldn't they get rewarded? Isn't programming in the end a form of writing, of intellectual property creation, that should be protected and paid for just like we pay writers of novels and short stories and newspaper articles? If someone writes a great 500 words of code, and a million other programmers use it, if they get 10 cents each for each person who used it, that is good money. I find the open source movement tyrannical, because it is hostile to people being compensated. If we refuse to pay creative people, it will make the world a barren place. Look at how influential culturally the UK is; a fairly small country whose contributions in literature, art and film impact the world massively. That is because the Brits protect copyright very strongly. Compare that with a similar sized country where copyright and the status of IP creatives is negligible; they have art industry, and are stuck importing british materials because their own artists either starve, or move to the UK or some other better place. Re-inventing the wheel is a massive problem in computers, and i couldn't disagree more with your attitude.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566430717.339900",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R+\/w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With all due respect Kartik, almost the entire electronics industry is based on interchangeable parts. Within a family of chips like Schottky TTL, there were 100,000 chips you could freely interconnect, and build amazing stuff with, and not one in a 100 companies needed to drop down to custom programmed logic. Not every one wants to fiddle with NAND gates and flip-flops. A marketplace of interchangeable parts would be a boon to mankind, and if people could get rewarded for making a great looking pie chart module, why shouldn't they get rewarded? Isn't programming in the end a form of writing, of intellectual property creation, that should be protected and paid for just like we pay writers of novels and short stories and newspaper articles? If someone writes a great 500 words of code, and a million other programmers use it, if they get 10 cents each for each person who used it, that is good money. I find the open source movement tyrannical, because it is hostile to people being compensated. If we refuse to pay creative people, it will make the world a barren place. Look at how influential culturally the UK is; a fairly small country whose contributions in literature, art and film impact the world massively. That is because the Brits protect copyright very strongly. Compare that with a similar sized country where copyright and the status of IP creatives is negligible; they have art industry, and are stuck importing british materials because their own artists either starve, or move to the UK or some other better place. Re-inventing the wheel is a massive problem in computers, and i couldn't disagree more with your attitude."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1566707337.443700",
        "client_msg_id": "e8bbd058-52d6-4773-8dae-76e40e138694",
        "text": "Yes I'm certainly aware that my opinion\/attitude is less mainstream than yours. Also, I know computer chips exist; my claim is about software. I also think IP in software (including copyright of all kinds) has long been a net negative to mankind.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566430717.339900",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Og2DI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes I'm certainly aware that my opinion\/attitude is less mainstream than yours. Also, I know computer chips exist; my claim is about software. I also think IP in software (including copyright of all kinds) has long been a net negative to mankind."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566707378.443900",
        "client_msg_id": "c7c86016-ea5e-4d6c-8347-91ac23a70262",
        "text": "And I would disagree that people have been chasing re-use for 50 years. What has been chased for the last 50 years (and my 50th year of programming comes up next year), is vendor lock-in. Each dominant company develops their own operating systems, languages, and toolchains that are unique and separate from others, and sufficiently different so as to confound product vendors who interests naturally lie in reaching as many customers as possible. The tension between 3rd party developers and platform owners has always been one of mutual dislike. Without developers your platform dies a horrible death. Constant platform churn like Google and Apple make it a situation where you run as fast as you can to stay in the same place. I have seen Apple in the last few years kick out 50 of my iPhone Apps because i didn't update them for the notch, and just around the corner is OSX 10.15 which will kill off my Discus labeler, which sold a million copies and fed my family for 15 years, soon to be dead because they control one critical library that they are not going to update, and it is too much work to reinvent it. I want not only re-usable parts, but better software longevity, by avoiding as much as possible references to the OS in the code, so as to insulate it from disruption\/death. I have a painting program for kids called Flying Colors that is now freeware, and amazingly on Windows, it still runs in 256 color mode, because the hardware color cycling still works because the IBM PC hardware modes are still supported on all the video cards of today, and Windows 10 still allows 256 color mode by some miracle. That product is over 20 years old with zero modifications.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566430717.339900",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2VG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I would disagree that people have been chasing re-use for 50 years. What has been chased for the last 50 years (and my 50th year of programming comes up next year), is vendor lock-in. Each dominant company develops their own operating systems, languages, and toolchains that are unique and separate from others, and sufficiently different so as to confound product vendors who interests naturally lie in reaching as many customers as possible. The tension between 3rd party developers and platform owners has always been one of mutual dislike. Without developers your platform dies a horrible death. Constant platform churn like Google and Apple make it a situation where you run as fast as you can to stay in the same place. I have seen Apple in the last few years kick out 50 of my iPhone Apps because i didn't update them for the notch, and just around the corner is OSX 10.15 which will kill off my Discus labeler, which sold a million copies and fed my family for 15 years, soon to be dead because they control one critical library that they are not going to update, and it is too much work to reinvent it. I want not only re-usable parts, but better software longevity, by avoiding as much as possible references to the OS in the code, so as to insulate it from disruption\/death. I have a painting program for kids called Flying Colors that is now freeware, and amazingly on Windows, it still runs in 256 color mode, because the hardware color cycling still works because the IBM PC hardware modes are still supported on all the video cards of today, and Windows 10 still allows 256 color mode by some miracle. That product is over 20 years old with zero modifications."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1566709350.444100",
        "client_msg_id": "385353b7-0cfb-49a1-bb41-41c89e718585",
        "text": "That feels like a _non sequitur_. Sure, people have also been chasing other things for the last 50 years.\n\nIt's fair to disagree about the prospects of reuse. But I don't think it's contestable that it's an old dream.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566430717.339900",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bIoio",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That feels like a "
                            },
                            {
                                "type": "text",
                                "text": "non sequitur",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Sure, people have also been chasing other things for the last 50 years.\n\nIt's fair to disagree about the prospects of reuse. But I don't think it's contestable that it's an old dream."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566711897.444300",
        "client_msg_id": "b0af4c7f-1113-413b-9822-275579965d5d",
        "text": "excuse my bad writing, my point was that the Win32 graphics API was simple enough to emulate in the Microsoft OS as it evolved, and programs that strictly adhered to that API set still work well. That is to microsoft's credit, and shows that a fixed layer at the bottom can create stability. And you are correct that some people have pursued software components, and for brief periods of time such as with VB6 and Delphi, achieved it to some degree. However, the powers that be have done their level best to prevent it, because at present the Apple developer community is like Apple's private army of programmers, and they can't move their Swift code with the 10,000 API calls to OSX to other platforms.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566430717.339900",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "One2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "excuse my bad writing, my point was that the Win32 graphics API was simple enough to emulate in the Microsoft OS as it evolved, and programs that strictly adhered to that API set still work well. That is to microsoft's credit, and shows that a fixed layer at the bottom can create stability. And you are correct that some people have pursued software components, and for brief periods of time such as with VB6 and Delphi, achieved it to some degree. However, the powers that be have done their level best to prevent it, because at present the Apple developer community is like Apple's private army of programmers, and they can't move their Swift code with the 10,000 API calls to OSX to other platforms."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1566712809.444600",
        "client_msg_id": "aa1e82d1-3917-43b0-9f2a-032d4e145aed",
        "text": "I see. Interesting, thank you.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566430717.339900",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ljrI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see. Interesting, thank you."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1566712895.444800",
        "client_msg_id": "142d64f6-be8d-4264-b0dc-21bc40107e7c",
        "text": "How do you propose to oppose the powers that be in bringing about interchangeable parts?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566430717.339900",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/m9X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How do you propose to oppose the powers that be in bringing about interchangeable parts?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1566713516.445000",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1566713581.000000"
        },
        "client_msg_id": "d0e1e5f8-1168-4b46-9d52-0bbd02835cd0",
        "text": "It sounds like you're saying that there's a difference between a stable API and reusable components. A stable but complex and constantly growing API can create lock-in. To support exchange the API has to be simple and stay simple so that it can admit diverse implementations. Is that accurate?\n\nI agree with that. But there's more to reusable components than a simple, stable API with diverse implementations:\n\n• The universe of useful programs has to be codified into simple, stable APIs that all compose well with each other.\n• The diverse implementations have to have predictable guarantees on cross-cutting concerns like performance. See <http:\/\/akkartik.name\/images\/kiczales-oopsla94-black-boxes-reuse.ps> (there also seems to be a video for it at <https:\/\/www.youtube.com\/watch?v=5l2wMgm7ZOk>)\n• There have to be incentives for creating diverse implementations. (Legos themselves are a locked-in monopoly.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566430717.339900",
        "parent_user_id": "UEQ6M68H0",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Why Black Boxes are so Hard to Reuse, lecture by Gregor Kiczales",
                "title_link": "https:\/\/www.youtube.com\/watch?v=5l2wMgm7ZOk",
                "author_name": "Computer History Museum",
                "author_link": "https:\/\/www.youtube.com\/user\/ComputerHistory",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/5l2wMgm7ZOk\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Why Black Boxes are so Hard to Reuse, lecture by Gregor Kiczales",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/5l2wMgm7ZOk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/www.youtube.com\/watch?v=5l2wMgm7ZOk",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=5l2wMgm7ZOk"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xwU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It sounds like you're saying that there's a difference between a stable API and reusable components. A stable but complex and constantly growing API can create lock-in. To support exchange the API has to be simple and stay simple so that it can admit diverse implementations. Is that accurate?\n\nI agree with that. But there's more to reusable components than a simple, stable API with diverse implementations:\n\n• The universe of useful programs has to be codified into simple, stable APIs that all compose well with each other.\n• The diverse implementations have to have predictable guarantees on cross-cutting concerns like performance. See "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/images\/kiczales-oopsla94-black-boxes-reuse.ps"
                            },
                            {
                                "type": "text",
                                "text": " (there also seems to be a video for it at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=5l2wMgm7ZOk"
                            },
                            {
                                "type": "text",
                                "text": ")\n• There have to be incentives for creating diverse implementations. (Legos themselves are a locked-in monopoly.)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]