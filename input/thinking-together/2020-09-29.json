[
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1601364813.063200",
        "edited": {
            "user": "UPVBV34EL",
            "ts": "1601364898.000000"
        },
        "client_msg_id": "38c02b62-e231-4e2f-89e4-2de7fb66d6bc",
        "text": "Really interesting concept. As someone who is interested in Machine Learning on Code and focused to documentation, I can see huge value this can bring. But I still am not clear about the term `function` here. As a professional developer I write and maintain thousands of them regularly. And many of them are very project specific and involves the knowledge of the business rules or domain knowledge. How am I supposed to write them here? I mean they can contain sensitive information in the first place and also they can be pretty obscure for someone with no external knowledge of what problem they are trying to solve. Also, another thing I am not sure that is there some language from which those functions come? (like C, C++, JS, Python etc.) or they are an abstract representation of some of the basic computational concept that each language exposes?  This question, I believe, is close to what <@UN9SCH5RD> asked just before me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Smm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really interesting concept. As someone who is interested in Machine Learning on Code and focused to documentation, I can see huge value this can bring. But I still am not clear about the term "
                            },
                            {
                                "type": "text",
                                "text": "function",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " here. As a professional developer I write and maintain thousands of them regularly. And many of them are very project specific and involves the knowledge of the business rules or domain knowledge. How am I supposed to write them here? I mean they can contain sensitive information in the first place and also they can be pretty obscure for someone with no external knowledge of what problem they are trying to solve. Also, another thing I am not sure that is there some language from which those functions come? (like C, C++, JS, Python etc.) or they are an abstract representation of some of the basic computational concept that each language exposes?  This question, I believe, is close to what "
                            },
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " asked just before me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1601371542.064100",
        "client_msg_id": "9264c26b-a30a-4f19-bd64-a19f507bd09c",
        "text": "<@UAJKEBGP8> every field is working with the same raw resources. So there is going to be a huge overlap in tools, but they're all going to have different names. \n\nCan you give us more specific details about the problem your trying to solve?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601046462.012500",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A=gh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAJKEBGP8"
                            },
                            {
                                "type": "text",
                                "text": " every field is working with the same raw resources. So there is going to be a huge overlap in tools, but they're all going to have different names. \n\nCan you give us more specific details about the problem your trying to solve?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1601372359.064400",
        "client_msg_id": "66e5f393-3f6c-414f-9a1d-e6bdb2308513",
        "text": "<@UA14TGLTC> I'm a little confused as I've been livecoding scheme for 35 years. Would you say a bit more to help me understand what you mean?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601046462.012500",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+3v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " I'm a little confused as I've been livecoding scheme for 35 years. Would you say a bit more to help me understand what you mean?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1601373081.064700",
        "client_msg_id": "0c8eb803-f6bd-4dcf-a008-9c7acf643c99",
        "text": "Sure.  Liveness isn't required of Scheme though most Schemes support it.  In particular I remember R5RS (that's when I noticed and I could be wrong here since that was a while ago to say the least) does not mandate any sort of rich reflection or runtime interrogation of what's going on.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601046462.012500",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8ezG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure.  Liveness isn't required of Scheme though most Schemes support it.  In particular I remember R5RS (that's when I noticed and I could be wrong here since that was a while ago to say the least) does not mandate any sort of rich reflection or runtime interrogation of what's going on."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01BSAKUDJQ",
        "type": "message",
        "ts": "1601373697.064900",
        "edited": {
            "user": "U01BSAKUDJQ",
            "ts": "1601373838.000000"
        },
        "client_msg_id": "d8b6a4d2-8038-4809-b737-01dae49804b7",
        "text": "&gt; <@UAJKEBGP8> wrote:\n&gt; Why haven’t we seen a good live programming language for data science? It’s so ideal for it! Everything from sampling \/ streaming in data results to keep things live to the fact that data analysts \/ scientists want to move \/ iterate at the speed of thought, and most of data science is this type of curiosity driven stumbling around the data-dark\nTo a large extent, S and R aim to be that language, and always have.\n\nI've taken the following above from a slide in [History and Ecology of R](<https:\/\/calcul.math.cnrs.fr\/attachments\/spip\/IMG\/pdf\/r-history-ecology.pdf>) by Martyn Plummer, 2015:\n\n&gt; &gt; “We wanted users to be able to begin in an *interactive* *environment* [emph. Sietse], where they did not consciously think of themselves as programming. Then as their needs became clearer and their sophistication increased, they should be able to slide gradually into programming.”\n&gt; \n&gt; – John Chambers, Stages in the Evolution of S\n&gt; \n&gt; This philosophy was later articulated explicitly in Programming With Data (Chambers, 1998) as a kind of mission statement for S:\n&gt; \n&gt; &gt; \"To turn ideas into software, quickly and faithfully\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g1930c667fbd",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1930c667fbd3884fd581e95eb4d5b15c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Sietse",
            "real_name": "Sietse Brouwer",
            "display_name": "Sietse Brouwer",
            "team": "T5TCAFTA9",
            "name": "sbbrouwer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601046462.012500",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bgW",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAJKEBGP8"
                            },
                            {
                                "type": "text",
                                "text": " wrote:\nWhy haven’t we seen a good live programming language for data science? It’s so ideal for it! Everything from sampling \/ streaming in data results to keep things live to the fact that data analysts \/ scientists want to move \/ iterate at the speed of thought, and most of data science is this type of curiosity driven stumbling around the data-dark"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nTo a large extent, S and R aim to be that language, and always have.\n\nI've taken the following above from a slide in [History and Ecology of R]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/calcul.math.cnrs.fr\/attachments\/spip\/IMG\/pdf\/r-history-ecology.pdf"
                            },
                            {
                                "type": "text",
                                "text": ") by Martyn Plummer, 2015:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> “We wanted users to be able to begin in an "
                            },
                            {
                                "type": "text",
                                "text": "interactive",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "environment ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "[emph. Sietse], where they did not consciously think of themselves as programming. Then as their needs became clearer and their sophistication increased, they should be able to slide gradually into programming.”\n\n– John Chambers, Stages in the Evolution of S\n\nThis philosophy was later articulated explicitly in Programming With Data (Chambers, 1998) as a kind of mission statement for S:\n\n> \"To turn ideas into software, quickly and faithfully\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01BSAKUDJQ",
        "type": "message",
        "ts": "1601374667.065300",
        "client_msg_id": "0395d05b-f303-4338-a4ce-d6372d0d61d6",
        "text": "The 'iterate at the speed of thought' bit is especially interesting, because that implies interactive use, and that informs many of R and S's design choices.\n\nFor example, `library(my_package)` loads that package's components (functions, objects, etc.) directly into the global\/top-level namespace. Python, contrariwise, makes `import my_package`  create a module object `my_package`  that contains `my_package.glm` etc.\n\nPython's tradeoff favours codebase construction: you know the provenance of every name in your namespace, and you won't have namespace collisions. There's even a taboo on writing `from my_package import *`\n\nR's tradeoff, contrariwise, favours interactive development. You load a package because you want to use its functions; and you want those functions ready at hand, which means the global namespace and no prefixes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g1930c667fbd",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1930c667fbd3884fd581e95eb4d5b15c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Sietse",
            "real_name": "Sietse Brouwer",
            "display_name": "Sietse Brouwer",
            "team": "T5TCAFTA9",
            "name": "sbbrouwer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601046462.012500",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tf5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The 'iterate at the speed of thought' bit is especially interesting, because that implies interactive use, and that informs many of R and S's design choices.\n\nFor example, "
                            },
                            {
                                "type": "text",
                                "text": "library(my_package)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " loads that package's components (functions, objects, etc.) directly into the global\/top-level namespace. Python, contrariwise, makes "
                            },
                            {
                                "type": "text",
                                "text": "import my_package",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  create a module object "
                            },
                            {
                                "type": "text",
                                "text": "my_package",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  that contains "
                            },
                            {
                                "type": "text",
                                "text": "my_package.glm",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " etc.\n\nPython's tradeoff favours codebase construction: you know the provenance of every name in your namespace, and you won't have namespace collisions. There's even a taboo on writing "
                            },
                            {
                                "type": "text",
                                "text": "from my_package import *",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nR's tradeoff, contrariwise, favours interactive development. You load a package because you want to use its functions; and you want those functions ready at hand, which means the global namespace and no prefixes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1601375318.065500",
        "client_msg_id": "1f271b66-f3d5-40d1-9644-92e1117c9a21",
        "text": "<@U01BSAKUDJQ> Totally. I use R the same way I use Julia or any Lisp, hanging off of emacs allowing me to send forms interactively from the buffer, pull up a plot window, and so on. And, for all the warts of the language, if one stays in the TidyVerse it's a fairly agreeable experience.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601046462.012500",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Rm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01BSAKUDJQ"
                            },
                            {
                                "type": "text",
                                "text": " Totally. I use R the same way I use Julia or any Lisp, hanging off of emacs allowing me to send forms interactively from the buffer, pull up a plot window, and so on. And, for all the warts of the language, if one stays in the TidyVerse it's a fairly agreeable experience."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01BSAKUDJQ",
        "type": "message",
        "ts": "1601376239.065700",
        "edited": {
            "user": "U01BSAKUDJQ",
            "ts": "1601376529.000000"
        },
        "client_msg_id": "b94c86f4-bd03-4a80-9a0d-271df113b780",
        "text": "Yeah! And the Tidyverse, too, heartily favours interactive usage over programming. Take dplyr, for example: that you can type `data.frame(apples=1:5, pears=6:10) %&gt;% mutate(fruit = apples + pears)`  to compute `z`  is a big win for ergonomics. Alternatives like `df.fruit = df.apples + df.pears`  get real old real fast, in my unfortunately-extensive experience with Pandas. And `mutate(\"fruit = apples + pears\")`  limits you to whatever operators are allowed in that stringly mini-dsl.\n\nBut allowing unquoted names has a tradeoff: it disfavours _programming_ in the tidyverse. What if I'd like to write a function that does the same 'analysis', but is generic over column names?\n\n```add_fruit &lt;- function(df, col1, col2, colresult) {\n    # usage: addfruit(mydf, \"apples\", \"pears\", \"fruit\")\n    df %&gt;% mutate(colresult = col1 + col2\n}```\nwould get me an error saying 'no `col1` in `df`', and I'd need to do some contortions to make clear that I want to use the contents of `col1` as a name, rather than the name `col1`  itself.\n\nOther languages that make the same tradeoff:\n• the various shell languages (sh, fish, PowerShell), where bare words are literal, variables are $something, and the meaning of a literal is determined by the invoked command's argument parser. Like R, a language focused on interactive use.\n• Tcl, too: first word is a command, later words are command arguments, bare words are taken literally, $something denotes the contents of the 'something' variable. And Tcl, too, is focused on providing an interactive shell over lower libraries -- and even on making such shells easy to create.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g1930c667fbd",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1930c667fbd3884fd581e95eb4d5b15c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Sietse",
            "real_name": "Sietse Brouwer",
            "display_name": "Sietse Brouwer",
            "team": "T5TCAFTA9",
            "name": "sbbrouwer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601046462.012500",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Oq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah! And the Tidyverse, too, heartily favours interactive usage over programming. Take dplyr, for example: that you can type "
                            },
                            {
                                "type": "text",
                                "text": "data.frame(apples=1:5, pears=6:10) %>% mutate(fruit = apples + pears)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  to compute "
                            },
                            {
                                "type": "text",
                                "text": "z",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  is a big win for ergonomics. Alternatives like "
                            },
                            {
                                "type": "text",
                                "text": "df.fruit = df.apples + df.pears",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  get real old real fast, in my unfortunately-extensive experience with Pandas. And "
                            },
                            {
                                "type": "text",
                                "text": "mutate(\"fruit = apples + pears\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  limits you to whatever operators are allowed in that stringly mini-dsl.\n\nBut allowing unquoted names has a tradeoff: it disfavours "
                            },
                            {
                                "type": "text",
                                "text": "programming",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the tidyverse. What if I'd like to write a function that does the same 'analysis', but is generic over column names?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "add_fruit <- function(df, col1, col2, colresult) {\n    # usage: addfruit(mydf, \"apples\", \"pears\", \"fruit\")\n    df %>% mutate(colresult = col1 + col2\n}"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nwould get me an error saying 'no "
                            },
                            {
                                "type": "text",
                                "text": "col1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in "
                            },
                            {
                                "type": "text",
                                "text": "df",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "', and I'd need to do some contortions to make clear that I want to use the contents of "
                            },
                            {
                                "type": "text",
                                "text": "col1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as a name, rather than the name "
                            },
                            {
                                "type": "text",
                                "text": "col1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  itself.\n\nOther languages that make the same tradeoff:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the various shell languages (sh, fish, PowerShell), where bare words are literal, variables are $something, and the meaning of a literal is determined by the invoked command's argument parser. Like R, a language focused on interactive use."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Tcl, too: first word is a command, later words are command arguments, bare words are taken literally, $something denotes the contents of the 'something' variable. And Tcl, too, is focused on providing an interactive shell over lower libraries -- and even on making such shells easy to create."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1601385793.066300",
        "client_msg_id": "9a3d3ed4-4895-4465-a10d-9b6eb47e58c2",
        "text": "<@UA14TGLTC> <@U013ZLJARC7> One feature of Scheme that is a bit at odds with live coding (and thus the eternally running \"system\") is continuations. They make sense only in the context of a computation that has an end. A language designed for live-coding would use delimited continuations instead. Scheme implementations thus must treat the top level as something special.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601046462.012500",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+jydn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " One feature of Scheme that is a bit at odds with live coding (and thus the eternally running \"system\") is continuations. They make sense only in the context of a computation that has an end. A language designed for live-coding would use delimited continuations instead. Scheme implementations thus must treat the top level as something special."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601414768.067000",
        "client_msg_id": "b2d4d05f-8b5f-4f2f-a3f1-ae653680a635",
        "text": "<@U01BAS8GU86> - yes, tying it with the code examples on Wikipedia would make a lot of sense, I love the proposal! I added that to our task list! <https:\/\/meta.wikimedia.org\/wiki\/Abstract_Wikipedia\/Tasks#O30>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Oc8r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01BAS8GU86"
                            },
                            {
                                "type": "text",
                                "text": " - yes, tying it with the code examples on Wikipedia would make a lot of sense, I love the proposal! I added that to our task list! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/meta.wikimedia.org\/wiki\/Abstract_Wikipedia\/Tasks#O30"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01BAS8GU86"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601414826.067200",
        "client_msg_id": "49d85d2a-432b-455e-ace8-c62f37350602",
        "text": "<@U01BAS8GU86> we are also taking a very close look at WebAssembler. It seems indeed a good fit to avoid a lot of headaches and reduce the number of runtimes, if we can just use a front end compiler and compile to WASM, and then figure out security, privacy, etc. only once.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JdO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01BAS8GU86"
                            },
                            {
                                "type": "text",
                                "text": " we are also taking a very close look at WebAssembler. It seems indeed a good fit to avoid a lot of headaches and reduce the number of runtimes, if we can just use a front end compiler and compile to WASM, and then figure out security, privacy, etc. only once."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U01BAS8GU86",
                    "U013ZLJARC7",
                    "UJ6LDMMN0",
                    "USJ9LD0E4"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601415021.067500",
        "client_msg_id": "087e21bd-2206-499a-8f99-d1c8db8f29a0",
        "text": "<@UN9SCH5RD> I took a deeper look at FNO, and talked previously with Anastasia. I like it and it would be easy to export the content in FNO. There's also <http:\/\/codeontology.org\/> - the differences are instructive.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "attachments": [
            {
                "title": "CodeOntology - SPARQL Queries over Source Code",
                "title_link": "http:\/\/codeontology.org\/",
                "text": "CodeOntology is a semantic web ontology, extraction framework and dataset aggregator.",
                "fallback": "CodeOntology - SPARQL Queries over Source Code",
                "from_url": "http:\/\/codeontology.org\/",
                "service_icon": "http:\/\/codeontology.org\/favicon.ico",
                "service_name": "codeontology.org",
                "id": 1,
                "original_url": "http:\/\/codeontology.org\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vyW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " I took a deeper look at FNO, and talked previously with Anastasia. I like it and it would be easy to export the content in FNO. There's also "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/codeontology.org\/"
                            },
                            {
                                "type": "text",
                                "text": " - the differences are instructive."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601415404.067800",
        "client_msg_id": "13299f44-8073-452e-8396-dbc39044625a",
        "text": "<@UN9SCH5RD> regarding your second question, it is a little bit of both and neither: every function in the wiki will have a human readable documentation which will say what the function does, and tests, etc. Then there will be implementations in different programming languages. So, we might have, e.g. multiplication, and then an implementation in JavaScript and one in Scala. There can also be implementations which compose other functions. So one implementation of multiplication could be based on using the addition function, for example. If we have an implementation of addition in, say, Python, we can use the composition to execute multiplication in Python too, because if we know how to execute all the pieces multiplication is composed of in a specific programming language, we can also execute the composed result. This will often be less efficient than having a native implementation of multiplication in Python, but it should work. So it doesn't really translate the composition into native code, but it can still evaluate it, if that makes sense? I hope I made it a bit clear. Please keep asking! If I can't explain the system to the folks here, I am doomed :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eZW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " regarding your second question, it is a little bit of both and neither: every function in the wiki will have a human readable documentation which will say what the function does, and tests, etc. Then there will be implementations in different programming languages. So, we might have, e.g. multiplication, and then an implementation in JavaScript and one in Scala. There can also be implementations which compose other functions. So one implementation of multiplication could be based on using the addition function, for example. If we have an implementation of addition in, say, Python, we can use the composition to execute multiplication in Python too, because if we know how to execute all the pieces multiplication is composed of in a specific programming language, we can also execute the composed result. This will often be less efficient than having a native implementation of multiplication in Python, but it should work. So it doesn't really translate the composition into native code, but it can still evaluate it, if that makes sense? I hope I made it a bit clear. Please keep asking! If I can't explain the system to the folks here, I am doomed "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601415450.068000",
        "client_msg_id": "9bcd54ea-b1de-4d92-adfd-0f6add80157d",
        "text": "The goal is definitely not to replace current programming languages with one universal programming language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E4A\/A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The goal is definitely not to replace current programming languages with one universal programming language."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601415506.068200",
        "client_msg_id": "f9056ee3-6938-44c3-a803-5c51bae1374e",
        "text": "But the composition will feel a bit like a new programming language, I am just wary of actually calling it like that - it is just function application (and types, and tests, and literals, etc.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uYjA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But the composition will feel a bit like a new programming language, I am just wary of actually calling it like that - it is just function application (and types, and tests, and literals, etc.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601415771.068400",
        "client_msg_id": "52a7929f-8fa4-49ca-a9a0-f33fe926abc5",
        "text": "<@UPVBV34EL> yes, you are not supposed to write your private functions in the wiki. This is a public site, that anyone can use. This is for the functions that people will share, that people want to put into a public repository, a common library. So the wiki might have a function such as \"how to convert a gregorian calendar date to a julian calendar date\" but not \"how do I apply the coupon code in my internal system\". You will be welcome to _use_ functions from the repository in your code, but just as with Wikipedia or Wikidata, not all content makes sense in the global open repository.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/6\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UPVBV34EL"
                            },
                            {
                                "type": "text",
                                "text": " yes, you are not supposed to write your private functions in the wiki. This is a public site, that anyone can use. This is for the functions that people will share, that people want to put into a public repository, a common library. So the wiki might have a function such as \"how to convert a gregorian calendar date to a julian calendar date\" but not \"how do I apply the coupon code in my internal system\". You will be welcome to "
                            },
                            {
                                "type": "text",
                                "text": "use",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " functions from the repository in your code, but just as with Wikipedia or Wikidata, not all content makes sense in the global open repository."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UPVBV34EL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1601415831.068600",
        "client_msg_id": "0e5040a8-6ede-46df-96bb-1488c73d2232",
        "text": "<@UPVBV34EL> regarding the language where the implementations come from: the goal is to be multilingual regarding programming languages. We will probably start with JS, and Lua, but plan to expand to as many as we can safely support.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H7g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UPVBV34EL"
                            },
                            {
                                "type": "text",
                                "text": " regarding the language where the implementations come from: the goal is to be multilingual regarding programming languages. We will probably start with JS, and Lua, but plan to expand to as many as we can safely support."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UPVBV34EL"
                ],
                "count": 1
            }
        ]
    }
]