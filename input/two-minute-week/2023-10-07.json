[
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1696673547.276829",
        "client_msg_id": "0983687d-3276-4e8e-bcea-3adcdbdd0763",
        "text": "Yes sure LLMs could be useful for researchers, but I think labeling statistical jumbles as key facts isn't humane, and in the world of research will result in embarrassing retractions and probably legal issues. Sorry to be so down on this, I'm sure there are nice aspects to this work too, but I don't find it a nice experience to be presented with falsehoods like this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696606429.786849",
        "parent_user_id": "UQ2P2BYJU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t\/jBJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes sure LLMs could be useful for researchers, but I think labeling statistical jumbles as key facts isn't humane, and in the world of research will result in embarrassing retractions and probably legal issues. Sorry to be so down on this, I'm sure there are nice aspects to this work too, but I don't find it a nice experience to be presented with falsehoods like this."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U04QB9V2RNG",
                    "U04717WKH5K"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1696674415.111859",
        "client_msg_id": "b1915c1a-465f-4069-a264-aefc303e32aa",
        "text": "<@U0378MDUG1Y> Yes definitely! Conventional text-based programming languages are generally built on adjacency. This is a visual property in a way but I suppose a discrete one -- two things (characters, or words) are either adjacent or not -- so we don't tend to think of it as visuospatial.\nBox-and-wire dataflow languages like max\/pure data are built on connectedness, another discrete property. We tend to think of these as more visuospatial because you can arrange things how you like in a 2d arrangement, but this is all secondary notation rather than syntactical or semantic.\nProximity is where the arrangement enters the core language - things connect if they are proximal. This means you can assign additional meaning from _how_ proximal things are. A really nice, successful example of this is <http:\/\/reactable.com\/|the reactable>. I'm not exploring this in the particular demo at the top of the thread, but think there are a lot of possibilities here. I explored this sort of thing some years ago with <https:\/\/slab.org\/2013\/09\/13\/colourful-texture\/|a haskell-based FRP front-end>.\nContainment I guess is actually a separate issue. In this demo I'm exploring just drawing around groups of glyphs. In text-based systems we use parenthesis for this.\nOne nice thing about exploring proximity is the possibilities for collaboration. The reactable is again a really nice case study for this - they made it circular so there's no way 'up' and people can collaborate by standing around it. Way ahead of its time really.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696588167.703199",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vpqNX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0378MDUG1Y"
                            },
                            {
                                "type": "text",
                                "text": " Yes definitely! Conventional text-based programming languages are generally built on adjacency. This is a visual property in a way but I suppose a discrete one -- two things (characters, or words) are either adjacent or not -- so we don't tend to think of it as visuospatial.\nBox-and-wire dataflow languages like max\/pure data are built on connectedness, another discrete property. We tend to think of these as more visuospatial because you can arrange things how you like in a 2d arrangement, but this is all secondary notation rather than syntactical or semantic.\nProximity is where the arrangement enters the core language - things connect if they are proximal. This means you can assign additional meaning from "
                            },
                            {
                                "type": "text",
                                "text": "how",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " proximal things are. A really nice, successful example of this is "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/reactable.com\/",
                                "text": "the reactable"
                            },
                            {
                                "type": "text",
                                "text": ". I'm not exploring this in the particular demo at the top of the thread, but think there are a lot of possibilities here. I explored this sort of thing some years ago with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/slab.org\/2013\/09\/13\/colourful-texture\/",
                                "text": "a haskell-based FRP front-end"
                            },
                            {
                                "type": "text",
                                "text": ".\nContainment I guess is actually a separate issue. In this demo I'm exploring just drawing around groups of glyphs. In text-based systems we use parenthesis for this.\nOne nice thing about exploring proximity is the possibilities for collaboration. The reactable is again a really nice case study for this - they made it circular so there's no way 'up' and people can collaborate by standing around it. Way ahead of its time really."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0378MDUG1Y"
                ],
                "count": 1
            }
        ]
    }
]