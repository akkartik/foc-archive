[
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1687396860.016269",
        "client_msg_id": "1e316c24-bcbb-4760-a517-b74de2e94f36",
        "text": "I think this is a special case of the balance between safety and expressivity across all programming tools. Much like you can't let a language both be able to generate arbitrary assembly and also be safe, if you try too hard to make your UI framework generate accessible UIs, it will rule out tons of possible UIs, some of which even might have been fine a11y-wise. I tend to lean more towards power, but we'll need a spectrum of different tools forever. Best case the more restrictive ones are built on the more powerful ones in a principled way so it's not too awful if you need to break out.\n\nMore specific to a11y, the architecture I'd like to see is that we support completely reskinning our apps, so basically our data models and operations, with UIs designed from the ground up for vision impairment, mobility issues, etc, with their own idioms not tied down to standard GUI stuff. Retrofitting accessibility on a fundamentally visual medium is always going to be kinda meh at best. But you need that common model before this becomes, frankly, commercially feasible.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1687202413.704759",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TJTlT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think this is a special case of the balance between safety and expressivity across all programming tools. Much like you can't let a language both be able to generate arbitrary assembly and also be safe, if you try too hard to make your UI framework generate accessible UIs, it will rule out tons of possible UIs, some of which even might have been fine a11y-wise. I tend to lean more towards power, but we'll need a spectrum of different tools forever. Best case the more restrictive ones are built on the more powerful ones in a principled way so it's not too awful if you need to break out.\n\nMore specific to a11y, the architecture I'd like to see is that we support completely reskinning our apps, so basically our data models and operations, with UIs designed from the ground up for vision impairment, mobility issues, etc, with their own idioms not tied down to standard GUI stuff. Retrofitting accessibility on a fundamentally visual medium is always going to be kinda meh at best. But you need that common model before this becomes, frankly, commercially feasible."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01U19ECZTJ",
        "type": "message",
        "ts": "1687401098.287659",
        "client_msg_id": "b3ae232b-9a71-4863-a4f9-e258b3fe79e6",
        "text": "I think traditional MVC helps with with this. If the View isn't the app, just the View, and the underlying data and operations are in the Model, then you can have multiple kinds of views, possibility at the same time. Just like the classic MVC example where data (from the Model) appears in both a grid and a pie chart (2 Views) at the same time. A model can have a standard GUI View but also a separate text-to-speech UI. We did this with the ChromeOS system calculator by having a separate CalcSpeechView which was invisible from the traditional GUI point of view, but worked with screen readers to provide speech output: <https:\/\/github.com\/foam-framework\/foam\/blob\/2966cde661ccadbb8b1548fede78f6d67cc53ed5\/js\/foam\/apps\/calc\/CalcSpeechView.js>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d80d37c53cd4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-05\/1929520000754_d80d37c53cd4ee3c8f5f_72.png",
            "first_name": "",
            "real_name": "Kevin Greer",
            "display_name": "Kevin Greer",
            "team": "T5TCAFTA9",
            "name": "kgrgreer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1687202413.704759",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tTncV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think traditional MVC helps with with this. If the View isn't the app, just the View, and the underlying data and operations are in the Model, then you can have multiple kinds of views, possibility at the same time. Just like the classic MVC example where data (from the Model) appears in both a grid and a pie chart (2 Views) at the same time. A model can have a standard GUI View but also a separate text-to-speech UI. We did this with the ChromeOS system calculator by having a separate CalcSpeechView which was invisible from the traditional GUI point of view, but worked with screen readers to provide speech output: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/foam-framework\/foam\/blob\/2966cde661ccadbb8b1548fede78f6d67cc53ed5\/js\/foam\/apps\/calc\/CalcSpeechView.js"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1687401361.881219",
        "client_msg_id": "2C9671C5-5A03-4000-AFED-0E6F8CD9B756",
        "text": "Separate UI or UX layers to address accessibility requirements is something I hear proposed a lot in my line of work. I think it is a novel idea, but I caution against it as much more than a curiosity. \n\nIt sort of forces a collapsing of what it means to be “disabled” into a set of predetermined categories, which is probably the opposite direction we want to be moving in, for the most part, when creating accessible experiences.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1687202413.704759",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gWuLW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Separate UI or UX layers to address accessibility requirements is something I hear proposed a lot in my line of work"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I think it is a novel idea, but I caution against it as much more than a curiosity"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " \n\nIt sort of forces a collapsing of what it means to be “disabled” into a set of predetermined categories, which is probably the opposite direction we want to be moving in, for the most part, when creating accessible experiences"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]