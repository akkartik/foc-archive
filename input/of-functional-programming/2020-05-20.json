[
    {
        "user": "U78TZ437S",
        "type": "message",
        "ts": "1589966170.025100",
        "client_msg_id": "e81c0622-3cb7-4138-b0a4-8decb9465509",
        "text": "For a small Hindley Milner (Algorithm W) type checker check out this introductory paper: <http:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.65.7733&amp;rep=rep1&amp;type=pdf>\n\nand Lennart Augustusson has a few toy compilers for various small languages in his blog, e.g:\n<http:\/\/augustss.blogspot.com\/2007\/06\/simple-compiler-in-my-last-post-i.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga3a20a76a69",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/da3a20a76a69532fa83e790e89cb4c6c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "Eyal",
            "real_name": "Eyal Lotem",
            "display_name": "eyal",
            "team": "T5TCAFTA9",
            "name": "eyal.lotem",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589940714.024800",
        "parent_user_id": "UT60XSVCN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Lc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For a small Hindley Milner (Algorithm W) type checker check out this introductory paper: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.65.7733&rep=rep1&type=pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nand Lennart Augustusson has a few toy compilers for various small languages in his blog, e.g:\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/augustss.blogspot.com\/2007\/06\/simple-compiler-in-my-last-post-i.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1589977533.025300",
        "client_msg_id": "5eca530e-98f2-4183-a8b6-1a4633f66977",
        "text": "\"A nanopass framework for commercial compiler development\" (for Chez Scheme) by Andy Keep. <http:\/\/andykeep.com\/pubs\/dissertation.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589940714.024800",
        "parent_user_id": "UT60XSVCN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VnA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"A nanopass framework for commercial compiler development\" (for Chez Scheme) by Andy Keep. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/andykeep.com\/pubs\/dissertation.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1589977699.025500",
        "client_msg_id": "35de1cd2-de7c-4aa7-b001-9d2c08418cde",
        "text": "This project is open source and active. <http:\/\/nanopass.org\/> and <https:\/\/github.com\/nanopass>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589940714.024800",
        "parent_user_id": "UT60XSVCN",
        "attachments": [
            {
                "footer": "<https:\/\/github.com\/nanopass|@nanopass>",
                "id": 1,
                "thumb_height": 205,
                "thumb_width": 205,
                "thumb_url": "https:\/\/avatars0.githubusercontent.com\/u\/13802051?v=4",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1439581535,
                "color": "24292f",
                "fields": [
                    {
                        "title": "URL",
                        "value": "<http:\/\/nanopass.org>",
                        "short": true
                    },
                    {
                        "title": "Repositories",
                        "value": "3",
                        "short": true
                    }
                ],
                "fallback": "[no preview available]",
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/nanopass",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T+RW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This project is open source and active. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/nanopass.org\/"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/nanopass"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1589977899.025800",
        "client_msg_id": "46e49398-7976-4085-93a6-33cc613a104a",
        "text": "This is something I want to learn more about myself. I'm not happy with the compiler I wrote for my own functional language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589940714.024800",
        "parent_user_id": "UT60XSVCN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nx5M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is something I want to learn more about myself. I'm not happy with the compiler I wrote for my own functional language."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1589978095.026000",
        "client_msg_id": "b73bc745-a711-4d37-b957-ce7b98d82780",
        "text": "This blog post compares the nanopass approach to building a parser using parser combinators. &lt;<https:\/\/blog.sigplan.org\/2019\/07\/09\/my-first-fifteen-compilers\/>&gt; I hope the analogy is correct, because building a compiler by composing simple generic functional building blocks sounds like just the approach I need.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589940714.024800",
        "parent_user_id": "UT60XSVCN",
        "attachments": [
            {
                "service_name": "SIGPLAN Blog",
                "title": "My First Fifteen Compilers",
                "title_link": "https:\/\/blog.sigplan.org\/2019\/07\/09\/my-first-fifteen-compilers\/",
                "text": "We sometimes think of the number of passes in a compiler as a measure of the compiler’s complexity. But what if we could make compiler development more approachable by fully embracing the id…",
                "fallback": "SIGPLAN Blog: My First Fifteen Compilers",
                "image_url": "https:\/\/blog.sigplan.org\/wp-content\/uploads\/2019\/07\/shutterstock_306120221.jpg",
                "image_width": 393,
                "image_height": 250,
                "ts": 1562677203,
                "from_url": "https:\/\/blog.sigplan.org\/2019\/07\/09\/my-first-fifteen-compilers\/",
                "image_bytes": 5880099,
                "id": 1,
                "original_url": "https:\/\/blog.sigplan.org\/2019\/07\/09\/my-first-fifteen-compilers\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sM4n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This blog post compares the nanopass approach to building a parser using parser combinators. <"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.sigplan.org\/2019\/07\/09\/my-first-fifteen-compilers\/"
                            },
                            {
                                "type": "text",
                                "text": "> I hope the analogy is correct, because building a compiler by composing simple generic functional building blocks sounds like just the approach I need."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1589978796.026300",
        "client_msg_id": "9908d8ac-179e-48bc-bac9-a462b2f10493",
        "text": "Digging more into the idea of constructing a compiler by composing combinators. Here's a one page compiler written this way in Haskell that \"accepts a Turing-complete language and produces WebAssembly\". It's not an optimizing compiler, though. <https:\/\/crypto.stanford.edu\/~blynn\/lambda\/sk.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589940714.024800",
        "parent_user_id": "UT60XSVCN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HE6tc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Digging more into the idea of constructing a compiler by composing combinators. Here's a one page compiler written this way in Haskell that \"accepts a Turing-complete language and produces WebAssembly\". It's not an optimizing compiler, though. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/crypto.stanford.edu\/~blynn\/lambda\/sk.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1589979597.026600",
        "client_msg_id": "1cc80492-e327-4f84-812f-8b112e3dfe86",
        "text": "According to somebody on Hacker News &lt;<https:\/\/news.ycombinator.com\/item?id=15153956>&gt;,\n&gt; Chez Scheme [0] is written using the nanopass framework, and it's regarded as one of the fastest Scheme compilers in existence [1]. Before it was rewritten to use the nanopass system, Chez's compiler was known for its performance in terms of lines of code compiled per second; the rewrite slowed it down a bit, but the quality and performance of generated machine code improved. Andy Keep and Kent Dybvig wrote a paper about the project [2]. I haven't browsed the Chez source, but it's a good way to answer your question.\n&gt; [0] <https:\/\/github.com\/cisco\/ChezScheme>\n&gt; [1] <http:\/\/ecraven.github.io\/r7rs-benchmarks\/benchmark.html>\n&gt; [2] <https:\/\/www.cs.indiana.edu\/~dyb\/pubs\/commercial-nanopass.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589940714.024800",
        "parent_user_id": "UT60XSVCN",
        "attachments": [
            {
                "fallback": "cisco\/ChezScheme",
                "text": "Chez Scheme ",
                "title": "cisco\/ChezScheme",
                "footer": "<https:\/\/github.com\/cisco\/ChezScheme|cisco\/ChezScheme>",
                "id": 1,
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1460661025,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "5348",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "Scheme",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/cisco\/ChezScheme",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fv9Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "According to somebody on Hacker News <"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=15153956"
                            },
                            {
                                "type": "text",
                                "text": ">,\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Chez Scheme [0] is written using the nanopass framework, and it's regarded as one of the fastest Scheme compilers in existence [1]. Before it was rewritten to use the nanopass system, Chez's compiler was known for its performance in terms of lines of code compiled per second; the rewrite slowed it down a bit, but the quality and performance of generated machine code improved. Andy Keep and Kent Dybvig wrote a paper about the project [2]. I haven't browsed the Chez source, but it's a good way to answer your question.\n[0] "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/cisco\/ChezScheme"
                            },
                            {
                                "type": "text",
                                "text": "\n[1] "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/ecraven.github.io\/r7rs-benchmarks\/benchmark.html"
                            },
                            {
                                "type": "text",
                                "text": "\n[2] "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.indiana.edu\/~dyb\/pubs\/commercial-nanopass.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1589979839.026900",
        "client_msg_id": "6d7138b8-493c-436b-9902-09ed368e8381",
        "text": "Looking at the ChezScheme repository on github, it uses the nanopass framework on github (that I linked to earlier) as a dependency.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589940714.024800",
        "parent_user_id": "UT60XSVCN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vrJuU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looking at the ChezScheme repository on github, it uses the nanopass framework on github (that I linked to earlier) as a dependency."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1590000821.027100",
        "client_msg_id": "38c11b23-5a32-42d0-b54a-d6b7394fbc54",
        "text": "I really liked this programming language walkthrough for compiling a \"regular looking\" (looks imperative) language to continuation passing style (behaves like scheme + CPS):\n\n<http:\/\/lisperator.net\/pltut\/|http:\/\/lisperator.net\/pltut\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589940714.024800",
        "parent_user_id": "UT60XSVCN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jBnm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really liked this programming language walkthrough for compiling a \"regular looking\" (looks imperative) language to continuation passing style (behaves like scheme + CPS):\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/lisperator.net\/pltut\/",
                                "text": "http:\/\/lisperator.net\/pltut\/"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]