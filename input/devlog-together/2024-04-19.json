[
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1713586666.762849",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1713586770.000000"
        },
        "client_msg_id": "d6fc5519-f15e-4b74-ae41-99d8cf0cf408",
        "text": "I'm working on a similar, more manual approach to the problem of reversing functions with my <https:\/\/vezwork.github.io\/polylab\/dist\/demo\/bidirectionalParse\/> bidirectional language project. My approach, up until this point, has been to manually write the reverses of JS functions, and pair them up to form isomorphisms\/multidirectional functions. i.e. I manually write three cases for plus: c = a + b, a = c - b, b = c - a. I was going to continue this approach with other data types like array.splice etc.\nI like this approach because it is quite doable, and while the simple multidirectional functions themselves are not so expressive to use, once you start composing a bunch of them, you can pretty quickly build up some pretty interesting multidirectional functions, and you kind of get it for free because you can write code as if it were just normal functions, but then call them forward and sideways and backwards.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3b2f7aa271ab",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-15\/5729371230167_3b2f7aa271abae44baef_72.jpg",
            "first_name": "Elliot",
            "real_name": "Elliot",
            "display_name": "Elliot",
            "team": "T5TCAFTA9",
            "name": "vez",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kLULJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm working on a similar, more manual approach to the problem of reversing functions with my "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/vezwork.github.io\/polylab\/dist\/demo\/bidirectionalParse\/"
                            },
                            {
                                "type": "text",
                                "text": " bidirectional language project. My approach, up until this point, has been to manually write the reverses of JS functions, and pair them up to form isomorphisms\/multidirectional functions. i.e. I manually write three cases for plus: c = a + b, a = c - b, b = c - a. I was going to continue this approach with other data types like array.splice etc.\nI like this approach because it is quite doable, and while the simple multidirectional functions themselves are not so expressive to use, once you start composing a bunch of them, you can pretty quickly build up some pretty interesting multidirectional functions, and you kind of get it for free because you can write code as if it were just normal functions, but then call them forward and sideways and backwards."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1713587032.295439",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1713587068.000000"
        },
        "client_msg_id": "7726b150-9a05-4988-b681-6b71d5ccd10a",
        "text": "While I was learning about bidirectionality, I tried out MiniKanren. Its really cool because everything you write in it is a relation, which is incredibly powerful -- for example, given an output to a relation, you can get back ALL the possible inputs -- but at the cost of anything complex being hella slow. even something with a relatively simple definition like relational multiplication can get slow for reasonable size numbers I seem to remember.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3b2f7aa271ab",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-15\/5729371230167_3b2f7aa271abae44baef_72.jpg",
            "first_name": "Elliot",
            "real_name": "Elliot",
            "display_name": "Elliot",
            "team": "T5TCAFTA9",
            "name": "vez",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8opX0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "While I was learning about bidirectionality, I tried out MiniKanren. Its really cool because everything you write in it is a relation, which is incredibly powerful -- for example, given an output to a relation, you can get back ALL the possible inputs -- but at the cost of anything complex being hella slow. even something with a relatively simple definition like relational multiplication can get slow for reasonable size numbers I seem to remember."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1713588712.852449",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1713589413.000000"
        },
        "client_msg_id": "3840775d-0d47-4e34-86a7-7b63455128f1",
        "text": "Relating in concept to what <@UBKNXPBAB> talked about: I think one thing to check your intuition on is *continuity.* What I mean is, it might be worth asking yourself these questions:\ndo you have some sense of \"closeness\" of input values to your function?\n• numbers have an obvious sense of closeness that we learn in school. |a - b| is the distance between a and b.\n• you can have a sense of closeness of strings by an \"edit distance\" such as \"<https:\/\/en.wikipedia.org\/wiki\/Levenshtein_distance|Levenshtein distance>\".\n• arrays also could have an edit distance. Maybe array distance is sort of defined in terms of the distance of its entries? Is ['a',1,2] close to ['ab',1,2]? It probably depends on what array modifications you expect.\n• git diffs are a sort of measure of the difference between source files.\n• etc.\nand do you have a sense of closeness of output values to your function?\n\nif a function is continuous, that means that if you \"move\" your original input value to a new close input value, then the new output of your function should also be close to your original output.\nIs the function you are trying to reverse continuous?\nThe reverse of your function is also a function, is the reverse function continuous?\n• For an example, what about a reverse of the square function? the square of 4 could be 2 or -2, and generally the square root of any positive number could be positive or negative. If you want the reverse to be continuous and be single-valued then (I'm pretty sure) maybe you should definite square root to always be positive or always be negative OR you can make square root return a pair of both positive and negative and imagine that the pair lives in a 2d space. Both of these options make for a continuous reverse of the square function:\n    ◦ example 1: \n    ◦ 4 -sqrt-> 2\n    ◦ 4.1 -sqrt-> 2.02 :white_check_mark: 4.1 is close to 4 and 2.02 is close to 2 by number distance\n    ◦ example 2: \n    ◦ 4 -sqrt-> [-2,2]\n    ◦ 4.1 -sqrt-> [-2.02,2.02] :white_check_mark: 4.1 is close to 4 and  [-2.02,2.02] is close to [-2,2] by distance of 2d points\nContinuity is useful for thinking about user experience because as time slowly changes, or user input slowly changes, or values slowly change, continuity says that related things don't \"jump around\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3b2f7aa271ab",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-15\/5729371230167_3b2f7aa271abae44baef_72.jpg",
            "first_name": "Elliot",
            "real_name": "Elliot",
            "display_name": "Elliot",
            "team": "T5TCAFTA9",
            "name": "vez",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hwDvj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Relating in concept to what "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " talked about: I think one thing to check your intuition on is "
                            },
                            {
                                "type": "text",
                                "text": "continuity. ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "What I mean is, it might be worth asking yourself these questions:\ndo you have some sense of \"closeness\" of input values to your function?\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "numbers have an obvious sense of closeness that we learn in school. |a - b| is the distance between a and b."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "you can have a sense of closeness of strings by an \"edit distance\" such as \""
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/en.wikipedia.org\/wiki\/Levenshtein_distance",
                                        "text": "Levenshtein distance"
                                    },
                                    {
                                        "type": "text",
                                        "text": "\"."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "arrays also could have an edit distance. Maybe array distance is sort of defined in terms of the distance of its entries? Is ['a',1,2] close to ['ab',1,2]? It probably depends on what array modifications you expect."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "git diffs are a sort of measure of the difference between source files."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "etc."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and do you have a sense of closeness of output values to your function?\n\nif a function is continuous, that means that if you \"move\" your original input value to a new close input value, then the new output of your function should also be close to your original output.\nIs the function you are trying to reverse continuous?\nThe reverse of your function is also a function, is the reverse function continuous?\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "For an example, what about a reverse of the square function? the square of 4 could be 2 or -2, and generally the square root of any positive number could be positive or negative. If you want the reverse to be continuous and be single-valued then (I'm pretty sure) maybe you should definite square root to always be positive or always be negative OR you can make square root return a pair of both positive and negative and imagine that the pair lives in a 2d space. Both of these options make for a continuous reverse of the square function:"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "example 1: "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "4 -sqrt-> 2"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "4.1 -sqrt-> 2.02 "
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "white_check_mark",
                                        "unicode": "2705"
                                    },
                                    {
                                        "type": "text",
                                        "text": " 4.1 is close to 4 and 2.02 is close to 2 by number distance"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "example 2: "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "4 -sqrt-> [-2,2]"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "4.1 -sqrt-> [-2.02,2.02] "
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "white_check_mark",
                                        "unicode": "2705"
                                    },
                                    {
                                        "type": "text",
                                        "text": " 4.1 is close to 4 and  [-2.02,2.02] is close to [-2,2] by distance of 2d points"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nContinuity is useful for thinking about user experience because as time slowly changes, or user input slowly changes, or values slowly change, continuity says that related things don't \"jump around\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1713590248.138629",
        "client_msg_id": "f9b37755-feaa-4db7-97f1-d564422fd6e1",
        "text": "Continuity could be helpful for automating reversal of functions too. If you define some sense of closeness on a datatype, then given an original input and ouput, and given a new output thats close to the original output (maybe assuming the user nudged the output value or something) then you can search only close around the original input value to find a new input.\nThis could potentially narrow down the search space a lot.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3b2f7aa271ab",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-15\/5729371230167_3b2f7aa271abae44baef_72.jpg",
            "first_name": "Elliot",
            "real_name": "Elliot",
            "display_name": "Elliot",
            "team": "T5TCAFTA9",
            "name": "vez",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nagwC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Continuity could be helpful for automating reversal of functions too. If you define some sense of closeness on a datatype, then given an original input and ouput, and given a new output thats close to the original output (maybe assuming the user nudged the output value or something) then you can search only close around the original input value to find a new input.\nThis could potentially narrow down the search space a lot."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1713590303.938349",
        "client_msg_id": "d492a99d-0329-4b50-9f87-c6935cbe29c6",
        "text": "This is still pretty theoretical though. I'll try to think about more concrete ways to approach this in JS. I'll also try to think about more concepts that can help constrain or reason about bidirectionality.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3b2f7aa271ab",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-15\/5729371230167_3b2f7aa271abae44baef_72.jpg",
            "first_name": "Elliot",
            "real_name": "Elliot",
            "display_name": "Elliot",
            "team": "T5TCAFTA9",
            "name": "vez",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YoZu6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is still pretty theoretical though. I'll try to think about more concrete ways to approach this in JS. I'll also try to think about more concepts that can help constrain or reason about bidirectionality."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713591339.411189",
        "client_msg_id": "A987615C-90BB-4D86-B4B3-4C7FABA01BA7",
        "text": "That idea of manually writing bidirectional versions of functions actually lines up with what I have in mind. Like, my plan is to start with the simplest \/ dumbest thing that'll work, then gradually (likely manually) add better behaviour where it's most useful. So for instance, the \"automatic\" reverse version of a math function could just return 0 (or 1, or NaN), for string functions return empty string, etc. Just return values that are likely to be a fixed point, even if it's totally wrong. It'll be a useful (and quick) enabler for what I want to explore.\n\nAnd then yeah, on top of that I can begin layering in different improvements. A little gradient descent here, maybe minikanren there, maybe sprinkle some GPT bullshit on top. Anything will be an improvement. The suggestions you have about nudging values and treating the error as a point on 2D space are appreciated, since that's the fuzzy frontier of my understanding for how to do a good job of this. Like, my gut says that making x + y = z reversible could be done nicely by creating a special pair of values for x and y that preserve the constraint that they must add to z. But exactly how to do that, I'm not sure yet.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r1YsY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That idea of manually writing bidirectional versions of functions actually lines up with what I have in mind. Like, my plan is to start with the simplest \/ dumbest thing that'll work, then gradually (likely manually) add better behaviour where it's most useful. So for instance, the \"automatic\" reverse version of a math function could just return 0 (or 1, or NaN), for string functions return empty string, etc. Just return values that are likely to be a fixed point, even if it's totally wrong"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " It'll be a useful (and quick) enabler for what I want to explore.\n\nAnd then yeah, on top of that I can begin layering in different improvements"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " A little gradient descent here, maybe minikanren there, maybe sprinkle some GPT bullshit on top"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Anything will be an improvement. The suggestions you have about nudging values and treating the error as a point on 2D space are appreciated, since that's the fuzzy frontier of my understanding for how to do a good job of this"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Like, my gut says that making x + y = z reversible could be done nicely by creating a special pair of values for x and y that preserve the constraint that they must add to z. But exactly how to do that, I'm not sure yet"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    }
]