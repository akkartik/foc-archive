[
    {
        "user": "U02C3SH9L2J",
        "type": "message",
        "ts": "1640091716.305700",
        "client_msg_id": "ae5d9a1c-837d-49a6-a653-8357a2b973c4",
        "text": "Yeah I love that idea!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c32c2c4d6375",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-21\/5459215329909_c32c2c4d6375f7ce1819_72.png",
            "first_name": "Matthew",
            "real_name": "Matthew Linkous",
            "display_name": "Matthew Linkous",
            "team": "T5TCAFTA9",
            "name": "matt386",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1640016053.303100",
        "parent_user_id": "U02C3SH9L2J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CIiEO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah I love that idea!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1640105186.324800",
        "client_msg_id": "F8D9772F-4FD3-4FEE-8512-DB4C556F90D7",
        "text": "So let’s take what I think is one of the most central features of Rich’s view, complecting.\n\nThere is something absolutely right about about avoid complecting things. At the same time, what doesn’t get talked about much is that what you consider complecting or not is actually relative to your own concerns, to the concepts in your language, etc. \n\nI’ll give one simple of example of this. In C\/C++ style languages, there is an important distinction between allocation memory, and initializing that memory. There are many programmers who dislike the complecting of these two things. They believe that these are separate concerns and should be handled separately.\n\nThis of course does not make Rich’s list of things that complect. And for good reason. On the jvm, with its memory model, this is less of a concern, and really something you don’t have direct control over. But yet, complecting is 1) supposed to be an objective measure and 2) something to avoid. \n\nSo, is allocation vs initialization complecting? Is it just the good kind of complecting? How do we decide? I’d say that complecting is much more relative than Rich suggests. \n\n\nTo further look at trade offs being made, consider immutable datastructures. Immutability is fantastic. It really helps you reason about code. But a full fledge immutable only style of programming depends on the underlying memory system in order to be efficient.\n\nWhen I was first learning rust, I tried to write rust like I did my clojure. And I found that my rust was barely if at all faster than the clojure code I wrote. Why? Because in tight loops I was allocating and cleaning up intermediate data structures. Due to generational garbage collection on the jvm, this pattern is cheap. But not so in rust. \n\nInstead what I found is that mutability becomes less difficult to reason about in rust and waaaaay more performant due to its borrow checker. \n\nMy basic point is that we need pay attention to our goals and our context. There are things that Rich criticizes, that with the right goals and context are incredibly valuable. And on the same hand there are things that Rich embraces that with the wrong goals and context can be incredibly detrimental.\n\nSo given Clojure’s goals and context I think it succeeds quite a bit. There have been some failures along the way (spec). But overall it is a great language to learn from and a very productive language for certain classes of applications.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1638792666.189800",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Rv=d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So let’s take what I think is one of the most central features of Rich’s view, complecting.\n\nThere is something absolutely right about about avoid complecting things. At the same time, what doesn’t get talked about much is that what you consider complecting or not is actually relative to your own concerns, to the concepts in your language, etc. \n\nI’ll give one simple of example of this. In C\/C++ style languages, there is an important distinction between allocation memory, and initializing that memory. There are many programmers who dislike the complecting of these two things. They believe that these are separate concerns and should be handled separately.\n\nThis of course does not make Rich’s list of things that complect. And for good reason. On the jvm, with its memory model, this is less of a concern, and really something you don’t have direct control over. But yet, complecting is 1) supposed to be an objective measure and 2) something to avoid. \n\nSo, is allocation vs initialization complecting? Is it just the good kind of complecting? How do we decide? I’d say that complecting is much more relative than Rich suggests. \n\n\nTo further look at trade offs being made, consider immutable datastructures. Immutability is fantastic. It really helps you reason about code. But a full fledge immutable only style of programming depends on the underlying memory system in order to be efficient.\n\nWhen I was first learning rust, I tried to write rust like I did my clojure. And I found that my rust was barely if at all faster than the clojure code I wrote. Why? Because in tight loops I was allocating and cleaning up intermediate data structures. Due to generational garbage collection on the jvm, this pattern is cheap. But not so in rust. \n\nInstead what I found is that mutability becomes less difficult to reason about in rust and waaaaay more performant due to its borrow checker. \n\nMy basic point is that we need pay attention to our goals and our context. There are things that Rich criticizes, that with the right goals and context are incredibly valuable. And on the same hand there are things that Rich embraces that with the wrong goals and context can be incredibly detrimental.\n\nSo given Clojure’s goals and context I think it succeeds quite a bit. There have been some failures along the way (spec). But overall it is a great language to learn from and a very productive language for certain classes of applications."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U02M6PM725T"
                ],
                "count": 1
            },
            {
                "name": "point_up_2",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UF1ATC4RF",
        "type": "message",
        "ts": "1640119884.325500",
        "client_msg_id": "64703674-b2fb-4472-b33e-bc17d8dde13c",
        "text": "<https:\/\/news.ycombinator.com\/item?id=29590681>\n&gt; *Ask HN: How would a programming language look if designed by non-programmer*\n&gt; Since it’s hard to find such a person, who understands CS\/Math\/can program machines but never used “normal” programming languages\n&gt; I do wonder how it’d be designed, maybe current approach sucks?\n&gt; OOP is beautiful itself, it *enables normal people* to model complex systems that’ll be running on computers, but can we get even better?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f7d23ee4d8b2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-24\/1069322068471_f7d23ee4d8b2dbb3c1ad_72.jpg",
            "first_name": "Deepak",
            "real_name": "Deepak Karki",
            "display_name": "karki",
            "team": "T5TCAFTA9",
            "name": "deepak6k",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1640119884.325500",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1642171112.036800",
        "reply_users": [
            "U013ZLJARC7",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "U013ZLJARC7",
                "ts": "1640606583.330300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1642171112.036800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2xjYl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=29590681"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ask HN: How would a programming language look if designed by non-programmer",
                                "style": {
                                    "bold": true,
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nSince it’s hard to find such a person, who understands CS\/Math\/can program machines but never used “normal” programming languages\nI do wonder how it’d be designed, maybe current approach sucks?\nOOP is beautiful itself, it "
                            },
                            {
                                "type": "text",
                                "text": "enables normal people",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to model complex systems that’ll be running on computers, but can we get even better?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAJKEBGP8",
        "type": "message",
        "ts": "1640129361.326500",
        "client_msg_id": "c017372f-ecee-4bf3-86c7-d64d15feb1c2",
        "text": "My answer to this question got to the top of the thread: <https:\/\/news.ycombinator.com\/item?id=29625625>\n\nIt was a hurried response for sure, but I guess it was still a nice reminder",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "72578ab3b4f8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-09\/2610495978720_72578ab3b4f8ab9ef250_72.jpg",
            "first_name": "Srini",
            "real_name": "Srini K",
            "display_name": "Srini K",
            "team": "T5TCAFTA9",
            "name": "skadamat",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1640129361.326500",
        "reply_count": 11,
        "reply_users_count": 4,
        "latest_reply": "1641211840.345900",
        "reply_users": [
            "U02C3SH9L2J",
            "UCUSW7WVD",
            "UJBAJNFLK",
            "UJFN50C00"
        ],
        "replies": [
            {
                "user": "U02C3SH9L2J",
                "ts": "1640202672.327900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1640206934.328300"
            },
            {
                "user": "U02C3SH9L2J",
                "ts": "1640216874.328500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1640219724.328700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1640246821.328900"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1640256507.329100"
            },
            {
                "user": "U02C3SH9L2J",
                "ts": "1640272340.329300"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1640335573.330000"
            },
            {
                "user": "UJFN50C00",
                "ts": "1641211624.345400"
            },
            {
                "user": "UJFN50C00",
                "ts": "1641211755.345700"
            },
            {
                "user": "UJFN50C00",
                "ts": "1641211840.345900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tD9u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My answer to this question got to the top of the thread: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=29625625"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt was a hurried response for sure, but I guess it was still a nice reminder"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEZQXJK9V",
                    "U02P8MEK68P",
                    "UJFN50C00"
                ],
                "count": 3
            }
        ]
    }
]