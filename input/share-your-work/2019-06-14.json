[
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560498503.024100",
        "client_msg_id": "83b410fa-0f2d-4285-8476-6272eccea5d3",
        "text": "I don't see the value of that.. the type system is already so permissive, that I rarely run into it.. moving some fraction of errors from compile time to runtime wouldn't improve things, and possibly make things worse",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559892828.012900",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dtfCT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't see the value of that.. the type system is already so permissive, that I rarely run into it.. moving some fraction of errors from compile time to runtime wouldn't improve things, and possibly make things worse"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1560498796.025700",
        "client_msg_id": "808EE2DF-F4C6-4BD2-AA87-1F5401A5A2AD",
        "text": "You’ll still get the errors in compile time, but could also run despite it and get them in run time with values if you want that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559892828.012900",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cEQS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You’ll still get the errors in compile time, but could also run despite it and get them in run time with values if you want that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560514446.025900",
        "edited": {
            "user": "UHDQ62M4P",
            "ts": "1560514487.000000"
        },
        "client_msg_id": "093f4c29-dcd6-472a-b352-08c45ce4df65",
        "text": "Ah ok, I guess that is a fun combination. Seems still limited in appliccability though: I don't spend a lot of time with my program in a state that it has type errors, and only in a part of the code that I know is not essential to run it, and I have a need to run the program right now.. seems niche. On the other hand, it should be very easy to implement: I can simply insert a magic type coercion node, and turn the error into a \"warning\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559892828.012900",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1qLtW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah ok, I guess that is a fun combination. Seems still limited in appliccability though: I don't spend a lot of time with my program in a state that it has type errors, and only in a part of the code that I know is not essential to run it, and I have a need to run the program right now.. seems niche. On the other hand, it should be very easy to implement: I can simply insert a magic type coercion node, and turn the error into a \"warning\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1560530759.026700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1560531011.000000"
        },
        "client_msg_id": "849dd85a-5f53-49ee-86a8-8c4996ab2761",
        "text": "I would permit `(first (top-level programming language called Storyscript))` but not `((first top-level programming language) called Storyscript)`.\n\nJokes aside — I still want to know what is meant by \"top-level\". I can't imagine a definition for that term that's both _meaningful_ and _true_. In the absence of those qualities, it fails the test for good marketing — you want to show your audience why your thing is truly good on its own merits, without any exaggeration or misdirection.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560413561.016100",
        "parent_user_id": "UJKKBAMLL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FS=i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would permit "
                            },
                            {
                                "type": "text",
                                "text": "(first (top-level programming language called Storyscript))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but not "
                            },
                            {
                                "type": "text",
                                "text": "((first top-level programming language) called Storyscript)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nJokes aside — I still want to know what is meant by \"top-level\". I can't imagine a definition for that term that's both "
                            },
                            {
                                "type": "text",
                                "text": "meaningful",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "true",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". In the absence of those qualities, it fails the test for good marketing — you want to show your audience why your thing is truly good on its own merits, without any exaggeration or misdirection."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1560531067.027000",
        "client_msg_id": "8e70b9a5-d8a0-4ee7-941e-ec00a18fc373",
        "text": "\"Application Storytelling™\" is also meaningless to me. Is Ruby on Rails an \"Application Character\"?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560413561.016100",
        "parent_user_id": "UJKKBAMLL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UgM4R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Application Storytelling™\" is also meaningless to me. Is Ruby on Rails an \"Application Character\"?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1560531691.027200",
        "client_msg_id": "725f230f-679b-47b5-8d7a-40f3822b3abc",
        "text": "Of all of it, I actually think \"Bash for the cloud\" is the best tagline, though it surely wouldn't hurt to find a different word than \"bash\" (since I don't know anyone who has a positive relationship with bash).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560413561.016100",
        "parent_user_id": "UJKKBAMLL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l\/+r6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of all of it, I actually think \"Bash for the cloud\" is the best tagline, though it surely wouldn't hurt to find a different word than \"bash\" (since I don't know anyone who has a positive relationship with bash)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1560532648.027400",
        "client_msg_id": "d30cba4a-d2e6-4bf6-8821-1b98b0577108",
        "text": "Also haven’t mentioned, that it may be that the branch containing the error isn’t reached in run-time, so you won’t necessarily even get a the error in run-time. But the compiler still tells you about it though.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559892828.012900",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Daa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also haven’t mentioned, that it may be that the branch containing the error isn’t reached in run-time, so you won’t necessarily even get a the error in run-time. But the compiler still tells you about it though."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560533926.027600",
        "client_msg_id": "fef35626-0017-4136-aec8-05df2129b9de",
        "text": "Right, I see that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559892828.012900",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ctWP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right, I see that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJPHQ8Z3N",
        "type": "message",
        "ts": "1560543177.028400",
        "client_msg_id": "d65c4c0a-a656-421d-af34-2de4aafdbc16",
        "text": "Hey <@UHDQ62M4P>, so what's that memory-optimized WASM language idea you mention at the end of your talk?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "geb6636f344e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/deb6636f344e6071fd9fe70724825ac6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Sébastien",
            "real_name": "Sébastien",
            "display_name": "Sébastien",
            "team": "T5TCAFTA9",
            "name": "sebastien.pierre",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559892828.012900",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "940Qv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey "
                            },
                            {
                                "type": "user",
                                "user_id": "UHDQ62M4P"
                            },
                            {
                                "type": "text",
                                "text": ", so what's that memory-optimized WASM language idea you mention at the end of your talk?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560548246.028600",
        "client_msg_id": "23202b0a-adaa-4aac-b129-0fa59c480b2a",
        "text": "The main use case of running in half broken state is when testing while iterating over a design. The change (for a function, a type or something else) is half done, so I don't want to fixup all the use sites. I just want to see how it looks for the one test case I'm working with and try variations, refinements, etc. Eventually I still want a list of everything else that's broken and needs fixing. Python lets me do the former and kind of allows a different style of working. You can't even imagine this workflow in Java because any change has to be 'complete'.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559892828.012900",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H7XN=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The main use case of running in half broken state is when testing while iterating over a design. The change (for a function, a type or something else) is half done, so I don't want to fixup all the use sites. I just want to see how it looks for the one test case I'm working with and try variations, refinements, etc. Eventually I still want a list of everything else that's broken and needs fixing. Python lets me do the former and kind of allows a different style of working. You can't even imagine this workflow in Java because any change has to be 'complete'."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560548839.028800",
        "client_msg_id": "0356ed6b-10ce-4937-aa14-be5313b6fc53",
        "text": "<@UJPHQ8Z3N> hah, I'm still playing around with that, and it is not actually wasm specific. Imagine a stack of variable sized buffers all linearly allocated in memory representing a variety of data structures, and a language that knows how to efficiently operate on them (with minimal memmove\/memcpy). That's about the best summary I can give without writing a large document :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559892828.012900",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ke3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJPHQ8Z3N"
                            },
                            {
                                "type": "text",
                                "text": " hah, I'm still playing around with that, and it is not actually wasm specific. Imagine a stack of variable sized buffers all linearly allocated in memory representing a variety of data structures, and a language that knows how to efficiently operate on them (with minimal memmove\/memcpy). That's about the best summary I can give without writing a large document "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1560549033.029200",
        "client_msg_id": "c16732f0-eeba-4bcd-a191-197721520e5f",
        "text": "<@U8A5MS6R1> I can see that use case, but I still think that if you change, say, the signature of a function, which call sites you can ignore for now because they're not actually executed is kinda arbitrary and often hard to know. So you compile, and there are compile errors, and you choose to ignore them, because you think they are not relevant, but then one is necessary for the current execution path anyway and now you get a dynamic error much later. Quite a bit of time lost. Just fixing everything statically seems like a better default to me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559892828.012900",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Bk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " I can see that use case, but I still think that if you change, say, the signature of a function, which call sites you can ignore for now because they're not actually executed is kinda arbitrary and often hard to know. So you compile, and there are compile errors, and you choose to ignore them, because you think they are not relevant, but then one is necessary for the current execution path anyway and now you get a dynamic error much later. Quite a bit of time lost. Just fixing everything statically seems like a better default to me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560549794.029400",
        "client_msg_id": "00322024-3958-4952-86ba-770af78345a6",
        "text": "<@UHDQ62M4P> yes what to fix is very context dependent, but I don't think it's hard to discover. I suppose time lost depends on how fast it compiles and runs, and how many other things need fixing. E.g. in Python with no compile time, if I change a function and run a test which takes &lt;1s, I get immediate feedback on the argument mismatch, but only for the code path actually hit. I can fix these and run my current test scenario to see how it actually works.\n\nOne other pattern is sometimes you fix things just to appease the compiler. E.g if a function takes a new param, it may need some work to figure out the right value to pass in at each call site. One is tempted to just pass in a `0` or default value in many places 'to make the compiler pass' with the idea that these will be dealt with later - because again, one's context at this moment is the current test only. All the compiler appeasement does is move the problem outside what the compiler can track.\n\nI do think in the end this pattern depends a lot on the kind of project and working style you have. I think this is a bigger problem in larger code bases, because you have more things to fix up for any change.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559892828.012900",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iPIbj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHDQ62M4P"
                            },
                            {
                                "type": "text",
                                "text": " yes what to fix is very context dependent, but I don't think it's hard to discover. I suppose time lost depends on how fast it compiles and runs, and how many other things need fixing. E.g. in Python with no compile time, if I change a function and run a test which takes <1s, I get immediate feedback on the argument mismatch, but only for the code path actually hit. I can fix these and run my current test scenario to see how it actually works.\n\nOne other pattern is sometimes you fix things just to appease the compiler. E.g if a function takes a new param, it may need some work to figure out the right value to pass in at each call site. One is tempted to just pass in a "
                            },
                            {
                                "type": "text",
                                "text": "0",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or default value in many places 'to make the compiler pass' with the idea that these will be dealt with later - because again, one's context at this moment is the current test only. All the compiler appeasement does is move the problem outside what the compiler can track.\n\nI do think in the end this pattern depends a lot on the kind of project and working style you have. I think this is a bigger problem in larger code bases, because you have more things to fix up for any change."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560550121.029700",
        "client_msg_id": "841677ef-4908-4eb7-957e-3c43941eb00a",
        "text": "Looks great!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559859894.009500",
        "parent_user_id": "U79HM6726",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vHbO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks great!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    }
]