[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1579248097.004700",
        "client_msg_id": "744BC198-A372-4C2F-8E9E-F7611F4DA775",
        "text": "I have been surprised by just how present conferencing in VR is, really qualitatively different than video.  I can even imagine a future where VR is preferable over face-to-face.  For instance, the ability for multiple people to have the exact same perspective on an object.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578859395.088900",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=3pId",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have been surprised by just how present conferencing in VR is, really qualitatively different than video.  I can even imagine a future where VR is preferable over face-to-face.  For instance, the ability for multiple people to have the exact same perspective on an object."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1579249905.005400",
        "edited": {
            "user": "UN57U8V53",
            "ts": "1579249995.000000"
        },
        "client_msg_id": "6c2c5417-35b3-4731-a805-9ad1e7e06cd1",
        "text": "This is actually an interesting case and way easier in a dependently typed language. Why? Because if you add two measurements with different units, the return value type isn't obvious, and likely the result type is only known at runtime (aka you're likely passing types as values). The approach that keeps rows of each unit until you \"flatten\" it out to a single unit is a good one too, though clearly keeps more around than flattening (and disregarding rounding error you should be able to store everything as one unit). Fun times though: in this example, time affects the conversion rate between currencies, so it *almost* could be seen as 3-dimenensional (amount, currency, and time of conversion)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579153117.205300",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6ZIL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is actually an interesting case and way easier in a dependently typed language. Why? Because if you add two measurements with different units, the return value type isn't obvious, and likely the result type is only known at runtime (aka you're likely passing types as values). The approach that keeps rows of each unit until you \"flatten\" it out to a single unit is a good one too, though clearly keeps more around than flattening (and disregarding rounding error you should be able to store everything as one unit). Fun times though: in this example, time affects the conversion rate between currencies, so it *almost* could be seen as 3-dimenensional (amount, currency, and time of conversion)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1579266866.006200",
        "client_msg_id": "12AA6783-7768-415E-8A0D-AC80D3277A65",
        "text": "Yep, also keycloak does this",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579207981.229300",
        "parent_user_id": "UP6B3FCGZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X2jzO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep, also keycloak does this"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]