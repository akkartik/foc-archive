[
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1740677077.986819",
        "client_msg_id": "743eeda7-a02c-4d6e-a4cb-d29b86a23fc7",
        "text": "Rete.js needs a feature for this. It allows you to group things, but not hide contents.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740623629.267749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LbbFG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Rete.js needs a feature for this. It allows you to group things, but not hide contents."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1740715091.825419",
        "client_msg_id": "c395f211-e4d5-4025-a1f5-a6a6e5121041",
        "text": "Layering and eliding requires a change to the implementation of connections. To do layering, connections need to be triples {direction, sender, receiver}, but, the usual implementation of connections is as doubles {sender, receiver}. This is trivial to implement, but requires a change in mindset. My guess is that thinking in terms of \"infinite canvases\" blinds one to seeing this minor extension to connections. [Likewise, the code to route messages needs to take direction into account, requiring 4 slightly different methods].",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740623629.267749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eqrTs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Layering and eliding requires a change to the implementation of connections. To do layering, connections need to be triples {direction, sender, receiver}, but, the usual implementation of connections is as doubles {sender, receiver}. This is trivial to implement, but requires a change in mindset. My guess is that thinking in terms of \"infinite canvases\" blinds one to seeing this minor extension to connections. [Likewise, the code to route messages needs to take direction into account, requiring 4 slightly different methods]."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1740715733.773799",
        "client_msg_id": "73d04b57-487c-4a5c-9bef-740eba7a227a",
        "text": "I don't know what direction means. Is the direction not from sender to receiver?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740623629.267749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "urnGZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know what direction means. Is the direction not from sender to receiver?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1740716896.214239",
        "client_msg_id": "dfcd89d5-4dd0-4b8a-9f50-e11a25f0bfb7",
        "text": "Direction is one of [down | across | up | through]. The common idea is to use only 'across' connections from sender to receiver. Adding 'down' and 'up' makes it possible to compose little networks inside of containers. The containers send their inputs 'down' to their children and get outputs from their children 'up' to their own output ports. The 4th direction 'through' rounds things out and lets you stub out functionality. In analogy, \/bin\/bash scripts do this kind of thing - they allow one to compose groupings of commands, where commands might be other bash scripts recursively. Same here. You track which way connections point, which lets you compose little networks recursively. [aside, tracking direction also provides a way to wrap \"scope\" around timing issues, but, that's another discussion].",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740623629.267749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AeMEc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Direction is one of [down | across | up | through]. The common idea is to use only 'across' connections from sender to receiver. Adding 'down' and 'up' makes it possible to compose little networks inside of containers. The containers send their inputs 'down' to their children and get outputs from their children 'up' to their own output ports. The 4th direction 'through' rounds things out and lets you stub out functionality. In analogy, \/bin\/bash scripts do this kind of thing - they allow one to compose groupings of commands, where commands might be other bash scripts recursively. Same here. You track which way connections point, which lets you compose little networks recursively. [aside, tracking direction also provides a way to wrap \"scope\" around timing issues, but, that's another discussion]."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1740717462.026639",
        "client_msg_id": "fafe45a8-2c1a-47f8-ba36-eadbd1ba07e8",
        "text": "Can you not derive the container's \"ports\" by whether the connections start or terminate outside the container? Or is the point that the architect gets to pick the interface of the container, too? Or is there some other reason the connection needs to be segmented at the container boundary?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740623629.267749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4tmct",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can you not derive the container's \"ports\" by whether the connections start or terminate outside the container? Or is the point that the architect gets to pick the interface of the container, too? Or is there some other reason the connection needs to be segmented at the container boundary?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1740718800.142849",
        "client_msg_id": "96b262d0-cbeb-4644-b2ef-04e75a65f79b",
        "text": "The Architect builds completely stand-alone Parts. This means that it is impossible to see where external inputs come from or go to. You can't see the whole outside network because each Part is stand-alone and is not privy to information about how it will be used. Analogy: building circuits and buying ICs - the manufacturer gives you a spec sheet which says what the input and output interface is for each IC (it's \"pins\"), but, only the Architect determines how the IC will be used in a circuit - the manufacturer cannot predict how an IC will be used. Parts are little black boxes with input ports and output ports. Containers (\"Choreographer Parts\") compose little networks using child Parts. Parts inside a container might be code Parts (\"Worker Parts\") or might be other containers, there is no way to tell at Architecting time.\n\nFP tries to accomplish something similar, but the building block of FP is the function, which effectively has 1 input port and effectively 0 output ports. The fact that functions can hard-wire blocking calls to other functions in their code complicates things. \"Return signatures\" syntactically look kinda like outputs, but really aren't outputs.\n\n[I have to step away now, but, will resume in the morning.]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740623629.267749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xKuSD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Architect builds completely stand-alone Parts. This means that it is impossible to see where external inputs come from or go to. You can't see the whole outside network because each Part is stand-alone and is not privy to information about how it will be used. Analogy: building circuits and buying ICs - the manufacturer gives you a spec sheet which says what the input and output interface is for each IC (it's \"pins\"), but, only the Architect determines how the IC will be used in a circuit - the manufacturer cannot predict how an IC will be used. Parts are little black boxes with input ports and output ports. Containers (\"Choreographer Parts\") compose little networks using child Parts. Parts inside a container might be code Parts (\"Worker Parts\") or might be other containers, there is no way to tell at Architecting time.\n\nFP tries to accomplish something similar, but the building block of FP is the function, which effectively has 1 input port and effectively 0 output ports. The fact that functions can hard-wire blocking calls to other functions in their code complicates things. \"Return signatures\" syntactically look kinda like outputs, but really aren't outputs.\n\n[I have to step away now, but, will resume in the morning.]"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]