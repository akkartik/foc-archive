[
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1597737996.056500",
        "client_msg_id": "d3a715a3-cd19-4791-8d31-0969a45209c8",
        "text": "Blob? Block? Set?  The problem is all the preconceived ideas behind these words.  Perhaps make up a word, and force users to think about what it means?\nGort, Bur, Pag :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OUDB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Blob? Block? Set?  The problem is all the preconceived ideas behind these words.  Perhaps make up a word, and force users to think about what it means?\nGort, Bur, Pag "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597739852.057100",
        "client_msg_id": "A14CE63D-0013-450A-8A08-5F6B554F8BFD",
        "text": "Oh god no :anguished: imagine the learning curve",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BeMr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh god no "
                            },
                            {
                                "type": "emoji",
                                "name": "anguished",
                                "unicode": "1f627"
                            },
                            {
                                "type": "text",
                                "text": " imagine the learning curve"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597740000.060000",
        "client_msg_id": "801E9BA0-09CD-4490-919F-2B60956F0E96",
        "text": "As I mentioned in an earlier post (and got pushback for), I think we want to bring PLs as close to human intuition as possible. To me that entails finding very carefully crafted words that map back to widely-understood concepts.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UGbB1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As I mentioned in an earlier post (and got pushback for), I think we want to bring PLs as close to human intuition as possible. To me that entails finding very carefully crafted words that map back to widely-understood concepts."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597740024.060900",
        "client_msg_id": "E64E9A77-B64C-4DA2-95D3-62768D376C9C",
        "text": "Even if there’s a slight lossiness to the mapping",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wZ0G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Even if there’s a slight lossiness to the mapping"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U014WA16VNJ",
        "type": "message",
        "ts": "1597750723.066600",
        "client_msg_id": "7A320999-EF2F-43AD-AFDE-0A28FDADE966",
        "text": "<@U01661S9F34>\n&gt; My ideal future of hardware will come from better symbiosis of computation and hardware. Not domination of one over the other.\n&gt; \n&gt; \nI realise how what I said may have come across, and want to clarify here I totally agree! I say computation in reference to the abstract notion of _doing things_ with computers, wether through hardware or code. It was actually Alan Kay who inspired me to give that response though I forget from where.\n\nAnother way to put it might be to say that both hardware and software are things we invent to serve some computing goal, and we only sometimes know how they’ll help.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "808c371ba009",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-15\/7281936611971_808c371ba00918560d75_72.jpg",
            "first_name": "Orion",
            "real_name": "Orion Reed",
            "display_name": "Orion Reed",
            "team": "T5TCAFTA9",
            "name": "orionreedt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597671602.008000",
        "parent_user_id": "UKP3B2J5D",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+iz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01661S9F34"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My ideal future of hardware will come from better symbiosis of computation and hardware. Not domination of one over the other."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I realise how what I said may have come across, and want to clarify here I totally agree! I say computation in reference to the abstract notion of "
                            },
                            {
                                "type": "text",
                                "text": "doing things",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with computers, wether through hardware or code. It was actually Alan Kay who inspired me to give that response though I forget from where.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Another way to put it might be to say that both hardware and software are things we invent to serve some computing goal, and we only sometimes know how they’ll help."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1597750955.066800",
        "edited": {
            "user": "UN57U8V53",
            "ts": "1597766702.000000"
        },
        "client_msg_id": "631792c8-f45f-4dd0-979b-1f6d48313a81",
        "text": "These are the books I keep coming back to, years later (that may be relevant to the crowd here):\n<https:\/\/www.amazon.com\/About-Face-Essentials-Interaction-Design\/dp\/1118766571|https:\/\/www.amazon.com\/About-Face-Essentials-Interaction-Design\/dp\/1118766571>\n<https:\/\/www.amazon.com\/Pedagogy-Oppressed-Anniversary-Paulo-Freire\/dp\/1501314130|https:\/\/www.amazon.com\/Pedagogy-Oppressed-Anniversary-Paulo-Freire\/dp\/1501314130>\n<https:\/\/www.amazon.com\/Timeless-Way-Building-Christopher-Alexander\/dp\/0195024028|https:\/\/www.amazon.com\/Timeless-Way-Building-Christopher-Alexander\/dp\/0195024028>\n<https:\/\/www.amazon.com\/Engineering-Safer-World-Systems-Thinking\/dp\/0262533693|https:\/\/www.amazon.com\/Engineering-Safer-World-Systems-Thinking\/dp\/0262533693>\n<https:\/\/www.amazon.com\/Principles-Product-Development-Flow-Generation\/dp\/1935401009|https:\/\/www.amazon.com\/Principles-Product-Development-Flow-Generation\/dp\/1935401009>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597675256.030400",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PHl1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These are the books I keep coming back to, years later (that may be relevant to the crowd here):\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.com\/About-Face-Essentials-Interaction-Design\/dp\/1118766571",
                                "text": "https:\/\/www.amazon.com\/About-Face-Essentials-Interaction-Design\/dp\/1118766571"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.com\/Pedagogy-Oppressed-Anniversary-Paulo-Freire\/dp\/1501314130",
                                "text": "https:\/\/www.amazon.com\/Pedagogy-Oppressed-Anniversary-Paulo-Freire\/dp\/1501314130"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.com\/Timeless-Way-Building-Christopher-Alexander\/dp\/0195024028",
                                "text": "https:\/\/www.amazon.com\/Timeless-Way-Building-Christopher-Alexander\/dp\/0195024028"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.com\/Engineering-Safer-World-Systems-Thinking\/dp\/0262533693",
                                "text": "https:\/\/www.amazon.com\/Engineering-Safer-World-Systems-Thinking\/dp\/0262533693"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.com\/Principles-Product-Development-Flow-Generation\/dp\/1935401009",
                                "text": "https:\/\/www.amazon.com\/Principles-Product-Development-Flow-Generation\/dp\/1935401009"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1597757605.067300",
        "edited": {
            "user": "UKDM3GLAJ",
            "ts": "1597757643.000000"
        },
        "client_msg_id": "4b2ac490-339d-4aef-9e18-b5a6e7d5358d",
        "text": "I’ve been reading “Women, Fire and Dangerous Things,” which is about (amongst other things) meaning and categories. I think it’s tempting to think that class is precisely the semantics you want, but if the point is for existing human intuition to apply as directly as possible, there are meanings associated with class that are likely unrelated to your use case (and which could cause confusion). A class of students, for example, which was likely motivated by class as category, but has taken on significant other components. Or class as social standing, which I suspect followed a similar path. I think group has fewer associations and might be better for that reason.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UL8R0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve been reading “Women, Fire and Dangerous Things,” which is about (amongst other things) meaning and categories. I think it’s tempting to think that class is precisely the semantics you want, but if the point is for existing human intuition to apply as directly as possible, there are meanings associated with class that are likely unrelated to your use case (and which could cause confusion). A class of students, for example, which was likely motivated by class as category, but has taken on significant other components. Or class as social standing, which I suspect followed a similar path. I think group has fewer associations and might be better for that reason."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1597768192.068200",
        "client_msg_id": "3fa8126d-a212-4f27-b191-13231743304d",
        "text": "Regarding learning curve; don't all new languages have a learning curve?  Does using an existing concept get in the way of understanding something new (especially if the new thing isn't quite the same as the old) ?  Perhaps a new, unique, word would help the concept stick in the mind more easily....\nThat said, I was only half serious about making up names :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YzLaM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Regarding learning curve; don't all new languages have a learning curve?  Does using an existing concept get in the way of understanding something new (especially if the new thing isn't quite the same as the old) ?  Perhaps a new, unique, word would help the concept stick in the mind more easily....\nThat said, I was only half serious about making up names "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1597770790.068600",
        "client_msg_id": "1d8483be-ce90-4642-a8b0-b1666e47e8a8",
        "text": "There’s a group at Stanford called the “Agile Hardware Group” (<https:\/\/aha.stanford.edu\/>). I’m not involved, but my advisor + many people in my group are.\n\nMy 10k ft perspective: hardware tools suck. Like, orders of magnitude worse than any software stack.\n• Production tools for hardware are literally Tcl\/Perl scripts that generate strings of Verilog code and smash them together. \n• Place&amp;route (lowering a design into wires on a board) takes potentially *hours* to run. No notion of incremental compilation, small change -&gt; hours to run.\n• Verilog is a trash fire. It’s a programming language designed by hardware engineers, so it has insane, poorly specified semantics.\n• Everything is closed source!! From circuit pieces to compilers, everything tool is considered valuable IP. It’s 1970s era computing, but today.\nThese issues need to be fixed for hardware to really take off beyond its current state.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597671602.008000",
        "parent_user_id": "UKP3B2J5D",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OGD2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There’s a group at Stanford called the “Agile Hardware Group” ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/aha.stanford.edu\/"
                            },
                            {
                                "type": "text",
                                "text": "). I’m not involved, but my advisor + many people in my group are.\n\nMy 10k ft perspective: hardware tools suck. Like, orders of magnitude worse than any software stack.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Production tools for hardware are literally Tcl\/Perl scripts that generate strings of Verilog code and smash them together. "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Place&route (lowering a design into wires on a board) takes potentially "
                                    },
                                    {
                                        "type": "text",
                                        "text": "hours",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " to run. No notion of incremental compilation, small change -> hours to run."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Verilog is a trash fire. It’s a programming language designed by hardware engineers, so it has insane, poorly specified semantics."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Everything is closed source!! From circuit pieces to compilers, everything tool is considered valuable IP. It’s 1970s era computing, but today."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThese issues need to be fixed for hardware to really take off beyond its current state."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D",
                    "U014WA16VNJ",
                    "U01661S9F34",
                    "U013ZLJARC7"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1597776144.072700",
        "client_msg_id": "5FEF3261-949A-404C-9A96-57C08D4B14E1",
        "text": "The maker movement was poised to make hardware more accessible but seems to have fizzled out. I used to be so involved with it. Wonder what 2.0 would look like.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597671602.008000",
        "parent_user_id": "UKP3B2J5D",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rSuqi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The maker movement was poised to make hardware more accessible but seems to have fizzled out. I used to be so involved with it. Wonder what 2.0 would look like."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U010SQSJGLS",
        "type": "message",
        "ts": "1597777986.073000",
        "client_msg_id": "eee2860a-b2e1-4691-aa74-ad7c6e7fd02a",
        "text": "“cluster”?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge900b2beeb5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e900b2beeb5a6877d191b8d15623671b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Michael Coblenz",
            "display_name": "Michael Coblenz",
            "team": "T5TCAFTA9",
            "name": "mcoblenz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z4L5k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“cluster”?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1597781351.073300",
        "client_msg_id": "4ce93065-36e2-4773-b7a2-bbe7836ac9bf",
        "text": "On the open source side, I remain cautiously interested in <https:\/\/riscv.org>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597671602.008000",
        "parent_user_id": "UKP3B2J5D",
        "attachments": [
            {
                "title": "RISC-V International",
                "title_link": "https:\/\/riscv.org\/",
                "text": "RISC-V International is chartered to standardize and promote the open RISC-V instruction set architecture together with its hardware and software ecosystem for use in all computing devices. ",
                "fallback": "RISC-V International",
                "from_url": "https:\/\/riscv.org\/",
                "service_icon": "https:\/\/riscv.org\/wp-content\/uploads\/2020\/08\/cropped-riscv-favicon-180x180.png",
                "service_name": "riscv.org",
                "id": 1,
                "original_url": "https:\/\/riscv.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vQmD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On the open source side, I remain cautiously interested in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/riscv.org"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "crossed_fingers",
                "users": [
                    "UKP3B2J5D",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1597782108.073800",
        "client_msg_id": "34f3e3f0-1535-42f4-a733-469fd372f94c",
        "text": "There is also the <http:\/\/Libre-SOC.org|Libre-SOC.org> project, which is also Open Hardware. They are building a system-on-a-chip that contains an integrated CPU and GPU and VPU, inspired by the CDC 6600 architecture. I gather that their architecture is more efficient than RISC-V, that programming the GPU is much simpler than a conventional GPU due to close integration with the CPU, but I don't follow the project closely.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597671602.008000",
        "parent_user_id": "UKP3B2J5D",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cIn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is also the "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/Libre-SOC.org",
                                "text": "Libre-SOC.org"
                            },
                            {
                                "type": "text",
                                "text": " project, which is also Open Hardware. They are building a system-on-a-chip that contains an integrated CPU and GPU and VPU, inspired by the CDC 6600 architecture. I gather that their architecture is more efficient than RISC-V, that programming the GPU is much simpler than a conventional GPU due to close integration with the CPU, but I don't follow the project closely."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "crossed_fingers",
                "users": [
                    "UKP3B2J5D",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1597784262.074200",
        "client_msg_id": "c6fc8e54-19ab-44fd-b8e2-bb3167ab720e",
        "text": "Yeah, very bullish on open-source hardware. I'd like for it to get commoditized and lose leverage.\n\nI'm also interested in attempts to route around pre-firmware backdoors: <https:\/\/puri.sm\/learn\/avoiding-intel-amt>; <https:\/\/openpowerfoundation.org> (latter via <https:\/\/www.talospace.com\/2019\/11\/talos-ii-and-talos-ii-lite-officially.html>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597671602.008000",
        "parent_user_id": "UKP3B2J5D",
        "attachments": [
            {
                "service_name": "Purism",
                "title": "How Purism avoids Intel's Active Management Technology – Purism",
                "title_link": "https:\/\/puri.sm\/learn\/avoiding-intel-amt",
                "text": "With recent chipsets, Intel offers a mechanism called Active Management Technology (Intel AMT, part of the “vPro”* featureset, specifically the Intel Management Engine) which, Intel says,“allows IT or managed service providers to better discover, repair, and protect their networked computing assets”. This means somebody can control devices remotely, even when powered off—what is officially called …",
                "fallback": "Purism: How Purism avoids Intel's Active Management Technology – Purism",
                "image_url": "https:\/\/puri.sm\/wp-content\/uploads\/2016\/08\/intel-i5-vpro.jpg",
                "from_url": "https:\/\/puri.sm\/learn\/avoiding-intel-amt",
                "image_width": 320,
                "image_height": 240,
                "image_bytes": 9429,
                "service_icon": "https:\/\/puri.sm\/wp-content\/uploads\/2020\/04\/cropped-purism-logo-rectangle-1-180x180.png",
                "id": 1,
                "original_url": "https:\/\/puri.sm\/learn\/avoiding-intel-amt"
            },
            {
                "title": "Talos II and Talos II Lite officially FSF Respects Your Freedom products",
                "title_link": "https:\/\/www.talospace.com\/2019\/11\/talos-ii-and-talos-ii-lite-officially.html",
                "text": "No one disputes the Free Software Federation practices what they preach, and no one disputes that their standards are strict. So hats off ...",
                "fallback": "Talos II and Talos II Lite officially FSF Respects Your Freedom products",
                "image_url": "https:\/\/3.bp.blogspot.com\/-KHuyxm0_yH8\/XcN4T2aLPqI\/AAAAAAAABcY\/wLoSUHJPvoI_XP0cz2k5yb5CJ3p-Y3_mACLcBGAsYHQ\/w1200-h630-p-k-no-nu\/Screenshot_20191105-184618.png",
                "from_url": "https:\/\/www.talospace.com\/2019\/11\/talos-ii-and-talos-ii-lite-officially.html",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 51403,
                "service_icon": "https:\/\/www.talospace.com\/favicon.ico",
                "service_name": "talospace.com",
                "id": 2,
                "original_url": "https:\/\/www.talospace.com\/2019\/11\/talos-ii-and-talos-ii-lite-officially.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hXy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, very bullish on open-source hardware. I'd like for it to get commoditized and lose leverage.\n\nI'm also interested in attempts to route around pre-firmware backdoors: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/puri.sm\/learn\/avoiding-intel-amt"
                            },
                            {
                                "type": "text",
                                "text": "; "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/openpowerfoundation.org"
                            },
                            {
                                "type": "text",
                                "text": " (latter via "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.talospace.com\/2019\/11\/talos-ii-and-talos-ii-lite-officially.html"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1597784331.074500",
        "client_msg_id": "8567d3ce-2e02-49c0-8b4f-6eb789450b74",
        "text": "Data in Wolfram Language is tagged in various ways that tell you where it came from and what it represents. For example, if you download one of their stock datasets, and select data from it, the data is going to present itself as a table even after operations that manipulate it, unless you do something that changes its format, such as plotting it, or using <https:\/\/reference.wolfram.com\/language\/tutorial\/TextualInputAndOutput.html#12368|a *Form function>. I'm not an expert on it, unfortunately, but I thought it'd be a useful reference if you're looking for how other language do it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595835444.131100",
        "parent_user_id": "UCGAK10LS",
        "attachments": [
            {
                "title": "Textual Input and Output—Wolfram Language Documentation",
                "title_link": "https:\/\/reference.wolfram.com\/language\/tutorial\/TextualInputAndOutput.html#12368",
                "text": "The Wolfram Language allows you to output expressions in many different ways. Output forms provide textual representations of Wolfram Language expressions. In some cases these textual representations are also suitable for input to the Wolfram Language. But in other cases they are intended just to be looked at, or to be exported to other programs, rather than to be used as input to the Wolfram Language. &amp;quot;Low-Level Input and Output Rules&amp;quot; discusses how you can create your own output forms. You should realize however that in communicating with external programs it is often better to use the Wolfram Symbolic Transfer Protocol (WSTP) to send expressions directly than to generate a textual representation for these expressions.",
                "fallback": "Textual Input and Output—Wolfram Language Documentation",
                "from_url": "https:\/\/reference.wolfram.com\/language\/tutorial\/TextualInputAndOutput.html#12368",
                "service_icon": "https:\/\/reference.wolfram.com\/favicon.ico",
                "service_name": "reference.wolfram.com",
                "id": 1,
                "original_url": "https:\/\/reference.wolfram.com\/language\/tutorial\/TextualInputAndOutput.html#12368"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wm2w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Data in Wolfram Language is tagged in various ways that tell you where it came from and what it represents. For example, if you download one of their stock datasets, and select data from it, the data is going to present itself as a table even after operations that manipulate it, unless you do something that changes its format, such as plotting it, or using "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/reference.wolfram.com\/language\/tutorial\/TextualInputAndOutput.html#12368",
                                "text": "a *Form function"
                            },
                            {
                                "type": "text",
                                "text": ". I'm not an expert on it, unfortunately, but I thought it'd be a useful reference if you're looking for how other language do it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "U01A1C2K8MP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1597784429.074800",
        "client_msg_id": "6e4e9b7a-de8c-476b-8a20-5dee3683549a",
        "text": "Its input window is still pretty small, but if the text you want to feed in is also pretty small, then it ought to do a fair job at the tasks you mention. Usual caveats here, that you'll never really know if the answer is right or wrong unless you check its work. :P",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595860544.141000",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RULBt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Its input window is still pretty small, but if the text you want to feed in is also pretty small, then it ought to do a fair job at the tasks you mention. Usual caveats here, that you'll never really know if the answer is right or wrong unless you check its work. :P"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597793091.075100",
        "client_msg_id": "6c461365-4b06-4d51-8fc9-343d536f85c2",
        "text": "<@UKDM3GLAJ> It was actually my intent to connote both \"class of animal\" and \"class of students\": in my current PL design a category is indistinguishable from a collection (\"classroom\").\n\nThe social status connotation is not intended, but given the context is coding, I doubt people would start thinking their source code is describing wealth and power inequality. The context of use should provide clarity.\n\nBut regardless, I'll probably prefer \"group\" for now, to avoid OOP at the very least.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BTEIN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKDM3GLAJ"
                            },
                            {
                                "type": "text",
                                "text": " It was actually my intent to connote both \"class of animal\" and \"class of students\": in my current PL design a category is indistinguishable from a collection (\"classroom\").\n\nThe social status connotation is not intended, but given the context is coding, I doubt people would start thinking their source code is describing wealth and power inequality. The context of use should provide clarity.\n\nBut regardless, I'll probably prefer \"group\" for now, to avoid OOP at the very least."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597794590.075300",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597794660.000000"
        },
        "client_msg_id": "e7e6b7db-0e72-4b34-8911-38e3cf1241ca",
        "text": "<@UUQ2EQW21> An existing concept gets in the way of something new when you choose a poor word for it. For example, \"objects\" in traditional OOP are *nothing* like our everyday understanding.\n\n...\"An object is instantiated from a class (template), which is its inherent and sole category. You can't re-categorize\/re-purpose an existing object. Just like in the real world!\"\n...\"An object has public and private members, because that makes them more 'secure' or something. Just like real life!\"\n...\"An object has a fixed set of methods (behaviours) inherent to them. Systems don't have behaviour as a whole; behaviour belongs to individual entities, and they are all pre-defined before the system is turned on. Wow, reminds me of reality! Animals and pencils are both like this.\"\n...\"Objects change when other objects call their methods, and the world freezes whilst they change. Every object has total authority on whether its state changes; no external force has the power to change its state. Just like the real world!\"\n\nAnd so on. That's when existing intuitions aren't helpful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kb=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUQ2EQW21"
                            },
                            {
                                "type": "text",
                                "text": " An existing concept gets in the way of something new when you choose a poor word for it. For example, \"objects\" in traditional OOP are "
                            },
                            {
                                "type": "text",
                                "text": "nothing",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " like our everyday understanding.\n\n...\"An object is instantiated from a class (template), which is its inherent and sole category. You can't re-categorize\/re-purpose an existing object. Just like in the real world!\"\n...\"An object has public and private members, because that makes them more 'secure' or something. Just like real life!\"\n...\"An object has a fixed set of methods (behaviours) inherent to them. Systems don't have behaviour as a whole; behaviour belongs to individual entities, and they are all pre-defined before the system is turned on. Wow, reminds me of reality! Animals and pencils are both like this.\"\n...\"Objects change when other objects call their methods, and the world freezes whilst they change. Every object has total authority on whether its state changes; no external force has the power to change its state. Just like the real world!\"\n\nAnd so on. That's when existing intuitions aren't helpful."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597794869.075600",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597794932.000000"
        },
        "client_msg_id": "db16564c-a331-46aa-b3fc-0f810d35df16",
        "text": "Traditional objects are just a big knot of everything some computer scientists came up with after reading about biology whilst on an acid trip. No single term can intuitively describe that knot. The solution is to avoid knotting together half-baked metaphors in the first place.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FN5+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Traditional objects are just a big knot of everything some computer scientists came up with after reading about biology whilst on an acid trip. No single term can intuitively describe that knot. The solution is to avoid knotting together half-baked metaphors in the first place."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597794907.075800",
        "client_msg_id": "5e8c7c74-dc62-4580-b0b6-78419a54d7f1",
        "text": "(OOP rant over)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "71DU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(OOP rant over)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UG0EL18H3",
        "type": "message",
        "ts": "1597807589.076200",
        "edited": {
            "user": "UG0EL18H3",
            "ts": "1597808057.000000"
        },
        "client_msg_id": "06c0235e-f81a-43d3-b222-92ba970cfad3",
        "text": "_Computer Lib_ and _Notes on the Synthesis of Form_ are what I would consider essential reading in this area. _Tools for Thought_ by Howard Rheingold is an excellent chronology, spanning many centuries (basically from Charles Babbage and Ada Lovelace to the end of Xerox PARC). Lately I've been reading through _Philosophical Essays_ of Leibniz, mostly trying to understand the concept of a _characteristica universalis_ that he introduced in one of his many papers. This has a strong relation to the concept of a \"pattern language\", which is what currently captivates me. Here is my list of FoC-adjacent books I've aggregated over the last year or so: <https:\/\/www.goodreads.com\/review\/list\/100125761-chris-rabl?shelf=future-of-coding&amp;utf8=✓>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "25cc47143833",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-01\/702360681283_25cc471438337c72e600_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Rabl",
            "display_name": "crabl",
            "team": "T5TCAFTA9",
            "name": "chris.rabl",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597675256.030400",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lUBz\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Computer Lib",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "Notes on the Synthesis of Form ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "are what I would consider essential reading in this area. "
                            },
                            {
                                "type": "text",
                                "text": "Tools for Thought",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "by Howard Rheingold is an excellent chronology, spanning many centuries (basically from Charles Babbage and Ada Lovelace to the end of Xerox PARC). Lately I've been reading through "
                            },
                            {
                                "type": "text",
                                "text": "Philosophical Essays",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of Leibniz, mostly trying to understand the concept of a "
                            },
                            {
                                "type": "text",
                                "text": "characteristica universalis",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that he introduced in one of his many papers. This has a strong relation to the concept of a \"pattern language\", which is what currently captivates me. Here is my list of FoC-adjacent books I've aggregated over the last year or so: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.goodreads.com\/review\/list\/100125761-chris-rabl?shelf=future-of-coding&utf8=✓"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U014WA16VNJ",
                    "UC2A2ARPT",
                    "UKP3B2J5D",
                    "UN57U8V53"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U014WA16VNJ",
        "type": "message",
        "ts": "1597809379.085600",
        "edited": {
            "user": "U014WA16VNJ",
            "ts": "1597809802.000000"
        },
        "client_msg_id": "E0508EE8-9814-453D-8FFC-FA60AA98E3BF",
        "text": "<@UG0EL18H3> ordered the Leibniz essays! I’ve read the others and love them all, seems we have overlapping interests.\nYour linked collection is awesome and there’s quite a few there I’m going to have to read soon.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "808c371ba009",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-15\/7281936611971_808c371ba00918560d75_72.jpg",
            "first_name": "Orion",
            "real_name": "Orion Reed",
            "display_name": "Orion Reed",
            "team": "T5TCAFTA9",
            "name": "orionreedt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597675256.030400",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x2Qb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " ordered the Leibniz essays! I’ve read the others and love them all, seems we have overlapping interests.\nYour linked collection is awesome and there’s quite a few there I’m going to have to read soon."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "UG0EL18H3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597811295.101400",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597812979.000000"
        },
        "client_msg_id": "2862acc4-8ab1-4f38-82b1-7419e2435c7e",
        "text": "I'm slowly convincing myself that the future of programming includes *verbalizability* (and thus, natural language).\n\nThe *ubiquity* and *utility* of natural language is well known: almost all of the information we read, write\/type, speak and hear every day is communicated via a natural language, not a specially-crafted one. Natural language is our primary means of understanding the world and interacting with other humans, especially in the absence of supplementary tools such as pen-and-paper (e.g. in face-to-face conversation). When was the last time you described a cause-and-effect phenomenon (a story, event, or task instructions) to someone without extensive use of natural language? At best, we use other artifacts (diagrams, formal models) as aids.\n\nDespite the ubiquity and utility of natural language, if one person tries to \"speak\" a Java\/C\/JS\/Rust program to another person, they have to go through an extremely complicated and lossy translation process from *code* to *words*. Based on some of my recent design work (not shared yet), I'm beginning to believe we could actually design programming languages whose \"source code\" consists *solely* of *terse* natural language sentences\/structures with *very specific* syntax restrictions (to deny multiple interpretations \/ ambiguities). The language would not be accompanied by any supplementary symbols (!@#$%^&amp;]\/-&gt;) with domain-specific meaning, since those would inhibit verbalization. Writing code in this language still requires careful deliberation (to develop the logic), but _reading_ and _discussing_ code with full verbalization becomes trivial: no translation is required at all!\n\nYes, I'm not the first person to think about putting natural language in PLs. Someone might bring up COBOL, HyperTalk, SQL, or similar. I'm not saying verbalizability is \"the solution\" to programming alone, but along with a well-crafted semantics (information model etc.), it could lead to something extraordinary.\n\nIf anyone wants to think further about this, Felienne Hermans <https:\/\/youtu.be\/CgR5mSAGxtA?t=2663|discusses verbalization\/vocalization of PLs as part of a larger talk> (video is timestamped to that bit). Quote: \"how does code sound?\"\n\nI searched this Slack's <http:\/\/history.futureofcoding.org\/|archives>, and I was surprised to discover the word \"verbalization\" has never been used.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597811295.101400",
        "reply_count": 25,
        "reply_users_count": 14,
        "latest_reply": "1598445922.115600",
        "reply_users": [
            "UCUSW7WVD",
            "UAL7940NM",
            "UEBG0NPDK",
            "U016VUZGUUQ",
            "UCGAK10LS",
            "UJBAJNFLK",
            "UKP3B2J5D",
            "U014WA16VNJ",
            "U5STGTB3J",
            "UMH5FAW2Y",
            "UK3LH8CF5",
            "UDQKHNP51",
            "UA14TGLTC",
            "UEDDR6L5Q"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1597815230.102000"
            },
            {
                "user": "UAL7940NM",
                "ts": "1597817234.102700"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1597817316.103200"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1597817344.104200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1597817353.104500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1597819215.105000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1597819557.105300"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1597820432.105500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1597821305.106700"
            },
            {
                "user": "UKP3B2J5D",
                "ts": "1597835979.118700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1597840757.119100"
            },
            {
                "user": "U014WA16VNJ",
                "ts": "1597846270.121000"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1597847135.121300"
            },
            {
                "user": "UMH5FAW2Y",
                "ts": "1597850526.122600"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1597855277.124100"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1597855918.124600"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1597856061.124900"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1597856607.126000"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1597864575.127600"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1597865137.128000"
            },
            {
                "user": "UDQKHNP51",
                "ts": "1597914233.000300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1597931817.003900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1597980730.006500"
            },
            {
                "user": "UEDDR6L5Q",
                "ts": "1598275010.106500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1598445922.115600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J7gU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm slowly convincing myself that the future of programming includes "
                            },
                            {
                                "type": "text",
                                "text": "verbalizability ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(and thus, natural language).\n\nThe "
                            },
                            {
                                "type": "text",
                                "text": "ubiquity",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "utility",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of natural language is well known: almost all of the information we read, write\/type, speak and hear every day is communicated via a natural language, not a specially-crafted one. Natural language is our primary means of understanding the world and interacting with other humans, especially in the absence of supplementary tools such as pen-and-paper (e.g. in face-to-face conversation). When was the last time you described a cause-and-effect phenomenon (a story, event, or task instructions) to someone without extensive use of natural language? At best, we use other artifacts (diagrams, formal models) as aids.\n\nDespite the ubiquity and utility of natural language, if one person tries to \"speak\" a Java\/C\/JS\/Rust program to another person, they have to go through an extremely complicated and lossy translation process from "
                            },
                            {
                                "type": "text",
                                "text": "code",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to "
                            },
                            {
                                "type": "text",
                                "text": "words",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Based on some of my recent design work (not shared yet), I'm beginning to believe we could actually design programming languages whose \"source code\" consists "
                            },
                            {
                                "type": "text",
                                "text": "solely",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of "
                            },
                            {
                                "type": "text",
                                "text": "terse",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " natural language sentences\/structures with "
                            },
                            {
                                "type": "text",
                                "text": "very specific",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax restrictions (to deny multiple interpretations \/ ambiguities). The language would not be accompanied by any supplementary symbols (!@#$%^&]\/->) with domain-specific meaning, since those would inhibit verbalization. Writing code in this language still requires careful deliberation (to develop the logic), but "
                            },
                            {
                                "type": "text",
                                "text": "reading",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "and "
                            },
                            {
                                "type": "text",
                                "text": "discussing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "code with full verbalization becomes trivial: no translation is required at all!\n\nYes, I'm not the first person to think about putting natural language in PLs. Someone might bring up COBOL, HyperTalk, SQL, or similar. I'm not saying verbalizability is \"the solution\" to programming alone, but along with a well-crafted semantics (information model etc.), it could lead to something extraordinary.\n\nIf anyone wants to think further about this, Felienne Hermans "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/CgR5mSAGxtA?t=2663",
                                "text": "discusses verbalization\/vocalization of PLs as part of a larger talk"
                            },
                            {
                                "type": "text",
                                "text": " (video is timestamped to that bit). Quote: \"how does code sound?\"\n\nI searched this Slack's "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/history.futureofcoding.org\/",
                                "text": "archives"
                            },
                            {
                                "type": "text",
                                "text": ", and I was surprised to discover the word \"verbalization\" has never been used."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D",
                    "UFPPABQ7P",
                    "UFQQ3P867",
                    "UNCP67JSK"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1597814516.101800",
        "client_msg_id": "e8680c2f-605c-405a-a3a8-a7d1877bea09",
        "text": "I think you might be making my argument for me though :wink: If an existing concept is getting in the way,  and none of our existing concepts accurately describe what is happening, time for a new one.....",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "leH+i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you might be making my argument for me though "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": " If an existing concept is getting in the way,  and none of our existing concepts accurately describe what is happening, time for a new one....."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1597815230.102000",
        "client_msg_id": "6692f965-44a1-4b3e-9d16-45d2373e09aa",
        "text": "<@UKP3B2J5D> mentioned it before: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1593728981205800?thread_ts=1593726809.181800&amp;cid=C5T9GPWFL>. There may be others using different words.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1593728981205800?thread_ts=1593726809.181800&amp;cid=C5T9GPWFL",
                "fallback": "[July 2nd, 2020 3:29 PM] ogunks900: It’s also the same thing with stuff like operators in Haskell - how do you pronounce this ‘@&amp;£’ operator (I made it up btw)? Sure it is brief but it’s three characters in my head and doesn’t have a real name(I am convinced with Haskell it should be possible to give operators aliases, funny thing is ‘&gt;&gt;=‘ is ‘bind’. Being able to pronounce things is vital for chunking I think. Again, wish we had a more data driven approach to these questions.",
                "ts": "1593728981.205800",
                "author_id": "UKP3B2J5D",
                "author_subname": "Ope",
                "channel_id": "C5T9GPWFL",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "It’s also the same thing with stuff like operators in Haskell - how do you pronounce this ‘@&amp;£’ operator (I made it up btw)? Sure it is brief but it’s three characters in my head and doesn’t have a real name(I am convinced with Haskell it should be possible to give operators aliases, funny thing is ‘&gt;&gt;=‘ is ‘bind’. Being able to pronounce things is vital for chunking I think. Again, wish we had a more data driven approach to these questions.",
                "author_name": "Ope",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UKP3B2J5D",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1593728981205800?thread_ts=1593726809.181800&amp;cid=C5T9GPWFL",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D1\/Es",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKP3B2J5D"
                            },
                            {
                                "type": "text",
                                "text": " mentioned it before: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1593728981205800?thread_ts=1593726809.181800&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": ". There may be others using different words."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UKP3B2J5D",
                    "UAHHWT22U"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1597817234.102700",
        "client_msg_id": "cd37910f-b647-4855-8e54-cb82cc1bf4a7",
        "text": "Sounds interesting! I'm looking forward to learning more.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w91",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds interesting! I'm looking forward to learning more."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS",
                    "UFQQ3P867"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1597817316.103200",
        "client_msg_id": "8ee4b5d8-ce39-4408-beb0-bfa2c9ce7485",
        "text": "Our latest work on a front-end revolves pretty much entirely around this idea. :slightly_smiling_face: The big shift for us came from moving our focus away from “simple” to “simple to understand.” The results have been encouraging so far. Here’s the obligatory “incrementer button”\n```an incrementer is a button with a count of 0\n    the text is bound to its count\n\nwhen an incrementer is clicked\n    increment the count```\nNone of that is builtin, e.g. here’s how increment is defined:\n```to increment a number\n    set the number to the number + 1```\nAnd here’s a button:\n```a button is an element that has a text string\n    its tag is \"button\"\n    always set \"textContent\" of the button to its text```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ESdvZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Our latest work on a front-end revolves pretty much entirely around this idea. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " The big shift for us came from moving our focus away from “simple” to “simple to understand.” The results have been encouraging so far. Here’s the obligatory “incrementer button”\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "an incrementer is a button with a count of 0\n    the text is bound to its count\n\nwhen an incrementer is clicked\n    increment the count"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "None of that is builtin, e.g. here’s how increment is defined:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to increment a number\n    set the number to the number + 1"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And here’s a button:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a button is an element that has a text string\n    its tag is \"button\"\n    always set \"textContent\" of the button to its text"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UFQQ3P867"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "U018LAH5QCT",
                    "UFPPABQ7P",
                    "U014WA16VNJ",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "UCGAK10LS",
                    "UFQQ3P867"
                ],
                "count": 7
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1597817344.104200",
        "client_msg_id": "cbc66268-5d8d-4d00-80e7-43aa20f3af4b",
        "text": "Verbalizability (I'm going to go with pronounceability) is an entirely different prospect from natural language. Pronounceability is definitely a great thing, for accessibility if nothing else. I still can't imagine a system of \"terse natural language sentences\" that isn't hostile to at least one of precision or concision. I'd love to be convinced otherwise. Can you give a napkin-example of what you have in mind?\n\nFor pronounceability I would still follow the lead of mathematics as pronounced, e.g. \"f of x equals forall y in d g of x and y\". Whatever approach you take needs to have enough expressive power to balance out the bandwidth limit of at least speech, if not word-based notation (I like the idea of a conventional-looking system with operators that happen to all have reasonable pronunciations, which would keep the written syntax relatively compact).\n\nOTOH: if you can just avoid the trap of phrases that look like multiple words but parse like a single token (in that they always have to be together in the same order), if you just let words be independently composable, you'll be head and shoulders above COBOL et al.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UIuM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Verbalizability (I'm going to go with pronounceability) is an entirely different prospect from natural language. Pronounceability is definitely a great thing, for accessibility if nothing else. I still can't imagine a system of \"terse natural language sentences\" that isn't hostile to at least one of precision or concision. I'd love to be convinced otherwise. Can you give a napkin-example of what you have in mind?\n\nFor pronounceability I would still follow the lead of mathematics as pronounced, e.g. \"f of x equals forall y in d g of x and y\". Whatever approach you take needs to have enough expressive power to balance out the bandwidth limit of at least speech, if not word-based notation (I like the idea of a conventional-looking system with operators that happen to all have reasonable pronunciations, which would keep the written syntax relatively compact).\n\nOTOH: if you can just avoid the trap of phrases that look like multiple words but parse like a single token (in that they always have to be together in the same order), if you just let words be independently composable, you'll be head and shoulders above COBOL et al."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597817353.104500",
        "client_msg_id": "3064B940-B01E-48A8-BCFB-C7FE7BD082CA",
        "text": "<@UCUSW7WVD> ah, good work! I searched for “verbal-” and “vocal-“ but not “pronounce”.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pTdhe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " ah, good work! I searched for “verbal-” and “vocal-“ but not “pronounce”."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597818050.104800",
        "client_msg_id": "87ba07ff-0eb3-4003-8a4e-b4b1d6eb35ef",
        "text": "Oh you mean \"an existing PL concept\" rather than \"an existing real-world concept\"? In that case, sure, having a pre-existing PL concept that has already claimed the term for itself (and poisoned it with a complicated meaning) definitely does pose a problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aPym",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh you mean \"an existing PL concept\" rather than \"an existing real-world concept\"? In that case, sure, having a pre-existing PL concept that has already claimed the term for itself (and poisoned it with a complicated meaning) definitely does pose a problem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597819215.105000",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597819236.000000"
        },
        "client_msg_id": "3da28130-02b1-4f12-9869-ce829281937f",
        "text": "<@U016VUZGUUQ> The only reason I'd say \"verbalize\" rather than \"pronounce\" is that the latter usually refers to individual words, whereas the former can refer to *whole systems*. I want readers to be able to verbalize an entire system, as if they were hearing a (detailed, accurate) description from a friend.\n\nRegarding \"following the lead of mathematics\", my language is going to be extraordinarily light on *functions* (if I can get away with it), and thus on mathematical notation. Code re-use occurs through via interrelated rules that observe and produce abstracted data through pattern-matching. These act like polymorphic functions, so for most computations there is nothing to \"call\" and no need for mathematical primitives, no \"f(x)\". We can still retain that classical syntax for mathematical (numeric) expressions, though.\n\nRegarding \"multiple words that parse like a token\", that shouldn't be a problem, because programs will be built through structured editing (AST etc) with appropriate autocomplete and syntax highlighting.\n\nI'll see if I can come up with a napkin example that I can actually defend! I'm still working on the semantics of my system, and I'm worried that an example wouldn't make sense to anyone else yet.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Aahk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " The only reason I'd say \"verbalize\" rather than \"pronounce\" is that the latter usually refers to individual words, whereas the former can refer to "
                            },
                            {
                                "type": "text",
                                "text": "whole systems",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I want readers to be able to verbalize an entire system, as if they were hearing a (detailed, accurate) description from a friend.\n\nRegarding \"following the lead of mathematics\", my language is going to be extraordinarily light on "
                            },
                            {
                                "type": "text",
                                "text": "functions ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(if I can get away with it), and thus on mathematical notation. Code re-use occurs through via interrelated rules that observe and produce abstracted data through pattern-matching. These act like polymorphic functions, so for most computations there is nothing to \"call\" and no need for mathematical primitives, no \"f(x)\". We can still retain that classical syntax for mathematical (numeric) expressions, though.\n\nRegarding \"multiple words that parse like a token\", that shouldn't be a problem, because programs will be built through structured editing (AST etc) with appropriate autocomplete and syntax highlighting.\n\nI'll see if I can come up with a napkin example that I can actually defend! I'm still working on the semantics of my system, and I'm worried that an example wouldn't make sense to anyone else yet."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597819557.105300",
        "client_msg_id": "d2d22bf1-4a36-4850-8323-999ec86f893d",
        "text": "<@UEBG0NPDK> Yeah I think that a \"simple model\" and an \"easy to read language\" (in terms of Rich Hickey's definitions of \"simple\" and \"easy\") are both crucial. I've also been focusing too narrow-mindedly on the former.\n\nYour code example demonstrates not just a *language*, but obviously an *information model* and a *time model* as well. I like the readability of the language, but now you've got me curious about the underlying models. :thinking_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8on1z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " Yeah I think that a \"simple model\" and an \"easy to read language\" (in terms of Rich Hickey's definitions of \"simple\" and \"easy\") are both crucial. I've also been focusing too narrow-mindedly on the former.\n\nYour code example demonstrates not just a "
                            },
                            {
                                "type": "text",
                                "text": "language",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but obviously an "
                            },
                            {
                                "type": "text",
                                "text": "information model",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and a "
                            },
                            {
                                "type": "text",
                                "text": "time model",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as well. I like the readability of the language, but now you've got me curious about the underlying models. "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]