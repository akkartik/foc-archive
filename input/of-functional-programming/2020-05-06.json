[
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1588813244.019700",
        "client_msg_id": "59e84285-f732-49c5-b9db-2f45cc8b8c53",
        "text": "When did functional programming begin?\n• 1952, \"The Use of Sub-Routines in Programmes\", D.J.Wheeler, <https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/609784.609816> Mentions higher order functions like \"integrate\", which is (somehow) parameterized by the function to be integrated.\n• 1956, Fortran, John Backus. FORTRAN=FORmula TRANslation. Fortran supports nested arithmetic expressions. \"Programming on the right side of the assignment statement\" is an early glimpse of expression-oriented functional programming, as mentioned later in [Landin 1966].\n• 1960, LISP, John McCarthy, \"_Recursive functions of symbolic expressions and their computation by machine, part I_\". Lisp is the first programming language with conditional expressions, recursive functions, higher order functions (including \"map\" under the name \"maplist\"), plus garbage collection. This is the true birth of functional programming, even though LISP has a strong imperative core, and some key elements are missing: LISP is not lexically scoped; there are no closures, and no convenient syntax for curried function calls. <http:\/\/www-formal.stanford.edu\/jmc\/recursive.pdf>\n• 1962, APL, Kenneth Iverson, the book \"A Programming Language\" is published. Has an exceptionally powerful expression language, including the now standard \"map\" and \"reduce\" higher order functions (under different names). There is no APL interpreter yet. <http:\/\/www.softwarepreservation.org\/projects\/apl\/Books\/APROGRAMMING%20LANGUAGE>\n• 1964, P.J.Landin, \"The Mechanical Evaluation of Expressions\" describes a referentially transparent, lexically scoped, pure functional language with lexically scoped closures and curried functions. The syntax is a recognizable precursor to ML and Haskell. A virtual machine called the SECD machine is described for implementing functional languages (including lexical scoping and closures, which are missing from LISP). Earliest use of \"referential transparency\" to describe a programming language? <https:\/\/www.cs.cmu.edu\/~crary\/819-f09\/Landin64.pdf>\n• 1966, P.J.Landin, \"The Next 700 Programming Languages\". This is the earliest published use of the term \"functional programming\" I can find, although it is by now reportedly in common use. This is the original _manifesto_ for functional (ie, non-imperative) programming. It describes the research language ISWIM, spawning the ML\/Haskell lineage of functional languages. <http:\/\/www-formal.stanford.edu\/jmc\/recursive.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588813244.019700",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1588856960.020700",
        "reply_users": [
            "UC2A2ARPT",
            "UA14TGLTC",
            "UJN1TAYEQ"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1588822484.019900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1588840584.020400"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1588856960.020700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "acg9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When did functional programming begin?\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "1952, \"The Use of Sub-Routines in Programmes\", D.J.Wheeler, "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/609784.609816"
                                    },
                                    {
                                        "type": "text",
                                        "text": " Mentions higher order functions like \"integrate\", which is (somehow) parameterized by the function to be integrated."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "1956, Fortran, John Backus. FORTRAN=FORmula TRANslation. Fortran supports nested arithmetic expressions. \"Programming on the right side of the assignment statement\" is an early glimpse of expression-oriented functional programming, as mentioned later in [Landin 1966]."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "1960, LISP, John McCarthy, \""
                                    },
                                    {
                                        "type": "text",
                                        "text": "Recursive functions of symbolic expressions and their computation by machine, part I",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "\". Lisp is the first programming language with conditional expressions, recursive functions, higher order functions (including \"map\" under the name \"maplist\"), plus garbage collection. This is the true birth of functional programming, even though LISP has a strong imperative core, and some key elements are missing: LISP is not lexically scoped; there are no closures, and no convenient syntax for curried function calls. "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/www-formal.stanford.edu\/jmc\/recursive.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "1962, APL, Kenneth Iverson, the book \"A Programming Language\" is published. Has an exceptionally powerful expression language, including the now standard \"map\" and \"reduce\" higher order functions (under different names). There is no APL interpreter yet. "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/www.softwarepreservation.org\/projects\/apl\/Books\/APROGRAMMING%20LANGUAGE"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "1964, P.J.Landin, \"The Mechanical Evaluation of Expressions\" describes a referentially transparent, lexically scoped, pure functional language with lexically scoped closures and curried functions. The syntax is a recognizable precursor to ML and Haskell. A virtual machine called the SECD machine is described for implementing functional languages (including lexical scoping and closures, which are missing from LISP). Earliest use of \"referential transparency\" to describe a programming language? "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.cs.cmu.edu\/~crary\/819-f09\/Landin64.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "1966, P.J.Landin, \"The Next 700 Programming Languages\". This is the earliest published use of the term \"functional programming\" I can find, although it is by now reportedly in common use. This is the original "
                                    },
                                    {
                                        "type": "text",
                                        "text": "manifesto",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " for functional (ie, non-imperative) programming. It describes the research language ISWIM, spawning the ML\/Haskell lineage of functional languages. "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/www-formal.stanford.edu\/jmc\/recursive.pdf"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1588822484.019900",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1588822707.000000"
        },
        "client_msg_id": "219e926c-c186-4e62-9ed1-c8d023595244",
        "text": "Something I'm curious about, along these lines — what were the first computer languages that were in acknowledged as being related to \/ derived from lambda calculus?\n\nAnything prior to this? 1965, P.J. Landin, \"Correspondence between ALGOL 60 and Church's Lambda-notation\" <https:\/\/dl.acm.org\/doi\/10.1145\/363744.363749>\n\nMy curiosity stems from.. wondering at what point people in the nascent PL world realized that there correspondences with the work being done to pin down math's foundations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588813244.019700",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o8V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something I'm curious about, along these lines — what were the first computer languages that were in acknowledged as being related to \/ derived from lambda calculus?\n\nAnything prior to this? 1965, P.J. Landin, \"Correspondence between ALGOL 60 and Church's Lambda-notation\" "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/10.1145\/363744.363749"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMy curiosity stems from.. wondering at what point people in the nascent PL world realized that there correspondences with the work being done to pin down math's foundations."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]