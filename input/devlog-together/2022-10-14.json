[
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1665786983.335369",
        "client_msg_id": "69a9cb03-33c0-47a8-a52b-3dfbcf9a4b65",
        "text": "A video introducing the concept of Rules as Code, and demonstrating my prototypical Rules as Code platform Blawx. Feedback (on the video, and the tool) is welcome. Video is 10m. <https:\/\/www.youtube.com\/watch?v=OgIln-K_2S4>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665786983.335369",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1666154491.257669",
        "reply_users": [
            "U02U0AS3J49",
            "UFPPABQ7P",
            "UCUSW7WVD",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "U02U0AS3J49",
                "ts": "1665787059.060269"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1665787184.848079"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1665810723.637689"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1665811116.297809"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1666025854.189169"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1666025905.197019"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1666154491.257669"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OoaN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A video introducing the concept of Rules as Code, and demonstrating my prototypical Rules as Code platform Blawx. Feedback (on the video, and the tool) is welcome. Video is 10m. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=OgIln-K_2S4"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "raised_hands",
                "users": [
                    "U0296ACR13M"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1665787059.060269",
        "client_msg_id": "dcb9224e-0fc9-4c18-a583-40dcf44cb521",
        "text": "Please don't share the link publicly. My bosses inside have recently become paranoid that anything I say in public is going to be perceived as an official statement of the government of Canada, and need to be vetted and translated into French, or something. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665786983.335369",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z0GlO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Please don't share the link publicly. My bosses inside have recently become paranoid that anything I say in public is going to be perceived as an official statement of the government of Canada, and need to be vetted and translated into French, or something. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1665787184.848079",
        "client_msg_id": "f1d53097-8353-473d-8797-d1677fe11da8",
        "text": "Also, this video took me four solid days to create, and I am not remotely certain it was worth the time. If anyone has any tips on how they communicate the complicated things they're working on, I'd be interested to hear 'em.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665786983.335369",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YN5v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, this video took me four solid days to create, and I am not remotely certain it was worth the time. If anyone has any tips on how they communicate the complicated things they're working on, I'd be interested to hear 'em."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1665810723.637689",
        "client_msg_id": "0c2e6d23-b436-4347-bb79-36cd979146ad",
        "text": "This is cool. I'm just seeing it towards the end of the day, so I don't have clear feedback to share. I really appreciate the beginning of the video breaking down the different personas interacting with the system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665786983.335369",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XIX+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is cool. I'm just seeing it towards the end of the day, so I don't have clear feedback to share. I really appreciate the beginning of the video breaking down the different personas interacting with the system."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1665811116.297809",
        "client_msg_id": "cdb4f0ae-49e6-420a-a533-3bb3b36cee92",
        "text": "Yeah, I love this.\n\nIn the first few minutes, it's a little confusing that C and D both seem to be trying to follow the new rule, though you use the word 'compliance' for D. Perhaps C needs to update govt. software to _enforce_ the rule, and D needs to follow or comply with it? Or am I misunderstanding you?\n\nAm I understanding right that tests specify \"correct\" output, while the scenario editor merely deduces consequences with some potential for running into unintended consequences?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665786983.335369",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YGH\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I love this.\n\nIn the first few minutes, it's a little confusing that C and D both seem to be trying to follow the new rule, though you use the word 'compliance' for D. Perhaps C needs to update govt. software to "
                            },
                            {
                                "type": "text",
                                "text": "enforce",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the rule, and D needs to follow or comply with it? Or am I misunderstanding you?\n\nAm I understanding right that tests specify \"correct\" output, while the scenario editor merely deduces consequences with some potential for running into unintended consequences?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1665811604.346219",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1665813223.000000"
        },
        "client_msg_id": "49ef386f-9c71-4807-839e-95bbce5e31f4",
        "text": "When I built this I wasn't sure LÖVE had a good way to recover from errors, but I think it can be done. I just need to call the event loop through an `xpcall` that takes a second function for error recovery and returns first whether it hit an error.\n\nWhat should I do on error recovery? Answering that seems to require thinking about the representation of an app. Following various past demos in Mu and Teliva, I'm planning a repo of apps to consist of the following:\n\n• A numeric sequence of versions (analogous to git commits).\n• Each version updating a single top-level definition compared to its \"parent\" version\n• Each version pulling in other top-level definitions from its parent\nFor example, suppose a version `n` includes definitions `foo` and `bar`, with each definition coming from a unique version.\n• `foo` was last defined in version `n-1`\n• `bar` was most recently defined in version `n`.\nNow suppose we edit `foo`. We get a version `n+1` whose manifest looks like this:\n\n• `foo` comes from version `n+1`\n• `bar` comes from version `n`\nIn this way, the complete manifest at some version might include multiple definitions. But only one of them was actually modified in that version compared to its parent.\n\nOk, so back to errors. Say I'm at version `n` and try to edit `foo`. I submit `n+1` in the UI. When my live program runs it crashes. The error recovery function simply switches the most recently modified definition (`foo`) from the most recent version (`n+1`) back to its version in the parent (`n-1`). When the next frame comes around, the UI continues to show version `n+1`, augmenting it with the error message from the crash. Now I can try to make a fresh edit and resubmit, see if that fixes the crash.\n\nI think I can do all this in a few hundred LoC of Lua. I can get away with a simple implementation because a paradigm of GUI development (without threads) forces most functions to return quickly. Frames are a nice boundary for snapshotting, and state lives in some global location between functions, while work done with locals within functions can be thrown away after a crash.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665594315.849469",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b5mRC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I built this I wasn't sure LÖVE had a good way to recover from errors, but I think it can be done. I just need to call the event loop through an "
                            },
                            {
                                "type": "text",
                                "text": "xpcall",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that takes a second function for error recovery and returns first whether it hit an error.\n\nWhat should I do on error recovery? Answering that seems to require thinking about the representation of an app. Following various past demos in Mu and Teliva, I'm planning a repo of apps to consist of the following:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A numeric sequence of versions (analogous to git commits)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Each version updating a single top-level definition compared to its \"parent\" version"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Each version pulling in other top-level definitions from its parent"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nFor example, suppose a version "
                            },
                            {
                                "type": "text",
                                "text": "n",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " includes definitions "
                            },
                            {
                                "type": "text",
                                "text": "foo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "bar",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", with each definition coming from a unique version.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "foo",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " was last defined in version "
                                    },
                                    {
                                        "type": "text",
                                        "text": "n-1",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "bar",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " was most recently defined in version "
                                    },
                                    {
                                        "type": "text",
                                        "text": "n",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNow suppose we edit "
                            },
                            {
                                "type": "text",
                                "text": "foo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". We get a version "
                            },
                            {
                                "type": "text",
                                "text": "n+1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " whose manifest looks like this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "foo",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " comes from version "
                                    },
                                    {
                                        "type": "text",
                                        "text": "n+1",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "bar",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " comes from version "
                                    },
                                    {
                                        "type": "text",
                                        "text": "n",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn this way, the complete manifest at some version might include multiple definitions. But only one of them was actually modified in that version compared to its parent.\n\nOk, so back to errors. Say I'm at version "
                            },
                            {
                                "type": "text",
                                "text": "n",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and try to edit "
                            },
                            {
                                "type": "text",
                                "text": "foo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I submit "
                            },
                            {
                                "type": "text",
                                "text": "n+1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the UI. When my live program runs it crashes. The error recovery function simply switches the most recently modified definition ("
                            },
                            {
                                "type": "text",
                                "text": "foo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") from the most recent version ("
                            },
                            {
                                "type": "text",
                                "text": "n+1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") back to its version in the parent ("
                            },
                            {
                                "type": "text",
                                "text": "n-1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "). When the next frame comes around, the UI continues to show version "
                            },
                            {
                                "type": "text",
                                "text": "n+1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", augmenting it with the error message from the crash. Now I can try to make a fresh edit and resubmit, see if that fixes the crash.\n\nI think I can do all this in a few hundred LoC of Lua. I can get away with a simple implementation because a paradigm of GUI development (without threads) forces most functions to return quickly. Frames are a nice boundary for snapshotting, and state lives in some global location between functions, while work done with locals within functions can be thrown away after a crash."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]