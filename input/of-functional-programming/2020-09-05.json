[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1599296121.000600",
        "edited": {
            "user": "UA14TGLTC",
            "ts": "1599296153.000000"
        },
        "client_msg_id": "62e80460-c858-43ce-8393-3abc8734b594",
        "text": "Anyone else take a look at <http:\/\/lambda-the-ultimate.org\/node\/5597> \"The Simple Essence of Algebraic Subtyping: Principal Type Inference with Subtyping Made Easy\"?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WiL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyone else take a look at "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/lambda-the-ultimate.org\/node\/5597"
                            },
                            {
                                "type": "text",
                                "text": " \"The Simple Essence of Algebraic Subtyping: Principal Type Inference with Subtyping Made Easy\"?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "face_with_monocle",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1599296236.001800",
        "client_msg_id": "c486c0c3-7fa7-4344-a085-e8fb3a7cabf7",
        "text": "I had been hoping for some good extensions with principal types, but at the end of the day, I'm not sure what this delivers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "woE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I had been hoping for some good extensions with principal types, but at the end of the day, I'm not sure what this delivers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1599296717.007100",
        "client_msg_id": "b1d7373f-dbe7-4432-a782-ae1c0b629fe0",
        "text": "As one example, for `\\f\\x(f(f x))` instead of `(a -&gt; a) -&gt; a -&gt; a` they come up with `(a|b -&gt; b) -&gt; a -&gt; b`.  There was one neat aside, \"MLsub can represent types as finite-state automata, where the states are type variables and where the edges, which are labelled, represent relations between these type variables. ... This clever representation allows one to simplify types by reusing well-known existing techniques from the domain of automata theory... However, this is a quite heavy and expensive approach.\"  Reads like reviewer appeasing.\n\nThe article is more about an algorithm than the overall approach of coming up with principal types where subtypes are involved.  \"Okay,\" I ask myself, \"to what degree does this offer an alternative to type classes?\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J3DH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As one example, for "
                            },
                            {
                                "type": "text",
                                "text": "\\f\\x(f(f x))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " instead of "
                            },
                            {
                                "type": "text",
                                "text": "(a -> a) -> a -> a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " they come up with "
                            },
                            {
                                "type": "text",
                                "text": "(a|b -> b) -> a -> b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  There was one neat aside, \"MLsub can represent types as finite-state automata, where the states are type variables and where the edges, which are labelled, represent relations between these type variables. ... This clever representation allows one to simplify types by reusing well-known existing techniques from the domain of automata theory... However, this is a quite heavy and expensive approach.\"  Reads like reviewer appeasing.\n\nThe article is more about an algorithm than the overall approach of coming up with principal types where subtypes are involved.  \"Okay,\" I ask myself, \"to what degree does this offer an alternative to type classes?\""
                            }
                        ]
                    }
                ]
            }
        ]
    }
]