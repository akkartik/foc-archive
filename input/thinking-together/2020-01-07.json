[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1578384232.031100",
        "client_msg_id": "E0DCD086-0FF5-487B-A0C0-4996CF0B90A8",
        "text": "I’m also a little surprised that Core Animation popped up in a thread about FRP. It’s a very pragmatic imperative framework using some functional techniques. \n\nIt’s great trick is that you specify start and end states of an animation (which the UI framework could basically do for you implicitly, and you got default animations without specifying anything), commit it to the render server, and all the interpolation per frame is then done on the GPU. That cleared up the CPU to take care of other things, mostly shoving memory around to manage textures and create the raster image data for these from the UI framework. Apart from much slower chips, memory bandwidth was one of the biggest issues of the early iPhones. Core Animation worked around that very effectively. (A design that fell out of constraints of the time — in case you’re following other threads about creativity. ;-)\n\nSharing the work between CPU and GPU made the first iPhone possible, or rather its smooth kinetic scrolling capabilities which separated generating the textures from moving and scaling or otherwise transforming them. If you ever used an early iPhone, you might remember the checkerboard pattern that showed up whenever you were scrolling into areas that hadn’t texture memory loaded yet — still it always felt responsive because you could see the inertia of the scrolling thanks to the checkerboard. That was a design decision realizing that it’s more important to have the animation be absolutely smooth than to see the actual content.\n\nIts greatest benefit is also its greatest weakness: once you commit an animation it just runs and you have little control over it. For animations that might be exactly what you want, but as Apple moved on to interruptible animation and gestures and now that chips are much more capable, Core Animation is likely on the way out to be replaced with something much more resembling FRP, although I wouldn’t count on Apple to deliver a pure functional approach. \n\nYou can get a glimpse of what it will look like with SwiftUI, which includes — apart from classic UI components still built on top the classic frameworks (but for how long?) — a simple graphics API for shapes and animations that is likely to eventually succeed Core Graphics (Quartz) and Core Animation and will be a more efficient implementation directly leveraging Metal. That might be what you may want to look at for inspiration: \n\n<https:\/\/developer.apple.com\/tutorials\/swiftui\/drawing-paths-and-shapes|https:\/\/developer.apple.com\/tutorials\/swiftui\/drawing-paths-and-shapes>\n\n<https:\/\/developer.apple.com\/tutorials\/swiftui\/animating-views-and-transitions|https:\/\/developer.apple.com\/tutorials\/swiftui\/animating-views-and-transitions>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kQ\/BK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m also a little surprised that Core Animation popped up in a thread about FRP. It’s a very pragmatic imperative framework using some functional techniques. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "It’s great trick is that you specify start and end states of an animation (which the UI framework could basically do for you implicitly, and you got default animations without specifying anything), commit it to the render server, and all the interpolation per frame is then done on the GPU. That cleared up the CPU to take care of other things, mostly shoving memory around to manage textures and create the raster image data for these from the UI framework. Apart from much slower chips, memory bandwidth was one of the biggest issues of the early iPhones. Core Animation worked around that very effectively. (A design that fell out of constraints of the time — in case you’re following other threads about creativity. ;-)"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Sharing the work between CPU and GPU made the first iPhone possible, or rather its smooth kinetic scrolling capabilities which separated generating the textures from moving and scaling or otherwise transforming them. If you ever used an early iPhone, you might remember the checkerboard pattern that showed up whenever you were scrolling into areas that hadn’t texture memory loaded yet — still it always felt responsive because you could see the inertia of the scrolling thanks to the checkerboard. That was a design decision realizing that it’s more important to have the animation be absolutely smooth than to see the actual content."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Its greatest benefit is also its greatest weakness: once you commit an animation it just runs and you have little control over it. For animations that might be exactly what you want, but as Apple moved on to interruptible animation and gestures and now that chips are much more capable, Core Animation is likely on the way out to be replaced with something much more resembling FRP, although I wouldn’t count on Apple to deliver a pure functional approach. "
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "You can get a glimpse of what it will look like with SwiftUI, which includes — apart from classic UI components still built on top the classic frameworks (but for how long?) — a simple graphics API for shapes and animations that is likely to eventually succeed Core Graphics (Quartz) and Core Animation and will be a more efficient implementation directly leveraging Metal. That might be what you may want to look at for inspiration: "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.apple.com\/tutorials\/swiftui\/drawing-paths-and-shapes",
                                "text": "https:\/\/developer.apple.com\/tutorials\/swiftui\/drawing-paths-and-shapes"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.apple.com\/tutorials\/swiftui\/animating-views-and-transitions",
                                "text": "https:\/\/developer.apple.com\/tutorials\/swiftui\/animating-views-and-transitions"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1578385588.031500",
        "client_msg_id": "531e2dc6-4b19-487b-ae61-e6645e123986",
        "text": "<https:\/\/gbracha.blogspot.com\/2020\/01\/the-build-is-always-broken.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578385588.031500",
        "reply_count": 17,
        "reply_users_count": 7,
        "latest_reply": "1578694940.107900",
        "reply_users": [
            "UCUSW7WVD",
            "UJN1TAYEQ",
            "UPMFG2571",
            "U8A5MS6R1",
            "UEQ6M68H0",
            "UA14TGLTC",
            "UK22Z72L8"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1578418204.053100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1578434328.002200"
            },
            {
                "user": "UPMFG2571",
                "ts": "1578437157.002500"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1578441187.004000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1578461064.009700"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1578461613.012500"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1578520123.065100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1578546999.079100"
            },
            {
                "user": "UK22Z72L8",
                "ts": "1578675377.098400"
            },
            {
                "user": "UK22Z72L8",
                "ts": "1578675478.098700"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1578676649.100900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1578677619.101500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1578679645.102200"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1578679887.102400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1578682355.106300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1578682732.106500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1578694940.107900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "The Build is Always Broken",
                "title_link": "https:\/\/gbracha.blogspot.com\/2020\/01\/the-build-is-always-broken.html",
                "text": "Programmers are always talking about broken builds: \"The build is broken\", \"I broke the build\" etc. However, the real problem is that the ...",
                "fallback": "The Build is Always Broken",
                "from_url": "https:\/\/gbracha.blogspot.com\/2020\/01\/the-build-is-always-broken.html",
                "service_icon": "https:\/\/gbracha.blogspot.com\/favicon.ico",
                "service_name": "gbracha.blogspot.com",
                "id": 1,
                "original_url": "https:\/\/gbracha.blogspot.com\/2020\/01\/the-build-is-always-broken.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jbR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/gbracha.blogspot.com\/2020\/01\/the-build-is-always-broken.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC",
                    "UK22Z72L8"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1578395025.031900",
        "client_msg_id": "ae5adcf0-7dfe-411b-b9a1-f736bfe6091c",
        "text": "<@UC6997THT> Well one thing I could imagine is that people really ARE overwhelmed by all the information. And these other haps \"hide\" or \"forget\" information so it *feels* easier to use",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576787069.006700",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4s0a5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": " Well one thing I could imagine is that people really ARE overwhelmed by all the information. And these other haps \"hide\" or \"forget\" information so it "
                            },
                            {
                                "type": "text",
                                "text": "feels",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " easier to use"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1578395121.032100",
        "client_msg_id": "dd4e31ad-ab03-48f1-a051-4a17b560e9aa",
        "text": "interesting have you seen the discussions here about the zettelkasten method? I still think it could provide a valuable way for asynchronous information exchange. To track the steps a person took to gain understanding in a certain topic landscape.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Odd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "interesting have you seen the discussions here about the zettelkasten method? I still think it could provide a valuable way for asynchronous information exchange. To track the steps a person took to gain understanding in a certain topic landscape."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1578398549.033400",
        "client_msg_id": "77CC066F-DA99-4A76-B483-342E60305634",
        "text": "I did, and I kind of use it for my own notes. \nWhat made you make the connection?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "am9YV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I did, and I kind of use it for my own notes. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "What made you make the connection?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1578401571.033700",
        "client_msg_id": "374526a3-bc95-4442-8187-6a0c0a96e4b3",
        "text": "I would also recommend signing up for SUS. I did it on a whim last fall and so happy I did—it's a *tiny* time commitment and I met some great people. I didn't have a startup but just did it under the name of my FoC research projects. The weekly 1 hour video group sessions with different people each week are fun and a great way to practice pitching your FoC project. If you aren't currently living in a tech hub, it's a great way to meet new people in tech working on interesting things. It's a very positive community where people are more constructive than critical. And it's totally free",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578383938.028900",
        "parent_user_id": "UP6G25H35",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r4kf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would also recommend signing up for SUS. I did it on a whim last fall and so happy I did—it's a "
                            },
                            {
                                "type": "text",
                                "text": "tiny",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " time commitment and I met some great people. I didn't have a startup but just did it under the name of my FoC research projects. The weekly 1 hour video group sessions with different people each week are fun and a great way to practice pitching your FoC project. If you aren't currently living in a tech hub, it's a great way to meet new people in tech working on interesting things. It's a very positive community where people are more constructive than critical. And it's totally free"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1578405032.034100",
        "client_msg_id": "d09637d8-ca24-486e-8108-a96bd3c16a05",
        "text": "• I think the zettelkasten method is by far very under appreciated. Its properties bend very nicely towards the human style of thinking. Because a single note\/zettel is not that import but the connections between notes is. Thats us - humans we remember connections. We can not relate to a object on its own it can not make sense to us. Also that you have to take a certain amount of notes before you can see that clusters do emerge. That phenomenon when you learn a new topic and can't yet orient yourself very well but with every wave the see rises and eventually encloses the nut:      <https:\/\/twitter.com\/kmett\/status\/552926129284481024>    \n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/kmett|@kmett>: Slides from my <https:\/\/twitter.com\/yow_oz|@yow_oz> #yow14 \"Stop Treading Water: Learning to Learn\" keynote are now online: <http:\/\/yowconference.com.au\/slides\/yow2014\/Kmett-StopTreadingWater.pdf> warning: big download!",
                "ts": 1420662836,
                "author_name": "Edward Kmett",
                "author_link": "https:\/\/twitter.com\/kmett\/status\/552926129284481024",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/700338266604593153\/UXezu_zY_normal.jpg",
                "author_subname": "@kmett",
                "text": "Slides from my <https:\/\/twitter.com\/yow_oz|@yow_oz> #yow14 \"Stop Treading Water: Learning to Learn\" keynote are now online: <http:\/\/yowconference.com.au\/slides\/yow2014\/Kmett-StopTreadingWater.pdf> warning: big download!",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/kmett\/status\/552926129284481024",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/kmett\/status\/552926129284481024",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lZgXz",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I think the zettelkasten method is by far very under appreciated. Its properties bend very nicely towards the human style of thinking. Because a single note\/zettel is not that import but the connections between notes is. Thats us - humans we remember connections. We can not relate to a object on its own it can not make sense to us. Also that you have to take a certain amount of notes before you can see that clusters do emerge. That phenomenon when you learn a new topic and can't yet orient yourself very well but with every wave the see rises and eventually encloses the nut:      "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/twitter.com\/kmett\/status\/552926129284481024"
                                    },
                                    {
                                        "type": "text",
                                        "text": "    "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1578405117.034500",
        "client_msg_id": "8d896803-24a8-4833-b949-15bc672f7b19",
        "text": "(slide 58 the rising sea)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dJCKQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(slide 58 the rising sea)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1578405235.034700",
        "client_msg_id": "a81e101d-4a91-4cf7-acea-f844e2d3c443",
        "text": "Again I would love to see zettelkasten repositories to take a peek into thought patterns and structures of other people. I have used a git repository with markdown files to take notes myself but I'm still pondering how to make this representation useful to others..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ROlX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Again I would love to see zettelkasten repositories to take a peek into thought patterns and structures of other people. I have used a git repository with markdown files to take notes myself but I'm still pondering how to make this representation useful to others.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1578407317.052700",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1578407424.000000"
        },
        "client_msg_id": "C571B526-51DE-4EB4-ADB2-132EC887A647",
        "text": "Ha, give me a few more months… hmm… years(?)… I hope to eventually get to publishing some more interesting insights on my blog which I got out of research I’ve done relating to how people take notes. \n\nI went into it with the expectation that each of the 20 people I talked to will have a unique process tailored to them individually. And in a way that’s true, but I was also blown away by how the motivations, objectives, and even structures they employ are not at all unique and there is tremendous overlap. Individuality in note taking seems to be mostly coming from us using different tools. It’s something where our tools clearly shape us, but we haven’t really put much thought into how we designed these tools. We still use glorified type writers, essentially. Also why I have a particular opinion about programming tools…\n\nIn connection to what I learned from cognitive science about categorization, I’ve been trying to build a useful model of how we manage personal knowledge with digital tools and what the common patterns are. \n\nFor sure our minds have strong associative capabilities, making spontaneous connections between previously unconnected ideas. On the other hand, however, we are also extremely good at communicating in linear narratives, where complex structure is woven into a sequence of ideas to form a compelling story.\n\nIn a way I’d argue that we constantly turn linear narratives into associations, which we could call learning, and the opposite, which we could call teaching.\n\nMy hypothesis is that if we understand the two directions of this process better, we can build better tools for thinking (or note taking, as a sub-category). \nI should probably consider spending less time talking about it in forums and more time actually building these tools…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3yVMo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ha, give me a few more months… hmm… years(?)… I hope to eventually get to publishing some more interesting insights on my blog which I got out of research I’ve done relating to how people take notes. \n\nI went into it with the expectation that each of the 20 people I talked to will have a unique process tailored to them individually. And in a way that’s true, but I was also blown away by how the motivations, objectives, and even structures they employ are not at all unique and there is tremendous overlap. Individuality in note taking seems to be mostly coming from us using different tools. It’s something where our tools clearly shape us, but we haven’t really put much thought into how we designed these tools. We still use glorified type writers, essentially. Also why I have a particular opinion about programming tools…\n\nIn connection to what I learned from cognitive science about categorization, I’ve been trying to build a useful model of how we manage personal knowledge with digital tools and what the common patterns are. \n\nFor sure our minds have strong associative capabilities, making spontaneous connections between previously unconnected ideas. On the other hand, however, we are also extremely good at communicating in linear narratives, where complex structure is woven into a sequence of ideas to form a compelling story.\n\nIn a way I’d argue that we constantly turn linear narratives into associations, which we could call learning, and the opposite, which we could call teaching.\n\nMy hypothesis is that if we understand the two directions of this process better, we can build better tools for thinking (or note taking, as a sub-category). \nI should probably consider spending less time talking about it in forums and more time actually building these tools…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1578418204.053100",
        "client_msg_id": "d86a2d1b-17f9-452b-8773-23d8c463809c",
        "text": "It's not so much a rebuttal as an alternative worldview. I don't see a concrete advantage given for this approach that merits the word 'broken'.\n\nOn the other hand, there *is* a thread of research on the advantages of creating software to constantly exercise disaster recovery: <https:\/\/en.wikipedia.org\/wiki\/Crash-only_software|https:\/\/en.wikipedia.org\/wiki\/Crash-only_software>\n\nIt speaks particularly to me ever since I watched _Jurassic Park_ at a formative age :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/8\/82\/Software_spanner.png",
                "image_width": 239,
                "image_height": 184,
                "image_bytes": 73511,
                "title": "Crash-only software",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Crash-only_software",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Crash-only_software",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "Crash-only software refers to computer programs that handle failures by simply restarting, without attempting any sophisticated recovery.  Correctly written components of crash-only software can microreboot to a known-good state without the help of a user.  Since failure-handling and normal startup use the same methods, this can increase the chance that bugs in failure-handling code will be noticed, except when there are leftover artifacts, such as data corruption from a severe failure, that don't occur during normal startup.\nCrash-only software also has benefits for end-users. All too often, applications do not save their data and settings while running, only at the end of their use. For example, word processors usually save settings when they are closed. A crash-only application is designed to save all changed user settings soon after they are changed, so that the persistent state matches that of the running machine. No matter how an application terminates (be it a clean close or the sudden failure of a laptop battery), the state will persist.",
                "fallback": "wikipedia: Crash-only software",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Crash-only_software"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B+N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not so much a rebuttal as an alternative worldview. I don't see a concrete advantage given for this approach that merits the word 'broken'.\n\nOn the other hand, there "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a thread of research on the advantages of creating software to constantly exercise disaster recovery: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Crash-only_software",
                                "text": "https:\/\/en.wikipedia.org\/wiki\/Crash-only_software"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt speaks particularly to me ever since I watched "
                            },
                            {
                                "type": "text",
                                "text": "Jurassic Park",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " at a formative age "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1578429681.001100",
        "client_msg_id": "a9cc793a-985f-4a1e-a358-1dfa76802718",
        "text": "By no means feel any pressure! My notes lack coherence from an outside as well inside perspective they are all mixed up with private notes. So its a difficult thing to untangle and its also something which I don't haveva good solution for yet",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2bRde",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By no means feel any pressure! My notes lack coherence from an outside as well inside perspective they are all mixed up with private notes. So its a difficult thing to untangle and its also something which I don't haveva good solution for yet"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1578429756.001300",
        "client_msg_id": "8b7eb78e-8b45-44a9-8593-ff1032213d0c",
        "text": "Thank you for the comment about linear narratives and associations. I haven't thought about this deeper but it seems very relevant to me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ddg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for the comment about linear narratives and associations. I haven't thought about this deeper but it seems very relevant to me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1578429955.001500",
        "client_msg_id": "1f71a64f-f079-49d9-bddb-c374d4b0641a",
        "text": "Also I haven't yet watched the video\/contents from will wright but somehow this felt related to me: <https:\/\/www.youtube.com\/watch?v=Ha1yYXWpNQw>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "xenogaming brief presentation",
                "title_link": "https:\/\/www.youtube.com\/watch?v=Ha1yYXWpNQw",
                "author_name": "Anders Aamodt",
                "author_link": "https:\/\/www.youtube.com\/user\/AndersJAamodt",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/Ha1yYXWpNQw\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: xenogaming brief presentation",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/Ha1yYXWpNQw?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=Ha1yYXWpNQw",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=Ha1yYXWpNQw"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lfr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also I haven't yet watched the video\/contents from will wright but somehow this felt related to me: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=Ha1yYXWpNQw"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1578431001.001800",
        "client_msg_id": "6e8afb4f-e531-4ba1-836e-77e3c6d36ad4",
        "text": "My vision for state-of-the-art functional reactive animation (FRAN):\n• Provide a rich set of 2D and 3D operators for constructing graphical values (shapes and colour patterns). For example, instead of just the endlessly recycled 2D vector graphics operators of Postscript\/SVG, support the full power of resolution-independent implicit function representation, where anything that can be described using mathematics can be expressed: algebraic surfaces, set union intersection difference, fractals, non-affine transformations, noise based procedural modelling, and so on.\n• A pure functional program, which uses these primitives, is evaluated to yield a graphical value, which may be time varying and reactive. A graphical value is represented by tree of graphics operators (call this the CSG tree).\n• An optimizing graphics compiler walks the CSG tree, compiling it into code that runs partly on the CPU and partly on the GPU.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=Dj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My vision for state-of-the-art functional reactive animation (FRAN):\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Provide a rich set of 2D and 3D operators for constructing graphical values (shapes and colour patterns). For example, instead of just the endlessly recycled 2D vector graphics operators of Postscript\/SVG, support the full power of resolution-independent implicit function representation, where anything that can be described using mathematics can be expressed: algebraic surfaces, set union intersection difference, fractals, non-affine transformations, noise based procedural modelling, and so on."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A pure functional program, which uses these primitives, is evaluated to yield a graphical value, which may be time varying and reactive. A graphical value is represented by tree of graphics operators (call this the CSG tree)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "An optimizing graphics compiler walks the CSG tree, compiling it into code that runs partly on the CPU and partly on the GPU."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "ok_hand",
                "users": [
                    "UQ3QA3ZAR"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1578434328.002200",
        "client_msg_id": "682829f9-15ac-4893-ae67-dfeba5c4695b",
        "text": "I value the benefits of live programming, so I mostly agree. However, Bracha takes the absolutist position that \"the real problem is that the very concept of _the build_ is broken.\" and \"It's high time we build a new, brave, build-free world.\" This is mistaken, because live programming doesn't always work. There are some situations where the live programming environment's ability to update the running system state to match the new code breaks down. It can happen when you change an important data structure that a lot of currently running code depends on. It's then that you need the ability to \"tear down and reconstruct the skyscraper\". So we need to preserve the ability to rebuild the world from scratch, and exercise it frequently enough so that it doesn't become irretrievably broken.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZAWl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I value the benefits of live programming, so I mostly agree. However, Bracha takes the absolutist position that \"the real problem is that the very concept of "
                            },
                            {
                                "type": "text",
                                "text": "the build",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is broken.\" and \"It's high time we build a new, brave, build-free world.\" This is mistaken, because live programming doesn't always work. There are some situations where the live programming environment's ability to update the running system state to match the new code breaks down. It can happen when you change an important data structure that a lot of currently running code depends on. It's then that you need the ability to \"tear down and reconstruct the skyscraper\". So we need to preserve the ability to rebuild the world from scratch, and exercise it frequently enough so that it doesn't become irretrievably broken."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UPMFG2571",
        "type": "message",
        "ts": "1578437157.002500",
        "client_msg_id": "5a9e5fce-9c21-4dc0-bd41-212f36d38b0e",
        "text": "I don't think it's a given that it breaks down. You change an important data structure and the old code still uses the previous layout until it has been changed to the new one. It breaks down as things currently stand but you could completely re-engineer a new world where it doesn't. What the trade offs would be for that to happen, that's a better question.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9c42167d8bfa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-19\/1070853245589_9c42167d8bfa4cbf26ad_72.png",
            "first_name": "Nuno",
            "real_name": "Nuno Leiria",
            "display_name": "Nuno Leiria",
            "team": "T5TCAFTA9",
            "name": "omniparagon",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7FqmT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think it's a given that it breaks down. You change an important data structure and the old code still uses the previous layout until it has been changed to the new one. It breaks down as things currently stand but you could completely re-engineer a new world where it doesn't. What the trade offs would be for that to happen, that's a better question."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1578439937.002900",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1578440077.000000"
        },
        "client_msg_id": "f069fb7a-4064-43f0-9596-305b7c4078eb",
        "text": "Not to pile on, but Edward also said..\n&gt; I don't know what you mean by functional.\nFRP is \"functional\" in the sense of Functional Programming — it's an approach to specifying animations using function composition, where each function describes how to transform some input graphic according to some input time. _What the animation does_ is captured by the combination of functions and their return values as you vary the time input.\n\nIt sounds like CA works a bit like Greensock or Web Animations and other OO animation tools, where you create some state object to represent the animation, specify properties and values on the object, and then submit that object to some engine. _What the animation does_ is captured by the data in that object and what the engine does based on it.\n\nThen there are the procedural animation tools, like Processing or the HTML Canvas, where you write code that is executed every frame. _What the animation does_ is a side effect of your code directly manipulating or generating the graphic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6QJZk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not to pile on, but Edward also said..\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know what you mean by functional."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FRP is \"functional\" in the sense of Functional Programming — it's an approach to specifying animations using function composition, where each function describes how to transform some input graphic according to some input time. "
                            },
                            {
                                "type": "text",
                                "text": "What the animation does",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is captured by the combination of functions and their return values as you vary the time input.\n\nIt sounds like CA works a bit like Greensock or Web Animations and other OO animation tools, where you create some state object to represent the animation, specify properties and values on the object, and then submit that object to some engine. "
                            },
                            {
                                "type": "text",
                                "text": "What the animation does",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is captured by the data in that object and what the engine does based on it.\n\nThen there are the procedural animation tools, like Processing or the HTML Canvas, where you write code that is executed every frame. "
                            },
                            {
                                "type": "text",
                                "text": "What the animation does",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a side effect of your code directly manipulating or generating the graphic."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1578441187.004000",
        "client_msg_id": "78e8d3d7-57d4-4971-80af-29598e93fb65",
        "text": "I can prove this is impossible by case analysis.\n• Case 1, the executable machine-code file that you must run in order to start the live programming IDE (the \"kernel\") is built from immutable source that cannot be live edited from inside the live programming environment. This decision simplifies the design of the IDE. However, it means that you need a traditional build system to build the kernel. All of the Smalltalks have this property, by the way. You can't live edit the Smalltalk VM from inside of Smalltalk.\n• Case 2, the source code for the kernel executable is live editable from inside the IDE. Nobody has ever done this. It might be impossible: there is probably always some irreducible kernel that cannot be live edited. If it is possible (not proven), then it's probably very complicated, and there will be bugs. Nobody has demonstrated the ability to write complex software that is guaranteed bug free. Bugs have been found in software that has been \"proven\" to be correct. These IDE bugs can lead to the executable that you must run to start the kernel getting out of sync with the source code. So you need a traditional build system as a backup to recover from this situation, and if you don't have it, then you are screwed. If you have a traditional build system for the kernel, but you don't continually test it as the software changes, then when you finally have an emergency situation, the build system won't work, and you are screwed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XRM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can prove this is impossible by case analysis.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Case 1, the executable machine-code file that you must run in order to start the live programming IDE (the \"kernel\") is built from immutable source that cannot be live edited from inside the live programming environment. This decision simplifies the design of the IDE. However, it means that you need a traditional build system to build the kernel. All of the Smalltalks have this property, by the way. You can't live edit the Smalltalk VM from inside of Smalltalk."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Case 2, the source code for the kernel executable is live editable from inside the IDE. Nobody has ever done this. It might be impossible: there is probably always some irreducible kernel that cannot be live edited. If it is possible (not proven), then it's probably very complicated, and there will be bugs. Nobody has demonstrated the ability to write complex software that is guaranteed bug free. Bugs have been found in software that has been \"proven\" to be correct. These IDE bugs can lead to the executable that you must run to start the kernel getting out of sync with the source code. So you need a traditional build system as a backup to recover from this situation, and if you don't have it, then you are screwed. If you have a traditional build system for the kernel, but you don't continually test it as the software changes, then when you finally have an emergency situation, the build system won't work, and you are screwed."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1578450774.006200",
        "client_msg_id": "430FE0D9-55D5-40DE-9D2A-3910B540093B",
        "text": "oculus quest is probably your best bet if you want to jump in right now—it would be a hack but you do get a camera feed from inside out tracking and it’s “only” $400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577753221.212900",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EBq5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oculus quest is probably your best bet if you want to jump in right now—it would be a hack but you do get a camera feed from inside out tracking and it’s “only” $400"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1578451436.009000",
        "client_msg_id": "6D8BD45E-8F25-4B2F-9E2A-038E7C6643E0",
        "text": "i aim for a feeling rather than a functional description first—most functional descriptions are bad when you initially think of them and already taken by a yc company. if you can find an evocative phrase or two-word pairing you can riff on it pretty easily and test alternatives in my experience ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578328340.438400",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/eGK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i aim for a feeling rather than a functional description first—most functional descriptions are bad when you initially think of them and already taken by a yc company. if you can find an evocative phrase or two-word pairing you can riff on it pretty easily and test alternatives in my experience "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1578456911.009300",
        "edited": {
            "user": "UC6997THT",
            "ts": "1578461077.000000"
        },
        "client_msg_id": "fa1048d7-4dde-4952-98c6-56165a7c6f91",
        "text": "I finally saw this video.\n\nAs usual I'm probably mis-understanding something but I had ton of questions\n\nrename: If I have xyz = abc() + def() and I go change .unison\/hasofabc\/names\/abc-&gt;def so now my code reads xyz = def() + def() ?!!?\n\nrename: One of the biggest issues in programming on the documentation side is the internet is full of examples of old deprecated code. So I decide that the function sould be named \"doTheThing\" as that would make the code more readable than \"thingADoRunRun\" that I named it originally. Ideally I'd like to lead all devs to use \"doTheThing\" but in unison \"thingADoRunRun\" will last forever and all examples using it will still work. You might think that's good. I think it's bad. I makes it impossible to deprecate old examples and docs\n\nrefactoring: So there's a bug in function foo, I fix the bug (change the implementation of foo). All the code is referencing the old implimentation by hash instead of indirectly by name so no bugs can ever get fixed?\n\nIn fact I don't even get how to write code in general. Let's say I write this\n\nadd(a, b) = a * b\n\na = add(1, 2)\nb = add(3, 4)\nc = add(5, 6)\n\nThen I run and see there was a mistake. I type * where I meant +. So change add to\n\nadd(a, b) = a + b\n\nBut the other 3 lines are pointing to the old version of add since they're tied to its implementation hash not to the word \"add\".\n\nWorse, how do I even fix the 3 lines? going back to the first renaming issue I can end up with these 3 lines all referring to different functions. that would seem super confusing\n\na = add(1, 2)\nb = add(3, 4)\nc = add(5, 6)\n\nno builds: Inspired by haskell I can't know before hand that a specific type is going to work with a specific implementation until I pass that type though the implementation's ast can it? In other words the compiler needs to apply the ast substuting the type I pass in and then see if that type is compatible with every statement in the ast?\n\nconflicts: the diamond conflict you mention is not an issue in modern JavaScript (es6 modules or even old amd modules). All names are in local space period. You can easily have an app that uses v1 and v2 of a library. In other words this issue was solved without the complex hashing and required custom IDE to code solution.\n\nsearching: the example is given that there are 2 functions named the same thing DoTheThing(v1), DoTheThing(v2). So now I can't, as a human, at a glance, know which version of the function is being called. I have to ask the IDE, which version of this function is this really? In JS I can just look at the import statement. `import {DoTheThing} from 'dth\/v2';`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568603017.155300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "agal",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I finally saw this video.\n\nAs usual I'm probably mis-understanding something but I had ton of questions\n\nrename: If I have xyz = abc() + def() and I go change .unison\/hasofabc\/names\/abc->def so now my code reads xyz = def() + def() ?!!?\n\nrename: One of the biggest issues in programming on the documentation side is the internet is full of examples of old deprecated code. So I decide that the function sould be named \"doTheThing\" as that would make the code more readable than \"thingADoRunRun\" that I named it originally. Ideally I'd like to lead all devs to use \"doTheThing\" but in unison \"thingADoRunRun\" will last forever and all examples using it will still work. You might think that's good. I think it's bad. I makes it impossible to deprecate old examples and docs\n\nrefactoring: So there's a bug in function foo, I fix the bug (change the implementation of foo). All the code is referencing the old implimentation by hash instead of indirectly by name so no bugs can ever get fixed?\n\nIn fact I don't even get how to write code in general. Let's say I write this\n\nadd(a, b) = a * b\n\na = add(1, 2)\nb = add(3, 4)\nc = add(5, 6)\n\nThen I run and see there was a mistake. I type * where I meant +. So change add to\n\nadd(a, b) = a + b\n\nBut the other 3 lines are pointing to the old version of add since they're tied to its implementation hash not to the word \"add\".\n\nWorse, how do I even fix the 3 lines? going back to the first renaming issue I can end up with these 3 lines all referring to different functions. that would seem super confusing\n\na = add(1, 2)\nb = add(3, 4)\nc = add(5, 6)\n\nno builds: Inspired by haskell I can't know before hand that a specific type is going to work with a specific implementation until I pass that type though the implementation's ast can it? In other words the compiler needs to apply the ast substuting the type I pass in and then see if that type is compatible with every statement in the ast?\n\nconflicts: the diamond conflict you mention is not an issue in modern JavaScript (es6 modules or even old amd modules). All names are in local space period. You can easily have an app that uses v1 and v2 of a library. In other words this issue was solved without the complex hashing and required custom IDE to code solution.\n\nsearching: the example is given that there are 2 functions named the same thing DoTheThing(v1), DoTheThing(v2). So now I can't, as a human, at a glance, know which version of the function is being called. I have to ask the IDE, which version of this function is this really? In JS I can just look at the import statement. `import {DoTheThing} from 'dth\/v2';`"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1578461064.009700",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1578463540.000000"
        },
        "client_msg_id": "58a6d449-6bd5-4df3-bfd7-d1fdfdd8701c",
        "text": "There will always be rebuilds and restarts, whether you have 'build systems' or not.\n\nThe first question is:  at what granularity do we rebuild and restart?\n\nWhat if every change meant you had to rebuild the entire system image (kernel+userspace) and reboot? Too coarse? With present day systems we can rebuild a binary and restart the OS process. State external to the process is preserved (BTW, the backward compatibility problem of data structure still exists). But what if you change one function? Can we just build and re-integrate just the function into the running process?\n\nThe second question is: how manual is the rebuild and restart process?\n\nMost build systems need to be manually invoked. Sometimes we wrap them with file-watchers to rebuild whenever something changes. This is similar to re-running a script vs updating a cell in Excel. Why not have the continuous rebuild be always available with, say, controlled snapshots?\n\nEmitting machine code for optimization or kernel etc. is completely separate. Any program can be written to emit machine code and store it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HBB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There will always be rebuilds and restarts, whether you have 'build systems' or not.\n\nThe first question is:  at what granularity do we rebuild and restart?\n\nWhat if every change meant you had to rebuild the entire system image (kernel+userspace) and reboot? Too coarse? With present day systems we can rebuild a binary and restart the OS process. State external to the process is preserved (BTW, the backward compatibility problem of data structure still exists). But what if you change one function? Can we just build and re-integrate just the function into the running process?\n\nThe second question is: how manual is the rebuild and restart process?\n\nMost build systems need to be manually invoked. Sometimes we wrap them with file-watchers to rebuild whenever something changes. This is similar to re-running a script vs updating a cell in Excel. Why not have the continuous rebuild be always available with, say, controlled snapshots?\n\nEmitting machine code for optimization or kernel etc. is completely separate. Any program can be written to emit machine code and store it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1578461598.012300",
        "client_msg_id": "78606373-2AE5-4EF4-BC64-DD51EEDDD155",
        "text": "<@UHWC9PXBL> I didn’t know that. Have you tried oculus quest yourself?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577753221.212900",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Ik",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " I didn’t know that. Have you tried oculus quest yourself?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1578461613.012500",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1578461645.000000"
        },
        "client_msg_id": "e7c3f840-f5d1-4fbf-a7bc-aa3301174dc5",
        "text": "Bracha doesn't talk about this but I think the build system idea is connected to the the idea of binaries\/processes\/apps: i.e. the output of the build. The pattern of using this is _build_ -&gt; output artifact -&gt;  _run_. If you look at systems where:\na) the 'runnable unit' of the OS isn't Unix process sized, but something smaller, and\nb) the running\/not-running dichotomy isn't primary (e.g. you have auto-persisted system image),\nthen the build system model doesn't seem particularly interesting.\nThere's the recent twitter thread about Lisp machines, if you're looking for a specific example: <https:\/\/twitter.com\/RainerJoswig\/status\/1213484071952752640>\n\nSince one of the problems of 'editing live' is that you can crash running things pretty badly, I think snapshotting and rollback become critical in this mode of operation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zdc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Bracha doesn't talk about this but I think the build system idea is connected to the the idea of binaries\/processes\/apps: i.e. the output of the build. The pattern of using this is "
                            },
                            {
                                "type": "text",
                                "text": "build",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " -> output artifact ->  "
                            },
                            {
                                "type": "text",
                                "text": "run",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". If you look at systems where:\na) the 'runnable unit' of the OS isn't Unix process sized, but something smaller, and\nb) the running\/not-running dichotomy isn't primary (e.g. you have auto-persisted system image),\nthen the build system model doesn't seem particularly interesting.\nThere's the recent twitter thread about Lisp machines, if you're looking for a specific example: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/RainerJoswig\/status\/1213484071952752640"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSince one of the problems of 'editing live' is that you can crash running things pretty badly, I think snapshotting and rollback become critical in this mode of operation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1578469305.013100",
        "client_msg_id": "c0093d38-6d79-4754-95df-10c0bef858b8",
        "text": "In the case of Core Animation, there are various properties that you can specify for beginning and ending value, and it does the tricky job of interpolating. You can also chain animations, and run sequences of them in parallel, with triggers. It is a very complete and capable animation system, and far ahead of Windows at the time as MS was lagging in graphics except in DirectX ,which was basically a rogue team inside MS that wanted to make 3D games fast, and realized the only way was to bypass the normal Windows graphical kernel, so they built they own drivers for the hardware. Now we see Apple trying to beat MS's DirectX with their own 3D interface they call Metal.  There are also capabilities if i recall correctly to have a callback function called to generate parameters. The most unusual aspect of Core Animation is the it has a 4x4 matrix, but you are pinned down in some of the parameters so you can only put a plane in perspective. They stopped short of 3D. I call it 2 and 1\/2 dimensions. Anyway supporting some animation is a very important aspect of building modern interfaces, if you want to go past simple 2D dragging of say images onto a flat surface. I would imagine some of the efforts in the FoC group are using WebGL and just going full bore into 3D. 3D comes with a lot of baggage, and it sure isn't friendly for beginners. There was an add-on library for Adobe AIR called Starling, the work of one really great german programmer, and it gives you the GPU for 2D sprite sheets, and many other accelerated things. A really great compromise, and many popular Mobile games are using Starling, because it leverages the machine independent virtual GPU that underlies Adobe AIR. I know it is a fading technology, but getting great accelerate 2D rendering is a terrific thing, and it takes a huge amount of work to build.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xm6z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the case of Core Animation, there are various properties that you can specify for beginning and ending value, and it does the tricky job of interpolating. You can also chain animations, and run sequences of them in parallel, with triggers. It is a very complete and capable animation system, and far ahead of Windows at the time as MS was lagging in graphics except in DirectX ,which was basically a rogue team inside MS that wanted to make 3D games fast, and realized the only way was to bypass the normal Windows graphical kernel, so they built they own drivers for the hardware. Now we see Apple trying to beat MS's DirectX with their own 3D interface they call Metal.  There are also capabilities if i recall correctly to have a callback function called to generate parameters. The most unusual aspect of Core Animation is the it has a 4x4 matrix, but you are pinned down in some of the parameters so you can only put a plane in perspective. They stopped short of 3D. I call it 2 and 1\/2 dimensions. Anyway supporting some animation is a very important aspect of building modern interfaces, if you want to go past simple 2D dragging of say images onto a flat surface. I would imagine some of the efforts in the FoC group are using WebGL and just going full bore into 3D. 3D comes with a lot of baggage, and it sure isn't friendly for beginners. There was an add-on library for Adobe AIR called Starling, the work of one really great german programmer, and it gives you the GPU for 2D sprite sheets, and many other accelerated things. A really great compromise, and many popular Mobile games are using Starling, because it leverages the machine independent virtual GPU that underlies Adobe AIR. I know it is a fading technology, but getting great accelerate 2D rendering is a terrific thing, and it takes a huge amount of work to build."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1578469309.013300",
        "client_msg_id": "de7b9d43-797c-4dce-a67e-d5e00b485d81",
        "text": "Honestly animation via code feels really strange to me-- hard to write and harder to read. I worked on an animation prototyping tool for a design tool and it felt so much better to use than direct code. We leveraged Greensock, had start\/end states constrained by the design (or current page state), and provided tooling to visually modify the transition (basically just leveraging interpolation over the merged tree during playback).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+91wp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Honestly animation via code feels really strange to me-- hard to write and harder to read. I worked on an animation prototyping tool for a design tool and it felt so much better to use than direct code. We leveraged Greensock, had start\/end states constrained by the design (or current page state), and provided tooling to visually modify the transition (basically just leveraging interpolation over the merged tree during playback)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1578469886.014000",
        "client_msg_id": "26c12fba-6ba9-4f25-971d-cbcfc8c24cb2",
        "text": "Most of the classic 3D animation tools, like Autocat 3D studio max, and the Maya product, had graphical interactive interfaces, which automatically generated commands in their command line language, which you could then tweak. Or use as inspiration for generating code by computers. Animation has always existed, even back in Macromind Director which spawned the whole CDROM revolution, in concert with the ability to tweak the animation. In hollywood they do motion capture, and then tweak it a little bit by hand to make it just right. The human eye and hand can get you very close, but there is inevitably some massaging, and generating sequences by computer of course is done all the time by the masters at Pixar, which use every technique possible to get things to look good. Classic Disney style cel animation is the \"hard way\", and it is pretty much extinct due to its cost.  It took over 1200 people to draw Snow White.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9vt8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Most of the classic 3D animation tools, like Autocat 3D studio max, and the Maya product, had graphical interactive interfaces, which automatically generated commands in their command line language, which you could then tweak. Or use as inspiration for generating code by computers. Animation has always existed, even back in Macromind Director which spawned the whole CDROM revolution, in concert with the ability to tweak the animation. In hollywood they do motion capture, and then tweak it a little bit by hand to make it just right. The human eye and hand can get you very close, but there is inevitably some massaging, and generating sequences by computer of course is done all the time by the masters at Pixar, which use every technique possible to get things to look good. Classic Disney style cel animation is the \"hard way\", and it is pretty much extinct due to its cost.  It took over 1200 people to draw Snow White."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1578470103.014200",
        "client_msg_id": "32bbe55a-1a46-4264-b5c1-551d2d75c40d",
        "text": "If you want to see hard core animation, here is a brief documentary on Snow White.  <https:\/\/www.youtube.com\/watch?v=OebUzEhSLBI>\nThe most expensive cartoon of its time by more than a factor of 10. You have to hand it to Walt Disney he didn't think small.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Making Of Disney's Snowwhite or How Disney Cartoons are made.flv",
                "title_link": "https:\/\/www.youtube.com\/watch?v=OebUzEhSLBI",
                "author_name": "hereitbegins",
                "author_link": "https:\/\/www.youtube.com\/user\/hereitbegins",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/OebUzEhSLBI\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Making Of Disney's Snowwhite or How Disney Cartoons are made.flv",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/OebUzEhSLBI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/www.youtube.com\/watch?v=OebUzEhSLBI",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=OebUzEhSLBI"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eoq6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you want to see hard core animation, here is a brief documentary on Snow White.  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=OebUzEhSLBI"
                            },
                            {
                                "type": "text",
                                "text": "\nThe most expensive cartoon of its time by more than a factor of 10. You have to hand it to Walt Disney he didn't think small."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]