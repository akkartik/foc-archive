[
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1549357815.874700",
        "client_msg_id": "2fdb1f0b-32f1-48a6-be80-a963b8fcfaf7",
        "text": "You beat me to it <@U8A5MS6R1>... But just wanted to say congrats to <@U71PMQ1V0> and Kevin Lynagh for Reltron, their new prototype to explore SQL. <https:\/\/kevinlynagh.com\/reltron\/> It reminds me of Looker (where I used to work and now <@UEBG0NPDK> works) but has a fresh take on a few things such as nested join discoverability and incredibly fast live data loading",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549357815.874700",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1549444795.885200",
        "reply_users": [
            "UDQBTJ211",
            "UEBG0NPDK",
            "U5TCAFTD3"
        ],
        "replies": [
            {
                "user": "UDQBTJ211",
                "ts": "1549395652.877200"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1549395902.877400"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1549416563.878500"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1549444795.885200"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1549444795.885200",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dLLY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You beat me to it "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": "... But just wanted to say congrats to "
                            },
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": " and Kevin Lynagh for Reltron, their new prototype to explore SQL. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/kevinlynagh.com\/reltron\/"
                            },
                            {
                                "type": "text",
                                "text": " It reminds me of Looker (where I used to work and now "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " works) but has a fresh take on a few things such as nested join discoverability and incredibly fast live data loading"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1549359818.874900",
        "client_msg_id": "6791dbd4-e0e3-4005-8f0c-8e6861ec0aca",
        "text": "Funny, but I need to use TOR to access this site",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549325465.867000",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K+9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Funny, but I need to use TOR to access this site"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1549359846.875100",
        "client_msg_id": "a6b73230-20be-4d4a-b7a9-0cd68057632d",
        "text": "It was blocked by IP, by Russian authorities. Seems like some time ago something else resided on this IP",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549325465.867000",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gDo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It was blocked by IP, by Russian authorities. Seems like some time ago something else resided on this IP"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1549388068.875500",
        "client_msg_id": "ac0f47a2-933a-4f90-91dc-d19ff9a00b34",
        "text": "Yup. I recommend reading from 'dataspace 0' which for some reason isn't in the list of pages linked above.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549330348.868200",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Seu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yup. I recommend reading from 'dataspace 0' which for some reason isn't in the list of pages linked above."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1549388511.875700",
        "client_msg_id": "29316ab2-11dd-4381-b2c3-7d675b3a1530",
        "text": "I agree in the sense I feel 'having or not having' is a very different thing than 'int or string' and fusing them into the same type system seems off. I'm also more comfortable with the set oriented thinking that Hickey discusses.\n\nRelatedly, I'm also not a fan of the usual ADT types anymore. I think they impose too much of an implementation detail onto what should be a conceptually pure relationship model. They define not just the relationship but also the bit representation and normalization\/denormalization strategy. I feel the entities and relationships should be defined separately from how they materialize - what parts are in contiguous bits of memory, whether they are row oriented or column oriented, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549342987.869600",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HU7D2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree in the sense I feel 'having or not having' is a very different thing than 'int or string' and fusing them into the same type system seems off. I'm also more comfortable with the set oriented thinking that Hickey discusses.\n\nRelatedly, I'm also not a fan of the usual ADT types anymore. I think they impose too much of an implementation detail onto what should be a conceptually pure relationship model. They define not just the relationship but also the bit representation and normalization\/denormalization strategy. I feel the entities and relationships should be defined separately from how they materialize - what parts are in contiguous bits of memory, whether they are row oriented or column oriented, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1549388677.875900",
        "client_msg_id": "d9d5ea02-79a5-44c0-bbcc-c62e4d3e2e84",
        "text": "&gt; Do you agree with what he considers downsides of Maybe and Either?\n\nYes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549342987.869600",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LVG",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you agree with what he considers downsides of Maybe and Either?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1549388993.876200",
        "client_msg_id": "c5f1a098-42c5-4b2a-814b-f8fbff9dfc56",
        "text": "<http:\/\/natecull.org\/wordpress\/2017\/06\/26\/dataspace-0\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549330348.868200",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fc4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/natecull.org\/wordpress\/2017\/06\/26\/dataspace-0\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1549388997.876400",
        "client_msg_id": "fef7b7b1-3c95-4dc5-8a80-79e6f8d0c2b0",
        "text": "^^",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549330348.868200",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CN9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "^^"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1549389065.876600",
        "client_msg_id": "5d51f07c-da30-4eb9-b021-2d934f454720",
        "text": "&gt; I feel the entities and relationships should be defined separately from how they materialize\n\nClojure is actually pretty good for this. The abundant data manipulation functions are all coded to interfaces that just care about things like \"Is this sorted? Is this a seq? It it associative?\". You can add your own concrete datatype with, say, a different storage strategy, and conform to whichever interfaces make sense. Very a la carte.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549342987.869600",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kSN",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel the entities and relationships should be defined separately from how they materialize"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nClojure is actually pretty good for this. The abundant data manipulation functions are all coded to interfaces that just care about things like \"Is this sorted? Is this a seq? It it associative?\". You can add your own concrete datatype with, say, a different storage strategy, and conform to whichever interfaces make sense. Very a la carte."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1549389066.876800",
        "client_msg_id": "cfd1e1a6-0ab1-442e-ac9e-26f6ebb0187b",
        "text": "Thanks, Duncan :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549330348.868200",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IWkBs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, Duncan "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1549389095.877000",
        "client_msg_id": "30e8cd51-4fb8-4b3c-b350-6c1cb1563bcb",
        "text": ":smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549330348.868200",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y\/jp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1549395652.877200",
        "client_msg_id": "6f600278-d5aa-48d7-aa26-c64ed43966d4",
        "text": "The demo works beautifully and absolutely nails that \"exploratory feel\". I'm not exactly sure what causes it, but it has that same feeling as Excel that playing around is safe, which is why it is popular with non-programmers (in fact, it's actually possible to get yourself completely muddled in Excel and lose data, but it doesn't *feel* like it).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549357815.874700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R4l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The demo works beautifully and absolutely nails that \"exploratory feel\". I'm not exactly sure what causes it, but it has that same feeling as Excel that playing around is safe, which is why it is popular with non-programmers (in fact, it's actually possible to get yourself completely muddled in Excel and lose data, but it doesn't "
                            },
                            {
                                "type": "text",
                                "text": "feel",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " like it)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1549395902.877400",
        "client_msg_id": "3eb21ac6-2c10-4140-ba3f-c5b5626f0abf",
        "text": "The only thing I would say is what I always feel about visual tools - that I wish it was also writing code underneath, that I could then go and edit. The search works great, but how do I search for long names, names with no 'e's etc.\n\nI think there should always be the option to switch to \"real\" programming, it should just never be at the expense of the natural visual interface",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549357815.874700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kvivC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The only thing I would say is what I always feel about visual tools - that I wish it was also writing code underneath, that I could then go and edit. The search works great, but how do I search for long names, names with no 'e's etc.\n\nI think there should always be the option to switch to \"real\" programming, it should just never be at the expense of the natural visual interface"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1549401459.878200",
        "client_msg_id": "1e9e238e-df51-44dc-ab65-d8368c6a0e40",
        "text": "Some of the strengths and (common) weaknesses of declarative programming: <https:\/\/www.toptal.com\/software\/declarative-programming>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "reply_count": 11,
        "reply_users_count": 6,
        "latest_reply": "1549603257.943600",
        "reply_users": [
            "UCUSW7WVD",
            "UEQ6M68H0",
            "UAJ9DV971",
            "UFD2JRE58",
            "UFW3LB2KA",
            "UD43R8ZFV"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1549432834.880400"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1549433670.880800"
            },
            {
                "user": "UAJ9DV971",
                "ts": "1549447568.888000"
            },
            {
                "user": "UFD2JRE58",
                "ts": "1549452931.890100"
            },
            {
                "user": "UFD2JRE58",
                "ts": "1549453053.890300"
            },
            {
                "user": "UFW3LB2KA",
                "ts": "1549461269.891700"
            },
            {
                "user": "UFW3LB2KA",
                "ts": "1549461429.892000"
            },
            {
                "user": "UFD2JRE58",
                "ts": "1549463931.892300"
            },
            {
                "user": "UFW3LB2KA",
                "ts": "1549466823.892700"
            },
            {
                "user": "UFW3LB2KA",
                "ts": "1549466995.892900"
            },
            {
                "user": "UD43R8ZFV",
                "ts": "1549603257.943600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Toptal Engineering Blog",
                "title": "Declarative Programming: Is It A Real Thing?",
                "title_link": "https:\/\/www.toptal.com\/software\/declarative-programming",
                "text": "In a nutshell, declarative programming consists of instructing a program on what needs to be done, instead of telling it how to do it. This approach involves providing a domain-specific language (DSL) for expressing what the user wants. This DSL shields users from messy low-level constructs while still achieving the desired end-state. While declarative programming offers advantages over the imperative approach it replaces, it’s not as straightforward as it may seem. In this comprehensive article, Toptal Freelance Software Engineer Federico Pereiro outlines his experience with declarative tools and explains how you can make declarative programming work for you.",
                "fallback": "Toptal Engineering Blog: Declarative Programming: Is It A Real Thing?",
                "image_url": "https:\/\/uploads.toptal.io\/blog\/post_image\/90360\/0502nermin_1_copy_5-890a7dfe4db8578362243f52df2070ff.jpg",
                "from_url": "https:\/\/www.toptal.com\/software\/declarative-programming",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 102471,
                "id": 1,
                "original_url": "https:\/\/www.toptal.com\/software\/declarative-programming"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X+z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some of the strengths and (common) weaknesses of declarative programming: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.toptal.com\/software\/declarative-programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1549416563.878500",
        "client_msg_id": "e7de4226-c278-4b25-903a-b24263ba91ce",
        "text": "Josh and I actually left Looker and are now at Relational AI :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549357815.874700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n1P34",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Josh and I actually left Looker and are now at Relational AI "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1549431712.880200",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1549431747.000000"
        },
        "client_msg_id": "8c6c2de0-2fe0-4f64-ab01-83248e2970c7",
        "text": "This is really great <@UEDDR6L5Q>. Extremely high idea density.\n\nAnybody have pointers to other descriptions of Christopher Alexander's notion of unfolding? Is there more to it than not trying to \"encapsulate\" low-level details away? (This question is why I didn't want to hide this response away in a sub-thread.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549431712.880200",
        "reply_count": 15,
        "reply_users_count": 4,
        "latest_reply": "1550590186.180800",
        "reply_users": [
            "UAJ9DV971",
            "UEDDR6L5Q",
            "UAVCC2X70",
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "UAJ9DV971",
                "ts": "1549447327.887200"
            },
            {
                "user": "UAJ9DV971",
                "ts": "1549447359.887400"
            },
            {
                "user": "UEDDR6L5Q",
                "ts": "1549447382.887700"
            },
            {
                "user": "UEDDR6L5Q",
                "ts": "1549447647.888400"
            },
            {
                "user": "UEDDR6L5Q",
                "ts": "1549447995.888900"
            },
            {
                "user": "UAJ9DV971",
                "ts": "1549452285.889900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1550215986.087600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1550216058.087800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1550217731.092700"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1550219872.096800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1550220140.098000"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1550220352.100200"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1550220439.101200"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1550285096.106300"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1550590186.180800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YcR\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is really great "
                            },
                            {
                                "type": "user",
                                "user_id": "UEDDR6L5Q"
                            },
                            {
                                "type": "text",
                                "text": ". Extremely high idea density.\n\nAnybody have pointers to other descriptions of Christopher Alexander's notion of unfolding? Is there more to it than not trying to \"encapsulate\" low-level details away? (This question is why I didn't want to hide this response away in a sub-thread.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1549432834.880400",
        "client_msg_id": "2c19712a-c1b0-4e50-b200-0f537dc445f0",
        "text": "The author has an interesting manifesto: <https:\/\/altocode.nl>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3600+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The author has an interesting manifesto: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/altocode.nl"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1549432893.880600",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1553849432.000000"
        },
        "client_msg_id": "f6076b0b-6cab-49b7-89f7-9a341e51c7f5",
        "text": "It is a kind of law of the evolution of computer languages, that when a language has a design flaw, particularly an omission, it will then evolve to fix that original omission. In this case you can see how Clojure which does not have the concept of a record, something that goes back to Assembler\/FORTAN\/COBOL\/PL1\/PASCAL\/C\/MODULA-2\/ etc. has invented spec\/keys to fix this. Records are the most commonly used data structure in business programming. You might have a customer in a database, and you have fields name, age, etc. The record definition makes it clear what data is to be stored. if you define a_person to hold name, age, etc., then in the code if you copy a record, in one operation you have copied a whole set of fields, thus achieve some leverage. The lack of structure and strong typing which were a hallmark of Clojure's flexibility is now being perceived as a problem, and so they are augmenting the language. Clojure and esp. Clojurescript are among the most powerful languages extant today, however, i wouldn't call them that easy to read. In some aspects, the dogshit (pardon my french) simplicity of COBOL represents a simpler programming universe. Isn't the most important thing in programming helping to eliminate programmer error? Don't the errors in programming dominate our total time spent, and thus anything we can do in the language to help catch errors early before the program is run, a positive thing, and shouldn't we therefore start to measure how well a language prevents error compared to another? Isn't that the real future of coding? I think the graphical interface prevent a lot of invalid operations from occurring, then you have solved a lot of errors. No missing commas, or unbalanced parentheses, so many errors go away in graphical space, which is why i believe they are so attractive to everyone. But isn't it also true, that the most difficult errors in programming are never syntactical or simple in nature, and that incorrect order of evaluation, and subtle dependency errors are the real spenders of elapsed time? And now that we are doing networking, and multithreading, aren't the timing and sync issues now the big issues? Those are not really visible in a graphical representation, which emphasizes connections over all other things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549342987.869600",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iu8m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is a kind of law of the evolution of computer languages, that when a language has a design flaw, particularly an omission, it will then evolve to fix that original omission. In this case you can see how Clojure which does not have the concept of a record, something that goes back to Assembler\/FORTAN\/COBOL\/PL1\/PASCAL\/C\/MODULA-2\/ etc. has invented spec\/keys to fix this. Records are the most commonly used data structure in business programming. You might have a customer in a database, and you have fields name, age, etc. The record definition makes it clear what data is to be stored. if you define a_person to hold name, age, etc., then in the code if you copy a record, in one operation you have copied a whole set of fields, thus achieve some leverage. The lack of structure and strong typing which were a hallmark of Clojure's flexibility is now being perceived as a problem, and so they are augmenting the language. Clojure and esp. Clojurescript are among the most powerful languages extant today, however, i wouldn't call them that easy to read. In some aspects, the dogshit (pardon my french) simplicity of COBOL represents a simpler programming universe. Isn't the most important thing in programming helping to eliminate programmer error? Don't the errors in programming dominate our total time spent, and thus anything we can do in the language to help catch errors early before the program is run, a positive thing, and shouldn't we therefore start to measure how well a language prevents error compared to another? Isn't that the real future of coding? I think the graphical interface prevent a lot of invalid operations from occurring, then you have solved a lot of errors. No missing commas, or unbalanced parentheses, so many errors go away in graphical space, which is why i believe they are so attractive to everyone. But isn't it also true, that the most difficult errors in programming are never syntactical or simple in nature, and that incorrect order of evaluation, and subtle dependency errors are the real spenders of elapsed time? And now that we are doing networking, and multithreading, aren't the timing and sync issues now the big issues? Those are not really visible in a graphical representation, which emphasizes connections over all other things."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD43R8ZFV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1549433670.880800",
        "client_msg_id": "7b5dff14-341c-45a4-a305-304f4e7a794b",
        "text": "I think that Federico only addressed one kind of declarative language, that of a domain specific language. PROLOG is an example of a deductive language that is declarative in nature; you don't move the execution pointer down a sequential list of instructions, instead you declare a series of facts, and the runtime magically does the logical implication steps for you so that then you can ask questions given your facts. The computer does a lot of tricky work for you in PROLOG, and it is an unfortunate fact of history that at the time the french labs invented PROLOG, there was a huge battle for funding between the AI people using LISP (primarily at Project MAC at MIT), and the MIT team won, got the funding for \"automatic programming\", and then proceeded to fail miserably to deliver on any of the promises of computer-aided programming, and it tarnished the term \"AI\" for over 20 years.  Now that the old episode has been forgotten AI is now new and shiny again, and getting massive funding all over the place (and for good reason, the latest AI techniques are fantastic and make the old stuff look extremely crude). Anyway PROLOG was taken up by the Japanese, in their ill-fated \"5th generation language\" project which burned hundreds of millions. So that buried PROLOG as a failure of that magnitude doesn't go unnoticed. But PROLOG has some unique aspects that are worth considering. Using deduction is a very powerful technique.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549401459.878200",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "laIqr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that Federico only addressed one kind of declarative language, that of a domain specific language. PROLOG is an example of a deductive language that is declarative in nature; you don't move the execution pointer down a sequential list of instructions, instead you declare a series of facts, and the runtime magically does the logical implication steps for you so that then you can ask questions given your facts. The computer does a lot of tricky work for you in PROLOG, and it is an unfortunate fact of history that at the time the french labs invented PROLOG, there was a huge battle for funding between the AI people using LISP (primarily at Project MAC at MIT), and the MIT team won, got the funding for \"automatic programming\", and then proceeded to fail miserably to deliver on any of the promises of computer-aided programming, and it tarnished the term \"AI\" for over 20 years.  Now that the old episode has been forgotten AI is now new and shiny again, and getting massive funding all over the place (and for good reason, the latest AI techniques are fantastic and make the old stuff look extremely crude). Anyway PROLOG was taken up by the Japanese, in their ill-fated \"5th generation language\" project which burned hundreds of millions. So that buried PROLOG as a failure of that magnitude doesn't go unnoticed. But PROLOG has some unique aspects that are worth considering. Using deduction is a very powerful technique."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UEQ7QL15F",
                    "UAJ9DV971",
                    "UFW3LB2KA"
                ],
                "count": 4
            }
        ]
    }
]