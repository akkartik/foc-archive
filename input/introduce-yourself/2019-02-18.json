[
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1550544849.019500",
        "client_msg_id": "36bf8155-256f-4952-a60c-cb36d71a5a25",
        "text": "The interface (standardized data types) is indeed a major problem. Just don’t forget to support sum types (aka unions aka variants).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550369313.016100",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1MU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The interface (standardized data types) is indeed a major problem. Just don’t forget to support sum types (aka unions aka variants)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "muscle",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1550557566.019800",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1550557603.000000"
        },
        "client_msg_id": "95d7c03e-c065-4a4c-9feb-719b91e9ba1b",
        "text": "Welcome! Your introduction resonates more with me than most. I’ve been thinking similarly for a while, and currently (weakly) conclude that our notion of “programming language” is ill-posed.\n\n90% of the complexity of a language is in the implementation and runtime (the “engine”). This complexity is hidden behind a superficially simple skin (the “bumper”). That’s great, but it’s caused programmers to spend all their time arguing about the shape and color of the bumper, with far less attention devoted to the engine itself. We require new models of a car brand to conform to the same exact bumper shapes as before. Everytime somebody gets frustrated with the existing variety of cars, they immediately start thinking about what new shape of bumper to build that will solve all their problems.\n\nI don’t expect you to agree with me, but hopefully you find it thought-provoking. Might the troubles languages have interoperating be a symptom of a deeper malaise? I totally buy the value of interop between languages: it allows one to mix and match multiple runtimes to their diverse strengths. For example, Python with Erlang’s scheduler would be _awesome_. But existing languages are highly constrained in their degrees of freedom, and creating interop in a way that survives version upgrades seems to create even more constraints. What constraints should we trade off in exchange for better interop?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550369313.016100",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nwE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Welcome! Your introduction resonates more with me than most. I’ve been thinking similarly for a while, and currently (weakly) conclude that our notion of “programming language” is ill-posed.\n\n90% of the complexity of a language is in the implementation and runtime (the “engine”). This complexity is hidden behind a superficially simple skin (the “bumper”). That’s great, but it’s caused programmers to spend all their time arguing about the shape and color of the bumper, with far less attention devoted to the engine itself. We require new models of a car brand to conform to the same exact bumper shapes as before. Everytime somebody gets frustrated with the existing variety of cars, they immediately start thinking about what new shape of bumper to build that will solve all their problems.\n\nI don’t expect you to agree with me, but hopefully you find it thought-provoking. Might the troubles languages have interoperating be a symptom of a deeper malaise? I totally buy the value of interop between languages: it allows one to mix and match multiple runtimes to their diverse strengths. For example, Python with Erlang’s scheduler would be "
                            },
                            {
                                "type": "text",
                                "text": "awesome",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". But existing languages are highly constrained in their degrees of freedom, and creating interop in a way that survives version upgrades seems to create even more constraints. What constraints should we trade off in exchange for better interop?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UDJ2TKB99"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "UAVCC2X70",
                    "UCXR52MU2"
                ],
                "count": 2
            }
        ]
    }
]