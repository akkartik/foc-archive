[
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1615761283.215100",
        "client_msg_id": "9d8ee773-796b-4a0e-8300-a55362cf43b4",
        "text": "&gt; a model primarily becomes just Data (the D in DCI) that can perform different Interactions in different Contexts.\nThe idea sounds similar to what you mentioned <@UFPPABQ7P>:\n&gt; I would personally gravitate towards in comparison to patterns more compatible with data-oriented programming (often found in Rust) \nDo have any resources about `data-oriented programming`?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "btvZs",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a model primarily becomes just Data (the D in DCI) that can perform different Interactions in different Contexts."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe idea sounds similar to what you mentioned "
                            },
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would personally gravitate towards in comparison to patterns more compatible with data-oriented programming (often found in Rust) "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do have any resources about "
                            },
                            {
                                "type": "text",
                                "text": "data-oriented programming",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1615762054.215300",
        "client_msg_id": "1858dc4d-592a-4e6b-8a8a-e0afcc9283d1",
        "text": "As we leverage data oriented programming at Storyscript (which I am defining as a strict separation between the data being defined separate from the business logic). Rust is good at this because it has enum types (ADTs \/ variant types) which make it quite a bit easier to embed business rules and object states into the data directly.\nWe base much of our code around variant types with <https:\/\/en.m.wikipedia.org\/wiki\/Model%E2%80%93view%E2%80%93viewmodel|MVVM (see wikipedia)> in the frontend TypeScript and an <https:\/\/en.m.wikipedia.org\/wiki\/Entity_component_system#Characteristics|ECS architecture (see \"Characteristics\" on wikipedia)> in the editing engine in Rust.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/8\/87\/MVVMPattern.png",
                "image_width": 771,
                "image_height": 232,
                "image_bytes": 18486,
                "title": "Model–view–viewmodel",
                "title_link": "https:\/\/en.m.wikipedia.org\/wiki\/Model%E2%80%93view%E2%80%93viewmodel",
                "from_url": "https:\/\/en.m.wikipedia.org\/wiki\/Model%E2%80%93view%E2%80%93viewmodel",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "Model–view–viewmodel (MVVM) is a software architectural pattern that facilitates the separation of the development of the graphical user interface (the view) – be it via a markup language or GUI code – from the development of the business logic or back-end logic (the model) so that the view is not dependent on any specific model platform. The view model of MVVM is a value converter, meaning the view model is responsible for exposing (converting) the data objects from the model in such a way that objects are easily managed and presented. In this respect, the view model is more model than view, and handles most if not all of the view's display logic. The view model may implement a mediator pattern, organizing access to the back-end logic around the set of use cases supported by the view.\nMVVM is a variation of Martin Fowler's Presentation Model design pattern. It was invented by Microsoft architects Ken Cooper and Ted Peters specifically to simplify event-driven programming of user interfaces. The pattern was incorporated into Windows Presentation Foundation (WPF) (Microsoft's .NET graphics system) and Silverlight (WPF's Internet application derivative). John Gossman, one of Microsoft's WPF and Silverlight architects, announced MVVM on his blog in 2005.Model–view–viewmodel is also referred to as model–view–binder, especially in implementations not involving the .NET platform. ZK (a web application framework written in Java) and KnockoutJS (a JavaScript library) use model–view–binder.",
                "fallback": "wikipedia: Model–view–viewmodel",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.m.wikipedia.org\/wiki\/Model%E2%80%93view%E2%80%93viewmodel"
            },
            {
                "title": "Entity component system",
                "title_link": "https:\/\/en.m.wikipedia.org\/wiki\/Entity_component_system#Characteristics",
                "from_url": "https:\/\/en.m.wikipedia.org\/wiki\/Entity_component_system#Characteristics",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "Entity–component–system (ECS) is an architectural pattern that is mostly used in game development. ECS follows the composition over inheritance principle that allows greater flexibility in defining entities where every object in a game's scene is an entity (e.g. enemies, bullets, vehicles, etc.). Every entity consists of one or more components which contains data or state. Therefore, the behavior of an entity can be changed at runtime by systems that add, remove or mutate components. This eliminates the ambiguity problems of deep and wide inheritance hierarchies that are difficult to understand, maintain and extend. Common ECS approaches are highly compatible and often combined with data-oriented design techniques.",
                "fallback": "wikipedia: Entity component system",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 2,
                "original_url": "https:\/\/en.m.wikipedia.org\/wiki\/Entity_component_system#Characteristics"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5YXG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As we leverage data oriented programming at Storyscript (which I am defining as a strict separation between the data being defined separate from the business logic). Rust is good at this because it has enum types (ADTs \/ variant types) which make it quite a bit easier to embed business rules and object states into the data directly.\nWe base much of our code around variant types with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Model%E2%80%93view%E2%80%93viewmodel",
                                "text": "MVVM (see wikipedia)"
                            },
                            {
                                "type": "text",
                                "text": " in the frontend TypeScript and an "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Entity_component_system#Characteristics",
                                "text": "ECS architecture (see \"Characteristics\" on wikipedia)"
                            },
                            {
                                "type": "text",
                                "text": " in the editing engine in Rust."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1615762365.215600",
        "client_msg_id": "7daad311-77d6-4dcb-a6b1-b198b963d365",
        "text": "<@U85HCL7JP> it sounds like our solutions are more focused on a different approach and need overall, though, since all this code is currently solely being used on a per user basis (one engine instance per document). Our engine's architecture is designed to scale well as additional complexity is added over time (such as parsing to type checking to suggestions based on type checking to personalized suggestions based on multiple sources of suggestions)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T0C4H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U85HCL7JP"
                            },
                            {
                                "type": "text",
                                "text": " it sounds like our solutions are more focused on a different approach and need overall, though, since all this code is currently solely being used on a per user basis (one engine instance per document). Our engine's architecture is designed to scale well as additional complexity is added over time (such as parsing to type checking to suggestions based on type checking to personalized suggestions based on multiple sources of suggestions)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1615762499.215800",
        "client_msg_id": "df3baa43-b88e-44c3-af0b-58809d15dab4",
        "text": "To my knowledge, it feels like Kay object orientation at the isolated service level is unavoidable (at least I haven't seen an API that wasn't basically a Kay object to pass messages back and forth with)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/ql",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To my knowledge, it feels like Kay object orientation at the isolated service level is unavoidable (at least I haven't seen an API that wasn't basically a Kay object to pass messages back and forth with)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U019PRL1BNU",
        "type": "message",
        "ts": "1615764026.216000",
        "client_msg_id": "6065d56a-24bd-4aa6-a5ca-e7cff416e8d0",
        "text": "thanks <@U013ZLJARC7> and <@UJ6LDMMN0>!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "748829849f84",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-10\/1444204670448_748829849f84c5e6d568_72.jpg",
            "first_name": "",
            "real_name": "Paul Shen",
            "display_name": "Paul Shen",
            "team": "T5TCAFTA9",
            "name": "paulshen0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615571467.178700",
        "parent_user_id": "U013ZLJARC7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rddf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UJ6LDMMN0"
                            },
                            {
                                "type": "text",
                                "text": "!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "blush",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    }
]