[
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1667113662.924319",
        "client_msg_id": "4d749b2b-8927-49b1-b1e1-b4b1f4e5fe14",
        "text": "99% of humans think of code as a medium that is too difficult. I don't think the medium is the problem. I think it's the way we've been asking end-users to interact with it:\n\nSo far, 99% of human-to-code interactions have been code-as-text, an interaction paradigm with unforgiving syntax and symbolic mental models.\n\nInvestments in interaction paradigms for code have almost exclusively focused on code-as-text and code-as-export, but there are other more end-user friendly ways of interacting with code that we can explore.\n\nLet's break down the interaction paradigms for code (tell me if I missed any!):\n\n• *Code-as-text* (massively explored): You type, the code editor helps you type. Examples: IDEs, Low-Code\n• *Code-as-export* (mostly explored): Code is treated as a secondary source of truth via one-way export flows from some vendor-specific data you're editing. The tool cannot manipulate or understand the code it just exported, and the interaction ends here. Examples: Vector-based UX design tools, No-Code\n• *Code-as-programming-portals* (moderately explored): <@U0275EZH3UN> wrote a great breakdown of this at <https:\/\/maggieappleton.com\/programming-portals>\n• *Code-as-data* (largely unexplored): Direct manipulation of code ASTs\/code visualizations\/code output. The tool responds to non-textual interaction from the user and reconciles their intent with a corresponding change in the underlying code-as-text storage.\n• *Code-as-executable* (largely unexplored): A code engine\/runtime executes code-as-data changes that result from user interactions to give the user instant feedback, closing the feedback loop of the interaction. Related to live-coding, but where live-coding is tied to code-as-text, code-as-executable can respond to changes from code-as-text as well as code-as data.\n• *Code-as-source-of-truth* (massively explored): IDEs, version control systems. The primary interaction consists of reconciling your code interactions with those performed by others, e.g. through merging, pushes, conflict resolution.\nThere's so much unexplored territory outside the traditional code-as-text and code-as-export interaction paradigms! Would love to know what you think and whether I've missed any :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667113662.924319",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1669496735.851219",
        "reply_users": [
            "UA14TGLTC",
            "U03LT7540HZ",
            "U03GBV8B58V",
            "U04D9JTLXJ4"
        ],
        "replies": [
            {
                "user": "UA14TGLTC",
                "ts": "1667199819.109829"
            },
            {
                "user": "U03LT7540HZ",
                "ts": "1667919945.644539"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1668001924.321669"
            },
            {
                "user": "U04D9JTLXJ4",
                "ts": "1669494221.329259"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1669496735.851219"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KW2d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "99% of humans think of code as a medium that is too difficult. I don't think the medium is the problem. I think it's the way we've been asking end-users to interact with it:\n\nSo far, 99% of human-to-code interactions have been code-as-text, an interaction paradigm with unforgiving syntax and symbolic mental models.\n\nInvestments in interaction paradigms for code have almost exclusively focused on code-as-text and code-as-export, but there are other more end-user friendly ways of interacting with code that we can explore.\n\nLet's break down the interaction paradigms for code (tell me if I missed any!):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-text",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (massively explored): You type, the code editor helps you type. Examples: IDEs, Low-Code"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-export",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (mostly explored): Code is treated as a secondary source of truth via one-way export flows from some vendor-specific data you're editing. The tool cannot manipulate or understand the code it just exported, and the interaction ends here. Examples: Vector-based UX design tools, No-Code"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-programming-portals",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (moderately explored): "
                                    },
                                    {
                                        "type": "user",
                                        "user_id": "U0275EZH3UN"
                                    },
                                    {
                                        "type": "text",
                                        "text": " wrote a great breakdown of this at "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/maggieappleton.com\/programming-portals"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-data",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (largely unexplored): Direct manipulation of code ASTs\/code visualizations\/code output. The tool responds to non-textual interaction from the user and reconciles their intent with a corresponding change in the underlying code-as-text storage."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-executable",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (largely unexplored): A code engine\/runtime executes code-as-data changes that result from user interactions to give the user instant feedback, closing the feedback loop of the interaction. Related to live-coding, but where live-coding is tied to code-as-text, code-as-executable can respond to changes from code-as-text as well as code-as data."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-source-of-truth",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (massively explored): IDEs, version control systems. The primary interaction consists of reconciling your code interactions with those performed by others, e.g. through merging, pushes, conflict resolution."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThere's so much unexplored territory outside the traditional code-as-text and code-as-export interaction paradigms! Would love to know what you think and whether I've missed any "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0245E9RB2B",
                    "U0123H7JRDM",
                    "UA14TGLTC",
                    "U0275EZH3UN",
                    "UML4ZEKDK"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "U02028JHX37",
        "type": "message",
        "ts": "1667123891.728319",
        "client_msg_id": "f53b7ea5-97f6-4493-a939-3f001af6e1c3",
        "text": "<@U016VUZGUUQ> Well, terms are just terms (= made up words), and the meaning is for users to decide. For example, the proof assistant community (especially the people around homotopy type theory) uses the distinction I described (information = structure you care about, data = opaque &amp; not interesting) quite often. Since we’re discussing the *potential* distinctions of data v information, the “muddying of waters” is the goal ;)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf13e3ce9df",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df13e3ce9dfc39e2f387bd3d6e87b952.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jan Ruzicka",
            "display_name": "Jan Ruzicka",
            "team": "T5TCAFTA9",
            "name": "jan.ruzicka01",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1646658984.636109",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9PmAo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " Well, terms are just terms (= made up words), and the meaning is for users to decide. For example, the proof assistant community (especially the people around homotopy type theory) uses the distinction I described (information = structure you care about, data = opaque & not interesting) quite often. Since we’re discussing the "
                            },
                            {
                                "type": "text",
                                "text": "potential",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " distinctions of data v information, the “muddying of waters” is the goal ;)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1667197987.071029",
        "client_msg_id": "4a66bd33-07af-4a81-99e0-bbd9b1a164dd",
        "text": "I'd claim that Smalltalk is mostly code-as-data and code-as-executable. Only methods (the leaves of the code tree) are manipulated as text in a typical Smalltalk system. And even those leaves are also accessible to code-as-data tools in modern Smalltalks (e.g. Squeak and Pharo). For example, I can rename slots (instance variables) across all methods of a class as a single operation. I can also search for all methods in the system that contain a specific literal, or send a specific message. Recent versions of Glamorous Toolkit (a layer on top of Pharo that completely replaces the UI) add refactoring tools that let me do system-wide find-and-replace using patterns in the AST.\nI find code-as-data-with-text-at-the-leaves a very nice mix of code representations. Text is great at fine granularity levels. It sucks for the big picture.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667197987.071029",
        "reply_count": 10,
        "reply_users_count": 5,
        "latest_reply": "1667808742.444119",
        "reply_users": [
            "U03GBV8B58V",
            "U013ZLJARC7",
            "UA14TGLTC",
            "UJBAJNFLK",
            "U03B14DUZSA"
        ],
        "replies": [
            {
                "user": "U03GBV8B58V",
                "ts": "1667198389.567849"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1667219357.697759"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1667267660.171209"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1667284317.246969"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1667294413.429129"
            },
            {
                "user": "U03B14DUZSA",
                "ts": "1667429182.650389"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1667454348.982279"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1667458366.897709"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1667458580.997139"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1667808742.444119"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YX=WD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd claim that Smalltalk is mostly code-as-data and code-as-executable. Only methods (the leaves of the code tree) are manipulated as text in a typical Smalltalk system. And even those leaves are also accessible to code-as-data tools in modern Smalltalks (e.g. Squeak and Pharo). For example, I can rename slots (instance variables) across all methods of a class as a single operation. I can also search for all methods in the system that contain a specific literal, or send a specific message. Recent versions of Glamorous Toolkit (a layer on top of Pharo that completely replaces the UI) add refactoring tools that let me do system-wide find-and-replace using patterns in the AST.\nI find code-as-data-with-text-at-the-leaves a very nice mix of code representations. Text is great at fine granularity levels. It sucks for the big picture."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC",
                    "U013HU44GLS"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1667198389.567849",
        "client_msg_id": "ad7d39fa-e450-4285-8f98-e54c046d3a28",
        "text": "Good point. I really should dig into Smalltalk. Why hasn't it taken the programming world by storm compared to popular languages with compilers and devtools that have all the the \"code as static text in 80 char wide terminals\" problems that <@U013ZLJARC7> called out recently at StrangeLoop?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1667197987.071029",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DXbj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good point. I really should dig into Smalltalk. Why hasn't it taken the programming world by storm compared to popular languages with compilers and devtools that have all the the \"code as static text in 80 char wide terminals\" problems that "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " called out recently at StrangeLoop?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]