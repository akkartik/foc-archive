[
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610097292.433200",
        "client_msg_id": "1cbe4205-e5d7-4825-97c5-57b0fddd1936",
        "text": "<@UD6EXQVM0> thanks for reading ! I'll take them from the top ...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qR7Si",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD6EXQVM0"
                            },
                            {
                                "type": "text",
                                "text": " thanks for reading ! I'll take them from the top ..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610097867.433400",
        "client_msg_id": "55151bba-9094-48a0-afed-8c891ecfeed0",
        "text": "\"baggage\" : yes, the idea is that effectively the version control history of the software and the software are one and the same, i.e. a program is a gigantic sphere composed entirely of sticky plasters. I honestly don't know if this scheme is workable at all for real projects - that's kind of why I'm building it, to find out. My thoughts are that it can be made to work, because : 1) usually when I want to modify a program, I'll be able to narrow my focus down to the feature that causes the behaviour I want to change, and its ancestors\/descendants, leaving all other code out of consideration; in my metaphor above, that means zeroing in on the one sticky plaster that matters, understanding how it works, and adding another sticky plaster 2) I can imagine optimisations where we detect 'dead code' (that can no longer run) and get rid of it \/ archive it \/ something like that; 3) something clever that we'll invent when we run into the need for it ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4xJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"baggage\" : yes, the idea is that effectively the version control history of the software and the software are one and the same, i.e. a program is a gigantic sphere composed entirely of sticky plasters. I honestly don't know if this scheme is workable at all for real projects - that's kind of why I'm building it, to find out. My thoughts are that it can be made to work, because : 1) usually when I want to modify a program, I'll be able to narrow my focus down to the feature that causes the behaviour I want to change, and its ancestors\/descendants, leaving all other code out of consideration; in my metaphor above, that means zeroing in on the one sticky plaster that matters, understanding how it works, and adding another sticky plaster 2) I can imagine optimisations where we detect 'dead code' (that can no longer run) and get rid of it \/ archive it \/ something like that; 3) something clever that we'll invent when we run into the need for it ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610098098.433600",
        "client_msg_id": "0b0511fd-011d-4ec1-8255-be7f36a4394d",
        "text": "Abstract types are my response to a historical event in our own code base, when we moved from 32-bit to 64-bit. I realised there were lots of uses of \"int\" where the author genuinely did not care how many bits were used (\"just use enough bits !\"), but lots of other cases where they did genuinely care, because reasons. So I wanted to be able to distinguish between these - therefore in zero when I say \"i32\" I mean \"signed integer with 32 bits\" but when I say \"int\" I mean \"integer\" which means \"signed or unsigned, and I don't care how many bits you use, *figure it out*\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MoeW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Abstract types are my response to a historical event in our own code base, when we moved from 32-bit to 64-bit. I realised there were lots of uses of \"int\" where the author genuinely did not care how many bits were used (\"just use enough bits !\"), but lots of other cases where they did genuinely care, because reasons. So I wanted to be able to distinguish between these - therefore in zero when I say \"i32\" I mean \"signed integer with 32 bits\" but when I say \"int\" I mean \"integer\" which means \"signed or unsigned, and I don't care how many bits you use, *figure it out*\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610098167.433800",
        "client_msg_id": "bbc2cb2d-4fe2-4c5c-ae03-74faea71c72a",
        "text": "They're also a throwback to my compsci dissertation which was on something called Order Sorted Algebras, which proposed a different meaning for \"subtyping\"; saying \"A is a subtype of B\" means \"every A is a B, but not every B is an A\", i.e. \"Square is a subtype of Rect\", even though Square has one property and Rect has two.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ydr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They're also a throwback to my compsci dissertation which was on something called Order Sorted Algebras, which proposed a different meaning for \"subtyping\"; saying \"A is a subtype of B\" means \"every A is a B, but not every B is an A\", i.e. \"Square is a subtype of Rect\", even though Square has one property and Rect has two."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610098257.434000",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610100786.000000"
        },
        "client_msg_id": "2eca67c4-b08f-47d4-a7b4-b356f24be46b",
        "text": "So I can write a bunch of code using the 'number' abstract type, and if it gets compiled for a TPU that's great at 16-bit floats, it will use those, but if it gets compiled for an FPGA that can only do 8-bit integers, it will use those instead. That's the general idea.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4ji",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So I can write a bunch of code using the 'number' abstract type, and if it gets compiled for a TPU that's great at 16-bit floats, it will use those, but if it gets compiled for an FPGA that can only do 8-bit integers, it will use those instead. That's the general idea."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610098554.434200",
        "client_msg_id": "47272232-9471-4e14-8ac2-1542bbeb17f7",
        "text": "\"when we run main(), we get a friendly little beep at the same time\" : yes, the two tasks run concurrently. There's a bunch of work to do on how to manage conflicts between features that don't know about each other (eg. what if two separate tasks both play audio or write text at the same time - how do we resolve that ?) but I'm assuming they can be resolved",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pZp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"when we run main(), we get a friendly little beep at the same time\" : yes, the two tasks run concurrently. There's a bunch of work to do on how to manage conflicts between features that don't know about each other (eg. what if two separate tasks both play audio or write text at the same time - how do we resolve that ?) but I'm assuming they can be resolved"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610098683.434400",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610098729.000000"
        },
        "client_msg_id": "3c0a35ce-30fc-46ef-844a-89443bc6315b",
        "text": "\"What is the meaning of all those dollar signs?\" Actually those are borrowed from the first language I ever programmed in, BBC BASIC - they're pronounced \"string\", so i$ would be \"i-string\". I hit on that as the character to use because it felt like the right thing, but I'm not especially wedded to that specific character. \"int i$\" means \"a task that generates a stream of int over multiple frames\" ('frames' =&gt; clock ticks or whatever - that's not fully elucidated in the document yet). For the moment you can think of them as generators. I'm also not crazy about the \"&lt;&lt;\" but I've yet to think of something better. Open to suggestions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OfGT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"What is the meaning of all those dollar signs?\" Actually those are borrowed from the first language I ever programmed in, BBC BASIC - they're pronounced \"string\", so i$ would be \"i-string\". I hit on that as the character to use because it felt like the right thing, but I'm not especially wedded to that specific character. \"int i$\" means \"a task that generates a stream of int over multiple frames\" ('frames' => clock ticks or whatever - that's not fully elucidated in the document yet). For the moment you can think of them as generators. I'm also not crazy about the \"<<\" but I've yet to think of something better. Open to suggestions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610099279.434700",
        "client_msg_id": "5cd577d6-ff93-45bf-a814-c215c987902a",
        "text": "\"\"results are named, and assignment of the result terminates the function\" it sounds like you're breaking tradition in a confusing unhelpful way\" - I did agonise over this for a while. It's actually a response to the huge mess in C++ over their recent move semantics - I wanted to break from the idea that there is an implicit stack and we're copying things around, and make it feel more like \"writing results to a variable that already exists\", the way we do in assembly language, or \"term rewriting\", where the intent is more like \"when you see this pattern, replace it with this pattern\". Also, in most C++ code I write, I invariably end up declaring a named variable eg \"result\" and then going \"return result\" at the end. So this just makes that cleaner. I also like that it lets me use very similar notation for functions and tasks, with just the operator (= or &lt;&lt;) changing.  I definitely take your point that it is different, but for the moment I'm giving myself permission to break tradition wherever it feels right !",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S2hz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"\"results are named, and assignment of the result terminates the function\" it sounds like you're breaking tradition in a confusing unhelpful way\" - I did agonise over this for a while. It's actually a response to the huge mess in C++ over their recent move semantics - I wanted to break from the idea that there is an implicit stack and we're copying things around, and make it feel more like \"writing results to a variable that already exists\", the way we do in assembly language, or \"term rewriting\", where the intent is more like \"when you see this pattern, replace it with this pattern\". Also, in most C++ code I write, I invariably end up declaring a named variable eg \"result\" and then going \"return result\" at the end. So this just makes that cleaner. I also like that it lets me use very similar notation for functions and tasks, with just the operator (= or <<) changing.  I definitely take your point that it is different, but for the moment I'm giving myself permission to break tradition wherever it feels right !"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610099666.434900",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610101389.000000"
        },
        "client_msg_id": "16db9631-c071-48e4-a82d-eaf131b0d743",
        "text": "\"inner\" function that isn't inner - yeah, I think you're right there; or maybe the other way round, that they're outer by default, but you can make them inner somehow. Where this comes from is that I noticed that when I'm writing C++ code in a straight line, I invariably end up with blocks of code that look like\n```\/\/ now I'm going to do something with (x)\nstatement1(x);\nstatement2(x);\nstatement3(x);```\nand then later on I think \"wow, I should really make that into a function\", but I'm too busy and lazy and whatever, and it's a pain in the arse, so I don't do it. Or, worse, I do it, and now the code (statement1-3) is somewhere else, and to understand what's happening I have to jump to another bit of code, and it's just ... klunky. Hence the idea of combined call-and-define; instead of the above, I just do\n```doSomething(x)\n    statement1(x)\n    statement2(x)\n    statement3(x)```\nIt's *definitely* a weird \/ quirky \/ controversial thing to do, but actually once you start writing code like that, it feels natural - you're not breaking flow all the time to create functions, you just create them and use them in the same breath.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cDi5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"inner\" function that isn't inner - yeah, I think you're right there; or maybe the other way round, that they're outer by default, but you can make them inner somehow. Where this comes from is that I noticed that when I'm writing C++ code in a straight line, I invariably end up with blocks of code that look like\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\/\/ now I'm going to do something with (x)\nstatement1(x);\nstatement2(x);\nstatement3(x);"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and then later on I think \"wow, I should really make that into a function\", but I'm too busy and lazy and whatever, and it's a pain in the arse, so I don't do it. Or, worse, I do it, and now the code (statement1-3) is somewhere else, and to understand what's happening I have to jump to another bit of code, and it's just ... klunky. Hence the idea of combined call-and-define; instead of the above, I just do\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "doSomething(x)\n    statement1(x)\n    statement2(x)\n    statement3(x)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's "
                            },
                            {
                                "type": "text",
                                "text": "definitely",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a weird \/ quirky \/ controversial thing to do, but actually once you start writing code like that, it feels natural - you're not breaking flow all the time to create functions, you just create them and use them in the same breath."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610100102.435100",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610101462.000000"
        },
        "client_msg_id": "a29814de-f8fa-4f02-8a9a-c550187f41c2",
        "text": "\"Ordinary functions cannot accept arrays? How is this not a crippling restriction?\" - yes, definitely, this one is an eyebrow-raiser. Functions are defined as \"operations on values of rank 0 only\".\nThe motivation is that (combined with array variable names having to end with square brackets) it gives us a very clean syntax for map and reduce operations; so I can look at\n```c = a + b```\nand know immediately that this is a singular operation, because c, a and b are singular values; I don't have to go back and see where they were declared to figure out what their array-rank is (which is a constant source of confusion for me in numpy, C++, etc). Conversely, when I see\n```c[] = a[] + b[]```\nI know immediately that it's a mapping operation, because I know \"+\" only takes singular values.\nThe reason this isn't crippling is that structure properties can be arrays, so I can \"smuggle\" an array into a function by wrapping it in a structure; but crucially, this manoeuvre forces me to specify semantics. So, for instance, if I have an array of vertices and I want to perform some operation on them, I have to wrap them into another structure (eg. Mesh) and now they are properly typed, so I know what's going on.\nWhat's not good about this (apart from it being super weird compared to all existing languages, which as you may have guessed by now isn't my major concern :wink:) is that I'm still unsure how to specify actual array-modifying operations like concatenation, slicing, and so on. I've got a few ideas, of course.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2pvm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Ordinary functions cannot accept arrays? How is this not a crippling restriction?\" - yes, definitely, this one is an eyebrow-raiser. Functions are defined as \"operations on values of rank 0 only\".\nThe motivation is that (combined with array variable names having to end with square brackets) it gives us a very clean syntax for map and reduce operations; so I can look at\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "c = a + b"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and know immediately that this is a singular operation, because c, a and b are singular values; I don't have to go back and see where they were declared to figure out what their array-rank is (which is a constant source of confusion for me in numpy, C++, etc). Conversely, when I see\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "c[] = a[] + b[]"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know immediately that it's a mapping operation, because I know \"+\" only takes singular values.\nThe reason this isn't crippling is that structure properties can be arrays, so I can \"smuggle\" an array into a function by wrapping it in a structure; but crucially, this manoeuvre forces me to specify semantics. So, for instance, if I have an array of vertices and I want to perform some operation on them, I have to wrap them into another structure (eg. Mesh) and now they are properly typed, so I know what's going on.\nWhat's not good about this (apart from it being super weird compared to all existing languages, which as you may have guessed by now isn't my major concern "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": ") is that I'm still unsure how to specify actual array-modifying operations like concatenation, slicing, and so on. I've got a few ideas, of course."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610100470.435400",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610101002.000000"
        },
        "client_msg_id": "74ce0b8e-8a73-4496-a7f2-141fa5d3a34a",
        "text": "\"a task is a pair of values; one is being read from (the 'current' value) and the other is being written to\" - sure, it could be a queue, and probably will end up going that way. This came from the graphics thing of \"front buffer and back buffer\", the idea that one value is being read while the other is being written, and they swap over at a specific and precise time, even if the computation of the new value is slow, or happens earlier, or both. In fact, under the hood, most of the time we can optimise that away, if there are no concurrent reads happening; and then for things like lexers we can imagine wanting to look forward or backwards in time, so yeah, a queue or another structure under the hood is a great idea. I just haven't got to that part yet !",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G1J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"a task is a pair of values; one is being read from (the 'current' value) and the other is being written to\" - sure, it could be a queue, and probably will end up going that way. This came from the graphics thing of \"front buffer and back buffer\", the idea that one value is being read while the other is being written, and they swap over at a specific and precise time, even if the computation of the new value is slow, or happens earlier, or both. In fact, under the hood, most of the time we can optimise that away, if there are no concurrent reads happening; and then for things like lexers we can imagine wanting to look forward or backwards in time, so yeah, a queue or another structure under the hood is a great idea. I just haven't got to that part yet !"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610100556.435600",
        "client_msg_id": "089f9d5d-54dd-46b9-9acb-f957e7419760",
        "text": "re. Halide, I haven't looked at it in depth, but it's awesome. Thanks for the tip, will study that a bit more.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9O7id",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "re. Halide, I haven't looked at it in depth, but it's awesome. Thanks for the tip, will study that a bit more."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013866H7LY",
        "type": "message",
        "ts": "1610134960.436500",
        "client_msg_id": "3437bd81-9487-44e6-851f-359d0d8b9715",
        "text": "Ooh I'll have to check this out soon! <@U01GPM3BY4R> do you think something like this would translate well to a VR environment? I've been exploring some VR apps, but haven't found many that use mechanical metaphors for programming",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d1dd97f527ea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-16\/1246051744354_d1dd97f527eae7f5a753_72.jpg",
            "first_name": "Zach",
            "real_name": "Zach Potter",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "zspotting",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609951702.421800",
        "parent_user_id": "USLACKBOT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pkiI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ooh I'll have to check this out soon! "
                            },
                            {
                                "type": "user",
                                "user_id": "U01GPM3BY4R"
                            },
                            {
                                "type": "text",
                                "text": " do you think something like this would translate well to a VR environment? I've been exploring some VR apps, but haven't found many that use mechanical metaphors for programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01GPM3BY4R",
        "type": "message",
        "ts": "1610135960.436700",
        "edited": {
            "user": "U01GPM3BY4R",
            "ts": "1610136285.000000"
        },
        "client_msg_id": "d020b209-0f3b-4fe0-9115-b619676ddc93",
        "text": "<@U013866H7LY> I think VR could be really cool, to create the (in progress) printer in the video I didn't have to enter a single line of code, all the design, the motion and logic are entirely visual so it's quite a good fit for VR I think. There are a few things that I want to implement first, because I promised people (like avatar mode from my first video on youtube) but I'll definitely give VR a shot at some point.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "37dd3248d4e1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-22\/2659944513472_37dd3248d4e11b1be060_72.jpg",
            "first_name": "",
            "real_name": "Felipe Reigosa",
            "display_name": "Felipe Reigosa",
            "team": "T5TCAFTA9",
            "name": "felipereigosa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609951702.421800",
        "parent_user_id": "USLACKBOT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WqE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013866H7LY"
                            },
                            {
                                "type": "text",
                                "text": " I think VR could be really cool, to create the (in progress) printer in the video I didn't have to enter a single line of code, all the design, the motion and logic are entirely visual so it's quite a good fit for VR I think. There are a few things that I want to implement first, because I promised people (like avatar mode from my first video on youtube) but I'll definitely give VR a shot at some point."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013866H7LY",
                    "UA14TGLTC",
                    "UBSMEUXAA"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U013866H7LY",
        "type": "message",
        "ts": "1610138774.437100",
        "client_msg_id": "a40743ea-567a-4e40-8c93-581126fcc1c0",
        "text": ":smile: will keep an eye on things either way",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d1dd97f527ea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-16\/1246051744354_d1dd97f527eae7f5a753_72.jpg",
            "first_name": "Zach",
            "real_name": "Zach Potter",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "zspotting",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609951702.421800",
        "parent_user_id": "USLACKBOT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zkCm2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " will keep an eye on things either way"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "grin",
                "users": [
                    "U01GPM3BY4R"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U01GPM3BY4R"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01GPM3BY4R",
        "type": "message",
        "ts": "1610139292.437500",
        "edited": {
            "user": "U01GPM3BY4R",
            "ts": "1610139341.000000"
        },
        "client_msg_id": "27c73477-e245-47cb-910c-31e7897a2626",
        "text": "Yeah, stay tuned, the second part of the printer, reading cartridges to print different things that you can swap out will look cool I think, I'll make a full build video once it's done, including how I built the 7 segment displays from scratch. And thanks for bringing up the VR stuff, people keep mentioning it so just now I sent an email to my university's VR lab, maybe they want to collaborate or something.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "37dd3248d4e1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-22\/2659944513472_37dd3248d4e11b1be060_72.jpg",
            "first_name": "",
            "real_name": "Felipe Reigosa",
            "display_name": "Felipe Reigosa",
            "team": "T5TCAFTA9",
            "name": "felipereigosa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609951702.421800",
        "parent_user_id": "USLACKBOT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D+ee",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, stay tuned, the second part of the printer, reading cartridges to print different things that you can swap out will look cool I think, I'll make a full build video once it's done, including how I built the 7 segment displays from scratch. And thanks for bringing up the VR stuff, people keep mentioning it so just now I sent an email to my university's VR lab, maybe they want to collaborate or something."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]