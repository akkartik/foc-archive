[
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560507778.364700",
        "client_msg_id": "67B36BDC-EF15-4A5A-99D2-A8D613889E0E",
        "text": "It’s interesting to see all people being “sceptical” :sweat_smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xazh1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s interesting to see all people being “sceptical” "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560507908.367900",
        "client_msg_id": "92698C52-8A6B-4365-BDFB-1F7DCD598B24",
        "text": "Try this perspective: every concept which attracts enough people becomes a culture. It becomes a living thing which sparked by the initial concept but then as the community grows the concept it self merges or is represented by the actions of the people relating to that concept\/culture ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3s2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Try this perspective: every concept which attracts enough people becomes a culture. It becomes a living thing which sparked by the initial concept but then as the community grows the concept it self merges or is represented by the actions of the people relating to that concept\/culture"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1560508266.369900",
        "client_msg_id": "DAFB75DF-341A-47F5-A033-7584F0F28011",
        "text": "I’m German. We tried this perspective 90 years ago. Didn’t work out so well. :stuck_out_tongue_winking_eye:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bqk0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m German. We tried this perspective 90 years ago. Didn’t work out so well. "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue_winking_eye",
                                "unicode": "1f61c"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560508283.370200",
        "client_msg_id": "166FD14E-F574-4AD7-ACA1-B8202BBD363A",
        "text": "So in a sense it’s a reflection of society ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mflGV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So in a sense it’s a reflection of society"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560508317.370800",
        "client_msg_id": "84FD7DEE-44C2-4519-8274-78B632CCE715",
        "text": "Im german too, it’s fine :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OZc=P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Im german too, it’s fine "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560508626.372500",
        "client_msg_id": "37A21569-898F-44DF-BCC3-9461B5B3A48A",
        "text": "What I wanted to say: I think there are also many people afraid of “ivory tower” we programmers live in. I’d say it’s kind of a natural tension ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RXA0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What I wanted to say: I think there are also many people afraid of “ivory tower” we programmers live in. I’d say it’s kind of a natural tension"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560508661.373500",
        "client_msg_id": "D9256454-4555-474E-BE9A-115A33DF8143",
        "text": "So instead of beeil afraid I try to be curious and talk to people ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mEy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So instead of beeil afraid I try to be curious and talk to people"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560508710.374200",
        "client_msg_id": "4075631C-D677-4C40-8736-06AE3F3D27FB",
        "text": "There are some very interesting projects in the space like :",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3tShF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are some very interesting projects in the space like :"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560508714.374500",
        "client_msg_id": "C6A82D88-48F2-4AA3-B59F-A07F8DD8D533",
        "text": "<https:\/\/statebox.org>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1KDPR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/statebox.org"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560508831.374900",
        "client_msg_id": "BF4E9502-4A56-4BB2-9416-71033C3DF99F",
        "text": "Or this:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hUrpw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or this:"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1560508834.375200",
        "client_msg_id": "D6670D7B-F24F-40FC-B13E-E8492CB6A4E9",
        "text": "<https:\/\/iohk.io\/about\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "attachments": [
            {
                "service_name": "Input Output",
                "title": "About IOHK",
                "title_link": "https:\/\/iohk.io\/about\/",
                "text": "Founded in 2015 by Charles Hoskinson and Jeremy Wood, IOHK is a technology company committed to using peer-to-peer innovations to provide financial services to the three billion people who don’t have them. We are an engineering company that builds cryptocurrencies and blockchains for academic institutions, government entities and corporations. We are a decentralized company that loves small, innovative teams forming and executing ideas that cause cascading disruption.",
                "fallback": "Input Output: About IOHK",
                "image_url": "https:\/\/iohk.io\/images\/meta-iohk.jpg",
                "from_url": "https:\/\/iohk.io\/about\/",
                "image_width": 375,
                "image_height": 250,
                "image_bytes": 28426,
                "service_icon": "https:\/\/iohk.io\/images\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/iohk.io\/about\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Za",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/iohk.io\/about\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1560513218.375500",
        "client_msg_id": "ac8845e6-19be-4214-948e-5366cba1bd18",
        "text": "&gt; So any language that claims to not use mutable state is merely concealing the mapping from pure functions to mutable state.\nAbstraction is the central idea that underlies high level programming languages. There is nothing \"mere\" about it.\n\n&gt;  The inventor of FP, John Backus, had a goal of creating interchangeable parts, and he felt that reducing mutable state would make things more combineable. However, 50 years later his original proposals haven't worked out. There is no evidence that people can take a chunk of Haskell code or any other FP language and inject it into another program easily.\n\n\"no evidence\"? The fact that you can do this is why I fell in love with functional programming, and it's a central part of my mental experience when I am writing functional code. Here's a quote from Backus that you might be referencing:\n&gt; Associated with the functional style of programming is an algebra of programs whose variables range over programs and whose operations are combining forms. This algebra can be used to transform programs and to solve equations whose \"unknowns\" are programs in much the same way one transforms equations in high school algebra. These transformations are given by algebraic laws and are carried out in the same language in which programs are written.\n\nHaskell people call this \"equational reasoning\". It works. It's high school algebra, applied to programs. It's what you do when you think and program in the functional style. In principle, you can use this kind of reasoning when programming in any language. But imperative languages are not designed with equational reasoning in mind: a lot of algebraic laws are just broken and don't work, which makes them frustrating and klunky to use. You are forced to think imperatively, which sucks, although it's a necessary evil when you are doing performance tuning. Functional languages are specifically designed to have a large set of algebraic laws, which makes them much more satisfying to use if you think this way when you program.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5g7N",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So any language that claims to not use mutable state is merely concealing the mapping from pure functions to mutable state."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Abstraction is the central idea that underlies high level programming languages. There is nothing \"mere\" about it.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " The inventor of FP, John Backus, had a goal of creating interchangeable parts, and he felt that reducing mutable state would make things more combineable. However, 50 years later his original proposals haven't worked out. There is no evidence that people can take a chunk of Haskell code or any other FP language and inject it into another program easily."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n\"no evidence\"? The fact that you can do this is why I fell in love with functional programming, and it's a central part of my mental experience when I am writing functional code. Here's a quote from Backus that you might be referencing:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Associated with the functional style of programming is an algebra of programs whose variables range over programs and whose operations are combining forms. This algebra can be used to transform programs and to solve equations whose \"unknowns\" are programs in much the same way one transforms equations in high school algebra. These transformations are given by algebraic laws and are carried out in the same language in which programs are written."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nHaskell people call this \"equational reasoning\". It works. It's high school algebra, applied to programs. It's what you do when you think and program in the functional style. In principle, you can use this kind of reasoning when programming in any language. But imperative languages are not designed with equational reasoning in mind: a lot of algebraic laws are just broken and don't work, which makes them frustrating and klunky to use. You are forced to think imperatively, which sucks, although it's a necessary evil when you are doing performance tuning. Functional languages are specifically designed to have a large set of algebraic laws, which makes them much more satisfying to use if you think this way when you program."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1560520066.375700",
        "client_msg_id": "0a430d40-c1d0-4e9e-9d9a-1f489247b0e4",
        "text": "Sorry if I bugged you too much about those questions! I appreciate that you answer long questions from random people online. Thank you.\n\nMy point with 1) was just that if you minimize your 'global' store, and keep many smaller contained, local stores the problems you outline can be mitigated. I was asking if you agree. (This pattern is now being encouraged in React also: Context plus many useReducers)\n\nThe dictionary vs essay metaphor is interesting. Thanks.\n\nRe: visualizations. I recently saw that other talk you gave on this with the different visualizations of the temperature converter. This makes more sense now. You see possibilities for many types of visualizations here.\n\nI've opened a few issues on Turbine about the documentation, or fixing up some of the examples. I saw you opened some issues complaining about the docs, and I hope to carry on in that tradition. Turbine is definitely intrinsically interesting enough to me, but it would be cool also to see it develop further.\n\nAlthough you dropped the FRP-viz work, are you still an FRP-believer, as it were? Is there other stuff here besides Turbine that one should keep their eye on? You've brought this OG FRP stuff to my attention, but now I'm disappointed I don't see more of it around!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558283187.462200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cbq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry if I bugged you too much about those questions! I appreciate that you answer long questions from random people online. Thank you.\n\nMy point with 1) was just that if you minimize your 'global' store, and keep many smaller contained, local stores the problems you outline can be mitigated. I was asking if you agree. (This pattern is now being encouraged in React also: Context plus many useReducers)\n\nThe dictionary vs essay metaphor is interesting. Thanks.\n\nRe: visualizations. I recently saw that other talk you gave on this with the different visualizations of the temperature converter. This makes more sense now. You see possibilities for many types of visualizations here.\n\nI've opened a few issues on Turbine about the documentation, or fixing up some of the examples. I saw you opened some issues complaining about the docs, and I hope to carry on in that tradition. Turbine is definitely intrinsically interesting enough to me, but it would be cool also to see it develop further.\n\nAlthough you dropped the FRP-viz work, are you still an FRP-believer, as it were? Is there other stuff here besides Turbine that one should keep their eye on? You've brought this OG FRP stuff to my attention, but now I'm disappointed I don't see more of it around!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1560520950.375900",
        "client_msg_id": "6daa9f3c-190e-4e16-a121-45a9a4b4594a",
        "text": "Good discussion!\n\nRecall that the question is \"why is local mutation considered bad, doesn't it reflect the world we live in\"?\n\nTo build off parts of this thread, would it be fair to say rather that\n\nPeople handling Incidental local mutation is disadvantages.\n\nThat is, if can use some higher level of abstraction to reason and delegate lower level state changes to the computer then it's a win?\n\nE.g using map over a for loop.\n\n\nMutations happen in the real world, but we're not trying to build the world. We're trying to model a very small fraction of it. <@U8A5MS6R1> I want a system that can hold information about a person. I can use a stack, list or graph to do that because those data structures have a synergy with the hardware , an API that is more widely understood, and shared underlying principles that can be used in composing. You can put validations on those ds to ensure integrity while keeping the access pattern to them universally understood.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zk6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good discussion!\n\nRecall that the question is \"why is local mutation considered bad, doesn't it reflect the world we live in\"?\n\nTo build off parts of this thread, would it be fair to say rather that\n\nPeople handling Incidental local mutation is disadvantages.\n\nThat is, if can use some higher level of abstraction to reason and delegate lower level state changes to the computer then it's a win?\n\nE.g using map over a for loop.\n\n\n\nMutations happen in the real world, but we're not trying to build the world. We're trying to model a very small fraction of it. "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " I want a system that can hold information about a person. I can use a stack, list or graph to do that because those data structures have a synergy with the hardware , an API that is more widely understood, and shared underlying principles that can be used in composing. You can put validations on those ds to ensure integrity while keeping the access pattern to them universally understood."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1560533436.385300",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1560542484.000000"
        },
        "client_msg_id": "F22AAEB3-3C56-474F-9C37-206602F8224B",
        "text": "I think one way to think about the mutation issue (in a more physical than theoretical sense) is really just about figuring out causation: we have an incorrect state, and we want to figure out why it happened. \n\nwith shared mutable state it's hard with existing tools to hunt down all the possible sources of state change. when we originally designed the system, we had a model of change in our heads that we didn't map correctly to the particular properties of our really existing system—which probably required a question like \"How and why do these things change and happen (eg, what are the possible behaviors of this AWS API function)—which sure seems a lot like the same kind of causation question \n\nfunctional programming is an attempt to make causation questions easier by restricting the types of changes that a given piece of code can make. that's one approach to the causation question. \n\nanother might be a debugging or program simulation tool-or an explicit list of dependencies like the observer pattern",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tm7F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think one way to think about the mutation issue (in a more physical than theoretical sense) is really just about figuring out causation: we have an incorrect state, and we want to figure out why it happened. \n\nwith shared mutable state it's hard with existing tools to hunt down all the possible sources of state change. when we originally designed the system, we had a model of change in our heads that we didn't map correctly to the particular properties of our really existing system—which probably required a question like \"How and why do these things change and happen (eg, what are the possible behaviors of this AWS API function)—which sure seems a lot like the same kind of causation question \n\nfunctional programming is an attempt to make causation questions easier by restricting the types of changes that a given piece of code can make. that's one approach to the causation question. \n\nanother might be a debugging or program simulation tool-or an explicit list of dependencies like the observer pattern"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UDJ2TKB99"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1560545810.385900",
        "client_msg_id": "3bc96b5a-3a7c-44a7-9180-2aec1adb74e7",
        "text": "The \"functional mindset\" (equational reasoning) and the \"imperative mindset\" are two quite different ways of thinking when you are programming. Perhaps this claim that shared mutable state is \"natural\" and \"corresponds to the real world\" is really just a way of saying that you are more comfortable thinking in the imperative mindset. Over on the <#CKC6FM9DF|category-theory> channel, we are learning category theory, which is the mathematical structure that underlies a lot of the algebraic laws and equational reasoning in Haskell. A relevant quote from a recent post: \"It turns out that many of the ideas of category theory come almost directly from the real world.\" Sounds familiar. That quote resonates with me, because at this point, I feel more comfortable with equational reasoning for most programming tasks, and my intuition tells me that the basic algebraic laws that functional programs obey also apply in a lot of real world situations outside of programming. For example, in math, addition is commutative and associative, which means that the order in which I count a set of objects (eg, the socks in my sock drawer) doesn't affect the answer. In a pure functional language, addition is also commutative and associative (modulo floating point roundoff errors), but once you add shared mutable state to a language, then these properties are lost: f(x)+g(x) is no longer equivalent to g(x)+f(x) because the order in which you call the functions now matters and can affect the result.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=zTw5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The \"functional mindset\" (equational reasoning) and the \"imperative mindset\" are two quite different ways of thinking when you are programming. Perhaps this claim that shared mutable state is \"natural\" and \"corresponds to the real world\" is really just a way of saying that you are more comfortable thinking in the imperative mindset. Over on the "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CKC6FM9DF"
                            },
                            {
                                "type": "text",
                                "text": " channel, we are learning category theory, which is the mathematical structure that underlies a lot of the algebraic laws and equational reasoning in Haskell. A relevant quote from a recent post: \"It turns out that many of the ideas of category theory come almost directly from the real world.\" Sounds familiar. That quote resonates with me, because at this point, I feel more comfortable with equational reasoning for most programming tasks, and my intuition tells me that the basic algebraic laws that functional programs obey also apply in a lot of real world situations outside of programming. For example, in math, addition is commutative and associative, which means that the order in which I count a set of objects (eg, the socks in my sock drawer) doesn't affect the answer. In a pure functional language, addition is also commutative and associative (modulo floating point roundoff errors), but once you add shared mutable state to a language, then these properties are lost: f(x)+g(x) is no longer equivalent to g(x)+f(x) because the order in which you call the functions now matters and can affect the result."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJNJQD2AC",
                    "UDQBTJ211",
                    "UKP3B2J5D"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560546985.386100",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1560547634.000000"
        },
        "client_msg_id": "3c345f52-fc79-403c-a2bf-07e038ed95e0",
        "text": "Yeah I don't doubt useful stuff can come out of the space. But at this point the hype to value ratio seems way off the charts. I also agree that interest and hype alone can actually be the driver of culture and when a lot of folks and money gets involved, great stuff can come from it. But until that happens I'm in the wait and watch boat.\n\nThe projects looks interesting. But some statements activate my overhype-ometer (e.g. \"We incorporate these into a formally verified functional programming approach, which allows us to provide unprecedented correctness guarantees.\")\n\nThis talk argues that total languages (~guaranteed to terminate) don't particularly help verification (link to section about total languages): <https:\/\/youtu.be\/dWdy_AngDp0?t=1273>. So I think while there may be many super useful things in these projects and maybe even a better programing model than the mainstream, the claims made are so strong that a heavy burden of proofs and demonstration is needed.\n\nI mean, who cares if a program is provably correct if it takes a team 5 months to encode a useful program correctly (maybe the language is mind bending) and the compiler 2 days to verify it (maybe the total number of states is huge). So real world scenarios need to be demonstrated.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560424337.334700",
        "parent_user_id": "U5TCAFTD3",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Ron Pressler - Why Writing Correct Software Is Hard and Why Math (Alone) Won’t Help Us - Curry On",
                "title_link": "https:\/\/youtu.be\/dWdy_AngDp0?t=1273",
                "author_name": "Curry On!",
                "author_link": "https:\/\/www.youtube.com\/channel\/UC-WICcSW1k3HsScuXxDrp0w",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/dWdy_AngDp0\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Ron Pressler - Why Writing Correct Software Is Hard and Why Math (Alone) Won’t Help Us - Curry On",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/dWdy_AngDp0?start=1273&feature=oembed&start=1273&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/dWdy_AngDp0?t=1273",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/dWdy_AngDp0?t=1273"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TLo+s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah I don't doubt useful stuff can come out of the space. But at this point the hype to value ratio seems way off the charts. I also agree that interest and hype alone can actually be the driver of culture and when a lot of folks and money gets involved, great stuff can come from it. But until that happens I'm in the wait and watch boat.\n\nThe projects looks interesting. But some statements activate my overhype-ometer (e.g. \"We incorporate these into a formally verified functional programming approach, which allows us to provide unprecedented correctness guarantees.\")\n\nThis talk argues that total languages (~guaranteed to terminate) don't particularly help verification (link to section about total languages): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/dWdy_AngDp0?t=1273"
                            },
                            {
                                "type": "text",
                                "text": ". So I think while there may be many super useful things in these projects and maybe even a better programing model than the mainstream, the claims made are so strong that a heavy burden of proofs and demonstration is needed.\n\nI mean, who cares if a program is provably correct if it takes a team 5 months to encode a useful program correctly (maybe the language is mind bending) and the compiler 2 days to verify it (maybe the total number of states is huge). So real world scenarios need to be demonstrated."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1560556704.392900",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1560556736.000000"
        },
        "client_msg_id": "8B2BB8E9-0516-41CF-BD20-DE5C6AF61AD5",
        "text": "totally agree in principle and the category theory lectures are already proving very addictive but I think we can't pretend that all our tasks can be reduced to counting or similar—if you've observed your house has caught fire, or that other state in the world has changed then your behavior might also...(not to argue that you can't manage that functionally, just that mutable state is (repeating a cliche at this point) a fact of life and there are different options for dealing with it)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u=w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "totally agree in principle and the category theory lectures are already proving very addictive but I think we can't pretend that all our tasks can be reduced to counting or similar—if you've observed your house has caught fire, or that other state in the world has changed then your behavior might also...(not to argue that you can't manage that functionally, just that mutable state is (repeating a cliche at this point) a fact of life and there are different options for dealing with it)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1560558455.397700",
        "client_msg_id": "401EF91E-5B4A-458F-9129-60E321164F93",
        "text": "Just re-reading this conversation new ideas occurred to me. We don’t really have mutable state in the world as we do in programming, because in the real world we have strict time that “overwrites” old things. So if your house burns, as in the example above, there can’t be some persons holding to old “not burned house” and others to the burned house. Everyone shares the same reference. That seems more inclined with functional programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ctk2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just re-reading this conversation new ideas occurred to me. We don’t really have mutable state in the world as we do in programming, because in the real world we have strict time that “overwrites” old things. So if your house burns, as in the example above, there can’t be some persons holding to old “not burned house” and others to the burned house. Everyone shares the same reference. That seems more inclined with functional programming."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UJN1TAYEQ",
        "thread_ts": "1559911795.085800",
        "root": {
            "user": "UJN1TAYEQ",
            "type": "message",
            "ts": "1559911795.085800",
            "client_msg_id": "a7049bde-f7b9-46d4-9379-067af6e5912c",
            "text": "&gt; Why is shared mutable state considered bad? Isn't it an accurate reflection of the universe we live in?\n\nNo, it is not an accurate reflection. SMS leads to spooky action at a distance. With SMS, I can nail together two pieces of wood in Toronto, and unexpectedly, a house collapses in Los Angeles. SMS enables unpredictable non-local effects. I can't rely on local reasoning to understand what a program is doing.",
            "team": "T5TCAFTA9",
            "thread_ts": "1559911795.085800",
            "reply_count": 61,
            "reply_users_count": 16,
            "latest_reply": "1560919845.497200",
            "reply_users": [
                "UJBAJNFLK",
                "UEQ7QL15F",
                "UCGR73CAY",
                "U85HCL7JP",
                "UJN1TAYEQ",
                "UEQ6M68H0",
                "UHWC9PXBL",
                "U8A5MS6R1",
                "UC6997THT",
                "UJNJQD2AC",
                "U7C7B75R6",
                "UE6EFEPTQ",
                "UJUGB1XGD",
                "UDQBTJ211",
                "UKP3B2J5D",
                "UJK8MKYAZ"
            ],
            "replies": [
                {
                    "user": "UJBAJNFLK",
                    "ts": "1560252817.268500"
                },
                {
                    "user": "UEQ7QL15F",
                    "ts": "1560254006.269300"
                },
                {
                    "user": "UCGR73CAY",
                    "ts": "1560270172.271200"
                },
                {
                    "user": "U85HCL7JP",
                    "ts": "1560271723.272100"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560277336.272400"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1560317191.297400"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1560321459.301600"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1560321526.301800"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1560321747.302000"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1560322179.302200"
                },
                {
                    "user": "U85HCL7JP",
                    "ts": "1560354062.315400"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1560354102.315700"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1560363867.318900"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560370382.324400"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1560382269.325800"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1560382734.326100"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560392026.327000"
                },
                {
                    "user": "UC6997THT",
                    "ts": "1560396714.327800"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1560403548.328200"
                },
                {
                    "user": "UJNJQD2AC",
                    "ts": "1560436210.337000"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1560443351.338400"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1560492254.362500"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560513218.375500"
                },
                {
                    "user": "UJNJQD2AC",
                    "ts": "1560520950.375900"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1560533436.385300"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560545810.385900"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1560556704.392900"
                },
                {
                    "user": "U85HCL7JP",
                    "ts": "1560558455.397700"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560562986.397900"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1560571759.398200"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1560571972.398500"
                },
                {
                    "user": "U7C7B75R6",
                    "ts": "1560585500.398700"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1560592416.399400"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560613820.400600"
                },
                {
                    "user": "UJUGB1XGD",
                    "ts": "1560617257.400900"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1560619164.401400"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1560619239.401600"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1560619259.401800"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1560619359.402000"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1560619408.402200"
                },
                {
                    "user": "UJUGB1XGD",
                    "ts": "1560620122.402400"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1560621405.402600"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1560637615.402900"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1560682792.403300"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560687486.403500"
                },
                {
                    "user": "UDQBTJ211",
                    "ts": "1560689033.403700"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560689039.403900"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560691980.404700"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1560756569.422900"
                },
                {
                    "user": "UKP3B2J5D",
                    "ts": "1560776808.428400"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560796212.434000"
                },
                {
                    "user": "U7C7B75R6",
                    "ts": "1560797982.434600"
                },
                {
                    "user": "UJK8MKYAZ",
                    "ts": "1560798602.434900"
                },
                {
                    "user": "U7C7B75R6",
                    "ts": "1560800095.435100"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1560800388.435300"
                },
                {
                    "user": "U7C7B75R6",
                    "ts": "1560802240.435600"
                },
                {
                    "user": "U7C7B75R6",
                    "ts": "1560804027.436100"
                },
                {
                    "user": "U7C7B75R6",
                    "ts": "1560804393.436300"
                },
                {
                    "user": "UJNJQD2AC",
                    "ts": "1560837629.437100"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1560874341.450800"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1560919845.497200"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "di2g",
                    "elements": [
                        {
                            "type": "rich_text_quote",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Why is shared mutable state considered bad? Isn't it an accurate reflection of the universe we live in?"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "\n\nNo, it is not an accurate reflection. SMS leads to spooky action at a distance. With SMS, I can nail together two pieces of wood in Toronto, and unexpectedly, a house collapses in Los Angeles. SMS enables unpredictable non-local effects. I can't rely on local reasoning to understand what a program is doing."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1560562986.397900",
        "client_msg_id": "48252ee3-c88f-4838-b9be-6f2945e36ab4",
        "text": "&gt; mutable state is (repeating a cliche at this point) a fact of life and there are different options for dealing with it\n\nAgreed. \"Shared mutable state\" (SMS) is only one of the options for dealing with mutable state. SMS is strongly associated with OOP. You put all of your mutable state into objects, and the objects are organized into a graph, which usually contains cycles. That graph of object references makes shared mutable state unavoidable. An interesting alternative to OOP is data-oriented design (DOD). In this paradigm, you put all of your data into a centralized hierarchical data structure, analogous to a relational database. Application logic is kept separate from the data. DOD seems to be associated with systems level programming in C++ and Rust; the video game version is called Entity Component Systems.\n\nThe claimed benefits of DOD are performance (better cache coherence, better multi-core performance) and maintainability (it's easier to evolve the code in response to changing requirements: you aren't constantly refactoring a class hierarchy). Some DOD practitioners are also claiming smaller code size, which is great if you are compiling to WASM. It's better for Rust programming, because cyclic object graphs in OOP \"break the borrow checker\", plus Rustacians are interested in performance and maintainability.\n\nI'm still trying to get a handle on DOD. Because of that central hierarchical data structure, it doesn't seem to require shared mutable state, and it seems compatible with pure functional programming. It also looks more compatible with GPU programming, because OOP object graphs aren't feasible on a GPU. So I'm investigating these ideas in the context of my Curv project, which can be considered a pure functional language for programming GPUs. A while back, somebody posted a reference to Raph Levian's Druid, a data oriented GUI framework in Rust. There is also Elm, which is a pure functional language for creating GUIs. The Elm Architecture seems to have some resemblance to DOD.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GCn",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "mutable state is (repeating a cliche at this point) a fact of life and there are different options for dealing with it"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nAgreed. \"Shared mutable state\" (SMS) is only one of the options for dealing with mutable state. SMS is strongly associated with OOP. You put all of your mutable state into objects, and the objects are organized into a graph, which usually contains cycles. That graph of object references makes shared mutable state unavoidable. An interesting alternative to OOP is data-oriented design (DOD). In this paradigm, you put all of your data into a centralized hierarchical data structure, analogous to a relational database. Application logic is kept separate from the data. DOD seems to be associated with systems level programming in C++ and Rust; the video game version is called Entity Component Systems.\n\nThe claimed benefits of DOD are performance (better cache coherence, better multi-core performance) and maintainability (it's easier to evolve the code in response to changing requirements: you aren't constantly refactoring a class hierarchy). Some DOD practitioners are also claiming smaller code size, which is great if you are compiling to WASM. It's better for Rust programming, because cyclic object graphs in OOP \"break the borrow checker\", plus Rustacians are interested in performance and maintainability.\n\nI'm still trying to get a handle on DOD. Because of that central hierarchical data structure, it doesn't seem to require shared mutable state, and it seems compatible with pure functional programming. It also looks more compatible with GPU programming, because OOP object graphs aren't feasible on a GPU. So I'm investigating these ideas in the context of my Curv project, which can be considered a pure functional language for programming GPUs. A while back, somebody posted a reference to Raph Levian's Druid, a data oriented GUI framework in Rust. There is also Elm, which is a pure functional language for creating GUIs. The Elm Architecture seems to have some resemblance to DOD."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJVEPCVT6",
                    "UA14TGLTC",
                    "UBSMEUXAA",
                    "UAJ9DV971"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560571759.398200",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1560571791.000000"
        },
        "client_msg_id": "eac18546-1489-4eb8-8374-169d16c9dae1",
        "text": "<@U85HCL7JP> the similarity with the real world is the concept of identity. Is it the same house in the future or a different one? Philosophically you can say either one.. maybe it's a different house every moment as those atoms travel through time. But conceptually it can be considered the \"same house\" even when you actually modify it, rebuild a wall, etc. It's the human mental model of the world that maintains the concept of identity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aqr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U85HCL7JP"
                            },
                            {
                                "type": "text",
                                "text": " the similarity with the real world is the concept of identity. Is it the same house in the future or a different one? Philosophically you can say either one.. maybe it's a different house every moment as those atoms travel through time. But conceptually it can be considered the \"same house\" even when you actually modify it, rebuild a wall, etc. It's the human mental model of the world that maintains the concept of identity."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1560571972.398500",
        "client_msg_id": "17ed6540-d951-4fed-a480-2db77bf6d582",
        "text": "And FP uses pure functions and tries to simulate artifacts with identity as well. It could use data values.. an id of some kind.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1559911795.085800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RYID",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And FP uses pure functions and tries to simulate artifacts with identity as well. It could use data values.. an id of some kind."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]