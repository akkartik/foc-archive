[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1642493615.053200",
        "client_msg_id": "99e5bc71-b344-4edd-aaf2-bb510c640b96",
        "text": "I think there is nothing wrong per se with Observable's approach, but if the stuff I need to glue together is not in Observable, it won't work for me. I suspect that the uncomposability that <@UCUSW7WVD> describes is mostly due to different conventions used by different software tools\/environments and different communities. Software components can be assembled together only if the interfaces fit perfectly, and given the enormous amount of detail that can go into software, that's a big constraint.\nMy current view (likely to change, as it has changed in the past) is that the main culprit is the widespread approach of \"my language is the entire universe, except that I interface to C or JavaScript for practical reasons\". If we want software components to interface easily to components written by someone else far way in time and space, the first thing we need is languages and runtimes designed for being one among many.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642361397.040700",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3WlE7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think there is nothing wrong per se with Observable's approach, but if the stuff I need to glue together is not in Observable, it won't work for me. I suspect that the uncomposability that "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " describes is mostly due to different conventions used by different software tools\/environments and different communities. Software components can be assembled together only if the interfaces fit perfectly, and given the enormous amount of detail that can go into software, that's a big constraint.\nMy current view (likely to change, as it has changed in the past) is that the main culprit is the widespread approach of \"my language is the entire universe, except that I interface to C or JavaScript for practical reasons\". If we want software components to interface easily to components written by someone else far way in time and space, the first thing we need is languages and runtimes designed for being one among many."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1642498194.053900",
        "client_msg_id": "35e0743f-c423-4968-b00d-8ea1fe3cd553",
        "text": "&gt;  if the stuff I need to glue together is not in Observable, it won't work for me.\nBut Observablehq consumes ES6 modules, and emits ES6 modules. It has standard connector and can directly depend on NPM hosted code. The code is vanilla javascript. You can flip on your DevTools and debug it. You can use javascript's dynamic imports to load ES6 code from any URL on the internet. So it couldn't be more composable and compatible with of one of the largest software ecosystems on the planet.\n\n&gt; my language is the entire universe\nJavascript call APIs, which is where cross language composability lives.\n\n&gt; the first thing we need is languages and runtimes designed for being one among many.\nThis is what REST HTTP\/gRPC is for, we have that at the network layer.\n\nI maybe don't understand your points properly but I don't think Observable is a \"my way of the highway\" approach that I have seen many other tools do (Darklang, ELM), its vanilla Javascript (and SQL, TEX, Markdown and HTML). Maybe the fact you are forced a certain IDE is a problem but I think hosting on the browser is actually a huge win for accessibility (no installation).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642361397.040700",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oL=",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " if the stuff I need to glue together is not in Observable, it won't work for me."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBut Observablehq consumes ES6 modules, and emits ES6 modules. It has standard connector and can directly depend on NPM hosted code. The code is vanilla javascript. You can flip on your DevTools and debug it. You can use javascript's dynamic imports to load ES6 code from any URL on the internet. So it couldn't be more composable and compatible with of one of the largest software ecosystems on the planet.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my language is the entire universe"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Javascript call APIs, which is where cross language composability lives.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the first thing we need is languages and runtimes designed for being one among many."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is what REST HTTP\/gRPC is for, we have that at the network layer.\n\nI maybe don't understand your points properly but I don't think Observable is a \"my way of the highway\" approach that I have seen many other tools do (Darklang, ELM), its vanilla Javascript (and SQL, TEX, Markdown and HTML). Maybe the fact you are forced a certain IDE is a problem but I think hosting on the browser is actually a huge win for accessibility (no installation)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1642502568.054700",
        "client_msg_id": "65add19a-35c0-43d0-84d8-c21aee342026",
        "text": "&gt; Observablehq consumes ES6 modules\nFine, but what if the components I need are in Python, or R? Not a made-up example, that's my daily work environment. I'd love to be able to use Observablehq, but none of the ingredients I need  (pretty specialized stuff for molecular simulations) exist in the JS ecosystem. For the same reason, I can't use Clerk (the recently published notebook for Clojure), which looks neat as well.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642361397.040700",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ak6A",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Observablehq consumes ES6 modules"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fine, but what if the components I need are in Python, or R? Not a made-up example, that's my daily work environment. I'd love to be able to use Observablehq, but none of the ingredients I need  (pretty specialized stuff for molecular simulations) exist in the JS ecosystem. For the same reason, I can't use Clerk (the recently published notebook for Clojure), which looks neat as well."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1642502806.054900",
        "client_msg_id": "44e33c8d-c15a-4c38-b414-d75be93fd40a",
        "text": "&gt; | the first thing we need is languages and runtimes designed for being one among many.\n&gt; This is what REST HTTP\/gRPC is for, we have that at the network layer.\nIf everyone agreed on using HTTP-based component interfaces, that might perhaps work. I have some doubts, however. The popular  approach of \"Let's start on HTTP server on some random-looking port number, hoping that it's free\" doesn't scale. And configuring all port numbers by hand to avoid conflicts doesn't scale either.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642361397.040700",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8ud",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "| the first thing we need is languages and runtimes designed for being one among many.\nThis is what REST HTTP\/gRPC is for, we have that at the network layer."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If everyone agreed on using HTTP-based component interfaces, that might perhaps work. I have some doubts, however. The popular  approach of \"Let's start on HTTP server on some random-looking port number, hoping that it's free\" doesn't scale. And configuring all port numbers by hand to avoid conflicts doesn't scale either."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1642509648.055100",
        "client_msg_id": "824e4826-23ea-4102-b961-14d87d73ff76",
        "text": "I totally agree that the python and R ecosystem each has a lot of unique software that is unavailable elsewhere. But this is not the fault of the javascript ecosystem, which is more or less available *everywhere*. Javascript is running in a sandbox *expressly* to make it portable, and it is a wild success because we hardly worry about whether your JS is running on a Mac or PC. These same cannot be said for Python, where a numpy installation is a pain on pretty much every platform, and python 2 does not work with python 3. JS has a remarkably strong backwards compatibility story in comparison.\n\n&gt;  And configuring all port numbers by hand to avoid conflicts doesn't scale either.\nthis is what docker-compose solves. It gives you a way of wiring a bunch of different binaries written differently together . It's not a great solution but its best we have at the moment. I do think cross language composability is more or less solved at the network layer, we have pretty good standards for networks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642361397.040700",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B9JGv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I totally agree that the python and R ecosystem each has a lot of unique software that is unavailable elsewhere. But this is not the fault of the javascript ecosystem, which is more or less available "
                            },
                            {
                                "type": "text",
                                "text": "everywhere",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Javascript is running in a sandbox "
                            },
                            {
                                "type": "text",
                                "text": "expressly",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to make it portable, and it is a wild success because we hardly worry about whether your JS is running on a Mac or PC. These same cannot be said for Python, where a numpy installation is a pain on pretty much every platform, and python 2 does not work with python 3. JS has a remarkably strong backwards compatibility story in comparison.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " And configuring all port numbers by hand to avoid conflicts doesn't scale either."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is what docker-compose solves. It gives you a way of wiring a bunch of different binaries written differently together . It's not a great solution but its best we have at the moment. I do think cross language composability is more or less solved at the network layer, we have pretty good standards for networks."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02M6PM725T",
        "type": "message",
        "ts": "1642512790.055300",
        "edited": {
            "user": "U02M6PM725T",
            "ts": "1642513291.000000"
        },
        "client_msg_id": "eab937b0-1a39-4cfc-9de9-53dcd8416843",
        "text": "<@UAZT04VT4> “Instead, I want applications that you can take apart into recombinable parts.”\n\n<@UCGAK10LS> “Personally, I’m focused on re-inventing the very foundations of programming to make it _simpler_.”\n\n_[ disclaimer: the following is a hunch and I definitely do not have links to research backing up any of it, etc ]_\n\nI strongly believe that much more is possible than is currently considered. I feel that (1) we, as computer scientists, developers, or just users of PL’s \/ digital artifacts are blinded by our own tradition; that we are flattening our comprehension of our own human cognitive\/linguistic capacities by subconsciously projecting them onto the plane of known PL’s and traditional formalisms. And (2) that each of the two quotes above, minus overlap, embodies at least one prospective magnitude of improvement in accessibility\/usability\/metrics of cognitive complexity growth.\n\nAnd that’s a huge part of why I appreciate the general openness of FoC! We need to enter a state of playfulness on all levels; inviting our minds to free play outside of our schooling and current experiences. We also need to consciously seek out other points of reference than the current focal points in CS\/PLT and find more reference points that can span a broader PL design space. We need to find ways to let go of our discomfort with human cognition\/perception\/language capacity, accepting… no,  embracing, first-principles thinking; immersing ourselves in a decent level first-principles playfulness.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "46b1d789abee",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-14\/2726013476404_46b1d789abee49842525_72.jpg",
            "first_name": "Henning",
            "real_name": "Henning Sato von Rosen",
            "display_name": "hvrosen",
            "team": "T5TCAFTA9",
            "name": "henning.von.rosen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642361397.040700",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vos",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAZT04VT4"
                            },
                            {
                                "type": "text",
                                "text": " “Instead, I want applications that you can take apart into recombinable parts.”\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " “Personally, I’m focused on re-inventing the very foundations of programming to make it "
                            },
                            {
                                "type": "text",
                                "text": "simpler",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".”\n\n"
                            },
                            {
                                "type": "text",
                                "text": "[ disclaimer: the following is a hunch and I definitely do not have links to research backing up any of it, etc ]",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nI strongly believe that much more is possible than is currently considered. I feel that (1) we, as computer scientists, developers, or just users of PL’s \/ digital artifacts are blinded by our own tradition; that we are flattening our comprehension of our own human cognitive\/linguistic capacities by subconsciously projecting them onto the plane of known PL’s and traditional formalisms. And (2) that each of the two quotes above, minus overlap, embodies at least one prospective magnitude of improvement in accessibility\/usability\/metrics of cognitive complexity growth.\n\nAnd that’s a huge part of why I appreciate the general openness of FoC! We need to enter a state of playfulness on all levels; inviting our minds to free play outside of our schooling and current experiences. We also need to consciously seek out other points of reference than the current focal points in CS\/PLT and find more reference points that can span a broader PL design space. We need to find ways to let go of our discomfort with human cognition\/perception\/language capacity, accepting… no,  embracing, first-principles thinking; immersing ourselves in a decent level first-principles playfulness."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U02E4DAQGSZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U9C92716C",
        "type": "message",
        "ts": "1642520639.090700",
        "edited": {
            "user": "U9C92716C",
            "ts": "1642520788.000000"
        },
        "client_msg_id": "b9156d50-7ee3-4ba1-8529-ef4d07fab615",
        "text": "A few shower thoughts on AI and end user programming.\n• I imagine this group is more averse to AI research compared to baseline in tech\/CS. The following comes to mind:\n    ◦ Most algorithms today tend to be pretty opaque, whereas we value understandable systems.\n    ◦ Current end user systems (e.g. Alexa) are super frustrating when they don’t give you what you want, since their behavior is hard to manipulate.\n    ◦ There’s an uneasiness about AI systems replacing the things we DO want to control; we value systems that put people in control.\n    ◦ There’s little value for human intuition in most current AI research, with some notable exceptions below.\n• The deep learning gold rush has created a situation with interesting analogies to the “programmer\/end user” dichotomy. Researchers who develop the expertise to *design* deep learning systems tend to “think in deep learning” to the exclusion of better suited approaches in some contexts, while those without a deep understanding have little ability to modify their systems.\n• Going further with this, two of the most interesting researchers right now IMO are <https:\/\/fchollet.com\/|François Chollet> and <https:\/\/web.mit.edu\/cocosci\/josh.html|Josh Tenenbaum>, both of whom see _program synthesis_ as the key to advancing AI in a more interesting and useful direction. There’s a parallel with the popular “Type I\/Type II” thinking analogy: deep learning is great for Type I thinking (pattern matching, interpolation, “geometry”), while there hasn’t been much progress yet with Type II thinking (generalization, planning, “topology”). The idea is that you need both: a perception layer that goes from continuous to discrete, and a “programming” layer to work with the results. A recent example of program synthesis is <https:\/\/arxiv.org\/abs\/2006.08381|DreamCoder>. \n• IMO we’re about to see all the wrong assumptions that are encoded in current software systems recapitulated in this new trend in AI research, since these efforts will use existing programming languages for the program synthesis component (DreamCoder uses a lisp). I think there’s an opportunity for our group’s way of thinking to improve on the “program synthesis” part of the pipeline.\n• Chollet’s “<https:\/\/arxiv.org\/abs\/1911.01547|Abstraction and Reasoning (ARC)>” paper and challenge is to me a very clever and appealing illustration of the limitations of deep learning and the potential of program synthesis.\n    ◦ One “big idea” is to optimize for generalization by limiting the number of training examples available to an algorithm.\n• “Building Machines that Learn and Think Like People” is another nice intro to this direction in AI research, linked in this rather <https:\/\/gradadmissions.mit.edu\/blog\/carving-nature-its-joints|delightful essay>.\n• Lick’s <http:\/\/worrydream.com\/refs\/Licklider%20-%20Man-Computer%20Symbiosis.pdf|Man-Computer Symbiosis> paper from 1960 is as fresh as ever (not to mention <http:\/\/worrydream.com\/refs\/Licklider%20-%20The%20Computer%20as%20Communication%20Device.pdf|The Computer as Communication Device>).\n• If this is all too nebulous, Chollet’s <https:\/\/slideslive.com\/38935790\/abstraction-reasoning-in-ai-systems-modern-perspectives|NeuroIPS talk> (the first 40 min) is a nice crisp intro.\nInterested if anyone else is thinking about these topics.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6bd6fe3fcf91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-20\/1137095139906_6bd6fe3fcf91b6f41781_72.jpg",
            "first_name": "",
            "real_name": "Dalton Banks",
            "display_name": "daltonb",
            "team": "T5TCAFTA9",
            "name": "dalton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642520639.090700",
        "reply_count": 20,
        "reply_users_count": 6,
        "latest_reply": "1644385687.634639",
        "reply_users": [
            "U8A5MS6R1",
            "U9C92716C",
            "UA14TGLTC",
            "UJBAJNFLK",
            "UKFNXF0F9",
            "U01L1TTFP62"
        ],
        "replies": [
            {
                "user": "U8A5MS6R1",
                "ts": "1642536268.091300"
            },
            {
                "user": "U9C92716C",
                "ts": "1642542234.091700"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1642562825.092800"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1642585345.093800"
            },
            {
                "user": "U9C92716C",
                "ts": "1642595068.094100"
            },
            {
                "user": "UKFNXF0F9",
                "ts": "1642595458.094300"
            },
            {
                "user": "U9C92716C",
                "ts": "1642600709.095100"
            },
            {
                "user": "UKFNXF0F9",
                "ts": "1642602511.095300"
            },
            {
                "user": "U9C92716C",
                "ts": "1642602989.095600"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1642607390.095900"
            },
            {
                "user": "U9C92716C",
                "ts": "1642611067.096200"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1642667395.100200"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1642667546.100400"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1642667609.100700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1642668188.101000"
            },
            {
                "user": "U9C92716C",
                "ts": "1643035526.104800"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1643117219.113400"
            },
            {
                "user": "U9C92716C",
                "ts": "1643206217.501849"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1643219245.383459"
            },
            {
                "user": "U01L1TTFP62",
                "ts": "1644385687.634639"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0J58",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A few shower thoughts on AI and end user programming.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I imagine this group is more averse to AI research compared to baseline in tech\/CS. The following comes to mind:"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Most algorithms today tend to be pretty opaque, whereas we value understandable systems."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Current end user systems (e.g. Alexa) are super frustrating when they don’t give you what you want, since their behavior is hard to manipulate."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "There’s an uneasiness about AI systems replacing the things we DO want to control; we value systems that put people in control."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "There’s little value for human intuition in most current AI research, with some notable exceptions below."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The deep learning gold rush has created a situation with interesting analogies to the “programmer\/end user” dichotomy. Researchers who develop the expertise to "
                                    },
                                    {
                                        "type": "text",
                                        "text": "design",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " deep learning systems tend to “think in deep learning” to the exclusion of better suited approaches in some contexts, while those without a deep understanding have little ability to modify their systems."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Going further with this, two of the most interesting researchers right now IMO are "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/fchollet.com\/",
                                        "text": "François Chollet"
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/web.mit.edu\/cocosci\/josh.html",
                                        "text": "Josh Tenenbaum"
                                    },
                                    {
                                        "type": "text",
                                        "text": ", both of whom see "
                                    },
                                    {
                                        "type": "text",
                                        "text": "program synthesis ",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "as the key to advancing AI in a more interesting and useful direction. There’s a parallel with the popular “Type I\/Type II” thinking analogy: deep learning is great for Type I thinking (pattern matching, interpolation, “geometry”), while there hasn’t been much progress yet with Type II thinking (generalization, planning, “topology”). The idea is that you need both: a perception layer that goes from continuous to discrete, and a “programming” layer to work with the results. A recent example of program synthesis is "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/arxiv.org\/abs\/2006.08381",
                                        "text": "DreamCoder"
                                    },
                                    {
                                        "type": "text",
                                        "text": ". "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "IMO we’re about to see all the wrong assumptions that are encoded in current software systems recapitulated in this new trend in AI research, since these efforts will use existing programming languages for the program synthesis component (DreamCoder uses a lisp). I think there’s an opportunity for our group’s way of thinking to improve on the “program synthesis” part of the pipeline."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Chollet’s “"
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/arxiv.org\/abs\/1911.01547",
                                        "text": "Abstraction and Reasoning (ARC)"
                                    },
                                    {
                                        "type": "text",
                                        "text": "” paper and challenge is to me a very clever and appealing illustration of the limitations of deep learning and the potential of program synthesis."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "One “big idea” is to optimize for generalization by limiting the number of training examples available to an algorithm."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "“Building Machines that Learn and Think Like People” is another nice intro to this direction in AI research, linked in this rather "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/gradadmissions.mit.edu\/blog\/carving-nature-its-joints",
                                        "text": "delightful essay"
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Lick’s "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/worrydream.com\/refs\/Licklider%20-%20Man-Computer%20Symbiosis.pdf",
                                        "text": "Man-Computer Symbiosis"
                                    },
                                    {
                                        "type": "text",
                                        "text": " paper from 1960 is as fresh as ever (not to mention "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/worrydream.com\/refs\/Licklider%20-%20The%20Computer%20as%20Communication%20Device.pdf",
                                        "text": "The Computer as Communication Device"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If this is all too nebulous, Chollet’s "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/slideslive.com\/38935790\/abstraction-reasoning-in-ai-systems-modern-perspectives",
                                        "text": "NeuroIPS talk"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (the first 40 min) is a nice crisp intro."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interested if anyone else is thinking about these topics."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013HU44GLS",
                    "U02E4DAQGSZ",
                    "U014WA16VNJ",
                    "UA14TGLTC",
                    "UJBAJNFLK",
                    "UMVFWPZ36",
                    "UNCP67JSK"
                ],
                "count": 7
            },
            {
                "name": "tada",
                "users": [
                    "U02028JHX37"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1642536268.091300",
        "client_msg_id": "b52ac473-0bf3-4528-a2aa-a698b98c836b",
        "text": "&gt;  I imagine this group is more averse to AI research compared to baseline in tech\/CS.\nHa - I certainly am more averse to AI, specifically the trend of slapping ML on anything and everything. Consider copilot, which autocompletes textual code, without modeling any semantics. It kinda seems backwards.. first we make something hard to do, then try to work around it by heavy ML \/ statistical models. No wonder when its wrong it is totally wrong: secret keys, joke code etc.\n\nHaving said that, I got a few very good responses to a tweet once <https:\/\/twitter.com\/chatur_shalabh\/status\/1312073013194493952>\n\nI'll summarize:\n1. instead of putting ML into production directly, use it to find a function that does what you want, then render it out as human-readable code for deployment\n2. exploratory programs - write a program to generate some shapes, then use a DNN to generate shapes you did not think of\n3. given some requirements in a constraints language, do a ML driven search in a very broad solution space\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642520639.090700",
        "parent_user_id": "U9C92716C",
        "attachments": [
            {
                "from_url": "https:\/\/twitter.com\/chatur_shalabh\/status\/1312073013194493952",
                "ts": 1601657558,
                "id": 1,
                "original_url": "https:\/\/twitter.com\/chatur_shalabh\/status\/1312073013194493952",
                "fallback": "<https:\/\/twitter.com\/chatur_shalabh|@chatur_shalabh>: Using ML to read, generate or otherwise manipulate code has always seemed absurd *to me*.\n\nWe don't teach the machine to compute mean() or sin() using ML. We just 'implement the algorithm'. Ok, these algos are easy but we also implement more complicated logic.\n\nWhat am I missing?",
                "text": "Using ML to read, generate or otherwise manipulate code has always seemed absurd *to me*.\n\nWe don't teach the machine to compute mean() or sin() using ML. We just 'implement the algorithm'. Ok, these algos are easy but we also implement more complicated logic.\n\nWhat am I missing?",
                "author_name": "Shalabh",
                "author_link": "https:\/\/twitter.com\/chatur_shalabh\/status\/1312073013194493952",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1168926214343536641\/wNcbqYu0_normal.jpg",
                "author_subname": "@chatur_shalabh",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dgGb",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " I imagine this group is more averse to AI research compared to baseline in tech\/CS."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ha - I certainly am more averse to AI, specifically the trend of slapping ML on anything and everything. Consider copilot, which autocompletes textual code, without modeling any semantics. It kinda seems backwards.. first we make something hard to do, then try to work around it by heavy ML \/ statistical models. No wonder when its wrong it is totally wrong: secret keys, joke code etc.\n\nHaving said that, I got a few very good responses to a tweet once "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/chatur_shalabh\/status\/1312073013194493952"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI'll summarize:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "instead of putting ML into production directly, use it to find a function that does what you want, then render it out as human-readable code for deployment"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "exploratory programs - write a program to generate some shapes, then use a DNN to generate shapes you did not think of"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "given some requirements in a constraints language, do a ML driven search in a very broad solution space"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U9C92716C",
        "type": "message",
        "ts": "1642542234.091700",
        "client_msg_id": "3c00ff6f-fcd9-4084-b342-137397ac8a89",
        "text": "Thanks Shalabh. I hope you’ll give the papers above a skim (<https:\/\/arxiv.org\/abs\/1911.01547|On the Measure of Intelligence>, <https:\/\/arxiv.org\/abs\/1604.00289|Building Machines That Learn and Think Like People>), as I think you’ll find some good responses to the question you posed. To me the responses you got are nice but just scratch the surface. For instance, <https:\/\/fluxml.ai\/blog\/2019\/03\/05\/dp-vs-rl.html|differentiable programming> is a very rich area to explore, even without introducing “heavy ML”, and can mesh very well with existing domain knowledge. I agree with your criticism of Copilot (and GPT-3 in general), and I think _causal models_ have to be at the core of any collaborative human-computer system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6bd6fe3fcf91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-20\/1137095139906_6bd6fe3fcf91b6f41781_72.jpg",
            "first_name": "",
            "real_name": "Dalton Banks",
            "display_name": "daltonb",
            "team": "T5TCAFTA9",
            "name": "dalton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642520639.090700",
        "parent_user_id": "U9C92716C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K1e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Shalabh. I hope you’ll give the papers above a skim ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arxiv.org\/abs\/1911.01547",
                                "text": "On the Measure of Intelligence"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arxiv.org\/abs\/1604.00289",
                                "text": "Building Machines That Learn and Think Like People"
                            },
                            {
                                "type": "text",
                                "text": "), as I think you’ll find some good responses to the question you posed. To me the responses you got are nice but just scratch the surface. For instance, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/fluxml.ai\/blog\/2019\/03\/05\/dp-vs-rl.html",
                                "text": "differentiable programming"
                            },
                            {
                                "type": "text",
                                "text": " is a very rich area to explore, even without introducing “heavy ML”, and can mesh very well with existing domain knowledge. I agree with your criticism of Copilot (and GPT-3 in general), and I think "
                            },
                            {
                                "type": "text",
                                "text": "causal models",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " have to be at the core of any collaborative human-computer system."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02JDAYKW7J",
        "type": "message",
        "ts": "1642542917.091900",
        "client_msg_id": "6ec0da85-4d64-449f-b53c-5d652c77f49a",
        "text": "One of the best books on the subject out there. Beautifully researched, well written, just a pleasure. Waldrop is really great, both as a journalist and person.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1ab8763ceb21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-14\/2826386958343_1ab8763ceb219317febf_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Krasner",
            "display_name": "Daniel Krasner",
            "team": "T5TCAFTA9",
            "name": "krasnerdaniel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642444979.050300",
        "parent_user_id": "U9C92716C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NKkyZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of the best books on the subject out there. Beautifully researched, well written, just a pleasure. Waldrop is really great, both as a journalist and person."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U9C92716C"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1642545905.092400",
        "client_msg_id": "C1A82814-8CE7-4436-90DC-D8506A35CFBF",
        "text": "That is exactly what I am doing :unicorn_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642361397.040700",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hFCKE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That is exactly what I am doing "
                            },
                            {
                                "type": "emoji",
                                "name": "unicorn_face",
                                "unicode": "1f984"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1642562825.092800",
        "client_msg_id": "519eb2af-05d7-43ab-b102-f0be833a833c",
        "text": "\"Anyone else is thinking about these topics?\"  In a word, yes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642520639.090700",
        "parent_user_id": "U9C92716C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a=3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Anyone else is thinking about these topics?\"  In a word, yes."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "drum_with_drumsticks",
                "users": [
                    "U9C92716C"
                ],
                "count": 1
            },
            {
                "name": "boom",
                "users": [
                    "U9C92716C"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1642579021.093400",
        "client_msg_id": "ee595225-c857-4f4b-85d0-0905e004e2e0",
        "text": "&gt; But this is not the fault of the javascript ecosystem\nLack of communication is never the fault of any (potential) participant. It's the shared attitude of everyone. JavaScript is just like Python, R, Java, etc.: there is a wall around the ecosystem, and most of the computing world is outside of it. Which means that you have to choose the most suitable walled ecosystem for your projects, and live without the good stuff from the others.\n\nNote that \"success\" (meaning adoption) is not really a good criterion. Software is everywhere, each application has different needs. Being good in a large niche is no better than being good in a small one.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642361397.040700",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wkm",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But this is not the fault of the javascript ecosystem"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lack of communication is never the fault of any (potential) participant. It's the shared attitude of everyone. JavaScript is just like Python, R, Java, etc.: there is a wall around the ecosystem, and most of the computing world is outside of it. Which means that you have to choose the most suitable walled ecosystem for your projects, and live without the good stuff from the others.\n\nNote that \"success\" (meaning adoption) is not really a good criterion. Software is everywhere, each application has different needs. Being good in a large niche is no better than being good in a small one."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]