[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1602832945.248100",
        "client_msg_id": "2ddbb268-39c5-4a77-b995-4bfdcfeef0e9",
        "text": "How many registers do you have at this point?\n\nWith 6 general-purpose registers (excluding stack management), I almost never had to use variables directly from the stack.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602828387.247700",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8ChNN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How many registers do you have at this point?\n\nWith 6 general-purpose registers (excluding stack management), I almost never had to use variables directly from the stack."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1602833461.248300",
        "edited": {
            "user": "UUQ2EQW21",
            "ts": "1602833468.000000"
        },
        "client_msg_id": "f23d1203-e872-4389-af5d-32a9a3e42520",
        "text": "A left-field suggestion: Human Resource Machine winds up broadening your Assembly language skills.  I found I learned a lot of things I'd forgotten; and it's fun to play :wink: <https:\/\/tomorrowcorporation.com\/humanresourcemachine>\nRegarding your stack problem, I'm wondering if you could write some helper subroutines to manage the stack?  A call to store the contents of the A register on the stack, for example, and one to retrieve it.  You could store a stack count and inc\/dec it.  At the least you could error when you pop too far off the stack, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602828387.247700",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xn5h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A left-field suggestion: Human Resource Machine winds up broadening your Assembly language skills.  I found I learned a lot of things I'd forgotten; and it's fun to play "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tomorrowcorporation.com\/humanresourcemachine"
                            },
                            {
                                "type": "text",
                                "text": "\nRegarding your stack problem, I'm wondering if you could write some helper subroutines to manage the stack?  A call to store the contents of the A register on the stack, for example, and one to retrieve it.  You could store a stack count and inc\/dec it.  At the least you could error when you pop too far off the stack, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1602866455.249200",
        "client_msg_id": "48a4ac2e-f4f3-4793-80a8-1fc1bbf00545",
        "text": "Back in the old days, assembly languages were intended for use by human programmers, and they were more sophisticated than those of today, which are really only intended for compiler code generation. Macro assemblers allowed you to write and use macros such as IF, SWITCH, FOR, WHILE, PROC, CALL. Expression-oriented assemblers allowed you to write more than one arithmetic opcode on the same line, using a syntax similar to arithmetic expressions. Try googling \"macro assembler\" or \"high level assembler\". Consider adding macros or high level features to the uCISC assembler.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602828387.247700",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4frf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Back in the old days, assembly languages were intended for use by human programmers, and they were more sophisticated than those of today, which are really only intended for compiler code generation. Macro assemblers allowed you to write and use macros such as IF, SWITCH, FOR, WHILE, PROC, CALL. Expression-oriented assemblers allowed you to write more than one arithmetic opcode on the same line, using a syntax similar to arithmetic expressions. Try googling \"macro assembler\" or \"high level assembler\". Consider adding macros or high level features to the uCISC assembler."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1602867094.249400",
        "client_msg_id": "ab565ad5-d363-4c61-9c3e-bc4ac1c98d3f",
        "text": "I've been starting to feel the need for macros in Mu, just because of the constraint that addresses can't escape functions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602828387.247700",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DL8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been starting to feel the need for macros in Mu, just because of the constraint that addresses can't escape functions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1602872638.256900",
        "client_msg_id": "0A710165-9E99-4E7E-A58C-BE2E82CB76C6",
        "text": "<@UCUSW7WVD> I technically have 6 general purpose registers, but 3 are used for device access by convention. My guess is that I will end up being able to use 4 GP registers, one of which is the SP so an effective 3. One of the places Iâ€™m finding challenging is the function call boundaries. I recently ended up with a method that eats 1 position off the stack somewhere, but the function works perfectly if you donâ€™t count the side effects. Then again, maybe Iâ€™m just doing it wrong :thinking_face:.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602828387.247700",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yOFg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I technically have 6 general purpose registers, but 3 are used for device access by convention. My guess is that I will end up being able to use 4 GP registers, one of which is the SP so an effective 3. One of the places Iâ€™m finding challenging is the function call boundaries. I recently ended up with a method that eats 1 position off the stack somewhere, but the function works perfectly if you donâ€™t count the side effects. Then again, maybe Iâ€™m just doing it wrong "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1602873028.260400",
        "client_msg_id": "A3861AD3-946D-44D0-A096-D271FE12F31F",
        "text": "<@UUQ2EQW21> <@UJN1TAYEQ> sounds like I just need to do the work for some macro basics. The lack of CALL macros in particular is tedious because there are a couple of boiler plate instructions needed to call a function and if I forget one, I just messed up my stack. Thanks for the tips. Iâ€™ll check out the game for fun and profit and google macro assembler.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602828387.247700",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U0sxe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUQ2EQW21"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " sounds like I just need to do the work for some macro basics. The lack of CALL macros in particular is tedious because there are a couple of boiler plate instructions needed to call a function and if I forget one, I just messed up my stack. Thanks for the tips. Iâ€™ll check out the game for fun and profit and google macro assembler."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]