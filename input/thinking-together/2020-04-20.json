[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1587375028.086300",
        "client_msg_id": "0e7843e7-604d-4929-a910-b0f4e2bc2636",
        "text": "\"Almost all high-level programming\" sounds like a huge claim for something that looks specific to databases. Am I overlooking something that makes this idea much more general?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XBy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Almost all high-level programming\" sounds like a huge claim for something that looks specific to databases. Am I overlooking something that makes this idea much more general?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1587375636.086500",
        "client_msg_id": "4fb8ddb5-f75f-4927-8b2b-464b1ed39064",
        "text": "The first sentence of the post is the most important in my opinion: it's not about software, but about management. I wish people would stop writing about \"software\". That's a term just about as specific as \"prose\". You don't see people pontifying about how to write prose. Everybody understands that writing a novel, writing a love letter, and writing technical documentation are very different things, even though all are prose.\n\nAgile is about developing tools for rapidly changing or incompletely understood requirements. If you are working on the perfect contribution to the Obfuscated C Code Contest, then Agile is the last thing you want. Subsuming both problems under \"software development\" is not helpful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587304911.079300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xJ8ih",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The first sentence of the post is the most important in my opinion: it's not about software, but about management. I wish people would stop writing about \"software\". That's a term just about as specific as \"prose\". You don't see people pontifying about how to write prose. Everybody understands that writing a novel, writing a love letter, and writing technical documentation are very different things, even though all are prose.\n\nAgile is about developing tools for rapidly changing or incompletely understood requirements. If you are working on the perfect contribution to the Obfuscated C Code Contest, then Agile is the last thing you want. Subsuming both problems under \"software development\" is not helpful."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70",
                    "UK22Z72L8"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "UAVCC2X70",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1587396562.088400",
        "client_msg_id": "6097BCA9-9A9E-458C-9988-3013B360D471",
        "text": "<@UFEQUBNNT> i would love to read that last tutorial if you still have the link",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587147667.485000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vN7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " i would love to read that last tutorial if you still have the link"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1587397503.088600",
        "client_msg_id": "4043eba8-847e-44ff-8d30-2c6968bc1906",
        "text": "This idea is more general than relational databases.\n1. The author references \"Out of the Tar Pit\", which persuasively argues that relational programming should be used for general purpose programming. <http:\/\/curtclifton.net\/papers\/MoseleyMarks06a.pdf>\n2. Every general purpose language has hierarchical data structures, and means for querying and updating these data structures. For my Curv language, I started by copying these features from popular languages. So, I have records and arrays; R.foo selects field 'foo' from R; A[i] selects element 'i' from A; etc. And I have multi-dimensional array slices. But I discovered you can't abstract properly over these language features, and they aren't properly composable. So I've broken down these features into orthogonal, composable query and update operators, and I have rediscovered the \"Lens\", popularized by Haskell, but Lens packages are popping up in every language. And I discovered that Lenses are good for building pure functional GUIs that are modular and composable (you use them to connect the model with the view and controller). And I noticed that my new query \/ update operators resemble relational algebra without the \"join\". So I'm looking at Tarpit and this paper, and wondering if I should just add a join.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Qn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This idea is more general than relational databases.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The author references \"Out of the Tar Pit\", which persuasively argues that relational programming should be used for general purpose programming. "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/curtclifton.net\/papers\/MoseleyMarks06a.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Every general purpose language has hierarchical data structures, and means for querying and updating these data structures. For my Curv language, I started by copying these features from popular languages. So, I have records and arrays; R.foo selects field 'foo' from R; A[i] selects element 'i' from A; etc. And I have multi-dimensional array slices. But I discovered you can't abstract properly over these language features, and they aren't properly composable. So I've broken down these features into orthogonal, composable query and update operators, and I have rediscovered the \"Lens\", popularized by Haskell, but Lens packages are popping up in every language. And I discovered that Lenses are good for building pure functional GUIs that are modular and composable (you use them to connect the model with the view and controller). And I noticed that my new query \/ update operators resemble relational algebra without the \"join\". So I'm looking at Tarpit and this paper, and wondering if I should just add a join."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UFEQUBNNT",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1587397530.088800",
        "client_msg_id": "1d5e5878-9648-4125-8154-89355fc537c6",
        "text": "Now that I've read past the intro, I wouldn't exactly _endorse_ this tutorial, but <http:\/\/www.sqlcourse.com|here it is>. :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587147667.485000",
        "parent_user_id": "U85HCL7JP",
        "attachments": [
            {
                "title": "SQLCourse - Interactive Online SQL Training for Beginners",
                "title_link": "http:\/\/www.sqlcourse.com\/",
                "text": "<http:\/\/SQLCourse.com|SQLCourse.com>: an interactive online training course for SQL beginners.",
                "fallback": "SQLCourse - Interactive Online SQL Training for Beginners",
                "from_url": "http:\/\/www.sqlcourse.com\/",
                "service_name": "sqlcourse.com",
                "id": 1,
                "original_url": "http:\/\/www.sqlcourse.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WLP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now that I've read past the intro, I wouldn't exactly "
                            },
                            {
                                "type": "text",
                                "text": "endorse",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " this tutorial, but "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.sqlcourse.com",
                                "text": "here it is"
                            },
                            {
                                "type": "text",
                                "text": ". :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0119RRB1MK",
        "type": "message",
        "ts": "1587404874.089400",
        "edited": {
            "user": "U0119RRB1MK",
            "ts": "1587404993.000000"
        },
        "client_msg_id": "6ea230ff-948e-4a5b-9925-e74d4959615b",
        "text": "I don't understand this at all. The low level relational algebrea is handled by the SQL engine itself. What is any of this work buying you?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5231a4183b4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5231a4183b420b2f43a0acdf4330550d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "Samuel Squire",
            "display_name": "Samuel Squire",
            "team": "T5TCAFTA9",
            "name": "sam717",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kT0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't understand this at all. The low level relational algebrea is handled by the SQL engine itself. What is any of this work buying you?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1587405409.090000",
        "client_msg_id": "6FFA6E0B-1B0C-42E0-B301-8CFAC0DDC7A3",
        "text": "ahh dang i really liked the framing device",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587147667.485000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pqecU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ahh dang i really liked the framing device"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1587405463.091700",
        "client_msg_id": "E0A2897E-A3A7-491F-86F2-7852A5234508",
        "text": "looked through it a bit and i too wish they followed up such a high quality pitch with some higher quality pedagogy. always on the lookout for examples of really foundational, clean introductions to topics",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587147667.485000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KGK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "looked through it a bit and i too wish they followed up such a high quality pitch with some higher quality pedagogy. always on the lookout for examples of really foundational, clean introductions to topics"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1587406495.091900",
        "client_msg_id": "59a36277-1708-4056-824a-02c2da79d14e",
        "text": "<@U0119RRB1MK> The relational algebra is a more suitable abstraction for programming than SQL (aka the relational calculus). Quote:\n• SQL has not been designed with composition and separation of concerns in mind,\n• Avoiding strong coupling between subqueries tends to be very difficult in practice,\n• Coupling hurts separation of concerns and software design.\nThis shows that embedding SQL in a programming language is not a great idea. It is a poor API, and this paper demonstrates a better alternative (the relational algebra).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d39",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0119RRB1MK"
                            },
                            {
                                "type": "text",
                                "text": " The relational algebra is a more suitable abstraction for programming than SQL (aka the relational calculus). Quote:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "SQL has not been designed with composition and separation of concerns in mind,"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Avoiding strong coupling between subqueries tends to be very difficult in practice,"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Coupling hurts separation of concerns and software design."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This shows that embedding SQL in a programming language is not a great idea. It is a poor API, and this paper demonstrates a better alternative (the relational algebra)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1587406691.092100",
        "client_msg_id": "5aae8dc4-3dd0-401f-a3a0-297e172324c0",
        "text": "<@U0119RRB1MK> The relational algebra is a general purpose API for querying and updating data structures. You don't need a relational database for it to be useful. Alf allows you to query .json, .csv, .yaml files and convert from one format to the other with ease. Microsoft has created Linq based on the same principles: relational algebra as a general purpose API for query and update, not restricted to relational databases. Microsoft has embedded Linq in all of their programming languages: C#, F# and so on.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "go3n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0119RRB1MK"
                            },
                            {
                                "type": "text",
                                "text": " The relational algebra is a general purpose API for querying and updating data structures. You don't need a relational database for it to be useful. Alf allows you to query .json, .csv, .yaml files and convert from one format to the other with ease. Microsoft has created Linq based on the same principles: relational algebra as a general purpose API for query and update, not restricted to relational databases. Microsoft has embedded Linq in all of their programming languages: C#, F# and so on."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1587406832.092300",
        "client_msg_id": "c9f3d666-ffee-4425-8895-a5f789f1a6cb",
        "text": "LINQ: <https:\/\/en.wikipedia.org\/wiki\/Language_Integrated_Query>\nLINQ is based on the relational algebra: <https:\/\/news.ycombinator.com\/item?id=9116884>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "attachments": [
            {
                "title": "Language Integrated Query",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Language_Integrated_Query",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Language_Integrated_Query",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "Language Integrated Query (LINQ, pronounced \"link\") is a Microsoft .NET Framework component that adds native data querying capabilities to .NET languages, originally released as a major part of .NET Framework 3.5 in 2007.\nLINQ extends the language by the addition of query expressions, which are akin to SQL statements, and can be used to conveniently extract and process data from arrays, enumerable classes, XML documents, relational databases, and third-party data sources. Other uses, which utilize query expressions as a general framework for readably composing arbitrary computations, include the construction of event handlers or monadic parsers. It also defines a set of method names (called standard query operators, or standard sequence operators), along with translation rules used by the compiler to translate fluent-style query expressions into expressions using these method names, lambda expressions and anonymous types. Many of the concepts that LINQ introduced were originally tested in Microsoft's Cω research project. \nPorts of LINQ exist for PHP (PHPLinq), JavaScript (linq.js), TypeScript (linq.ts), and ActionScript (ActionLinq), although none are strictly equivalent to LINQ in the .NET inspired languages C#, F# and <http:\/\/VB.NET|VB.NET> (where it is a part of the language, not an external library, and where it often addresses a wider range of needs).",
                "fallback": "wikipedia: Language Integrated Query",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Language_Integrated_Query"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WfPTF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "LINQ: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Language_Integrated_Query"
                            },
                            {
                                "type": "text",
                                "text": "\nLINQ is based on the relational algebra: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=9116884"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UETFVV24Q",
        "type": "message",
        "ts": "1587407780.092700",
        "client_msg_id": "109ac2ae-0533-4480-a60a-b18973eac5b4",
        "text": "awesome, I like this direction a lot, I’ve also had a nagging hunch that all program data can (and maybe should) be stored as relations",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e6a851923d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-20\/1067569014342_3e6a851923d262ea9e74_72.png",
            "first_name": "",
            "real_name": "Andy F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andy.fischer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lYVp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "awesome, I like this direction a lot, I’ve also had a nagging hunch that all program data can (and maybe should) be stored as relations"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UETFVV24Q",
        "type": "message",
        "ts": "1587407802.092900",
        "client_msg_id": "da31d12e-cc98-478e-a98a-64219f8ed540",
        "text": "if we look at the work that human programmers do all day, so much of it is taking things that are relational (at least in the abstract) and turning it into more-specific implementations, for example, any object-oriented code",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e6a851923d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-20\/1067569014342_3e6a851923d262ea9e74_72.png",
            "first_name": "",
            "real_name": "Andy F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andy.fischer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6RTC=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if we look at the work that human programmers do all day, so much of it is taking things that are relational (at least in the abstract) and turning it into more-specific implementations, for example, any object-oriented code"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0119RRB1MK",
        "type": "message",
        "ts": "1587408800.093100",
        "client_msg_id": "5fffbde5-004a-43ad-90dc-66b67c215dd3",
        "text": "LINQ I understand and it is good. I'm not seeing the connection between this and LINQ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5231a4183b4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5231a4183b420b2f43a0acdf4330550d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "Samuel Squire",
            "display_name": "Samuel Squire",
            "team": "T5TCAFTA9",
            "name": "sam717",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xjZ4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "LINQ I understand and it is good. I'm not seeing the connection between this and LINQ"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1587409068.093400",
        "client_msg_id": "865c333a-5bfe-4e76-b1eb-c65446882ec9",
        "text": "<https:\/\/www.youtube.com\/watch?v=jtQMV8InOMY>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587409068.093400",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1587664771.150000",
        "reply_users": [
            "UDKTZSD6H",
            "UFEQUBNNT",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UDKTZSD6H",
                "ts": "1587454249.095300"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1587489661.103500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1587532626.109900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1587532850.111000"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1587572261.114300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1587578741.115700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1587578753.116200"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1587586131.119200"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1587664771.150000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Ultorg: A General-Purpose User Interface for Relational Databases",
                "title_link": "https:\/\/www.youtube.com\/watch?v=jtQMV8InOMY",
                "author_name": "MIT CSAIL Alliances",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCfplsUBZ2IZitni1qzsjnRQ",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/jtQMV8InOMY\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Ultorg: A General-Purpose User Interface for Relational Databases",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/jtQMV8InOMY?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=jtQMV8InOMY",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=jtQMV8InOMY"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4TaF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=jtQMV8InOMY"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1587409365.093600",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1587409733.000000"
        },
        "client_msg_id": "0c236d0c-a1d8-4e78-a354-e4348ba4505f",
        "text": "<@UETFVV24Q> I don't agree with the Tarpit paper that *all* program data should be stored as relational tables. For my domain (computer graphics), you need multi-dimensional arrays and linear algebra. Storing a 4x4 transformation matrix as 16 individual cells in a relational database seems crazy. ADTs are heavily overused in OOP programming, and I'm not a fan of the style, but I still think we need abstract data types for at least some use cases. The ability to perform relational queries on compound data encapsulated in ADTs is cool.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V8o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UETFVV24Q"
                            },
                            {
                                "type": "text",
                                "text": " I don't agree with the Tarpit paper that "
                            },
                            {
                                "type": "text",
                                "text": "all",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " program data should be stored as relational tables. For my domain (computer graphics), you need multi-dimensional arrays and linear algebra. Storing a 4x4 transformation matrix as 16 individual cells in a relational database seems crazy. ADTs are heavily overused in OOP programming, and I'm not a fan of the style, but I still think we need abstract data types for at least some use cases. The ability to perform relational queries on compound data encapsulated in ADTs is cool."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UETFVV24Q",
        "type": "message",
        "ts": "1587411151.093900",
        "client_msg_id": "76e98b35-56a3-459f-9c3a-68fcb5376e84",
        "text": "<@UJN1TAYEQ> Something I’m optimistic about (and I have a baby side project in this area) is that a compiler could code-generate a fast path that doesn’t run full database queries at runtime. The programmer would need to declare all data access patterns upfront, and maybe give some implementation hints too. Then the compiler converts those access patterns into efficient in-memory operations and data structures. So the final program ends up doing the same stuff",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e6a851923d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-20\/1067569014342_3e6a851923d262ea9e74_72.png",
            "first_name": "",
            "real_name": "Andy F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andy.fischer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DyGa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Something I’m optimistic about (and I have a baby side project in this area) is that a compiler could code-generate a fast path that doesn’t run full database queries at runtime. The programmer would need to declare all data access patterns upfront, and maybe give some implementation hints too. Then the compiler converts those access patterns into efficient in-memory operations and data structures. So the final program ends up doing the same stuff"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0119RRB1MK",
        "type": "message",
        "ts": "1587411920.094100",
        "client_msg_id": "859a8345-a986-412e-8a9c-37f3366e8898",
        "text": "If a <https:\/\/github.com\/samsquire\/ideas3#17-query-database|database stores queries themselves>, it can make data layout and storage decisions that are fast",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5231a4183b4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5231a4183b420b2f43a0acdf4330550d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "Samuel Squire",
            "display_name": "Samuel Squire",
            "team": "T5TCAFTA9",
            "name": "sam717",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "attachments": [
            {
                "fallback": "samsquire\/ideas3",
                "text": "An Extra 100 Ideas For Computing",
                "title": "samsquire\/ideas3",
                "footer": "<https:\/\/github.com\/samsquire\/ideas3|samsquire\/ideas3>",
                "id": 1,
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1583199166,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "21",
                        "short": true
                    },
                    {
                        "title": "Last updated",
                        "value": "2 days ago",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/samsquire\/ideas3#17-query-database",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "36h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If a "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/samsquire\/ideas3#17-query-database",
                                "text": "database stores queries themselves"
                            },
                            {
                                "type": "text",
                                "text": ", it can make data layout and storage decisions that are fast"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]