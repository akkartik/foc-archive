[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1573375824.279500",
        "client_msg_id": "4BD03866-9DD4-4C77-8157-794C8FBB21D5",
        "text": "<@ULM3U6275> What do you mean by “good” and what do you mean by “design”?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LZFd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " What do you mean by “good” and what do you mean by “design”?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1573413377.282900",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1573413420.000000"
        },
        "client_msg_id": "E3B9D49F-363D-4FAD-BA67-9D3917FF4D14",
        "text": "<@U5STGTB3J> as that answer would likely fill books (for either of us) maybe just use those words in whatever sense you normally do to make these conversations possible",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BGg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " as that answer would likely fill books (for either of us) maybe just use those words in whatever sense you normally do to make these conversations possible"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1573427174.320500",
        "client_msg_id": "FE8DC2DF-BE94-4E14-A9B3-09C5789BC9AF",
        "text": "<@ULM3U6275> I'm glad we’re on the same page about the fuzziness of that question. I appreciate you trying to make this specific, but it sets us up for misunderstanding if our interpretations differ (which they likely will). With that disclaimer, here a few things that came to my mind while pondering about how to respond to your question:\n\nI think the original VPRI STEPS project was an appropriately (good) scoped and defined (design) research project. It had a very specific albeit pragmatic goal (&lt;20k LOC) that all the research could be aligned towards. I don’t know about many FoC projects that are as bold to limit their scope that aggressively. I wish there was a STEPS2020 project that is similar in spirit, but perhaps focused on a smartphone as a platform instead.\n\nBret Victor's early demos are good examples for tastefully (good) designed interactions for tools. I'm leaning towards the future of programming is (a) for everyone (what some call “end-users”) and (b) will likely not be called coding or programming, and his early demos point roughly in that direction with their focus on immediate feedback. That we tolerate a horribly slow feedback loop with “simulating computation in our heads” is still the main difference between us programmers and people who “just use” computers.\n\nAs will not surprise you, I am very bullish on the Swift programming language. I think it's exceptionally well architected for the changing requirements of the future device landscape (e.g. <https:\/\/gankra.github.io\/blah\/swift-abi\/>). I believe your project can’t be designed for the _future_ of programming, if you only consider interaction modes from the _past_, like keyboard and pointing device.\n\nI like what Andy Matuschak and Michael Nielsen are doing (<https:\/\/numinous.productions\/ttft\/>). Some might say it's a little outside the scope of FoC. I’d say it’s right at the center of it.\n\nNicky Case (<https:\/\/ncase.me\/>) is a great example for someone who knows how to program today and does great things with that knowledge. I often think one big achievement of a FoC project could be to end up with more people like Nicky, enabling them to publish similar things, but without having to know nearly as much about programming.\n\nNot sure if any of this is remotely what you were looking for. At least it was a good exercise for me to think more clearly about it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "title": "How can we develop transformative tools for thought?",
                "title_link": "https:\/\/numinous.productions\/ttft\/",
                "text": ":hammer_and_wrench::brain::lower_left_paintbrush::boom::earth_americas::sparkles::soon:",
                "fallback": "How can we develop transformative tools for thought?",
                "image_url": "https:\/\/numinous.productions\/ttft\/assets\/social.png",
                "image_width": 500,
                "image_height": 250,
                "from_url": "https:\/\/numinous.productions\/ttft\/",
                "image_bytes": 171568,
                "service_name": "numinous.productions",
                "id": 1,
                "original_url": "https:\/\/numinous.productions\/ttft\/"
            },
            {
                "title": "Nicky Case",
                "title_link": "https:\/\/ncase.me\/",
                "text": "It's Nicky Case!",
                "fallback": "Nicky Case",
                "image_url": "https:\/\/ncase.me\/social\/thumbnail.png",
                "from_url": "https:\/\/ncase.me\/",
                "image_width": 459,
                "image_height": 250,
                "image_bytes": 15413,
                "service_icon": "https:\/\/ncase.me\/favicon.png",
                "service_name": "ncase.me",
                "id": 2,
                "original_url": "https:\/\/ncase.me\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GHGz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " I'm glad we’re on the same page about the fuzziness of that question. I appreciate you trying to make this specific, but it sets us up for misunderstanding if our interpretations differ (which they likely will). With that disclaimer, here a few things that came to my mind while pondering about how to respond to your question:\n\nI think the original VPRI STEPS project was an appropriately (good) scoped and defined (design) research project. It had a very specific albeit pragmatic goal (<20k LOC) that all the research could be aligned towards. I don’t know about many FoC projects that are as bold to limit their scope that aggressively. I wish there was a STEPS2020 project that is similar in spirit, but perhaps focused on a smartphone as a platform instead.\n\nBret Victor's early demos are good examples for tastefully (good) designed interactions for tools. I'm leaning towards the future of programming is (a) for everyone (what some call “end-users”) and (b) will likely not be called coding or programming, and his early demos point roughly in that direction with their focus on immediate feedback. That we tolerate a horribly slow feedback loop with “simulating computation in our heads” is still the main difference between us programmers and people who “just use” computers.\n\nAs will not surprise you, I am very bullish on the Swift programming language. I think it's exceptionally well architected for the changing requirements of the future device landscape (e.g. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gankra.github.io\/blah\/swift-abi\/"
                            },
                            {
                                "type": "text",
                                "text": "). I believe your project can’t be designed for the "
                            },
                            {
                                "type": "text",
                                "text": "future",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of programming, if you only consider interaction modes from the "
                            },
                            {
                                "type": "text",
                                "text": "past",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", like keyboard and pointing device.\n\nI like what Andy Matuschak and Michael Nielsen are doing ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/numinous.productions\/ttft\/"
                            },
                            {
                                "type": "text",
                                "text": "). Some might say it's a little outside the scope of FoC. I’d say it’s right at the center of it.\n\nNicky Case ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ncase.me\/"
                            },
                            {
                                "type": "text",
                                "text": ") is a great example for someone who knows how to program today and does great things with that knowledge. I often think one big achievement of a FoC project could be to end up with more people like Nicky, enabling them to publish similar things, but without having to know nearly as much about programming.\n\nNot sure if any of this is remotely what you were looking for. At least it was a good exercise for me to think more clearly about it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1573433309.321600",
        "client_msg_id": "877d2470-0ac0-4997-aa4c-9644f51ba9a0",
        "text": "Visual bootstrap was mindbending.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573223635.237700",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x7h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Visual bootstrap was mindbending."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UP6G25H35",
        "type": "message",
        "ts": "1573441660.322000",
        "client_msg_id": "b28c47b2-0c9b-4b72-b636-ff4446d12662",
        "text": "Am sure Hillel Wayne will learn the answer to this, as he does a lot of reading. IBM have done a lot of work on this topic and already have very good solutions that not only solve the problem, but also reduce development time. ... software inspection by Tom Gilb is a good starting point. The exercises in a discipline for software engineering are like gold, but the book wants an editor.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "57dceb337de9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-12\/870368572213_57dceb337de9d471d315_72.jpg",
            "first_name": "Eddy",
            "real_name": "Eddy Parkinson",
            "display_name": "Eddy Parkinson",
            "team": "T5TCAFTA9",
            "name": "eddyparkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568644207.175000",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mwt7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Am sure Hillel Wayne will learn the answer to this, as he does a lot of reading. IBM have done a lot of work on this topic and already have very good solutions that not only solve the problem, but also reduce development time. ... software inspection by Tom Gilb is a good starting point. The exercises in a discipline for software engineering are like gold, but the book wants an editor."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1573458008.322300",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1573532640.000000"
        },
        "client_msg_id": "2c650002-fd2e-4173-b910-304c4a692927",
        "text": "I think in the area of software engineering, it isn't that we don't know what works; frankly we know a ton about what works. It is just that the senior developers are not honored and imitated. Few seek out masters to study from, they consider the older programmers obsolete. Looking at the industry from a bird's-eye view, the average experience level is dropping due to the larger number of new programmers. Programming is a great deal more like basket weaving than most would like to admit. Lots of repetitive actions, and the skill lies in knowing the exact optimum sequence in which to construct a large product. The most important factor in productivity is knowing the proper sequence in which to build, so that you minimize the number of things changing at once. Biological systems are built this way; a layer added at the boundary, so that it can be verified easily; never 10 things at once which in the case of programming creates uncertainty as to where the problem lies. This is why the fanatic testers do have some advantages over the non-testers; the practice of making the test means they are building sturdiness as they proceed. When you see big team projects fail over and over, it is almost always because they are changing 100 things at once, which creates total chaos. This is why we have so few large projects attempted and instead many projects on GitHub are actually mashups, and many of these mashups have a frightening number of dependencies. In every company i worked for we fought hard against dependencies, because robustness is impossible above a certain complexity. Just look at the endless bugs in MS Windows and OSX to see examples of good teams being incapable of creating robust software.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568644207.175000",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B85",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think in the area of software engineering, it isn't that we don't know what works; frankly we know a ton about what works. It is just that the senior developers are not honored and imitated. Few seek out masters to study from, they consider the older programmers obsolete. Looking at the industry from a bird's-eye view, the average experience level is dropping due to the larger number of new programmers. Programming is a great deal more like basket weaving than most would like to admit. Lots of repetitive actions, and the skill lies in knowing the exact optimum sequence in which to construct a large product. The most important factor in productivity is knowing the proper sequence in which to build, so that you minimize the number of things changing at once. Biological systems are built this way; a layer added at the boundary, so that it can be verified easily; never 10 things at once which in the case of programming creates uncertainty as to where the problem lies. This is why the fanatic testers do have some advantages over the non-testers; the practice of making the test means they are building sturdiness as they proceed. When you see big team projects fail over and over, it is almost always because they are changing 100 things at once, which creates total chaos. This is why we have so few large projects attempted and instead many projects on GitHub are actually mashups, and many of these mashups have a frightening number of dependencies. In every company i worked for we fought hard against dependencies, because robustness is impossible above a certain complexity. Just look at the endless bugs in MS Windows and OSX to see examples of good teams being incapable of creating robust software."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]