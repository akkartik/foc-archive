[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1739735606.353819",
        "client_msg_id": "4e8bcace-402d-4da2-af69-d37c33128c0b",
        "text": "Future of Coding • Episode 75\n<https:\/\/futureofcoding.org\/episodes\/075|A Case for Feminism in Programming Language Design>\n\nIn the academic field of programming language research, there are a few prestigious conferences that you must present at to advance in your career. These conferences are rather selective about which presentations they’ll accept. If your research work involves proving formal properties about a programming language, you’ll have their ear. But if your work looks at, say, the human factors of language design, you might as well not bother applying — and thus, not bother pursuing that work in the first place. Why is the formalistic, systems-focused work elevated, and the human-focused work diminished? And what are the downstream consequences, the self-reinforcing feedback loops that come from this narrow focus?\n\nIn this episode we discuss a paper by <https:\/\/www.felienne.com\/|Felienne Hermans> and <https:\/\/arischlesinger.com\/|Ari Schlesinger> titled, <https:\/\/www.felienne.com\/archives\/8470|A case for Feminism in Programming Language Design>. It applies the lens of intersectional feminism to reveal a startling lack of <https:\/\/en.wikipedia.org\/wiki\/Yes,_and...|“Yes, and…”> in academic computer science, where valuable avenues of inquiry are closed off, careers are stifled, and people are unintentionally driven away from contributing to the field, simply because their passions and expertise don’t conform to a set of invisible expectations. Through heartbreaking personal anecdotes and extensive supporting references, the paper makes the case that there’s a lot of high-value greenfield work to be done, and people who would love to do it — but we will need to collectively identify, understand, and then fix a few broken incentives before it’ll happen.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1739735606.353819",
        "reply_count": 39,
        "reply_users_count": 10,
        "latest_reply": "1742295294.821839",
        "reply_users": [
            "U03CEGR3HSL",
            "U02U0AS3J49",
            "UC2A2ARPT",
            "UK3LH8CF5",
            "U03R0B9U1GD",
            "UGWUJUZHT",
            "U05SU27S1M2",
            "U087592N6HE",
            "U066TQFTXFT",
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "U03CEGR3HSL",
                "ts": "1739796203.849409"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1739862149.955879"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1739887773.889819"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1739891017.456709"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1739891702.893799"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1739892662.352589"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1739892868.899729"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1739894518.136959"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1739895595.109499"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1739897311.471059"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1739898009.773829"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1739898216.653989"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1739898295.517779"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1739919209.918289"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1739933379.294209"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1739955559.511559"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1739957878.891559"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1739958375.694759"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1739959321.605939"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1739982055.031829"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1739983375.443909"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1739983668.633279"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1739987630.177359"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1739997610.067699"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1740003049.620689"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1740022758.521839"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1740045105.518839"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1740045299.106359"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1740045779.905709"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1740048815.647589"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1740057714.243549"
            },
            {
                "user": "U087592N6HE",
                "ts": "1740088319.044109"
            },
            {
                "user": "U066TQFTXFT",
                "ts": "1740353021.714509"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1740609263.134809"
            },
            {
                "user": "U066TQFTXFT",
                "ts": "1740773667.609139"
            },
            {
                "user": "U05SU27S1M2",
                "ts": "1740782804.461819"
            },
            {
                "user": "U066TQFTXFT",
                "ts": "1740789794.572029"
            },
            {
                "user": "U066TQFTXFT",
                "ts": "1740790513.059939"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1742295294.821839"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EMti\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Future of Coding • Episode 75\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/075",
                                "text": "A Case for Feminism in Programming Language Design"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIn the academic field of programming language research, there are a few prestigious conferences that you must present at to advance in your career. These conferences are rather selective about which presentations they’ll accept. If your research work involves proving formal properties about a programming language, you’ll have their ear. But if your work looks at, say, the human factors of language design, you might as well not bother applying — and thus, not bother pursuing that work in the first place. Why is the formalistic, systems-focused work elevated, and the human-focused work diminished? And what are the downstream consequences, the self-reinforcing feedback loops that come from this narrow focus?\n\nIn this episode we discuss a paper by "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.felienne.com\/",
                                "text": "Felienne Hermans"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arischlesinger.com\/",
                                "text": "Ari Schlesinger"
                            },
                            {
                                "type": "text",
                                "text": " titled, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.felienne.com\/archives\/8470",
                                "text": "A case for Feminism in Programming Language Design"
                            },
                            {
                                "type": "text",
                                "text": ". It applies the lens of intersectional feminism to reveal a startling lack of "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Yes,_and...",
                                "text": "“Yes, and…”"
                            },
                            {
                                "type": "text",
                                "text": " in academic computer science, where valuable avenues of inquiry are closed off, careers are stifled, and people are unintentionally driven away from contributing to the field, simply because their passions and expertise don’t conform to a set of invisible expectations. Through heartbreaking personal anecdotes and extensive supporting references, the paper makes the case that there’s a lot of high-value greenfield work to be done, and people who would love to do it — but we will need to collectively identify, understand, and then fix a few broken incentives before it’ll happen."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heartbeat",
                "users": [
                    "UCUSW7WVD",
                    "U5STGTB3J",
                    "U087592N6HE",
                    "UMQ6LR9NZ",
                    "U0378MDUG1Y",
                    "U01AD80KMLK",
                    "UP00ZLX6G",
                    "U85HCL7JP",
                    "U05UF5P8PT8",
                    "U023V63MF6V",
                    "U075Q2WP3UK",
                    "U066DDYVCS0",
                    "U05M5A8E0NT"
                ],
                "count": 13
            },
            {
                "name": "tada",
                "users": [
                    "U03CEGR3HSL",
                    "U013ZLJARC7",
                    "UMQ6LR9NZ",
                    "U06BM40PUR2",
                    "U05SU27S1M2",
                    "U06SS0DHZD1",
                    "UML4ZEKDK",
                    "UA14TGLTC"
                ],
                "count": 8
            },
            {
                "name": "fire",
                "users": [
                    "U03R0B9U1GD",
                    "UMHG81CBH",
                    "U02U0AS3J49",
                    "U023V63MF6V"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1739735795.480599",
        "client_msg_id": "c35e6771-e522-4635-87ca-61bb1945a693",
        "text": "Hi <@UE6EFEPTQ>! You cracked me up with \"the monster doc\" (it is quite monstrous :joy: ).\n\nI solved that problem in JS <https:\/\/github.com\/fpereiro\/gotoB\/blob\/d599867a327a74d3c53aa518f507820161bb4ac8\/examples\/7guis.js#L34|here>, in a framework I wrote. Now, how would I solve it in this brave new todis? Hmmm. The data itself should be something like this.\n\n```temperature C 20\n            F 68```\nNow, how could we actually update it?\n\n```temperature C 20\n            F 68\n            update : m 1 if cond = 1 @ m unit\n                                   2 C\n                            then 1 @ set dest C\n                                         value @ m degrees\n                                 2 @ set dest F\n                                         value + . * . @ m degrees\n                                                   . 1.8\n                                                 . 32\n                            else 1 @ set dest F\n                                         value @ m degrees\n                                 2 @ set dest C\n                                         value * . - . @ m degrees\n                                                     . 32\n                                                 . \/ . 5\n                                                     . 9\n                       2 C @ C\n                         F @ F\n\n\n@ update degrees 60\n         unit C\n= C 60\n  F 140            ```\nNow, am I cheating by having a separate update function? Or disappointing you? Probably both! :sweat_smile:\n\nYet, in a spreadsheet, you cannot just have one formula referencing another and then the second formula referencing the first one.\n\nWhat would make it more declarative is to be able to bind a change event (like I do in the JS version) so that if someone puts temperature C or F, it will invoke directly temperature update. Perhaps something like:\n\n```@ listen call @ put\n         path @ temperature C\n         then call @ temperature update \n              message degrees @ temperature C\n                      unit C\n@ listen call @ put\n         path @ temperature F\n         then call @ temperature update \n              message degrees @ temperature F\n                      unit F```\nThe repetition above is making my eyes ache and giving me fever visions of a macro system. You're definitely taking my car and driving it through rocky terrain here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CRmR+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": "! You cracked me up with \"the monster doc\" (it is quite monstrous "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": " ).\n\nI solved that problem in JS "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/fpereiro\/gotoB\/blob\/d599867a327a74d3c53aa518f507820161bb4ac8\/examples\/7guis.js#L34",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": ", in a framework I wrote. Now, how would I solve it in this brave new todis? Hmmm. The data itself should be something like this.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "temperature C 20\n            F 68"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNow, how could we actually update it?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "temperature C 20\n            F 68\n            update : m 1 if cond = 1 @ m unit\n                                   2 C\n                            then 1 @ set dest C\n                                         value @ m degrees\n                                 2 @ set dest F\n                                         value + . * . @ m degrees\n                                                   . 1.8\n                                                 . 32\n                            else 1 @ set dest F\n                                         value @ m degrees\n                                 2 @ set dest C\n                                         value * . - . @ m degrees\n                                                     . 32\n                                                 . \/ . 5\n                                                     . 9\n                       2 C @ C\n                         F @ F\n\n\n@ update degrees 60\n         unit C\n= C 60\n  F 140            "
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNow, am I cheating by having a separate update function? Or disappointing you? Probably both! "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYet, in a spreadsheet, you cannot just have one formula referencing another and then the second formula referencing the first one.\n\nWhat would make it more declarative is to be able to bind a change event (like I do in the JS version) so that if someone puts temperature C or F, it will invoke directly temperature update. Perhaps something like:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "@ listen call @ put\n         path @ temperature C\n         then call @ temperature update \n              message degrees @ temperature C\n                      unit C\n@ listen call @ put\n         path @ temperature F\n         then call @ temperature update \n              message degrees @ temperature F\n                      unit F"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe repetition above is making my eyes ache and giving me fever visions of a macro system. You're definitely taking my car and driving it through rocky terrain here."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1739736466.500619",
        "client_msg_id": "d38ee081-d94c-4916-be32-c7e84be9131c",
        "text": "<@UGWUJUZHT> two points. First, apologies it took me so long to respond, I missed your last message.\n\nSecond, your last example made it click for me. If you have a user clicking the mouse and then 100ms later entering a key, those actions are not necessarily sequential. Very much indeed!\n\nThe way I see it, each of those two user interactions start a new sequence. Those sequences are being executed at the same time (whether in parallel with many CPUs or concurrently by one, it doesn't matter). You might have to make them join into one, or keep them running separately. Indeed, the entire system cannot be modelled as one sequence. But I do believe it's possible to model it with parallel\/concurrent sequences.\n\nI also envision being able to have a command \"fork\" that runs things concurrently or in parallel, and then optionally waits for all of those sequences to finish so that they basically merge onto a single sequence afterwards.\n\nThe core assumption at the base of this view is that everything is decomposable into sequences that pass data. Control passing is not necessary. But what does matter is that whoever has to wait (for either the entire previous thing or a chunk of data) will wait. And I think that that's not only reasonable, but necessary.\n\nThanks for the example with the user interaction, it really made it click for me!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738331917.986289",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DbuJH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " two points. First, apologies it took me so long to respond, I missed your last message.\n\nSecond, your last example made it click for me. If you have a user clicking the mouse and then 100ms later entering a key, those actions are not necessarily sequential. Very much indeed!\n\nThe way I see it, each of those two user interactions start a new sequence. Those sequences are being executed at the same time (whether in parallel with many CPUs or concurrently by one, it doesn't matter). You might have to make them join into one, or keep them running separately. Indeed, the entire system cannot be modelled as one sequence. But I do believe it's possible to model it with parallel\/concurrent sequences.\n\nI also envision being able to have a command \"fork\" that runs things concurrently or in parallel, and then optionally waits for all of those sequences to finish so that they basically merge onto a single sequence afterwards.\n\nThe core assumption at the base of this view is that everything is decomposable into sequences that pass data. Control passing is not necessary. But what does matter is that whoever has to wait (for either the entire previous thing or a chunk of data) will wait. And I think that that's not only reasonable, but necessary.\n\nThanks for the example with the user interaction, it really made it click for me!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULTLEA65B",
        "type": "message",
        "ts": "1739739257.829769",
        "client_msg_id": "3de12572-7e58-4ad3-a6cd-37baded75bd3",
        "text": "Functioncharts are a new kind of diagram for programs, with the audacious goal of being as expressive as any textual programming languages. It supports creating abstractions, and first-class iteration and recursion. The first version of this diagram is for a Javascript-like language, but it could be adapted for others (WebAssembly?) It was inspired by and borrows ideas from the Statechart formalism.\n\nThis editor project started as a specialized drawing tool to allow me to explain the ideas. But I found that trying to build actual programs was the only way to find out what worked and what didn't. The GitHub pages are the documentation for now. The editor is usable but unstable. There is no code generation or iterpreter yet.\n\n<https:\/\/github.com\/billbudge\/WebEditorFramework\/tree\/main\/examples\/functioncharts>\n\nRead the doc first. You can try the editor at this link (warning, it is a buggy prototype)\n<https:\/\/billbudge.github.io\/WebEditorFramework\/examples\/functioncharts\/>\n\nAs a warm-up for this project, I also developed a Statechart editor.\n\n<https:\/\/github.com\/billbudge\/WebEditorFramework\/tree\/main\/examples\/statecharts>\n<https:\/\/billbudge.github.io\/WebEditorFramework\/examples\/statecharts\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gab2622df953",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bab2622df953f1abc15d8acdc8359957.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "Bill Budge",
            "display_name": "Bill Budge",
            "team": "T5TCAFTA9",
            "name": "bbudge",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1739739257.829769",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1741445380.580849",
        "reply_users": [
            "U06SS0DHZD1",
            "ULTLEA65B"
        ],
        "replies": [
            {
                "user": "U06SS0DHZD1",
                "ts": "1740046513.276199"
            },
            {
                "user": "ULTLEA65B",
                "ts": "1740068283.589079"
            },
            {
                "user": "ULTLEA65B",
                "ts": "1741442634.128769"
            },
            {
                "user": "U06SS0DHZD1",
                "ts": "1741445380.580849"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CWpRM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Functioncharts are a new kind of diagram for programs, with the audacious goal of being as expressive as any textual programming languages. It supports creating abstractions, and first-class iteration and recursion. The first version of this diagram is for a Javascript-like language, but it could be adapted for others (WebAssembly?) It was inspired by and borrows ideas from the Statechart formalism.\n\nThis editor project started as a specialized drawing tool to allow me to explain the ideas. But I found that trying to build actual programs was the only way to find out what worked and what didn't. The GitHub pages are the documentation for now. The editor is usable but unstable. There is no code generation or iterpreter yet.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/billbudge\/WebEditorFramework\/tree\/main\/examples\/functioncharts"
                            },
                            {
                                "type": "text",
                                "text": "\n\nRead the doc first. You can try the editor at this link (warning, it is a buggy prototype)\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/billbudge.github.io\/WebEditorFramework\/examples\/functioncharts\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAs a warm-up for this project, I also developed a Statechart editor.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/billbudge\/WebEditorFramework\/tree\/main\/examples\/statecharts"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/billbudge.github.io\/WebEditorFramework\/examples\/statecharts\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U06SS0DHZD1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "ULTLEA65B",
        "type": "message",
        "ts": "1739757573.123389",
        "client_msg_id": "df30ab3f-4057-42e4-aa08-c067f93de442",
        "text": "Whoops, some bad links. Here's a better one:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gab2622df953",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bab2622df953f1abc15d8acdc8359957.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "Bill Budge",
            "display_name": "Bill Budge",
            "team": "T5TCAFTA9",
            "name": "bbudge",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VqWKR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Whoops, some bad links. Here's a better one:"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULTLEA65B",
        "type": "message",
        "ts": "1739757573.949799",
        "client_msg_id": "1d12cbf9-f134-4eb1-bae7-4c4dff3727cc",
        "text": "<https:\/\/github.com\/billbudge\/WebEditorFramework\/blob\/main\/examples\/functioncharts\/README.md>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gab2622df953",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bab2622df953f1abc15d8acdc8359957.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "",
            "real_name": "Bill Budge",
            "display_name": "Bill Budge",
            "team": "T5TCAFTA9",
            "name": "bbudge",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oB7TB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/billbudge\/WebEditorFramework\/blob\/main\/examples\/functioncharts\/README.md"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U0887QU9G2V"
                ],
                "count": 1
            }
        ]
    }
]