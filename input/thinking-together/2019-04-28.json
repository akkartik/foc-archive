[
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1556438784.209800",
        "client_msg_id": "979e34c8-2d31-4d6e-8a56-78be3f90537d",
        "text": "I think that “visual” usually communicates something else. Perhaps the more appropriate term is “projectional”?\n\nI’ll clarify by defining some terms as I see them:\n\n• Traditional text programming - freeform editing of text\n• Structural - Edits are done on structure. Code may still be stored as text (paredit is an example)\n• Visual - looks nothing like text. Data flow is visualised by the layout using nodes and arrows\n• Projectional - the UI displays something which isn’t an exact straightforward presentation of the code storage.\n\nFor example a language where the user draws an image of a diagram in Paint\/Photoshop\/etc and then the compiler turns the painting into a program is visual but not projectional.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556353500.199800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ja3n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that “visual” usually communicates something else. Perhaps the more appropriate term is “projectional”?\n\nI’ll clarify by defining some terms as I see them:\n\n• Traditional text programming - freeform editing of text\n• Structural - Edits are done on structure. Code may still be stored as text (paredit is an example)\n• Visual - looks nothing like text. Data flow is visualised by the layout using nodes and arrows\n• Projectional - the UI displays something which isn’t an exact straightforward presentation of the code storage.\n\nFor example a language where the user draws an image of a diagram in Paint\/Photoshop\/etc and then the compiler turns the painting into a program is visual but not projectional."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1556441781.225800",
        "client_msg_id": "49820C81-DDBD-48E0-AB81-83186022A61D",
        "text": "&gt;It's 90% boxes-and-arrows, 8% Scratch clones, and 2% of unique stuff\n\nThis strikes me as an important insight which leads to the question, “Why is the distribution so heavily skewed towards boxes-and-arrows?” If we’d be completely in the dark, couldn’t we expect a lot more variety?\n\nMaybe one possible answer has to do with the challenge that building a generic visual programming system is by definition domain-agnostic and therefore can’t take advantage of established metaphors in a target domain? I’m thinking of (as usual) music or video production tools, where a lot of the visual tools rely on metaphors that represent time by mapping it to (horizontal) space, which rests on the importance of time in these domains.\n\nIf you can’t define certain specifics because you want to create something universal, the visualizations available to you will be limited to the most abstract of domains, often math — and then you end up representing minimal structure as an abstract graph, with generic arrows, their positions and lengths without meaning, pointing from and to equally as dimensionless boxes, all floating in a space that has no meaningful coordinates either — you can move things around and it doesn’t change anything other than the visualization.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556441781.225800",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1556636587.315600",
        "reply_users": [
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "UAVCC2X70",
                "ts": "1556636587.315600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oFU",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's 90% boxes-and-arrows, 8% Scratch clones, and 2% of unique stuff"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThis strikes me as an important insight which leads to the question, “Why is the distribution so heavily skewed towards boxes-and-arrows?” If we’d be completely in the dark, couldn’t we expect a lot more variety?\n\nMaybe one possible answer has to do with the challenge that building a generic visual programming system is by definition domain-agnostic and therefore can’t take advantage of established metaphors in a target domain? I’m thinking of (as usual) music or video production tools, where a lot of the visual tools rely on metaphors that represent time by mapping it to (horizontal) space, which rests on the importance of time in these domains.\n\nIf you can’t define certain specifics because you want to create something universal, the visualizations available to you will be limited to the most abstract of domains, often math — and then you end up representing minimal structure as an abstract graph, with generic arrows, their positions and lengths without meaning, pointing from and to equally as dimensionless boxes, all floating in a space that has no meaningful coordinates either — you can move things around and it doesn’t change anything other than the visualization."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFBQNBYER",
                    "UJ6LDMMN0",
                    "UA14TGLTC",
                    "UEQ7QL15F",
                    "U7C7B75R6"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1556446233.226000",
        "client_msg_id": "1efb9a3e-127a-4bcb-a350-afac9b14a5df",
        "text": "I don't think \"projectional\" is a useful category. Text files are just projectional editors for byte arrays, so every GUI is fundamentally projectional. I also don't think \"visual\" should imply a lack of text, since text is inherently visual symbols. I think \"visual\" is only a useful term when you want to use it to distinguish between displaying data as a 1D, serialized sequence of symbols versus some other kind of visualisation where the layout is not so trivial. This implies that any \"visual\" language would also be a \"structural\" one. The tricky thing about equating the two is that for some reason, people who make structural editors oftentimes try their hardest to make everything look like a serialized sequence of symbols. IMO that only leads to an obscuration of the structure being manipulated, and for what benefit? It's a kind of Stockholm Syndrome that I've recently snapped out of.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556353500.199800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4UT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think \"projectional\" is a useful category. Text files are just projectional editors for byte arrays, so every GUI is fundamentally projectional. I also don't think \"visual\" should imply a lack of text, since text is inherently visual symbols. I think \"visual\" is only a useful term when you want to use it to distinguish between displaying data as a 1D, serialized sequence of symbols versus some other kind of visualisation where the layout is not so trivial. This implies that any \"visual\" language would also be a \"structural\" one. The tricky thing about equating the two is that for some reason, people who make structural editors oftentimes try their hardest to make everything look like a serialized sequence of symbols. IMO that only leads to an obscuration of the structure being manipulated, and for what benefit? It's a kind of Stockholm Syndrome that I've recently snapped out of."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1556450005.226300",
        "client_msg_id": "58606236-88fd-40b8-86a0-bebcec61b396",
        "text": "&gt; I also don’t think “visual” should imply a lack of text, since text is inherently visual symbols.\n\nPerhaps it shouldn’t imply that, but from my experience when I use this term this is what is implied.\n\n&gt; Text files are just projectional editors for byte arrays\n\nThat’s true. But the projection is considered to be so simple to the point that it’s considered direct editing of the stored data. This is the term used by MPS and others (<https:\/\/martinfowler.com\/bliki\/ProjectionalEditing.html>) and I favor using it because it communicates important things that the term “structural” doesn’t.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556353500.199800",
        "parent_user_id": "UCGAK10LS",
        "attachments": [
            {
                "service_name": "martinfowler.com",
                "title": "bliki: ProjectionalEditing",
                "title_link": "https:\/\/martinfowler.com\/bliki\/ProjectionalEditing.html",
                "text": "a bliki entry for ProjectionalEditing",
                "fallback": "martinfowler.com: bliki: ProjectionalEditing",
                "from_url": "https:\/\/martinfowler.com\/bliki\/ProjectionalEditing.html",
                "service_icon": "https:\/\/martinfowler.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/martinfowler.com\/bliki\/ProjectionalEditing.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u1DCr",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also don’t think “visual” should imply a lack of text, since text is inherently visual symbols."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nPerhaps it shouldn’t imply that, but from my experience when I use this term this is what is implied.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Text files are just projectional editors for byte arrays"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThat’s true. But the projection is considered to be so simple to the point that it’s considered direct editing of the stored data. This is the term used by MPS and others ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/martinfowler.com\/bliki\/ProjectionalEditing.html"
                            },
                            {
                                "type": "text",
                                "text": ") and I favor using it because it communicates important things that the term “structural” doesn’t."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1556458164.232000",
        "client_msg_id": "91912559-d307-4cdb-98bc-788691b908ba",
        "text": "I like your argument on the difficulty to find an generic visual programming other than box-and-arrows or lego-blocks. I guess we ended to those two main representations because when we code we often describe things with sequences (then piles of Scratch like lego-blocks are a good metaphor) and control flows (then box-and-arrows are a good metaphor). Although, for some specific domains other metaphor are necessary (the 2% of unique stuff) as you say with your example on audio and video.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dh4Hu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like your argument on the difficulty to find an generic visual programming other than box-and-arrows or lego-blocks. I guess we ended to those two main representations because when we code we often describe things with sequences (then piles of Scratch like lego-blocks are a good metaphor) and control flows (then box-and-arrows are a good metaphor). Although, for some specific domains other metaphor are necessary (the 2% of unique stuff) as you say with your example on audio and video."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1556460514.243500",
        "client_msg_id": "D2CFD5F8-C972-4FDF-B274-6C4F487AA18B",
        "text": "Hypothesis: the greatest affordance text delivers is supporting our natural desire to name things. We do this all the time when we communicate, and we know very well which words to use to transmit pretty complex concepts. In (text-based) programming, names (symbols) solve all the problems of referring to the same thing over and over again. With arrows we get to represent some of the references visually, at the expense of trying very hard to only have the thing they refer to represented once.\n\nI know, there’s the joke about naming being one of the two or three (depending on how funny you try to be) hardest things in programming. Although we’re actually pretty good at giving things names. We’re just terrible at agreeing on the same name for the same thing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AiAK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hypothesis: the greatest affordance text delivers is supporting our natural desire to name things. We do this all the time when we communicate, and we know very well which words to use to transmit pretty complex concepts. In (text-based) programming, names (symbols) solve all the problems of referring to the same thing over and over again. With arrows we get to represent some of the references visually, at the expense of trying very hard to only have the thing they refer to represented once.\n\nI know, there’s the joke about naming being one of the two or three (depending on how funny you try to be) hardest things in programming. Although we’re actually pretty good at giving things names. We’re just terrible at agreeing on the same name for the same thing."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UFEQUBNNT",
                    "UCSJ44X1S"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1556460551.243800",
        "client_msg_id": "11657826-6ABF-4731-8032-76237CC4A685",
        "text": "The more I think about it, the more I feel like replacing text with another form of visualization isn’t going to be the solution. Text-based programming is better with an IDE that offers different visualizations for different tasks\/contexts (hat tip to <@UE1JQM9HQ>). So I think the question is not “What will replace text-based programming?” and instead “Which visualizations will enhance programming so much that we find ourselves preferring those over text in specific contexts?”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556460551.243800",
        "reply_count": 31,
        "reply_users_count": 7,
        "latest_reply": "1556879501.145600",
        "reply_users": [
            "UJ6LDMMN0",
            "UA14TGLTC",
            "UE1JQM9HQ",
            "U7C7B75R6",
            "UAVCC2X70",
            "UHZNB3HRP",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UJ6LDMMN0",
                "ts": "1556462629.245800"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1556462688.246500"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1556462752.247200"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1556462817.248000"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1556462874.248200"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1556471738.249600"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1556479164.250000"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1556571632.302200"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1556597787.313300"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1556637997.315900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1556638621.316100"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1556643527.318600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1556645394.319500"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1556687805.415900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1556816450.112200"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1556817457.112500"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1556817870.113000"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1556820082.115700"
            },
            {
                "user": "UHZNB3HRP",
                "ts": "1556820746.116200"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1556843288.127600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1556861337.140700"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1556864468.142500"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1556878612.143600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1556878693.144200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1556878829.144400"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1556878875.144600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1556878943.144800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1556879155.145000"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1556879321.145200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1556879439.145400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1556879501.145600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c4Qy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The more I think about it, the more I feel like replacing text with another form of visualization isn’t going to be the solution. Text-based programming is better with an IDE that offers different visualizations for different tasks\/contexts (hat tip to "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": "). So I think the question is not “What will replace text-based programming?” and instead “Which visualizations will enhance programming so much that we find ourselves preferring those over text in specific contexts?”"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE1JQM9HQ",
                    "UF2GNRUTV",
                    "UAL7940NM",
                    "UAVCC2X70",
                    "UC6997THT",
                    "UDJ2TKB99"
                ],
                "count": 6
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1556462629.245800",
        "client_msg_id": "1f8d7459-43f3-41a0-aa91-4c327b81cf5d",
        "text": "I totally agree with I Totally agree with  “Which visualizations will enhance programming so much that we find ourselves preferring those over text in specific contexts?”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556460551.243800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pu02",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I totally agree with I Totally agree with  “Which visualizations will enhance programming so much that we find ourselves preferring those over text in specific contexts?”"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UF2GNRUTV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1556462688.246500",
        "client_msg_id": "980cf185-d9e2-4899-86dc-4296a253faab",
        "text": "And I think that in fact a mix of text an visual semantics can be good.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556460551.243800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZX7t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I think that in fact a mix of text an visual semantics can be good."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1556462752.247200",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1556463140.000000"
        },
        "client_msg_id": "b3cea500-c45d-4a36-bf9b-012c8f9e380f",
        "text": "For exemple, I find if\/else statement can be \"difficult\" to reason about in text language. A visual metaphor can make things clearer here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556460551.243800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "suv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For exemple, I find if\/else statement can be \"difficult\" to reason about in text language. A visual metaphor can make things clearer here."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UF2GNRUTV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556462789.247900",
        "client_msg_id": "09d5225d-ebcf-4913-9343-f9ad1b82e8dc",
        "text": "<@U5STGTB3J> good points about dimensionless boxes and arrows.  I generally loath force directed layouts for this very reason.  At the very least, humans are beasts with a strong up\/down sense.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zl09",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " good points about dimensionless boxes and arrows.  I generally loath force directed layouts for this very reason.  At the very least, humans are beasts with a strong up\/down sense."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1556462817.248000",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1556463007.000000"
        },
        "client_msg_id": "d43144c3-d741-45ef-9542-b4458c7a7415",
        "text": "(and thanks for pointing to <@UE1JQM9HQ>, his work is very interesting).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556460551.243800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aUOp7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(and thanks for pointing to "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": ", his work is very interesting)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556462874.248200",
        "client_msg_id": "4e711a40-7048-42d7-97e1-efbe61ae0fb0",
        "text": "Especially when, say, 50% of statements are shared between branches.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556460551.243800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OvFf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Especially when, say, 50% of statements are shared between branches."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1556471738.249600",
        "client_msg_id": "4b3734d8-68f3-47fb-baf7-2e7e6350a605",
        "text": "I think it’s also important to distinguish between the way we write and the way we understand code. Whenever we talk about programming languages, we tend to conflate the two. The code is always consumed in the same shape it’s written in. I believe that is unnecessarily limiting. Interestingly, when you distinguish the two we realize that the writing relates to execution semantics, but reading is mostly a tool issue. That’s why I believe the development environment is an essential component in software engineering.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556460551.243800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0gPzV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it’s also important to distinguish between the way we write and the way we understand code. Whenever we talk about programming languages, we tend to conflate the two. The code is always consumed in the same shape it’s written in. I believe that is unnecessarily limiting. Interestingly, when you distinguish the two we realize that the writing relates to execution semantics, but reading is mostly a tool issue. That’s why I believe the development environment is an essential component in software engineering."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1556479164.250000",
        "client_msg_id": "b069b25f-2672-4daa-a782-06862f7cb552",
        "text": "Very interesting point of view. I never actually realized this separation! I agree it is important to distinguish the two and the development environment is key. And for me the convergence point is what the environment shows to the developper. It is a representaton model (the code, be it mere text or something else) of something that a machine has to process, the model has to be understandable by the developper and the environment has to help him modify the model easily.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556460551.243800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8S5T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting point of view. I never actually realized this separation! I agree it is important to distinguish the two and the development environment is key. And for me the convergence point is what the environment shows to the developper. It is a representaton model (the code, be it mere text or something else) of something that a machine has to process, the model has to be understandable by the developper and the environment has to help him modify the model easily."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE1JQM9HQ",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1556490035.261800",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1556491049.000000"
        },
        "client_msg_id": "726d7f79-8a78-48b0-b05c-ce9a727c44d5",
        "text": "I'm seeing the proliferation of this false dichotomy again between text and visuals. Text IS a visual. This is a more relevant point than it appears at first glance. It indicates that you can mix text with other kinds of visuals. Despite what has historically been produced, the other kinds of visuals do not have to be in the form of boxes and arrows, or lego blocks, or anything which has proven itself objectively bad through 5 decades of repeated failed attempts. I believe people designing these visuals just need to try something different.\nIt's true that there aren't many concepts in an abstract language that can even be visualised. But there are some. Two major dimensions are *composition* and *choice*. Almost every language construct in any *functional* language is just a combination of these. (Imperative languages throw in 70 other \"features\" which I argue makes visualisation a fool's errand). Function application, function composition, product types, and sum types are just different flavours of composition. If-expressions, case-expressions, and pattern matching are all just different flavours of choice. Visualising these naively leads you to some kind of graph, which leads to a naive boxes and arrows visualisation. But Stefan rightly points out that humans are good at recognising names, and are bad at navigating a soup of arrows, so we should probably use names as the building blocks of the visualisation. This does *not* necessarily lead to \"text-based programming\", but it does lead to a generous use of text within the visualisation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556490035.261800",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1556560092.301600",
        "reply_users": [
            "UFEQUBNNT"
        ],
        "replies": [
            {
                "user": "UFEQUBNNT",
                "ts": "1556560092.301600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WIn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm seeing the proliferation of this false dichotomy again between text and visuals. Text IS a visual. This is a more relevant point than it appears at first glance. It indicates that you can mix text with other kinds of visuals. Despite what has historically been produced, the other kinds of visuals do not have to be in the form of boxes and arrows, or lego blocks, or anything which has proven itself objectively bad through 5 decades of repeated failed attempts. I believe people designing these visuals just need to try something different.\nIt's true that there aren't many concepts in an abstract language that can even be visualised. But there are some. Two major dimensions are "
                            },
                            {
                                "type": "text",
                                "text": "composition",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "choice",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Almost every language construct in any "
                            },
                            {
                                "type": "text",
                                "text": "functional",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " language is just a combination of these. (Imperative languages throw in 70 other \"features\" which I argue makes visualisation a fool's errand). Function application, function composition, product types, and sum types are just different flavours of composition. If-expressions, case-expressions, and pattern matching are all just different flavours of choice. Visualising these naively leads you to some kind of graph, which leads to a naive boxes and arrows visualisation. But Stefan rightly points out that humans are good at recognising names, and are bad at navigating a soup of arrows, so we should probably use names as the building blocks of the visualisation. This does "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " necessarily lead to \"text-based programming\", but it does lead to a generous use of text within the visualisation."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U5TCAFTD3",
                    "UEQ6M68H0",
                    "UJ6LDMMN0",
                    "U79HM6726",
                    "UAJ9DV971",
                    "U7C7B75R6"
                ],
                "count": 6
            },
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1556492170.269700",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1556518219.000000"
        },
        "client_msg_id": "86a35afd-53f4-4e6e-b27b-5fca41557c55",
        "text": "That's an argument for why \"visual languages\" shouldn't be thrown in the trash heap but not for why they should be pursued. To shed light on the latter proposition: I teach people how to code for a living, and one solid truth that reveals itself is that keyword-and-symbol-based representations of language constructs are hard to understand. We may not realise with our survivorship bias just how unintuitive a bunch of keywords are, but a language's syntax is fundamentally a representation of its semantics, and learning a language is about being able to recognise, comprehend, and interact with that semantics. Keywords and ASCII symbols obscure language semantics to an extreme degree. This is not merely an assertion - it is extraordinarily apparent from watching people learn how to code. The only question is: how can we do better?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Knvo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's an argument for why \"visual languages\" shouldn't be thrown in the trash heap but not for why they should be pursued. To shed light on the latter proposition: I teach people how to code for a living, and one solid truth that reveals itself is that keyword-and-symbol-based representations of language constructs are hard to understand. We may not realise with our survivorship bias just how unintuitive a bunch of keywords are, but a language's syntax is fundamentally a representation of its semantics, and learning a language is about being able to recognise, comprehend, and interact with that semantics. Keywords and ASCII symbols obscure language semantics to an extreme degree. This is not merely an assertion - it is extraordinarily apparent from watching people learn how to code. The only question is: how can we do better?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UFMD4TQMD",
                    "U79HM6726",
                    "UAVCC2X70"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1556492441.273300",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1556492532.000000"
        },
        "client_msg_id": "9ed2571d-bb22-4d64-9725-021ae8f7d5d3",
        "text": "So to come full circle: representations do matter, and there is still, despite historical failings, an opportunity for visual representations to improve comprehensibility. It's easiest to see when you look at learners, but they needn't be the only ones to enjoy the possible benefits. Give me a few weeks to produce a demonstration of the kind of representations I'm talking about and maybe it will be easier to believe my argument.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556492441.273300",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1556676664.398700",
        "reply_users": [
            "U79HM6726",
            "UCGAK10LS",
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "U79HM6726",
                "ts": "1556523254.293500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1556539619.294500"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1556676664.398700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aiPQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So to come full circle: representations do matter, and there is still, despite historical failings, an opportunity for visual representations to improve comprehensibility. It's easiest to see when you look at learners, but they needn't be the only ones to enjoy the possible benefits. Give me a few weeks to produce a demonstration of the kind of representations I'm talking about and maybe it will be easier to believe my argument."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "U7C7B75R6",
                    "UAVCC2X70"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1556508395.275800",
        "client_msg_id": "24961972-137e-4986-ab7c-bef32af34845",
        "text": "in building many products over the years, the best test of how good the interface was, was to put the product into the hands of seniors or young children. Both are excellent test audiences. If it is truly intuitive, the kids pick it up fast. If it is simple and well organized, the seniors will respond. Both groups have different strengths: seniors have no memory, and kids have little abstraction power.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556508395.275800",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1556676961.400700",
        "reply_users": [
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "UAVCC2X70",
                "ts": "1556676961.400700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Agt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in building many products over the years, the best test of how good the interface was, was to put the product into the hands of seniors or young children. Both are excellent test audiences. If it is truly intuitive, the kids pick it up fast. If it is simple and well organized, the seniors will respond. Both groups have different strengths: seniors have no memory, and kids have little abstraction power."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UA14TGLTC",
                    "UHZNB3HRP",
                    "UAVCC2X70"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556510323.281700",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1556510732.000000"
        },
        "client_msg_id": "fdfd2311-e505-4229-8f47-9bccc32b2965",
        "text": "<@UCGAK10LS> Looking forward to it. I had no idea you were one of us with experience teaching kids. Here’s what I did for two years, and it worked great in a 1-on-1 setting: <http:\/\/akkartik.name\/post\/mu> (Spoiler: it’s absolutely text-based).\n\nI saw no problems with (a small number of) keywords. I _did_ see value in minimizing punctuation. One implication: don’t start kids on one of the Lisps. (Even though I love Lisp in general.)\n\nI don’t understand your “It’s 90% boxes-and-arrows, 8% Scratch clones, and 2% of unique stuff” comment. Why chase novelty for its own sake? Similarly, I don’t think boxes and arrows or blocks have been given nearly enough rope in the last 5 decades. You’ll need to elaborate on why you think they’re “objectively bad”. It’s not at all obvious that we need to try something different. One could equally make the case that we need to _persist_ with and incrementally improve already-attempted ideas. (I say this as someone pro-text for the most part.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556510323.281700",
        "reply_count": 11,
        "reply_users_count": 6,
        "latest_reply": "1556769611.475500",
        "reply_users": [
            "UCGAK10LS",
            "UJ6LDMMN0",
            "UA14TGLTC",
            "U7C7B75R6",
            "UC2A2ARPT",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UCGAK10LS",
                "ts": "1556518905.291600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1556519420.292100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1556520234.292500"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1556520630.292700"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1556521161.292900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1556525193.294100"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1556572974.302600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1556573818.302900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1556573911.303300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1556573998.303500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1556769611.475500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "syW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Looking forward to it. I had no idea you were one of us with experience teaching kids. Here’s what I did for two years, and it worked great in a 1-on-1 setting: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/mu"
                            },
                            {
                                "type": "text",
                                "text": " (Spoiler: it’s absolutely text-based).\n\nI saw no problems with (a small number of) keywords. I "
                            },
                            {
                                "type": "text",
                                "text": "did",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " see value in minimizing punctuation. One implication: don’t start kids on one of the Lisps. (Even though I love Lisp in general.)\n\nI don’t understand your “It’s 90% boxes-and-arrows, 8% Scratch clones, and 2% of unique stuff” comment. Why chase novelty for its own sake? Similarly, I don’t think boxes and arrows or blocks have been given nearly enough rope in the last 5 decades. You’ll need to elaborate on why you think they’re “objectively bad”. It’s not at all obvious that we need to try something different. One could equally make the case that we need to "
                            },
                            {
                                "type": "text",
                                "text": "persist",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with and incrementally improve already-attempted ideas. (I say this as someone pro-text for the most part.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556510613.283400",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1556510706.000000"
        },
        "client_msg_id": "d67b5ea5-a9d8-4d0c-984e-21f653d398e0",
        "text": "Has anyone here read the Boxer papers? Boxer was the sequel to Lego, if I understand correctly. A great example of visual languages with generous use of text. The following is one of my favorite papers:\n\n<https:\/\/web.archive.org\/web\/20150905171238\/http:\/\/www.soe.berkeley.edu\/boxer\/20reasons.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sxcsG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone here read the Boxer papers? Boxer was the sequel to Lego, if I understand correctly. A great example of visual languages with generous use of text. The following is one of my favorite papers:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/web.archive.org\/web\/20150905171238\/http:\/\/www.soe.berkeley.edu\/boxer\/20reasons.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD43R8ZFV",
        "type": "message",
        "ts": "1556513290.290400",
        "client_msg_id": "300e663d-8302-483a-9d06-e909f2b9fc38",
        "text": "I just attended Linux Fest Northwest, and there were a lot of GNU \/ FSF people there. It got me thinking again about that community, and I think they're motivation aligns well with this group. They want software to be modifiable in ways that aren't legally encumbered, whereas this group wants software to be modifiable in ways that aren't unnecessarily complicated. I wonder how this group would modify the FSF's 4 user freedoms to align with the goals of the future of coding?\n\n&gt;&gt;&gt;\nFree [libre] software means users have the four essential freedoms: (0) to run the program, (1) to study and change the program in source code form, (2) to redistribute exact copies, and (3) to distribute modified versions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "85ee3dacef95",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-30\/445630960161_85ee3dacef95dd5617e4_72.png",
            "first_name": "Tim",
            "real_name": "Tim Swast",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "tswast",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556513290.290400",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1556545162.297900",
        "reply_users": [
            "UCUSW7WVD",
            "UD43R8ZFV"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1556514620.291300"
            },
            {
                "user": "UD43R8ZFV",
                "ts": "1556545162.297900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kd48",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just attended Linux Fest Northwest, and there were a lot of GNU \/ FSF people there. It got me thinking again about that community, and I think they're motivation aligns well with this group. They want software to be modifiable in ways that aren't legally encumbered, whereas this group wants software to be modifiable in ways that aren't unnecessarily complicated. I wonder how this group would modify the FSF's 4 user freedoms to align with the goals of the future of coding?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Free [libre] software means users have the four essential freedoms: (0) to run the program, (1) to study and change the program in source code form, (2) to redistribute exact copies, and (3) to distribute modified versions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1556513774.291200",
        "client_msg_id": "e63b8296-dc7e-4672-89d2-636bc573896c",
        "text": "A good place where that’s extremely far from true (where this ideology could have a big impact) is hardware. Most closed-source, proprietary toolchains you’ll find.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XUTY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A good place where that’s extremely far from true (where this ideology could have a big impact) is hardware. Most closed-source, proprietary toolchains you’ll find."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556514620.291300",
        "client_msg_id": "826d7755-e973-49a0-9e5f-f183e35d26de",
        "text": "I think the FSF is still fighting the last war. It's no longer about the source being available or having the legal right to distribute the source. The _quality_ of the source is now the critical bottleneck. FSF doesn't have much to say about that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556513290.290400",
        "parent_user_id": "UD43R8ZFV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+2O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the FSF is still fighting the last war. It's no longer about the source being available or having the legal right to distribute the source. The "
                            },
                            {
                                "type": "text",
                                "text": "quality",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the source is now the critical bottleneck. FSF doesn't have much to say about that."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAJ9DV971",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1556518905.291600",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1556518929.000000"
        },
        "client_msg_id": "d1d54388-d1b6-47ab-94a4-4c57d4bb64f6",
        "text": "Nobody here ever said novelty was worth chasing for its own sake. However, I disagree that boxes and arrows haven't been given enough rope. They've been given an excessive amount of rope: there are hundreds of boxes-and-arrows editors out there. They seem to have proven useful in niche scenarios, typically where only small structures are required. As discussed though, when using arrows for dataflow you inevitably end up with an arrow soup as you get larger; the visualisation just doesn't scale. I worked briefly with the world leaders in graph layout research and even they are still struggling with ways to make large graphs readable. But either way, it's not up to a disbeliever to prove the absence of something; it's up to a believer to prove its existence. If you'd like to argue for the merits of boxes-and-arrows, I'm open to discussing them with you.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556510323.281700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fd6mf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nobody here ever said novelty was worth chasing for its own sake. However, I disagree that boxes and arrows haven't been given enough rope. They've been given an excessive amount of rope: there are hundreds of boxes-and-arrows editors out there. They seem to have proven useful in niche scenarios, typically where only small structures are required. As discussed though, when using arrows for dataflow you inevitably end up with an arrow soup as you get larger; the visualisation just doesn't scale. I worked briefly with the world leaders in graph layout research and even they are still struggling with ways to make large graphs readable. But either way, it's not up to a disbeliever to prove the absence of something; it's up to a believer to prove its existence. If you'd like to argue for the merits of boxes-and-arrows, I'm open to discussing them with you."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1556519420.292100",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1556519450.000000"
        },
        "client_msg_id": "de39a3e8-4f19-4fc5-aae3-f3919222265b",
        "text": "Scratch blocks have merit in that they can be used to present a limited, browsable palette of building blocks with which programs can be constructed. But this is no different from having an ordinary list of options in a sidebar or tooltip. They also prevent syntax errors, but so do structure editors, so this is not a merit of the block representation itself. The only other merit they have is their ability to visually represent basic program structures such as loops. But they do so haphazardly: look at an \"if\" block in Scratch and you'll see that it's pretty much a Python if-statement in a gaudy yellow box. The structure it communicates is minimal.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556510323.281700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dPY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Scratch blocks have merit in that they can be used to present a limited, browsable palette of building blocks with which programs can be constructed. But this is no different from having an ordinary list of options in a sidebar or tooltip. They also prevent syntax errors, but so do structure editors, so this is not a merit of the block representation itself. The only other merit they have is their ability to visually represent basic program structures such as loops. But they do so haphazardly: look at an \"if\" block in Scratch and you'll see that it's pretty much a Python if-statement in a gaudy yellow box. The structure it communicates is minimal."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1556520234.292500",
        "client_msg_id": "37c8353f-81c7-4bbe-8509-1b4e16cbf069",
        "text": "(Also for the record, I don't teach children, I teach undergrads)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556510323.281700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xyM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Also for the record, I don't teach children, I teach undergrads)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1556520630.292700",
        "client_msg_id": "ee527dbd-c19d-48fe-9c51-71a21760e8cb",
        "text": "I agree: block programming à la Scratch, show the same program structure as text. Take a Scratch script, erase all colors to keep only text, you end in something very close to an imperative language. In fact there is one tool that is showing that. I thought it was GP (<https:\/\/gpblocks.org\/>) but I can't find pointer ti this feature. Anyway, this (unknown) tool has a slider that progressivly erases blocks to keep only text. Then one can edit text as usual text language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556510323.281700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z01YI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree: block programming à la Scratch, show the same program structure as text. Take a Scratch script, erase all colors to keep only text, you end in something very close to an imperative language. In fact there is one tool that is showing that. I thought it was GP ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gpblocks.org\/"
                            },
                            {
                                "type": "text",
                                "text": ") but I can't find pointer ti this feature. Anyway, this (unknown) tool has a slider that progressivly erases blocks to keep only text. Then one can edit text as usual text language."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1556521161.292900",
        "client_msg_id": "b9c5c7a0-b32a-490e-be7b-590621459912",
        "text": "But in my opinion, the big plus of block programming à la Scratch, is that it is pleasant to read (but maybe it depends on people) and you have to manage far less syntax errors. Two advantages that are good for non specialist coders in particular. Another advantage is the drag and drop of blocks from a library that show all blocks, which make less intimidate to begin a program I guess. Of course, as you said, most of these advantages can also nearly be implemented in a structure editor.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556510323.281700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QfV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But in my opinion, the big plus of block programming à la Scratch, is that it is pleasant to read (but maybe it depends on people) and you have to manage far less syntax errors. Two advantages that are good for non specialist coders in particular. Another advantage is the drag and drop of blocks from a library that show all blocks, which make less intimidate to begin a program I guess. Of course, as you said, most of these advantages can also nearly be implemented in a structure editor."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]