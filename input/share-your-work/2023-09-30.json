[
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1696097872.218609",
        "client_msg_id": "622f48f1-ae50-45b6-9eb0-bc1401c9ea6a",
        "text": "The editor who changed the name was Nicklaus Wirth, the inventor of Pascal, and one of the other great historical proponents of structured programming.\n\nThere were absolutely intermediate representations by 1968.  For example, see:\nThe Design of the Gier ALGOL Compiler by Peter Naur (1963)\nALGOL 60 Implementation by B. Randell and L. J. Russell (1964)\n\nI'm pretty sure there are older examples, but I don't have access to my library right now so I am limited to my memory and the pale shadow of truth that can be found online.\n\nPersonally, I never really liked the whole concept of \"where we are in the program\" that he builds up in this paper. I think his discussion of how to reason clearly about the different structured statement types in Notes on Structured Programming\n(<https:\/\/www.cs.utexas.edu\/users\/EWD\/ewd02xx\/EWD249.PDF|https:\/\/www.cs.utexas.edu\/users\/EWD\/ewd02xx\/EWD249.PDF>) is both easier to understand and far more useful from a practical perspective.\n\nIn Perl, goto will search the call stack for a matching label, like with exceptions. In Algol 60 and Pascal, since you are able to nest procedures within other procedures, you can use goto to jump to an error handler in a high level procedure regardless of how many intermediate procedure calls you are jumping out of.\n\nJimmy's argument against dependency injection, based on the fact that you don't know what code you are calling or what it will do, reminds me of the argument in Polymorphism considered harmful (<https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/181628.181635|https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/181628.181635>), and to some extent is also an argument against late binding, closures, function pointers, execution tokens, and ultimately object-oriented programming and functional programming as paradigms. [Later note: Ha ha! Jimmy claims OO considered harmful later in the episode! I disagree, but I respect your consistency! :joy: Oh wait, you like functional programming? :thinking_face:]\n\n<https:\/\/wiki.c2.com\/?ClosuresAndObjectsAreEquivalent|https:\/\/wiki.c2.com\/?ClosuresAndObjectsAreEquivalent>\n\nFor the advantages of hiding implementation details within modules, and not making everything public, I believe Parnas provided an excellent argument.\n<https:\/\/dl.acm.org\/doi\/10.1145\/361598.361623|https:\/\/dl.acm.org\/doi\/10.1145\/361598.361623>\n\nYour arguments against black boxes sound a lot like arguments against abstraction and even potentially code reuse in general. You might enjoy some of Charles Moore's early writings about Forth. One of his goals was to reduce the number of levels of abstraction and allow the programmer to work in a convenient environment while still having easy access to the lower level reality.\n\nUnfortunately, I think many modern programmers do not grasp the level of chaos that used to exist in many Fortran and Basic programs, and so they don't really understand the type of madness that Dijkstra was trying to reduce in the world. They assume that any goto is terrible and confusing, while sometimes a single goto in the right place can eliminate several flags and pieces of convoluted loop logic, making a piece of code much easier to understand.\n\nThere are empirical studies showing that for certain types of problems, more students can write correct solutions if they are allowed to use break statements, which are a type of goto that Dijkstra did not approve of.\n<https:\/\/dl.acm.org\/doi\/10.1145\/182.358436|https:\/\/dl.acm.org\/doi\/10.1145\/182.358436>\n<http:\/\/doi.acm.org\/10.1145\/199691.199815|http:\/\/doi.acm.org\/10.1145\/199691.199815>\n\nI don't think Hopkins made as good of an argument as Knuth, but his paper still deserves a place in the cannon.\n<http:\/\/doi.acm.org\/10.1145\/800194.805860|http:\/\/doi.acm.org\/10.1145\/800194.805860>\n\nFurthermore, in the Knuth paper that I linked above, he actually gives an example that Dijkstra admitted was a good use of a goto.\n\nMy favorite quote about goto comes from the original wiki at <https:\/\/wiki.c2.com\/?GoTo|https:\/\/wiki.c2.com\/?GoTo>\n\"The apprentice uses it without thinking. The journeyman avoids it without thinking. The master uses it thoughtfully.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696030097.010469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5s0\/u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The editor who changed the name was Nicklaus Wirth, the inventor of Pascal, and one of the other great historical proponents of structured programming.\n\nThere were absolutely intermediate representations by 1968.  For example, see:\nThe Design of the Gier ALGOL Compiler by Peter Naur (1963)\nALGOL 60 Implementation by B. Randell and L. J. Russell (1964)\n\nI'm pretty sure there are older examples, but I don't have access to my library right now so I am limited to my memory and the pale shadow of truth that can be found online.\n\nPersonally, I never really liked the whole concept of \"where we are in the program\" that he builds up in this paper. I think his discussion of how to reason clearly about the different structured statement types in Notes on Structured Programming\n("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.utexas.edu\/users\/EWD\/ewd02xx\/EWD249.PDF",
                                "text": "https:\/\/www.cs.utexas.edu\/users\/EWD\/ewd02xx\/EWD249.PDF"
                            },
                            {
                                "type": "text",
                                "text": ") is both easier to understand and far more useful from a practical perspective.\n\nIn Perl, goto will search the call stack for a matching label, like with exceptions. In Algol 60 and Pascal, since you are able to nest procedures within other procedures, you can use goto to jump to an error handler in a high level procedure regardless of how many intermediate procedure calls you are jumping out of.\n\nJimmy's argument against dependency injection, based on the fact that you don't know what code you are calling or what it will do, reminds me of the argument in Polymorphism considered harmful ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/181628.181635",
                                "text": "https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/181628.181635"
                            },
                            {
                                "type": "text",
                                "text": "), and to some extent is also an argument against late binding, closures, function pointers, execution tokens, and ultimately object-oriented programming and functional programming as paradigms. [Later note: Ha ha! Jimmy claims OO considered harmful later in the episode! I disagree, but I respect your consistency! "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": " Oh wait, you like functional programming? "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": "]\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.c2.com\/?ClosuresAndObjectsAreEquivalent",
                                "text": "https:\/\/wiki.c2.com\/?ClosuresAndObjectsAreEquivalent"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFor the advantages of hiding implementation details within modules, and not making everything public, I believe Parnas provided an excellent argument.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/10.1145\/361598.361623",
                                "text": "https:\/\/dl.acm.org\/doi\/10.1145\/361598.361623"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYour arguments against black boxes sound a lot like arguments against abstraction and even potentially code reuse in general. You might enjoy some of Charles Moore's early writings about Forth. One of his goals was to reduce the number of levels of abstraction and allow the programmer to work in a convenient environment while still having easy access to the lower level reality.\n\nUnfortunately, I think many modern programmers do not grasp the level of chaos that used to exist in many Fortran and Basic programs, and so they don't really understand the type of madness that Dijkstra was trying to reduce in the world. They assume that any goto is terrible and confusing, while sometimes a single goto in the right place can eliminate several flags and pieces of convoluted loop logic, making a piece of code much easier to understand.\n\nThere are empirical studies showing that for certain types of problems, more students can write correct solutions if they are allowed to use break statements, which are a type of goto that Dijkstra did not approve of.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/10.1145\/182.358436",
                                "text": "https:\/\/dl.acm.org\/doi\/10.1145\/182.358436"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/doi.acm.org\/10.1145\/199691.199815",
                                "text": "http:\/\/doi.acm.org\/10.1145\/199691.199815"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI don't think Hopkins made as good of an argument as Knuth, but his paper still deserves a place in the cannon.\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/doi.acm.org\/10.1145\/800194.805860",
                                "text": "http:\/\/doi.acm.org\/10.1145\/800194.805860"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFurthermore, in the Knuth paper that I linked above, he actually gives an example that Dijkstra admitted was a good use of a goto.\n\nMy favorite quote about goto comes from the original wiki at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.c2.com\/?GoTo",
                                "text": "https:\/\/wiki.c2.com\/?GoTo"
                            },
                            {
                                "type": "text",
                                "text": "\n\"The apprentice uses it without thinking. The journeyman avoids it without thinking. The master uses it thoughtfully.\""
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1696102020.152879",
        "client_msg_id": "e2ea0707-cabb-43ee-989b-ba99c0cb0d8c",
        "text": "After two years in the public sector, I have zero evidence against the argument that \"rules are scar tissue.\" A very insightful take. Do you have a source for that or can I attribute it to you, <@UC2A2ARPT>?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696030097.010469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kHFjV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "After two years in the public sector, I have zero evidence against the argument that \"rules are scar tissue.\" A very insightful take. Do you have a source for that or can I attribute it to you, "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1696103462.479329",
        "client_msg_id": "0715AA2E-CB33-4326-B9FC-F76207FCA4A8",
        "text": "<@U03CEGR3HSL> the wealth of references you bring is always a treat. The considerable length of my reading list continues to increase, harmfully.\n\n<@U02U0AS3J49> pretty sure \"bureaucracy is institutional scar tissue\" is something I read somewhere, probably a tweet, but I have no specific recollection. Regardless, feel free to point people at our podcast :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696030097.010469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zOCur",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03CEGR3HSL"
                            },
                            {
                                "type": "text",
                                "text": " the wealth of references you bring is always a treat"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " The considerable length of my reading list continues to increase, harmfully"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U02U0AS3J49"
                            },
                            {
                                "type": "text",
                                "text": " pretty sure \"bureaucracy is institutional scar tissue\" is something I read somewhere, probably a tweet, but I have no specific recollection"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Regardless, feel free to point people at our podcast :)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]