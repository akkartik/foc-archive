[
    {
        "user": "U02BBHT50KD",
        "type": "message",
        "ts": "1629965799.000700",
        "client_msg_id": "6230b275-d15d-4972-ad83-a711a0cf91a3",
        "text": "I meant to say that it is possible to have a stack of words and atoms as an another form of AST. I have been working on some sort of translator from clojure to concatenative language (in-house language based on joy) some time ago. And that was surprisingly nice.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "39cf814320cd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-08-16\/2398026638401_39cf814320cd5bc3df99_72.jpg",
            "first_name": "Kirill",
            "real_name": "Kirill Chernyshov",
            "display_name": "Kirill Chernyshov",
            "team": "T5TCAFTA9",
            "name": "delaguardo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1629824355.111500",
        "parent_user_id": "UJZS8UUJV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SXZd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I meant to say that it is possible to have a stack of words and atoms as an another form of AST. I have been working on some sort of translator from clojure to concatenative language (in-house language based on joy) some time ago. And that was surprisingly nice."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJZS8UUJV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1629965842.000900",
        "client_msg_id": "8152d2df-57a8-4c96-b84f-56a8a1a3ff9b",
        "text": "<@UJZS8UUJV> Check out <https:\/\/lisper.in\/reader-macros|Reader Macros in Common Lisp>, <https:\/\/docs.factorcode.org\/content\/article-parsing-words.html|Parsing words> from the Factor documentation, and <https:\/\/forth-standard.org\/standard\/core\/PARSE|PARSE> from the Forth standard. All three are extension mechanisms for the language's parser, implemented in the language itself. Which means that a complete parser for either of these languages must include an implementation of the entire language.\nIn Common Lisp, this is not much of an issue except if you want to write a code processing tool in a different language. There is a well-defined representation of code after parsing, which is the level at which macros work. Moreover, reader macros are a rare in practice.\nFor Forth and Factor, parser extensions are very common and basically mean that there is no notion of an AST at all. As an example, consider the <https:\/\/docs.factorcode.org\/content\/article-xml.html|XML parser> in Factor. It allows you to embed XML documents in Factor code, not as a string but as a syntax extension. Superficially, Factor code is a just a sequence of space-delimited words, but with embedded XML, it starts to look very different.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1629824355.111500",
        "parent_user_id": "UJZS8UUJV",
        "attachments": [
            {
                "title": "Reader Macros in Common Lisp",
                "title_link": "https:\/\/lisper.in\/reader-macros",
                "text": "Essays on programming, technology and other things",
                "fallback": "Reader Macros in Common Lisp",
                "from_url": "https:\/\/lisper.in\/reader-macros",
                "service_name": "lisper.in",
                "id": 1,
                "original_url": "https:\/\/lisper.in\/reader-macros"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dlfes",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJZS8UUJV"
                            },
                            {
                                "type": "text",
                                "text": " Check out "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lisper.in\/reader-macros",
                                "text": "Reader Macros in Common Lisp"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.factorcode.org\/content\/article-parsing-words.html",
                                "text": "Parsing words"
                            },
                            {
                                "type": "text",
                                "text": " from the Factor documentation, and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/forth-standard.org\/standard\/core\/PARSE",
                                "text": "PARSE"
                            },
                            {
                                "type": "text",
                                "text": " from the Forth standard. All three are extension mechanisms for the language's parser, implemented in the language itself. Which means that a complete parser for either of these languages must include an implementation of the entire language.\nIn Common Lisp, this is not much of an issue except if you want to write a code processing tool in a different language. There is a well-defined representation of code after parsing, which is the level at which macros work. Moreover, reader macros are a rare in practice.\nFor Forth and Factor, parser extensions are very common and basically mean that there is no notion of an AST at all. As an example, consider the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.factorcode.org\/content\/article-xml.html",
                                "text": "XML parser"
                            },
                            {
                                "type": "text",
                                "text": " in Factor. It allows you to embed XML documents in Factor code, not as a string but as a syntax extension. Superficially, Factor code is a just a sequence of space-delimited words, but with embedded XML, it starts to look very different."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1629969697.001200",
        "client_msg_id": "09799e88-04de-4613-b524-3baf18d1dd37",
        "text": "The next funny point of reference about synchronization: <https:\/\/research.chalmers.se\/en\/publication\/232551> :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1629906523.118000",
        "parent_user_id": "U02CABPNXJ6",
        "attachments": [
            {
                "service_name": "research.chalmers.se",
                "title": "Mysteries of Dropbox: Property-based Testing of a Distributed Synchronization Service",
                "title_link": "https:\/\/research.chalmers.se\/en\/publication\/232551",
                "text": "File synchronization services such as Dropbox are used by hundreds of millions of people to replicate vital data. Yet rigorous models of their behavior are lacking. We present the first formal---and testable---model of the core behavior of a modern file synchronizer, and we use it to discover surprising behavior in two widely deployed synchronizers. Our model is based on a technique for testing nondeterministic systems that avoids requiring that the system's internal choices be made visible to the testing framework.",
                "fallback": "research.chalmers.se: Mysteries of Dropbox: Property-based Testing of a Distributed Synchronization Service",
                "thumb_url": "https:\/\/research.chalmers.se\/Images\/avancez_small.png",
                "from_url": "https:\/\/research.chalmers.se\/en\/publication\/232551",
                "thumb_width": 219,
                "thumb_height": 279,
                "service_icon": "https:\/\/research.chalmers.se\/Images\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/research.chalmers.se\/en\/publication\/232551"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3IBK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The next funny point of reference about synchronization: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/research.chalmers.se\/en\/publication\/232551"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1629971732.001500",
        "client_msg_id": "db2056cd-5cf7-4039-9a53-dbda5f4ec8d7",
        "text": "Also check out 3-way merge problem: <https:\/\/tahoe-lafs.org\/%7Ezooko\/badmerge\/simple.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1629906523.118000",
        "parent_user_id": "U02CABPNXJ6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OhR6O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also check out 3-way merge problem: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tahoe-lafs.org\/%7Ezooko\/badmerge\/simple.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1629971781.001700",
        "client_msg_id": "73723530-08f6-467f-86e1-9fefcb83f253",
        "text": "Seems like the right way forward is a \"patch algebra\" like Darcs or better yet Pijul. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1629906523.118000",
        "parent_user_id": "U02CABPNXJ6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=TC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seems like the right way forward is a \"patch algebra\" like Darcs or better yet Pijul. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJZS8UUJV",
        "type": "message",
        "ts": "1630002447.002000",
        "client_msg_id": "907a9c59-4dd1-46bd-bb38-500c777768a5",
        "text": "<@UJBAJNFLK> thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g62b260c347a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/962b260c347a11e19b0fdce4a97a5d49.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Luke",
            "real_name": "Luke Persola",
            "display_name": "Luke Persola",
            "team": "T5TCAFTA9",
            "name": "lukepersola",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1629824355.111500",
        "parent_user_id": "UJZS8UUJV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D=dHk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]